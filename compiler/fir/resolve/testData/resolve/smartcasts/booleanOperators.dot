digraph booleanOperators_kt {
graph [splines=ortho]

subgraph foo {
  0 [shape=box label="Enter function foo"];
  1 [shape=box label="Exit function foo"];

  0 -> {1};
}

subgraph bool {
  2 [shape=box label="Enter function bool"];
  3 [shape=box label="Exit function bool"];

  2 -> {3};
}

subgraph bar {
  4 [shape=box label="Enter function bar"];
  5 [shape=box label="Exit function bar"];

  4 -> {5};
}

subgraph baz {
  6 [shape=box label="Enter function baz"];
  7 [shape=box label="Exit function baz"];

  6 -> {7};
}

subgraph test_1 {
  8 [shape=box label="Enter function test_1"];
  9 [shape=box label="Enter block"];
  10 [shape=box label="Enter when"];
  11 [shape=box label="Enter when branch condition "];
  12 [shape=box label="Enter &&"];
  13 [shape=box label="Access variable R|<local>/x|"];
  14 [shape=box label="Type operator: x is B"];
  15 [shape=box label="Exit left part of &&"];
  16 [shape=box label="Access variable R|<local>/x|"];
  17 [shape=box label="Type operator: x is C"];
  18 [shape=box label="Exit &&"];
  19 [shape=box label="Exit when branch condition"];
  20 [shape=box label="Enter block"];
  21 [shape=box label="Access variable R|<local>/x|"];
  22 [shape=box label="Function call: R|<local>/x|.R|/A.foo|()"];
  23 [shape=box label="Access variable R|<local>/x|"];
  24 [shape=box label="Function call: R|<local>/x|.R|/B.bar|()"];
  25 [shape=box label="Access variable R|<local>/x|"];
  26 [shape=box label="Function call: R|<local>/x|.R|/C.baz|()"];
  27 [shape=box label="Exit block"];
  28 [shape=box label="Exit when branch result"];
  29 [shape=box label="Enter when branch condition else"];
  30 [shape=box label="Exit when branch condition"];
  31 [shape=box label="Enter block"];
  32 [shape=box label="Exit block"];
  33 [shape=box label="Exit when branch result"];
  34 [shape=box label="Exit when"];
  35 [shape=box label="Exit block"];
  36 [shape=box label="Exit function test_1"];

  8 -> {9};
  9 -> {10};
  10 -> {11};
  11 -> {12};
  12 -> {13};
  13 -> {14};
  14 -> {18 15};
  15 -> {16};
  16 -> {17};
  17 -> {18};
  18 -> {19};
  19 -> {20 29};
  20 -> {21};
  21 -> {22};
  22 -> {23};
  23 -> {24};
  24 -> {25};
  25 -> {26};
  26 -> {27};
  27 -> {28};
  28 -> {34};
  29 -> {30};
  30 -> {31};
  31 -> {32};
  32 -> {33};
  33 -> {34};
  34 -> {35};
  35 -> {36};
}

subgraph test_2 {
  37 [shape=box label="Enter function test_2"];
  38 [shape=box label="Enter block"];
  39 [shape=box label="Enter when"];
  40 [shape=box label="Enter when branch condition "];
  41 [shape=box label="Enter ||"];
  42 [shape=box label="Access variable R|<local>/x|"];
  43 [shape=box label="Type operator: x is B"];
  44 [shape=box label="Exit left part of ||"];
  45 [shape=box label="Access variable R|<local>/x|"];
  46 [shape=box label="Type operator: x is C"];
  47 [shape=box label="Exit ||"];
  48 [shape=box label="Exit when branch condition"];
  49 [shape=box label="Enter block"];
  50 [shape=box label="Access variable R|<local>/x|"];
  51 [shape=box label="Function call: R|<local>/x|.R|/A.foo|()"];
  52 [shape=box label="Access variable R|<local>/x|"];
  53 [shape=box label="Function call: R|<local>/x|.<Unresolved name: bar>#()"];
  54 [shape=box label="Access variable R|<local>/x|"];
  55 [shape=box label="Function call: R|<local>/x|.<Unresolved name: baz>#()"];
  56 [shape=box label="Exit block"];
  57 [shape=box label="Exit when branch result"];
  58 [shape=box label="Enter when branch condition else"];
  59 [shape=box label="Exit when branch condition"];
  60 [shape=box label="Enter block"];
  61 [shape=box label="Exit block"];
  62 [shape=box label="Exit when branch result"];
  63 [shape=box label="Exit when"];
  64 [shape=box label="Exit block"];
  65 [shape=box label="Exit function test_2"];

  37 -> {38};
  38 -> {39};
  39 -> {40};
  40 -> {41};
  41 -> {42};
  42 -> {43};
  43 -> {47 44};
  44 -> {45};
  45 -> {46};
  46 -> {47};
  47 -> {48};
  48 -> {49 58};
  49 -> {50};
  50 -> {51};
  51 -> {52};
  52 -> {53};
  53 -> {54};
  54 -> {55};
  55 -> {56};
  56 -> {57};
  57 -> {63};
  58 -> {59};
  59 -> {60};
  60 -> {61};
  61 -> {62};
  62 -> {63};
  63 -> {64};
  64 -> {65};
}

subgraph test_3 {
  66 [shape=box label="Enter function test_3"];
  67 [shape=box label="Enter block"];
  68 [shape=box label="Enter when"];
  69 [shape=box label="Enter when branch condition "];
  70 [shape=box label="Access variable R|<local>/x|"];
  71 [shape=box label="Type operator: x !is A"];
  72 [shape=box label="Function call: (R|<local>/x| !is R|A|).R|kotlin/Boolean.not|()"];
  73 [shape=box label="Exit when branch condition"];
  74 [shape=box label="Enter block"];
  75 [shape=box label="Access variable R|<local>/x|"];
  76 [shape=box label="Function call: R|<local>/x|.R|/A.foo|()"];
  77 [shape=box label="Exit block"];
  78 [shape=box label="Exit when branch result"];
  79 [shape=box label="Enter when branch condition else"];
  80 [shape=box label="Exit when branch condition"];
  81 [shape=box label="Enter block"];
  82 [shape=box label="Exit block"];
  83 [shape=box label="Exit when branch result"];
  84 [shape=box label="Exit when"];
  85 [shape=box label="Exit block"];
  86 [shape=box label="Exit function test_3"];

  66 -> {67};
  67 -> {68};
  68 -> {69};
  69 -> {70};
  70 -> {71};
  71 -> {72};
  72 -> {73};
  73 -> {74 79};
  74 -> {75};
  75 -> {76};
  76 -> {77};
  77 -> {78};
  78 -> {84};
  79 -> {80};
  80 -> {81};
  81 -> {82};
  82 -> {83};
  83 -> {84};
  84 -> {85};
  85 -> {86};
}

subgraph test_4 {
  87 [shape=box label="Enter function test_4"];
  88 [shape=box label="Enter block"];
  89 [shape=box label="Enter when"];
  90 [shape=box label="Enter when branch condition "];
  91 [shape=box label="Enter ||"];
  92 [shape=box label="Access variable R|<local>/x|"];
  93 [shape=box label="Type operator: x !is String"];
  94 [shape=box label="Exit left part of ||"];
  95 [shape=box label="Access variable R|<local>/x|"];
  96 [shape=box label="Access variable R|kotlin/String.length|"];
  97 [shape=box label="Const: Int(0)"];
  98 [shape=box label="Operator =="];
  99 [shape=box label="Exit ||"];
  100 [shape=box label="Exit when branch condition"];
  101 [shape=box label="Enter block"];
  102 [shape=box label="Access variable R|<local>/x|"];
  103 [shape=box label="Access variable <Unresolved name: length>#"];
  104 [shape=box label="Exit block"];
  105 [shape=box label="Exit when branch result"];
  106 [shape=box label="Enter when branch condition else"];
  107 [shape=box label="Exit when branch condition"];
  108 [shape=box label="Enter block"];
  109 [shape=box label="Exit block"];
  110 [shape=box label="Exit when branch result"];
  111 [shape=box label="Exit when"];
  112 [shape=box label="Access variable R|<local>/x|"];
  113 [shape=box label="Access variable <Unresolved name: length>#"];
  114 [shape=box label="Exit block"];
  115 [shape=box label="Exit function test_4"];

  87 -> {88};
  88 -> {89};
  89 -> {90};
  90 -> {91};
  91 -> {92};
  92 -> {93};
  93 -> {99 94};
  94 -> {95};
  95 -> {96};
  96 -> {97};
  97 -> {98};
  98 -> {99};
  99 -> {100};
  100 -> {101 106};
  101 -> {102};
  102 -> {103};
  103 -> {104};
  104 -> {105};
  105 -> {111};
  106 -> {107};
  107 -> {108};
  108 -> {109};
  109 -> {110};
  110 -> {111};
  111 -> {112};
  112 -> {113};
  113 -> {114};
  114 -> {115};
}

subgraph test_5 {
  116 [shape=box label="Enter function test_5"];
  117 [shape=box label="Enter block"];
  118 [shape=box label="Enter when"];
  119 [shape=box label="Enter when branch condition "];
  120 [shape=box label="Enter ||"];
  121 [shape=box label="Access variable R|<local>/x|"];
  122 [shape=box label="Const: Null(null)"];
  123 [shape=box label="Operator !="];
  124 [shape=box label="Exit left part of ||"];
  125 [shape=box label="Const: Boolean(false)"];
  126 [shape=box label="Exit ||"];
  127 [shape=box label="Exit when branch condition"];
  128 [shape=box label="Enter block"];
  129 [shape=box label="Access variable R|<local>/x|"];
  130 [shape=box label="Function call: R|<local>/x|.<Inapplicable(WRONG_RECEIVER): [/A.foo]>#()"];
  131 [shape=box label="Exit block"];
  132 [shape=box label="Exit when branch result"];
  133 [shape=box label="Enter when branch condition else"];
  134 [shape=box label="Exit when branch condition"];
  135 [shape=box label="Enter block"];
  136 [shape=box label="Exit block"];
  137 [shape=box label="Exit when branch result"];
  138 [shape=box label="Exit when"];
  139 [shape=box label="Exit block"];
  140 [shape=box label="Exit function test_5"];

  116 -> {117};
  117 -> {118};
  118 -> {119};
  119 -> {120};
  120 -> {121};
  121 -> {122};
  122 -> {123};
  123 -> {126 124};
  124 -> {125};
  125 -> {126};
  126 -> {127};
  127 -> {128 133};
  128 -> {129};
  129 -> {130};
  130 -> {131};
  131 -> {132};
  132 -> {138};
  133 -> {134};
  134 -> {135};
  135 -> {136};
  136 -> {137};
  137 -> {138};
  138 -> {139};
  139 -> {140};
}

subgraph test_6 {
  141 [shape=box label="Enter function test_6"];
  142 [shape=box label="Enter block"];
  143 [shape=box label="Enter when"];
  144 [shape=box label="Enter when branch condition "];
  145 [shape=box label="Enter ||"];
  146 [shape=box label="Const: Boolean(false)"];
  147 [shape=box label="Exit left part of ||"];
  148 [shape=box label="Access variable R|<local>/x|"];
  149 [shape=box label="Const: Null(null)"];
  150 [shape=box label="Operator !="];
  151 [shape=box label="Stub[DEAD]"];
  152 [shape=box label="Exit ||"];
  153 [shape=box label="Exit when branch condition"];
  154 [shape=box label="Enter block"];
  155 [shape=box label="Access variable R|<local>/x|"];
  156 [shape=box label="Function call: R|<local>/x|.<Inapplicable(WRONG_RECEIVER): [/A.foo]>#()"];
  157 [shape=box label="Exit block"];
  158 [shape=box label="Exit when branch result"];
  159 [shape=box label="Enter when branch condition else"];
  160 [shape=box label="Exit when branch condition"];
  161 [shape=box label="Enter block"];
  162 [shape=box label="Exit block"];
  163 [shape=box label="Exit when branch result"];
  164 [shape=box label="Exit when"];
  165 [shape=box label="Exit block"];
  166 [shape=box label="Exit function test_6"];

  141 -> {142};
  142 -> {143};
  143 -> {144};
  144 -> {145};
  145 -> {146};
  146 -> {147};
  146 -> {151} [style=dotted];
  147 -> {148};
  148 -> {149};
  149 -> {150};
  150 -> {152};
  151 -> {152} [style=dotted];
  152 -> {153};
  153 -> {154 159};
  154 -> {155};
  155 -> {156};
  156 -> {157};
  157 -> {158};
  158 -> {164};
  159 -> {160};
  160 -> {161};
  161 -> {162};
  162 -> {163};
  163 -> {164};
  164 -> {165};
  165 -> {166};
}

subgraph test_7 {
  167 [shape=box label="Enter function test_7"];
  168 [shape=box label="Enter block"];
  169 [shape=box label="Enter when"];
  170 [shape=box label="Enter when branch condition "];
  171 [shape=box label="Enter &&"];
  172 [shape=box label="Access variable R|<local>/x|"];
  173 [shape=box label="Type operator: x is A"];
  174 [shape=box label="Exit left part of &&"];
  175 [shape=box label="Access variable R|<local>/x|"];
  176 [shape=box label="Function call: R|<local>/x|.R|/A.bool|()"];
  177 [shape=box label="Exit &&"];
  178 [shape=box label="Exit when branch condition"];
  179 [shape=box label="Enter block"];
  180 [shape=box label="Access variable R|<local>/x|"];
  181 [shape=box label="Function call: R|<local>/x|.R|/A.foo|()"];
  182 [shape=box label="Exit block"];
  183 [shape=box label="Exit when branch result"];
  184 [shape=box label="Enter when branch condition else"];
  185 [shape=box label="Exit when branch condition"];
  186 [shape=box label="Enter block"];
  187 [shape=box label="Exit block"];
  188 [shape=box label="Exit when branch result"];
  189 [shape=box label="Exit when"];
  190 [shape=box label="Exit block"];
  191 [shape=box label="Exit function test_7"];

  167 -> {168};
  168 -> {169};
  169 -> {170};
  170 -> {171};
  171 -> {172};
  172 -> {173};
  173 -> {177 174};
  174 -> {175};
  175 -> {176};
  176 -> {177};
  177 -> {178};
  178 -> {179 184};
  179 -> {180};
  180 -> {181};
  181 -> {182};
  182 -> {183};
  183 -> {189};
  184 -> {185};
  185 -> {186};
  186 -> {187};
  187 -> {188};
  188 -> {189};
  189 -> {190};
  190 -> {191};
}

}
