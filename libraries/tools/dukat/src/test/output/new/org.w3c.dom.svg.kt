package org.w3c.dom.svg

@kotlin.internal.InlineOnly public inline fun SVGBoundingBoxOptions(/*0*/ fill: kotlin.Boolean? = ..., /*1*/ stroke: kotlin.Boolean? = ..., /*2*/ markers: kotlin.Boolean? = ..., /*3*/ clipped: kotlin.Boolean? = ...): org.w3c.dom.svg.SVGBoundingBoxOptions
@kotlin.internal.InlineOnly public inline operator fun org.w3c.dom.svg.SVGLengthList.get(/*0*/ index: kotlin.Int): org.w3c.dom.svg.SVGLength?
@kotlin.internal.InlineOnly public inline operator fun org.w3c.dom.svg.SVGNameList.get(/*0*/ index: kotlin.Int): dynamic
@kotlin.internal.InlineOnly public inline operator fun org.w3c.dom.svg.SVGNumberList.get(/*0*/ index: kotlin.Int): org.w3c.dom.svg.SVGNumber?
@kotlin.internal.InlineOnly public inline operator fun org.w3c.dom.svg.SVGPointList.get(/*0*/ index: kotlin.Int): org.w3c.dom.DOMPoint?
@kotlin.internal.InlineOnly public inline operator fun org.w3c.dom.svg.SVGStringList.get(/*0*/ index: kotlin.Int): kotlin.String?
@kotlin.internal.InlineOnly public inline operator fun org.w3c.dom.svg.SVGTransformList.get(/*0*/ index: kotlin.Int): org.w3c.dom.svg.SVGTransform?
@kotlin.internal.InlineOnly public inline operator fun org.w3c.dom.svg.SVGLengthList.set(/*0*/ index: kotlin.Int, /*1*/ newItem: org.w3c.dom.svg.SVGLength): kotlin.Unit
@kotlin.internal.InlineOnly public inline operator fun org.w3c.dom.svg.SVGNameList.set(/*0*/ index: kotlin.Int, /*1*/ newItem: dynamic): kotlin.Unit
@kotlin.internal.InlineOnly public inline operator fun org.w3c.dom.svg.SVGNumberList.set(/*0*/ index: kotlin.Int, /*1*/ newItem: org.w3c.dom.svg.SVGNumber): kotlin.Unit
@kotlin.internal.InlineOnly public inline operator fun org.w3c.dom.svg.SVGPointList.set(/*0*/ index: kotlin.Int, /*1*/ newItem: org.w3c.dom.DOMPoint): kotlin.Unit
@kotlin.internal.InlineOnly public inline operator fun org.w3c.dom.svg.SVGStringList.set(/*0*/ index: kotlin.Int, /*1*/ newItem: kotlin.String): kotlin.Unit
@kotlin.internal.InlineOnly public inline operator fun org.w3c.dom.svg.SVGTransformList.set(/*0*/ index: kotlin.Int, /*1*/ newItem: org.w3c.dom.svg.SVGTransform): kotlin.Unit

public external interface GetSVGDocument {
    public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
    public abstract fun getSVGDocument(): org.w3c.dom.Document
    public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
    public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
}

public abstract external class SVGAElement : org.w3c.dom.svg.SVGGraphicsElement, org.w3c.dom.svg.SVGURIReference {
    /*primary*/ public constructor SVGAElement()
    public open override /*1*/ /*fake_override*/ val assignedSlot: org.w3c.dom.HTMLSlotElement?
        public open override /*1*/ /*fake_override*/ fun <get-assignedSlot>(): org.w3c.dom.HTMLSlotElement?
    public open override /*1*/ /*fake_override*/ val attributes: org.w3c.dom.NamedNodeMap
        public open override /*1*/ /*fake_override*/ fun <get-attributes>(): org.w3c.dom.NamedNodeMap
    public open override /*1*/ /*fake_override*/ val baseURI: kotlin.String
        public open override /*1*/ /*fake_override*/ fun <get-baseURI>(): kotlin.String
    public abstract override /*1*/ /*fake_override*/ val childElementCount: kotlin.Int
        public abstract override /*1*/ /*fake_override*/ fun <get-childElementCount>(): kotlin.Int
    public open override /*1*/ /*fake_override*/ val childNodes: org.w3c.dom.NodeList
        public open override /*1*/ /*fake_override*/ fun <get-childNodes>(): org.w3c.dom.NodeList
    public abstract override /*1*/ /*fake_override*/ val children: org.w3c.dom.HTMLCollection
        public abstract override /*1*/ /*fake_override*/ fun <get-children>(): org.w3c.dom.HTMLCollection
    public open override /*1*/ /*fake_override*/ val classList: org.w3c.dom.DOMTokenList
        public open override /*1*/ /*fake_override*/ fun <get-classList>(): org.w3c.dom.DOMTokenList
    public open override /*1*/ /*fake_override*/ var className: kotlin.String
        public open override /*1*/ /*fake_override*/ fun <get-className>(): kotlin.String
        public open override /*1*/ /*fake_override*/ fun <set-className>(/*0*/ <set-?>: kotlin.String): kotlin.Unit
    public open override /*1*/ /*fake_override*/ val clientHeight: kotlin.Int
        public open override /*1*/ /*fake_override*/ fun <get-clientHeight>(): kotlin.Int
    public open override /*1*/ /*fake_override*/ val clientLeft: kotlin.Int
        public open override /*1*/ /*fake_override*/ fun <get-clientLeft>(): kotlin.Int
    public open override /*1*/ /*fake_override*/ val clientTop: kotlin.Int
        public open override /*1*/ /*fake_override*/ fun <get-clientTop>(): kotlin.Int
    public open override /*1*/ /*fake_override*/ val clientWidth: kotlin.Int
        public open override /*1*/ /*fake_override*/ fun <get-clientWidth>(): kotlin.Int
    public open override /*1*/ /*fake_override*/ val correspondingElement: org.w3c.dom.svg.SVGElement?
        public open override /*1*/ /*fake_override*/ fun <get-correspondingElement>(): org.w3c.dom.svg.SVGElement?
    public open override /*1*/ /*fake_override*/ val correspondingUseElement: org.w3c.dom.svg.SVGUseElement?
        public open override /*1*/ /*fake_override*/ fun <get-correspondingUseElement>(): org.w3c.dom.svg.SVGUseElement?
    public open override /*1*/ /*fake_override*/ val dataset: org.w3c.dom.DOMStringMap
        public open override /*1*/ /*fake_override*/ fun <get-dataset>(): org.w3c.dom.DOMStringMap
    public open val download: org.w3c.dom.svg.SVGAnimatedString
        public open fun <get-download>(): org.w3c.dom.svg.SVGAnimatedString
    public open override /*1*/ /*fake_override*/ val firstChild: org.w3c.dom.Node?
        public open override /*1*/ /*fake_override*/ fun <get-firstChild>(): org.w3c.dom.Node?
    public open override /*1*/ /*fake_override*/ val firstElementChild: org.w3c.dom.Element?
        public open override /*1*/ /*fake_override*/ fun <get-firstElementChild>(): org.w3c.dom.Element?
    public abstract override /*1*/ /*fake_override*/ val href: org.w3c.dom.svg.SVGAnimatedString
        public abstract override /*1*/ /*fake_override*/ fun <get-href>(): org.w3c.dom.svg.SVGAnimatedString
    public open val hreflang: org.w3c.dom.svg.SVGAnimatedString
        public open fun <get-hreflang>(): org.w3c.dom.svg.SVGAnimatedString
    public open override /*1*/ /*fake_override*/ var id: kotlin.String
        public open override /*1*/ /*fake_override*/ fun <get-id>(): kotlin.String
        public open override /*1*/ /*fake_override*/ fun <set-id>(/*0*/ <set-?>: kotlin.String): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var innerHTML: kotlin.String
        public open override /*1*/ /*fake_override*/ fun <get-innerHTML>(): kotlin.String
        public open override /*1*/ /*fake_override*/ fun <set-innerHTML>(/*0*/ <set-?>: kotlin.String): kotlin.Unit
    public open override /*1*/ /*fake_override*/ val isConnected: kotlin.Boolean
        public open override /*1*/ /*fake_override*/ fun <get-isConnected>(): kotlin.Boolean
    public open override /*1*/ /*fake_override*/ val lastChild: org.w3c.dom.Node?
        public open override /*1*/ /*fake_override*/ fun <get-lastChild>(): org.w3c.dom.Node?
    public open override /*1*/ /*fake_override*/ val lastElementChild: org.w3c.dom.Element?
        public open override /*1*/ /*fake_override*/ fun <get-lastElementChild>(): org.w3c.dom.Element?
    public open override /*1*/ /*fake_override*/ val localName: kotlin.String
        public open override /*1*/ /*fake_override*/ fun <get-localName>(): kotlin.String
    public open override /*1*/ /*fake_override*/ val namespaceURI: kotlin.String?
        public open override /*1*/ /*fake_override*/ fun <get-namespaceURI>(): kotlin.String?
    public open override /*1*/ /*fake_override*/ val nextElementSibling: org.w3c.dom.Element?
        public open override /*1*/ /*fake_override*/ fun <get-nextElementSibling>(): org.w3c.dom.Element?
    public open override /*1*/ /*fake_override*/ val nextSibling: org.w3c.dom.Node?
        public open override /*1*/ /*fake_override*/ fun <get-nextSibling>(): org.w3c.dom.Node?
    public open override /*1*/ /*fake_override*/ val nodeName: kotlin.String
        public open override /*1*/ /*fake_override*/ fun <get-nodeName>(): kotlin.String
    public open override /*1*/ /*fake_override*/ val nodeType: kotlin.Short
        public open override /*1*/ /*fake_override*/ fun <get-nodeType>(): kotlin.Short
    public open override /*1*/ /*fake_override*/ var nodeValue: kotlin.String?
        public open override /*1*/ /*fake_override*/ fun <get-nodeValue>(): kotlin.String?
        public open override /*1*/ /*fake_override*/ fun <set-nodeValue>(/*0*/ <set-?>: kotlin.String?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onabort: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onabort>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onabort>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onblur: ((org.w3c.dom.events.FocusEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onblur>(): ((org.w3c.dom.events.FocusEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onblur>(/*0*/ value: ((org.w3c.dom.events.FocusEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var oncancel: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-oncancel>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-oncancel>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var oncanplay: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-oncanplay>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-oncanplay>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var oncanplaythrough: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-oncanplaythrough>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-oncanplaythrough>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onchange: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onchange>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onchange>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onclick: ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onclick>(): ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onclick>(/*0*/ value: ((org.w3c.dom.events.MouseEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onclose: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onclose>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onclose>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var oncontextmenu: ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-oncontextmenu>(): ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-oncontextmenu>(/*0*/ value: ((org.w3c.dom.events.MouseEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var oncuechange: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-oncuechange>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-oncuechange>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ondblclick: ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ondblclick>(): ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ondblclick>(/*0*/ value: ((org.w3c.dom.events.MouseEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ondrag: ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ondrag>(): ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ondrag>(/*0*/ value: ((org.w3c.dom.DragEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ondragend: ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ondragend>(): ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ondragend>(/*0*/ value: ((org.w3c.dom.DragEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ondragenter: ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ondragenter>(): ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ondragenter>(/*0*/ value: ((org.w3c.dom.DragEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ondragexit: ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ondragexit>(): ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ondragexit>(/*0*/ value: ((org.w3c.dom.DragEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ondragleave: ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ondragleave>(): ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ondragleave>(/*0*/ value: ((org.w3c.dom.DragEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ondragover: ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ondragover>(): ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ondragover>(/*0*/ value: ((org.w3c.dom.DragEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ondragstart: ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ondragstart>(): ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ondragstart>(/*0*/ value: ((org.w3c.dom.DragEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ondrop: ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ondrop>(): ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ondrop>(/*0*/ value: ((org.w3c.dom.DragEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ondurationchange: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ondurationchange>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ondurationchange>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onemptied: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onemptied>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onemptied>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onended: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onended>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onended>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onerror: ((dynamic, kotlin.String, kotlin.Int, kotlin.Int, kotlin.Any?) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onerror>(): ((dynamic, kotlin.String, kotlin.Int, kotlin.Int, kotlin.Any?) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onerror>(/*0*/ value: ((dynamic, kotlin.String, kotlin.Int, kotlin.Int, kotlin.Any?) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onfocus: ((org.w3c.dom.events.FocusEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onfocus>(): ((org.w3c.dom.events.FocusEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onfocus>(/*0*/ value: ((org.w3c.dom.events.FocusEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ongotpointercapture: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ongotpointercapture>(): ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ongotpointercapture>(/*0*/ value: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var oninput: ((org.w3c.dom.events.InputEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-oninput>(): ((org.w3c.dom.events.InputEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-oninput>(/*0*/ value: ((org.w3c.dom.events.InputEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var oninvalid: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-oninvalid>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-oninvalid>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onkeydown: ((org.w3c.dom.events.KeyboardEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onkeydown>(): ((org.w3c.dom.events.KeyboardEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onkeydown>(/*0*/ value: ((org.w3c.dom.events.KeyboardEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onkeypress: ((org.w3c.dom.events.KeyboardEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onkeypress>(): ((org.w3c.dom.events.KeyboardEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onkeypress>(/*0*/ value: ((org.w3c.dom.events.KeyboardEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onkeyup: ((org.w3c.dom.events.KeyboardEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onkeyup>(): ((org.w3c.dom.events.KeyboardEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onkeyup>(/*0*/ value: ((org.w3c.dom.events.KeyboardEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onload: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onload>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onload>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onloadeddata: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onloadeddata>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onloadeddata>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onloadedmetadata: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onloadedmetadata>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onloadedmetadata>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onloadend: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onloadend>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onloadend>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onloadstart: ((org.w3c.xhr.ProgressEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onloadstart>(): ((org.w3c.xhr.ProgressEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onloadstart>(/*0*/ value: ((org.w3c.xhr.ProgressEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onlostpointercapture: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onlostpointercapture>(): ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onlostpointercapture>(/*0*/ value: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onmousedown: ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onmousedown>(): ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onmousedown>(/*0*/ value: ((org.w3c.dom.events.MouseEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onmouseenter: ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onmouseenter>(): ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onmouseenter>(/*0*/ value: ((org.w3c.dom.events.MouseEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onmouseleave: ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onmouseleave>(): ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onmouseleave>(/*0*/ value: ((org.w3c.dom.events.MouseEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onmousemove: ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onmousemove>(): ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onmousemove>(/*0*/ value: ((org.w3c.dom.events.MouseEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onmouseout: ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onmouseout>(): ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onmouseout>(/*0*/ value: ((org.w3c.dom.events.MouseEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onmouseover: ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onmouseover>(): ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onmouseover>(/*0*/ value: ((org.w3c.dom.events.MouseEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onmouseup: ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onmouseup>(): ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onmouseup>(/*0*/ value: ((org.w3c.dom.events.MouseEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onpause: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onpause>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onpause>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onplay: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onplay>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onplay>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onplaying: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onplaying>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onplaying>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onpointercancel: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onpointercancel>(): ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onpointercancel>(/*0*/ value: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onpointerdown: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onpointerdown>(): ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onpointerdown>(/*0*/ value: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onpointerenter: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onpointerenter>(): ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onpointerenter>(/*0*/ value: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onpointerleave: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onpointerleave>(): ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onpointerleave>(/*0*/ value: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onpointermove: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onpointermove>(): ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onpointermove>(/*0*/ value: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onpointerout: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onpointerout>(): ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onpointerout>(/*0*/ value: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onpointerover: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onpointerover>(): ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onpointerover>(/*0*/ value: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onpointerup: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onpointerup>(): ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onpointerup>(/*0*/ value: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onprogress: ((org.w3c.xhr.ProgressEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onprogress>(): ((org.w3c.xhr.ProgressEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onprogress>(/*0*/ value: ((org.w3c.xhr.ProgressEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onratechange: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onratechange>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onratechange>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onreset: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onreset>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onreset>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onresize: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onresize>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onresize>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onscroll: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onscroll>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onscroll>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onseeked: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onseeked>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onseeked>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onseeking: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onseeking>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onseeking>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onselect: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onselect>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onselect>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onshow: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onshow>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onshow>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onstalled: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onstalled>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onstalled>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onsubmit: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onsubmit>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onsubmit>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onsuspend: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onsuspend>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onsuspend>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ontimeupdate: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ontimeupdate>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ontimeupdate>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ontoggle: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ontoggle>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ontoggle>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onvolumechange: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onvolumechange>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onvolumechange>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onwaiting: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onwaiting>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onwaiting>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onwheel: ((org.w3c.dom.events.WheelEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onwheel>(): ((org.w3c.dom.events.WheelEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onwheel>(/*0*/ value: ((org.w3c.dom.events.WheelEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var outerHTML: kotlin.String
        public open override /*1*/ /*fake_override*/ fun <get-outerHTML>(): kotlin.String
        public open override /*1*/ /*fake_override*/ fun <set-outerHTML>(/*0*/ <set-?>: kotlin.String): kotlin.Unit
    public open override /*1*/ /*fake_override*/ val ownerDocument: org.w3c.dom.Document?
        public open override /*1*/ /*fake_override*/ fun <get-ownerDocument>(): org.w3c.dom.Document?
    public open override /*1*/ /*fake_override*/ val ownerSVGElement: org.w3c.dom.svg.SVGSVGElement?
        public open override /*1*/ /*fake_override*/ fun <get-ownerSVGElement>(): org.w3c.dom.svg.SVGSVGElement?
    public open override /*1*/ /*fake_override*/ val parentElement: org.w3c.dom.Element?
        public open override /*1*/ /*fake_override*/ fun <get-parentElement>(): org.w3c.dom.Element?
    public open override /*1*/ /*fake_override*/ val parentNode: org.w3c.dom.Node?
        public open override /*1*/ /*fake_override*/ fun <get-parentNode>(): org.w3c.dom.Node?
    public open override /*1*/ /*fake_override*/ val prefix: kotlin.String?
        public open override /*1*/ /*fake_override*/ fun <get-prefix>(): kotlin.String?
    public open override /*1*/ /*fake_override*/ val previousElementSibling: org.w3c.dom.Element?
        public open override /*1*/ /*fake_override*/ fun <get-previousElementSibling>(): org.w3c.dom.Element?
    public open override /*1*/ /*fake_override*/ val previousSibling: org.w3c.dom.Node?
        public open override /*1*/ /*fake_override*/ fun <get-previousSibling>(): org.w3c.dom.Node?
    public open val rel: org.w3c.dom.svg.SVGAnimatedString
        public open fun <get-rel>(): org.w3c.dom.svg.SVGAnimatedString
    public open val relList: org.w3c.dom.svg.SVGAnimatedString
        public open fun <get-relList>(): org.w3c.dom.svg.SVGAnimatedString
    public abstract override /*1*/ /*fake_override*/ val requiredExtensions: org.w3c.dom.svg.SVGStringList
        public abstract override /*1*/ /*fake_override*/ fun <get-requiredExtensions>(): org.w3c.dom.svg.SVGStringList
    public open override /*1*/ /*fake_override*/ val scrollHeight: kotlin.Int
        public open override /*1*/ /*fake_override*/ fun <get-scrollHeight>(): kotlin.Int
    public open override /*1*/ /*fake_override*/ var scrollLeft: kotlin.Double
        public open override /*1*/ /*fake_override*/ fun <get-scrollLeft>(): kotlin.Double
        public open override /*1*/ /*fake_override*/ fun <set-scrollLeft>(/*0*/ <set-?>: kotlin.Double): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var scrollTop: kotlin.Double
        public open override /*1*/ /*fake_override*/ fun <get-scrollTop>(): kotlin.Double
        public open override /*1*/ /*fake_override*/ fun <set-scrollTop>(/*0*/ <set-?>: kotlin.Double): kotlin.Unit
    public open override /*1*/ /*fake_override*/ val scrollWidth: kotlin.Int
        public open override /*1*/ /*fake_override*/ fun <get-scrollWidth>(): kotlin.Int
    public open override /*1*/ /*fake_override*/ val shadowRoot: org.w3c.dom.ShadowRoot?
        public open override /*1*/ /*fake_override*/ fun <get-shadowRoot>(): org.w3c.dom.ShadowRoot?
    public open override /*1*/ /*fake_override*/ var slot: kotlin.String
        public open override /*1*/ /*fake_override*/ fun <get-slot>(): kotlin.String
        public open override /*1*/ /*fake_override*/ fun <set-slot>(/*0*/ <set-?>: kotlin.String): kotlin.Unit
    public abstract override /*1*/ /*fake_override*/ val style: org.w3c.dom.css.CSSStyleDeclaration
        public abstract override /*1*/ /*fake_override*/ fun <get-style>(): org.w3c.dom.css.CSSStyleDeclaration
    public abstract override /*1*/ /*fake_override*/ val systemLanguage: org.w3c.dom.svg.SVGStringList
        public abstract override /*1*/ /*fake_override*/ fun <get-systemLanguage>(): org.w3c.dom.svg.SVGStringList
    public open override /*1*/ /*fake_override*/ var tabIndex: kotlin.Int
        public open override /*1*/ /*fake_override*/ fun <get-tabIndex>(): kotlin.Int
        public open override /*1*/ /*fake_override*/ fun <set-tabIndex>(/*0*/ <set-?>: kotlin.Int): kotlin.Unit
    public open override /*1*/ /*fake_override*/ val tagName: kotlin.String
        public open override /*1*/ /*fake_override*/ fun <get-tagName>(): kotlin.String
    public open val target: org.w3c.dom.svg.SVGAnimatedString
        public open fun <get-target>(): org.w3c.dom.svg.SVGAnimatedString
    public open override /*1*/ /*fake_override*/ var textContent: kotlin.String?
        public open override /*1*/ /*fake_override*/ fun <get-textContent>(): kotlin.String?
        public open override /*1*/ /*fake_override*/ fun <set-textContent>(/*0*/ <set-?>: kotlin.String?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ val transform: org.w3c.dom.svg.SVGAnimatedTransformList
        public open override /*1*/ /*fake_override*/ fun <get-transform>(): org.w3c.dom.svg.SVGAnimatedTransformList
    public open val type: org.w3c.dom.svg.SVGAnimatedString
        public open fun <get-type>(): org.w3c.dom.svg.SVGAnimatedString
    public open override /*1*/ /*fake_override*/ val viewportElement: org.w3c.dom.svg.SVGElement?
        public open override /*1*/ /*fake_override*/ fun <get-viewportElement>(): org.w3c.dom.svg.SVGElement?
    public final override /*1*/ /*fake_override*/ fun addEventListener(/*0*/ type: kotlin.String, /*1*/ callback: ((org.w3c.dom.events.Event) -> kotlin.Unit)?, /*2*/ options: dynamic = ...): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun addEventListener(/*0*/ type: kotlin.String, /*1*/ callback: org.w3c.dom.events.EventListener?, /*2*/ options: dynamic = ...): kotlin.Unit
    public abstract override /*1*/ /*fake_override*/ fun after(/*0*/ vararg nodes: dynamic /*kotlin.Array<out dynamic>*/): kotlin.Unit
    public abstract override /*1*/ /*fake_override*/ fun append(/*0*/ vararg nodes: dynamic /*kotlin.Array<out dynamic>*/): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun appendChild(/*0*/ node: org.w3c.dom.Node): org.w3c.dom.Node
    public final override /*1*/ /*fake_override*/ fun attachShadow(/*0*/ init: org.w3c.dom.ShadowRootInit): org.w3c.dom.ShadowRoot
    public abstract override /*1*/ /*fake_override*/ fun before(/*0*/ vararg nodes: dynamic /*kotlin.Array<out dynamic>*/): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun blur(): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun cloneNode(/*0*/ deep: kotlin.Boolean = ...): org.w3c.dom.Node
    public final override /*1*/ /*fake_override*/ fun closest(/*0*/ selectors: kotlin.String): org.w3c.dom.Element?
    public final override /*1*/ /*fake_override*/ fun compareDocumentPosition(/*0*/ other: org.w3c.dom.Node): kotlin.Short
    public final override /*1*/ /*fake_override*/ fun contains(/*0*/ other: org.w3c.dom.Node?): kotlin.Boolean
    public abstract override /*1*/ /*fake_override*/ fun convertPointFromNode(/*0*/ point: org.w3c.dom.DOMPointInit, /*1*/ from: dynamic, /*2*/ options: org.w3c.dom.ConvertCoordinateOptions = ...): org.w3c.dom.DOMPoint
    public abstract override /*1*/ /*fake_override*/ fun convertQuadFromNode(/*0*/ quad: dynamic, /*1*/ from: dynamic, /*2*/ options: org.w3c.dom.ConvertCoordinateOptions = ...): org.w3c.dom.DOMQuad
    public abstract override /*1*/ /*fake_override*/ fun convertRectFromNode(/*0*/ rect: org.w3c.dom.DOMRectReadOnly, /*1*/ from: dynamic, /*2*/ options: org.w3c.dom.ConvertCoordinateOptions = ...): org.w3c.dom.DOMQuad
    public final override /*1*/ /*fake_override*/ fun dispatchEvent(/*0*/ event: org.w3c.dom.events.Event): kotlin.Boolean
    public open override /*2*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
    public final override /*1*/ /*fake_override*/ fun focus(): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun getAttribute(/*0*/ qualifiedName: kotlin.String): kotlin.String?
    public final override /*1*/ /*fake_override*/ fun getAttributeNS(/*0*/ namespace: kotlin.String?, /*1*/ localName: kotlin.String): kotlin.String?
    public final override /*1*/ /*fake_override*/ fun getAttributeNames(): kotlin.Array<kotlin.String>
    public final override /*1*/ /*fake_override*/ fun getAttributeNode(/*0*/ qualifiedName: kotlin.String): org.w3c.dom.Attr?
    public final override /*1*/ /*fake_override*/ fun getAttributeNodeNS(/*0*/ namespace: kotlin.String?, /*1*/ localName: kotlin.String): org.w3c.dom.Attr?
    public final override /*1*/ /*fake_override*/ fun getBBox(/*0*/ options: org.w3c.dom.svg.SVGBoundingBoxOptions = ...): org.w3c.dom.DOMRect
    public final override /*1*/ /*fake_override*/ fun getBoundingClientRect(): org.w3c.dom.DOMRect
    public abstract override /*1*/ /*fake_override*/ fun getBoxQuads(/*0*/ options: org.w3c.dom.BoxQuadOptions = ...): kotlin.Array<org.w3c.dom.DOMQuad>
    public final override /*1*/ /*fake_override*/ fun getCTM(): org.w3c.dom.DOMMatrix?
    public final override /*1*/ /*fake_override*/ fun getClientRects(): kotlin.Array<org.w3c.dom.DOMRect>
    public final override /*1*/ /*fake_override*/ fun getElementsByClassName(/*0*/ classNames: kotlin.String): org.w3c.dom.HTMLCollection
    public final override /*1*/ /*fake_override*/ fun getElementsByTagName(/*0*/ qualifiedName: kotlin.String): org.w3c.dom.HTMLCollection
    public final override /*1*/ /*fake_override*/ fun getElementsByTagNameNS(/*0*/ namespace: kotlin.String?, /*1*/ localName: kotlin.String): org.w3c.dom.HTMLCollection
    public final override /*1*/ /*fake_override*/ fun getRootNode(/*0*/ options: org.w3c.dom.GetRootNodeOptions = ...): org.w3c.dom.Node
    public final override /*1*/ /*fake_override*/ fun getScreenCTM(): org.w3c.dom.DOMMatrix?
    public final override /*1*/ /*fake_override*/ fun hasAttribute(/*0*/ qualifiedName: kotlin.String): kotlin.Boolean
    public final override /*1*/ /*fake_override*/ fun hasAttributeNS(/*0*/ namespace: kotlin.String?, /*1*/ localName: kotlin.String): kotlin.Boolean
    public final override /*1*/ /*fake_override*/ fun hasAttributes(): kotlin.Boolean
    public final override /*1*/ /*fake_override*/ fun hasChildNodes(): kotlin.Boolean
    public final override /*1*/ /*fake_override*/ fun hasPointerCapture(/*0*/ pointerId: kotlin.Int): kotlin.Boolean
    public open override /*2*/ /*fake_override*/ fun hashCode(): kotlin.Int
    public final override /*1*/ /*fake_override*/ fun insertAdjacentElement(/*0*/ where: kotlin.String, /*1*/ element: org.w3c.dom.Element): org.w3c.dom.Element?
    public final override /*1*/ /*fake_override*/ fun insertAdjacentHTML(/*0*/ position: kotlin.String, /*1*/ text: kotlin.String): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun insertAdjacentText(/*0*/ where: kotlin.String, /*1*/ data: kotlin.String): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun insertBefore(/*0*/ node: org.w3c.dom.Node, /*1*/ child: org.w3c.dom.Node?): org.w3c.dom.Node
    public final override /*1*/ /*fake_override*/ fun isDefaultNamespace(/*0*/ namespace: kotlin.String?): kotlin.Boolean
    public final override /*1*/ /*fake_override*/ fun isEqualNode(/*0*/ otherNode: org.w3c.dom.Node?): kotlin.Boolean
    public final override /*1*/ /*fake_override*/ fun isSameNode(/*0*/ otherNode: org.w3c.dom.Node?): kotlin.Boolean
    public final override /*1*/ /*fake_override*/ fun lookupNamespaceURI(/*0*/ prefix: kotlin.String?): kotlin.String?
    public final override /*1*/ /*fake_override*/ fun lookupPrefix(/*0*/ namespace: kotlin.String?): kotlin.String?
    public final override /*1*/ /*fake_override*/ fun matches(/*0*/ selectors: kotlin.String): kotlin.Boolean
    public final override /*1*/ /*fake_override*/ fun normalize(): kotlin.Unit
    public abstract override /*1*/ /*fake_override*/ fun prepend(/*0*/ vararg nodes: dynamic /*kotlin.Array<out dynamic>*/): kotlin.Unit
    public abstract override /*1*/ /*fake_override*/ fun querySelector(/*0*/ selectors: kotlin.String): org.w3c.dom.Element?
    public abstract override /*1*/ /*fake_override*/ fun querySelectorAll(/*0*/ selectors: kotlin.String): org.w3c.dom.NodeList
    public final override /*1*/ /*fake_override*/ fun releasePointerCapture(/*0*/ pointerId: kotlin.Int): kotlin.Unit
    public abstract override /*1*/ /*fake_override*/ fun remove(): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun removeAttribute(/*0*/ qualifiedName: kotlin.String): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun removeAttributeNS(/*0*/ namespace: kotlin.String?, /*1*/ localName: kotlin.String): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun removeAttributeNode(/*0*/ attr: org.w3c.dom.Attr): org.w3c.dom.Attr
    public final override /*1*/ /*fake_override*/ fun removeChild(/*0*/ child: org.w3c.dom.Node): org.w3c.dom.Node
    public final override /*1*/ /*fake_override*/ fun removeEventListener(/*0*/ type: kotlin.String, /*1*/ callback: ((org.w3c.dom.events.Event) -> kotlin.Unit)?, /*2*/ options: dynamic = ...): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun removeEventListener(/*0*/ type: kotlin.String, /*1*/ callback: org.w3c.dom.events.EventListener?, /*2*/ options: dynamic = ...): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun replaceChild(/*0*/ node: org.w3c.dom.Node, /*1*/ child: org.w3c.dom.Node): org.w3c.dom.Node
    public abstract override /*1*/ /*fake_override*/ fun replaceWith(/*0*/ vararg nodes: dynamic /*kotlin.Array<out dynamic>*/): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun requestFullscreen(): kotlin.js.Promise<kotlin.Unit>
    public final override /*1*/ /*fake_override*/ fun scroll(/*0*/ x: kotlin.Double, /*1*/ y: kotlin.Double): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun scroll(/*0*/ options: org.w3c.dom.ScrollToOptions = ...): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun scrollBy(/*0*/ x: kotlin.Double, /*1*/ y: kotlin.Double): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun scrollBy(/*0*/ options: org.w3c.dom.ScrollToOptions = ...): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun scrollIntoView(): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun scrollIntoView(/*0*/ arg: dynamic): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun scrollTo(/*0*/ x: kotlin.Double, /*1*/ y: kotlin.Double): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun scrollTo(/*0*/ options: org.w3c.dom.ScrollToOptions = ...): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun setAttribute(/*0*/ qualifiedName: kotlin.String, /*1*/ value: kotlin.String): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun setAttributeNS(/*0*/ namespace: kotlin.String?, /*1*/ qualifiedName: kotlin.String, /*2*/ value: kotlin.String): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun setAttributeNode(/*0*/ attr: org.w3c.dom.Attr): org.w3c.dom.Attr?
    public final override /*1*/ /*fake_override*/ fun setAttributeNodeNS(/*0*/ attr: org.w3c.dom.Attr): org.w3c.dom.Attr?
    public final override /*1*/ /*fake_override*/ fun setPointerCapture(/*0*/ pointerId: kotlin.Int): kotlin.Unit
    public open override /*2*/ /*fake_override*/ fun toString(): kotlin.String
    public final override /*1*/ /*fake_override*/ fun webkitMatchesSelector(/*0*/ selectors: kotlin.String): kotlin.Boolean

    public companion object Companion {
        /*primary*/ private constructor Companion()
        public final val ATTRIBUTE_NODE: kotlin.Short
            public final fun <get-ATTRIBUTE_NODE>(): kotlin.Short
        public final val CDATA_SECTION_NODE: kotlin.Short
            public final fun <get-CDATA_SECTION_NODE>(): kotlin.Short
        public final val COMMENT_NODE: kotlin.Short
            public final fun <get-COMMENT_NODE>(): kotlin.Short
        public final val DOCUMENT_FRAGMENT_NODE: kotlin.Short
            public final fun <get-DOCUMENT_FRAGMENT_NODE>(): kotlin.Short
        public final val DOCUMENT_NODE: kotlin.Short
            public final fun <get-DOCUMENT_NODE>(): kotlin.Short
        public final val DOCUMENT_POSITION_CONTAINED_BY: kotlin.Short
            public final fun <get-DOCUMENT_POSITION_CONTAINED_BY>(): kotlin.Short
        public final val DOCUMENT_POSITION_CONTAINS: kotlin.Short
            public final fun <get-DOCUMENT_POSITION_CONTAINS>(): kotlin.Short
        public final val DOCUMENT_POSITION_DISCONNECTED: kotlin.Short
            public final fun <get-DOCUMENT_POSITION_DISCONNECTED>(): kotlin.Short
        public final val DOCUMENT_POSITION_FOLLOWING: kotlin.Short
            public final fun <get-DOCUMENT_POSITION_FOLLOWING>(): kotlin.Short
        public final val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: kotlin.Short
            public final fun <get-DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC>(): kotlin.Short
        public final val DOCUMENT_POSITION_PRECEDING: kotlin.Short
            public final fun <get-DOCUMENT_POSITION_PRECEDING>(): kotlin.Short
        public final val DOCUMENT_TYPE_NODE: kotlin.Short
            public final fun <get-DOCUMENT_TYPE_NODE>(): kotlin.Short
        public final val ELEMENT_NODE: kotlin.Short
            public final fun <get-ELEMENT_NODE>(): kotlin.Short
        public final val ENTITY_NODE: kotlin.Short
            public final fun <get-ENTITY_NODE>(): kotlin.Short
        public final val ENTITY_REFERENCE_NODE: kotlin.Short
            public final fun <get-ENTITY_REFERENCE_NODE>(): kotlin.Short
        public final val NOTATION_NODE: kotlin.Short
            public final fun <get-NOTATION_NODE>(): kotlin.Short
        public final val PROCESSING_INSTRUCTION_NODE: kotlin.Short
            public final fun <get-PROCESSING_INSTRUCTION_NODE>(): kotlin.Short
        public final val TEXT_NODE: kotlin.Short
            public final fun <get-TEXT_NODE>(): kotlin.Short
        public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
        public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
        public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
    }
}

public abstract external class SVGAngle {
    /*primary*/ public constructor SVGAngle()
    public open val unitType: kotlin.Short
        public open fun <get-unitType>(): kotlin.Short
    public open var value: kotlin.Float
        public open fun <get-value>(): kotlin.Float
        public open fun <set-value>(/*0*/ <set-?>: kotlin.Float): kotlin.Unit
    public open var valueAsString: kotlin.String
        public open fun <get-valueAsString>(): kotlin.String
        public open fun <set-valueAsString>(/*0*/ <set-?>: kotlin.String): kotlin.Unit
    public open var valueInSpecifiedUnits: kotlin.Float
        public open fun <get-valueInSpecifiedUnits>(): kotlin.Float
        public open fun <set-valueInSpecifiedUnits>(/*0*/ <set-?>: kotlin.Float): kotlin.Unit
    public final fun convertToSpecifiedUnits(/*0*/ unitType: kotlin.Short): kotlin.Unit
    public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
    public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
    public final fun newValueSpecifiedUnits(/*0*/ unitType: kotlin.Short, /*1*/ valueInSpecifiedUnits: kotlin.Float): kotlin.Unit
    public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String

    public companion object Companion {
        /*primary*/ private constructor Companion()
        public final val SVG_ANGLETYPE_DEG: kotlin.Short
            public final fun <get-SVG_ANGLETYPE_DEG>(): kotlin.Short
        public final val SVG_ANGLETYPE_GRAD: kotlin.Short
            public final fun <get-SVG_ANGLETYPE_GRAD>(): kotlin.Short
        public final val SVG_ANGLETYPE_RAD: kotlin.Short
            public final fun <get-SVG_ANGLETYPE_RAD>(): kotlin.Short
        public final val SVG_ANGLETYPE_UNKNOWN: kotlin.Short
            public final fun <get-SVG_ANGLETYPE_UNKNOWN>(): kotlin.Short
        public final val SVG_ANGLETYPE_UNSPECIFIED: kotlin.Short
            public final fun <get-SVG_ANGLETYPE_UNSPECIFIED>(): kotlin.Short
        public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
        public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
        public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
    }
}

public abstract external class SVGAnimatedAngle {
    /*primary*/ public constructor SVGAnimatedAngle()
    public open val animVal: org.w3c.dom.svg.SVGAngle
        public open fun <get-animVal>(): org.w3c.dom.svg.SVGAngle
    public open val baseVal: org.w3c.dom.svg.SVGAngle
        public open fun <get-baseVal>(): org.w3c.dom.svg.SVGAngle
    public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
    public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
    public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
}

public abstract external class SVGAnimatedBoolean {
    /*primary*/ public constructor SVGAnimatedBoolean()
    public open val animVal: kotlin.Boolean
        public open fun <get-animVal>(): kotlin.Boolean
    public open var baseVal: kotlin.Boolean
        public open fun <get-baseVal>(): kotlin.Boolean
        public open fun <set-baseVal>(/*0*/ <set-?>: kotlin.Boolean): kotlin.Unit
    public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
    public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
    public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
}

public abstract external class SVGAnimatedEnumeration {
    /*primary*/ public constructor SVGAnimatedEnumeration()
    public open val animVal: kotlin.Short
        public open fun <get-animVal>(): kotlin.Short
    public open var baseVal: kotlin.Short
        public open fun <get-baseVal>(): kotlin.Short
        public open fun <set-baseVal>(/*0*/ <set-?>: kotlin.Short): kotlin.Unit
    public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
    public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
    public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
}

public abstract external class SVGAnimatedInteger {
    /*primary*/ public constructor SVGAnimatedInteger()
    public open val animVal: kotlin.Int
        public open fun <get-animVal>(): kotlin.Int
    public open var baseVal: kotlin.Int
        public open fun <get-baseVal>(): kotlin.Int
        public open fun <set-baseVal>(/*0*/ <set-?>: kotlin.Int): kotlin.Unit
    public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
    public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
    public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
}

public abstract external class SVGAnimatedLength {
    /*primary*/ public constructor SVGAnimatedLength()
    public open val animVal: org.w3c.dom.svg.SVGLength
        public open fun <get-animVal>(): org.w3c.dom.svg.SVGLength
    public open val baseVal: org.w3c.dom.svg.SVGLength
        public open fun <get-baseVal>(): org.w3c.dom.svg.SVGLength
    public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
    public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
    public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
}

public abstract external class SVGAnimatedLengthList {
    /*primary*/ public constructor SVGAnimatedLengthList()
    public open val animVal: org.w3c.dom.svg.SVGLengthList
        public open fun <get-animVal>(): org.w3c.dom.svg.SVGLengthList
    public open val baseVal: org.w3c.dom.svg.SVGLengthList
        public open fun <get-baseVal>(): org.w3c.dom.svg.SVGLengthList
    public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
    public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
    public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
}

public abstract external class SVGAnimatedNumber {
    /*primary*/ public constructor SVGAnimatedNumber()
    public open val animVal: kotlin.Float
        public open fun <get-animVal>(): kotlin.Float
    public open var baseVal: kotlin.Float
        public open fun <get-baseVal>(): kotlin.Float
        public open fun <set-baseVal>(/*0*/ <set-?>: kotlin.Float): kotlin.Unit
    public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
    public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
    public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
}

public abstract external class SVGAnimatedNumberList {
    /*primary*/ public constructor SVGAnimatedNumberList()
    public open val animVal: org.w3c.dom.svg.SVGNumberList
        public open fun <get-animVal>(): org.w3c.dom.svg.SVGNumberList
    public open val baseVal: org.w3c.dom.svg.SVGNumberList
        public open fun <get-baseVal>(): org.w3c.dom.svg.SVGNumberList
    public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
    public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
    public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
}

public external interface SVGAnimatedPoints {
    public abstract val animatedPoints: org.w3c.dom.svg.SVGPointList
        public abstract fun <get-animatedPoints>(): org.w3c.dom.svg.SVGPointList
    public abstract val points: org.w3c.dom.svg.SVGPointList
        public abstract fun <get-points>(): org.w3c.dom.svg.SVGPointList
    public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
    public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
    public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
}

public abstract external class SVGAnimatedPreserveAspectRatio {
    /*primary*/ public constructor SVGAnimatedPreserveAspectRatio()
    public open val animVal: org.w3c.dom.svg.SVGPreserveAspectRatio
        public open fun <get-animVal>(): org.w3c.dom.svg.SVGPreserveAspectRatio
    public open val baseVal: org.w3c.dom.svg.SVGPreserveAspectRatio
        public open fun <get-baseVal>(): org.w3c.dom.svg.SVGPreserveAspectRatio
    public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
    public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
    public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
}

public abstract external class SVGAnimatedRect {
    /*primary*/ public constructor SVGAnimatedRect()
    public open val animVal: org.w3c.dom.DOMRectReadOnly
        public open fun <get-animVal>(): org.w3c.dom.DOMRectReadOnly
    public open val baseVal: org.w3c.dom.DOMRect
        public open fun <get-baseVal>(): org.w3c.dom.DOMRect
    public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
    public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
    public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
}

public abstract external class SVGAnimatedString {
    /*primary*/ public constructor SVGAnimatedString()
    public open val animVal: kotlin.String
        public open fun <get-animVal>(): kotlin.String
    public open var baseVal: kotlin.String
        public open fun <get-baseVal>(): kotlin.String
        public open fun <set-baseVal>(/*0*/ <set-?>: kotlin.String): kotlin.Unit
    public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
    public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
    public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
}

public abstract external class SVGAnimatedTransformList {
    /*primary*/ public constructor SVGAnimatedTransformList()
    public open val animVal: org.w3c.dom.svg.SVGTransformList
        public open fun <get-animVal>(): org.w3c.dom.svg.SVGTransformList
    public open val baseVal: org.w3c.dom.svg.SVGTransformList
        public open fun <get-baseVal>(): org.w3c.dom.svg.SVGTransformList
    public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
    public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
    public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
}

public external interface SVGBoundingBoxOptions {
    public open var clipped: kotlin.Boolean?
        public open fun <get-clipped>(): kotlin.Boolean?
        public open fun <set-clipped>(/*0*/ value: kotlin.Boolean?): kotlin.Unit
    public open var fill: kotlin.Boolean?
        public open fun <get-fill>(): kotlin.Boolean?
        public open fun <set-fill>(/*0*/ value: kotlin.Boolean?): kotlin.Unit
    public open var markers: kotlin.Boolean?
        public open fun <get-markers>(): kotlin.Boolean?
        public open fun <set-markers>(/*0*/ value: kotlin.Boolean?): kotlin.Unit
    public open var stroke: kotlin.Boolean?
        public open fun <get-stroke>(): kotlin.Boolean?
        public open fun <set-stroke>(/*0*/ value: kotlin.Boolean?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
    public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
    public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
}

public abstract external class SVGCircleElement : org.w3c.dom.svg.SVGGeometryElement {
    /*primary*/ public constructor SVGCircleElement()
    public open override /*1*/ /*fake_override*/ val assignedSlot: org.w3c.dom.HTMLSlotElement?
        public open override /*1*/ /*fake_override*/ fun <get-assignedSlot>(): org.w3c.dom.HTMLSlotElement?
    public open override /*1*/ /*fake_override*/ val attributes: org.w3c.dom.NamedNodeMap
        public open override /*1*/ /*fake_override*/ fun <get-attributes>(): org.w3c.dom.NamedNodeMap
    public open override /*1*/ /*fake_override*/ val baseURI: kotlin.String
        public open override /*1*/ /*fake_override*/ fun <get-baseURI>(): kotlin.String
    public abstract override /*1*/ /*fake_override*/ val childElementCount: kotlin.Int
        public abstract override /*1*/ /*fake_override*/ fun <get-childElementCount>(): kotlin.Int
    public open override /*1*/ /*fake_override*/ val childNodes: org.w3c.dom.NodeList
        public open override /*1*/ /*fake_override*/ fun <get-childNodes>(): org.w3c.dom.NodeList
    public abstract override /*1*/ /*fake_override*/ val children: org.w3c.dom.HTMLCollection
        public abstract override /*1*/ /*fake_override*/ fun <get-children>(): org.w3c.dom.HTMLCollection
    public open override /*1*/ /*fake_override*/ val classList: org.w3c.dom.DOMTokenList
        public open override /*1*/ /*fake_override*/ fun <get-classList>(): org.w3c.dom.DOMTokenList
    public open override /*1*/ /*fake_override*/ var className: kotlin.String
        public open override /*1*/ /*fake_override*/ fun <get-className>(): kotlin.String
        public open override /*1*/ /*fake_override*/ fun <set-className>(/*0*/ <set-?>: kotlin.String): kotlin.Unit
    public open override /*1*/ /*fake_override*/ val clientHeight: kotlin.Int
        public open override /*1*/ /*fake_override*/ fun <get-clientHeight>(): kotlin.Int
    public open override /*1*/ /*fake_override*/ val clientLeft: kotlin.Int
        public open override /*1*/ /*fake_override*/ fun <get-clientLeft>(): kotlin.Int
    public open override /*1*/ /*fake_override*/ val clientTop: kotlin.Int
        public open override /*1*/ /*fake_override*/ fun <get-clientTop>(): kotlin.Int
    public open override /*1*/ /*fake_override*/ val clientWidth: kotlin.Int
        public open override /*1*/ /*fake_override*/ fun <get-clientWidth>(): kotlin.Int
    public open override /*1*/ /*fake_override*/ val correspondingElement: org.w3c.dom.svg.SVGElement?
        public open override /*1*/ /*fake_override*/ fun <get-correspondingElement>(): org.w3c.dom.svg.SVGElement?
    public open override /*1*/ /*fake_override*/ val correspondingUseElement: org.w3c.dom.svg.SVGUseElement?
        public open override /*1*/ /*fake_override*/ fun <get-correspondingUseElement>(): org.w3c.dom.svg.SVGUseElement?
    public open val cx: org.w3c.dom.svg.SVGAnimatedLength
        public open fun <get-cx>(): org.w3c.dom.svg.SVGAnimatedLength
    public open val cy: org.w3c.dom.svg.SVGAnimatedLength
        public open fun <get-cy>(): org.w3c.dom.svg.SVGAnimatedLength
    public open override /*1*/ /*fake_override*/ val dataset: org.w3c.dom.DOMStringMap
        public open override /*1*/ /*fake_override*/ fun <get-dataset>(): org.w3c.dom.DOMStringMap
    public open override /*1*/ /*fake_override*/ val firstChild: org.w3c.dom.Node?
        public open override /*1*/ /*fake_override*/ fun <get-firstChild>(): org.w3c.dom.Node?
    public open override /*1*/ /*fake_override*/ val firstElementChild: org.w3c.dom.Element?
        public open override /*1*/ /*fake_override*/ fun <get-firstElementChild>(): org.w3c.dom.Element?
    public open override /*1*/ /*fake_override*/ var id: kotlin.String
        public open override /*1*/ /*fake_override*/ fun <get-id>(): kotlin.String
        public open override /*1*/ /*fake_override*/ fun <set-id>(/*0*/ <set-?>: kotlin.String): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var innerHTML: kotlin.String
        public open override /*1*/ /*fake_override*/ fun <get-innerHTML>(): kotlin.String
        public open override /*1*/ /*fake_override*/ fun <set-innerHTML>(/*0*/ <set-?>: kotlin.String): kotlin.Unit
    public open override /*1*/ /*fake_override*/ val isConnected: kotlin.Boolean
        public open override /*1*/ /*fake_override*/ fun <get-isConnected>(): kotlin.Boolean
    public open override /*1*/ /*fake_override*/ val lastChild: org.w3c.dom.Node?
        public open override /*1*/ /*fake_override*/ fun <get-lastChild>(): org.w3c.dom.Node?
    public open override /*1*/ /*fake_override*/ val lastElementChild: org.w3c.dom.Element?
        public open override /*1*/ /*fake_override*/ fun <get-lastElementChild>(): org.w3c.dom.Element?
    public open override /*1*/ /*fake_override*/ val localName: kotlin.String
        public open override /*1*/ /*fake_override*/ fun <get-localName>(): kotlin.String
    public open override /*1*/ /*fake_override*/ val namespaceURI: kotlin.String?
        public open override /*1*/ /*fake_override*/ fun <get-namespaceURI>(): kotlin.String?
    public open override /*1*/ /*fake_override*/ val nextElementSibling: org.w3c.dom.Element?
        public open override /*1*/ /*fake_override*/ fun <get-nextElementSibling>(): org.w3c.dom.Element?
    public open override /*1*/ /*fake_override*/ val nextSibling: org.w3c.dom.Node?
        public open override /*1*/ /*fake_override*/ fun <get-nextSibling>(): org.w3c.dom.Node?
    public open override /*1*/ /*fake_override*/ val nodeName: kotlin.String
        public open override /*1*/ /*fake_override*/ fun <get-nodeName>(): kotlin.String
    public open override /*1*/ /*fake_override*/ val nodeType: kotlin.Short
        public open override /*1*/ /*fake_override*/ fun <get-nodeType>(): kotlin.Short
    public open override /*1*/ /*fake_override*/ var nodeValue: kotlin.String?
        public open override /*1*/ /*fake_override*/ fun <get-nodeValue>(): kotlin.String?
        public open override /*1*/ /*fake_override*/ fun <set-nodeValue>(/*0*/ <set-?>: kotlin.String?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onabort: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onabort>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onabort>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onblur: ((org.w3c.dom.events.FocusEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onblur>(): ((org.w3c.dom.events.FocusEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onblur>(/*0*/ value: ((org.w3c.dom.events.FocusEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var oncancel: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-oncancel>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-oncancel>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var oncanplay: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-oncanplay>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-oncanplay>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var oncanplaythrough: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-oncanplaythrough>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-oncanplaythrough>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onchange: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onchange>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onchange>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onclick: ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onclick>(): ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onclick>(/*0*/ value: ((org.w3c.dom.events.MouseEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onclose: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onclose>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onclose>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var oncontextmenu: ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-oncontextmenu>(): ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-oncontextmenu>(/*0*/ value: ((org.w3c.dom.events.MouseEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var oncuechange: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-oncuechange>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-oncuechange>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ondblclick: ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ondblclick>(): ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ondblclick>(/*0*/ value: ((org.w3c.dom.events.MouseEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ondrag: ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ondrag>(): ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ondrag>(/*0*/ value: ((org.w3c.dom.DragEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ondragend: ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ondragend>(): ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ondragend>(/*0*/ value: ((org.w3c.dom.DragEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ondragenter: ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ondragenter>(): ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ondragenter>(/*0*/ value: ((org.w3c.dom.DragEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ondragexit: ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ondragexit>(): ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ondragexit>(/*0*/ value: ((org.w3c.dom.DragEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ondragleave: ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ondragleave>(): ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ondragleave>(/*0*/ value: ((org.w3c.dom.DragEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ondragover: ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ondragover>(): ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ondragover>(/*0*/ value: ((org.w3c.dom.DragEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ondragstart: ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ondragstart>(): ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ondragstart>(/*0*/ value: ((org.w3c.dom.DragEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ondrop: ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ondrop>(): ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ondrop>(/*0*/ value: ((org.w3c.dom.DragEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ondurationchange: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ondurationchange>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ondurationchange>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onemptied: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onemptied>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onemptied>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onended: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onended>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onended>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onerror: ((dynamic, kotlin.String, kotlin.Int, kotlin.Int, kotlin.Any?) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onerror>(): ((dynamic, kotlin.String, kotlin.Int, kotlin.Int, kotlin.Any?) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onerror>(/*0*/ value: ((dynamic, kotlin.String, kotlin.Int, kotlin.Int, kotlin.Any?) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onfocus: ((org.w3c.dom.events.FocusEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onfocus>(): ((org.w3c.dom.events.FocusEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onfocus>(/*0*/ value: ((org.w3c.dom.events.FocusEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ongotpointercapture: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ongotpointercapture>(): ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ongotpointercapture>(/*0*/ value: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var oninput: ((org.w3c.dom.events.InputEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-oninput>(): ((org.w3c.dom.events.InputEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-oninput>(/*0*/ value: ((org.w3c.dom.events.InputEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var oninvalid: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-oninvalid>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-oninvalid>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onkeydown: ((org.w3c.dom.events.KeyboardEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onkeydown>(): ((org.w3c.dom.events.KeyboardEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onkeydown>(/*0*/ value: ((org.w3c.dom.events.KeyboardEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onkeypress: ((org.w3c.dom.events.KeyboardEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onkeypress>(): ((org.w3c.dom.events.KeyboardEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onkeypress>(/*0*/ value: ((org.w3c.dom.events.KeyboardEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onkeyup: ((org.w3c.dom.events.KeyboardEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onkeyup>(): ((org.w3c.dom.events.KeyboardEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onkeyup>(/*0*/ value: ((org.w3c.dom.events.KeyboardEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onload: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onload>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onload>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onloadeddata: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onloadeddata>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onloadeddata>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onloadedmetadata: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onloadedmetadata>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onloadedmetadata>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onloadend: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onloadend>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onloadend>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onloadstart: ((org.w3c.xhr.ProgressEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onloadstart>(): ((org.w3c.xhr.ProgressEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onloadstart>(/*0*/ value: ((org.w3c.xhr.ProgressEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onlostpointercapture: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onlostpointercapture>(): ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onlostpointercapture>(/*0*/ value: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onmousedown: ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onmousedown>(): ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onmousedown>(/*0*/ value: ((org.w3c.dom.events.MouseEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onmouseenter: ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onmouseenter>(): ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onmouseenter>(/*0*/ value: ((org.w3c.dom.events.MouseEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onmouseleave: ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onmouseleave>(): ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onmouseleave>(/*0*/ value: ((org.w3c.dom.events.MouseEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onmousemove: ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onmousemove>(): ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onmousemove>(/*0*/ value: ((org.w3c.dom.events.MouseEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onmouseout: ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onmouseout>(): ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onmouseout>(/*0*/ value: ((org.w3c.dom.events.MouseEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onmouseover: ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onmouseover>(): ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onmouseover>(/*0*/ value: ((org.w3c.dom.events.MouseEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onmouseup: ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onmouseup>(): ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onmouseup>(/*0*/ value: ((org.w3c.dom.events.MouseEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onpause: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onpause>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onpause>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onplay: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onplay>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onplay>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onplaying: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onplaying>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onplaying>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onpointercancel: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onpointercancel>(): ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onpointercancel>(/*0*/ value: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onpointerdown: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onpointerdown>(): ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onpointerdown>(/*0*/ value: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onpointerenter: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onpointerenter>(): ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onpointerenter>(/*0*/ value: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onpointerleave: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onpointerleave>(): ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onpointerleave>(/*0*/ value: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onpointermove: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onpointermove>(): ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onpointermove>(/*0*/ value: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onpointerout: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onpointerout>(): ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onpointerout>(/*0*/ value: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onpointerover: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onpointerover>(): ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onpointerover>(/*0*/ value: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onpointerup: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onpointerup>(): ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onpointerup>(/*0*/ value: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onprogress: ((org.w3c.xhr.ProgressEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onprogress>(): ((org.w3c.xhr.ProgressEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onprogress>(/*0*/ value: ((org.w3c.xhr.ProgressEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onratechange: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onratechange>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onratechange>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onreset: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onreset>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onreset>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onresize: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onresize>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onresize>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onscroll: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onscroll>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onscroll>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onseeked: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onseeked>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onseeked>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onseeking: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onseeking>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onseeking>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onselect: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onselect>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onselect>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onshow: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onshow>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onshow>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onstalled: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onstalled>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onstalled>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onsubmit: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onsubmit>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onsubmit>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onsuspend: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onsuspend>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onsuspend>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ontimeupdate: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ontimeupdate>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ontimeupdate>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ontoggle: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ontoggle>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ontoggle>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onvolumechange: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onvolumechange>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onvolumechange>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onwaiting: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onwaiting>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onwaiting>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onwheel: ((org.w3c.dom.events.WheelEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onwheel>(): ((org.w3c.dom.events.WheelEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onwheel>(/*0*/ value: ((org.w3c.dom.events.WheelEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var outerHTML: kotlin.String
        public open override /*1*/ /*fake_override*/ fun <get-outerHTML>(): kotlin.String
        public open override /*1*/ /*fake_override*/ fun <set-outerHTML>(/*0*/ <set-?>: kotlin.String): kotlin.Unit
    public open override /*1*/ /*fake_override*/ val ownerDocument: org.w3c.dom.Document?
        public open override /*1*/ /*fake_override*/ fun <get-ownerDocument>(): org.w3c.dom.Document?
    public open override /*1*/ /*fake_override*/ val ownerSVGElement: org.w3c.dom.svg.SVGSVGElement?
        public open override /*1*/ /*fake_override*/ fun <get-ownerSVGElement>(): org.w3c.dom.svg.SVGSVGElement?
    public open override /*1*/ /*fake_override*/ val parentElement: org.w3c.dom.Element?
        public open override /*1*/ /*fake_override*/ fun <get-parentElement>(): org.w3c.dom.Element?
    public open override /*1*/ /*fake_override*/ val parentNode: org.w3c.dom.Node?
        public open override /*1*/ /*fake_override*/ fun <get-parentNode>(): org.w3c.dom.Node?
    public open override /*1*/ /*fake_override*/ val pathLength: org.w3c.dom.svg.SVGAnimatedNumber
        public open override /*1*/ /*fake_override*/ fun <get-pathLength>(): org.w3c.dom.svg.SVGAnimatedNumber
    public open override /*1*/ /*fake_override*/ val prefix: kotlin.String?
        public open override /*1*/ /*fake_override*/ fun <get-prefix>(): kotlin.String?
    public open override /*1*/ /*fake_override*/ val previousElementSibling: org.w3c.dom.Element?
        public open override /*1*/ /*fake_override*/ fun <get-previousElementSibling>(): org.w3c.dom.Element?
    public open override /*1*/ /*fake_override*/ val previousSibling: org.w3c.dom.Node?
        public open override /*1*/ /*fake_override*/ fun <get-previousSibling>(): org.w3c.dom.Node?
    public open val r: org.w3c.dom.svg.SVGAnimatedLength
        public open fun <get-r>(): org.w3c.dom.svg.SVGAnimatedLength
    public abstract override /*1*/ /*fake_override*/ val requiredExtensions: org.w3c.dom.svg.SVGStringList
        public abstract override /*1*/ /*fake_override*/ fun <get-requiredExtensions>(): org.w3c.dom.svg.SVGStringList
    public open override /*1*/ /*fake_override*/ val scrollHeight: kotlin.Int
        public open override /*1*/ /*fake_override*/ fun <get-scrollHeight>(): kotlin.Int
    public open override /*1*/ /*fake_override*/ var scrollLeft: kotlin.Double
        public open override /*1*/ /*fake_override*/ fun <get-scrollLeft>(): kotlin.Double
        public open override /*1*/ /*fake_override*/ fun <set-scrollLeft>(/*0*/ <set-?>: kotlin.Double): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var scrollTop: kotlin.Double
        public open override /*1*/ /*fake_override*/ fun <get-scrollTop>(): kotlin.Double
        public open override /*1*/ /*fake_override*/ fun <set-scrollTop>(/*0*/ <set-?>: kotlin.Double): kotlin.Unit
    public open override /*1*/ /*fake_override*/ val scrollWidth: kotlin.Int
        public open override /*1*/ /*fake_override*/ fun <get-scrollWidth>(): kotlin.Int
    public open override /*1*/ /*fake_override*/ val shadowRoot: org.w3c.dom.ShadowRoot?
        public open override /*1*/ /*fake_override*/ fun <get-shadowRoot>(): org.w3c.dom.ShadowRoot?
    public open override /*1*/ /*fake_override*/ var slot: kotlin.String
        public open override /*1*/ /*fake_override*/ fun <get-slot>(): kotlin.String
        public open override /*1*/ /*fake_override*/ fun <set-slot>(/*0*/ <set-?>: kotlin.String): kotlin.Unit
    public abstract override /*1*/ /*fake_override*/ val style: org.w3c.dom.css.CSSStyleDeclaration
        public abstract override /*1*/ /*fake_override*/ fun <get-style>(): org.w3c.dom.css.CSSStyleDeclaration
    public abstract override /*1*/ /*fake_override*/ val systemLanguage: org.w3c.dom.svg.SVGStringList
        public abstract override /*1*/ /*fake_override*/ fun <get-systemLanguage>(): org.w3c.dom.svg.SVGStringList
    public open override /*1*/ /*fake_override*/ var tabIndex: kotlin.Int
        public open override /*1*/ /*fake_override*/ fun <get-tabIndex>(): kotlin.Int
        public open override /*1*/ /*fake_override*/ fun <set-tabIndex>(/*0*/ <set-?>: kotlin.Int): kotlin.Unit
    public open override /*1*/ /*fake_override*/ val tagName: kotlin.String
        public open override /*1*/ /*fake_override*/ fun <get-tagName>(): kotlin.String
    public open override /*1*/ /*fake_override*/ var textContent: kotlin.String?
        public open override /*1*/ /*fake_override*/ fun <get-textContent>(): kotlin.String?
        public open override /*1*/ /*fake_override*/ fun <set-textContent>(/*0*/ <set-?>: kotlin.String?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ val transform: org.w3c.dom.svg.SVGAnimatedTransformList
        public open override /*1*/ /*fake_override*/ fun <get-transform>(): org.w3c.dom.svg.SVGAnimatedTransformList
    public open override /*1*/ /*fake_override*/ val viewportElement: org.w3c.dom.svg.SVGElement?
        public open override /*1*/ /*fake_override*/ fun <get-viewportElement>(): org.w3c.dom.svg.SVGElement?
    public final override /*1*/ /*fake_override*/ fun addEventListener(/*0*/ type: kotlin.String, /*1*/ callback: ((org.w3c.dom.events.Event) -> kotlin.Unit)?, /*2*/ options: dynamic = ...): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun addEventListener(/*0*/ type: kotlin.String, /*1*/ callback: org.w3c.dom.events.EventListener?, /*2*/ options: dynamic = ...): kotlin.Unit
    public abstract override /*1*/ /*fake_override*/ fun after(/*0*/ vararg nodes: dynamic /*kotlin.Array<out dynamic>*/): kotlin.Unit
    public abstract override /*1*/ /*fake_override*/ fun append(/*0*/ vararg nodes: dynamic /*kotlin.Array<out dynamic>*/): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun appendChild(/*0*/ node: org.w3c.dom.Node): org.w3c.dom.Node
    public final override /*1*/ /*fake_override*/ fun attachShadow(/*0*/ init: org.w3c.dom.ShadowRootInit): org.w3c.dom.ShadowRoot
    public abstract override /*1*/ /*fake_override*/ fun before(/*0*/ vararg nodes: dynamic /*kotlin.Array<out dynamic>*/): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun blur(): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun cloneNode(/*0*/ deep: kotlin.Boolean = ...): org.w3c.dom.Node
    public final override /*1*/ /*fake_override*/ fun closest(/*0*/ selectors: kotlin.String): org.w3c.dom.Element?
    public final override /*1*/ /*fake_override*/ fun compareDocumentPosition(/*0*/ other: org.w3c.dom.Node): kotlin.Short
    public final override /*1*/ /*fake_override*/ fun contains(/*0*/ other: org.w3c.dom.Node?): kotlin.Boolean
    public abstract override /*1*/ /*fake_override*/ fun convertPointFromNode(/*0*/ point: org.w3c.dom.DOMPointInit, /*1*/ from: dynamic, /*2*/ options: org.w3c.dom.ConvertCoordinateOptions = ...): org.w3c.dom.DOMPoint
    public abstract override /*1*/ /*fake_override*/ fun convertQuadFromNode(/*0*/ quad: dynamic, /*1*/ from: dynamic, /*2*/ options: org.w3c.dom.ConvertCoordinateOptions = ...): org.w3c.dom.DOMQuad
    public abstract override /*1*/ /*fake_override*/ fun convertRectFromNode(/*0*/ rect: org.w3c.dom.DOMRectReadOnly, /*1*/ from: dynamic, /*2*/ options: org.w3c.dom.ConvertCoordinateOptions = ...): org.w3c.dom.DOMQuad
    public final override /*1*/ /*fake_override*/ fun dispatchEvent(/*0*/ event: org.w3c.dom.events.Event): kotlin.Boolean
    public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
    public final override /*1*/ /*fake_override*/ fun focus(): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun getAttribute(/*0*/ qualifiedName: kotlin.String): kotlin.String?
    public final override /*1*/ /*fake_override*/ fun getAttributeNS(/*0*/ namespace: kotlin.String?, /*1*/ localName: kotlin.String): kotlin.String?
    public final override /*1*/ /*fake_override*/ fun getAttributeNames(): kotlin.Array<kotlin.String>
    public final override /*1*/ /*fake_override*/ fun getAttributeNode(/*0*/ qualifiedName: kotlin.String): org.w3c.dom.Attr?
    public final override /*1*/ /*fake_override*/ fun getAttributeNodeNS(/*0*/ namespace: kotlin.String?, /*1*/ localName: kotlin.String): org.w3c.dom.Attr?
    public final override /*1*/ /*fake_override*/ fun getBBox(/*0*/ options: org.w3c.dom.svg.SVGBoundingBoxOptions = ...): org.w3c.dom.DOMRect
    public final override /*1*/ /*fake_override*/ fun getBoundingClientRect(): org.w3c.dom.DOMRect
    public abstract override /*1*/ /*fake_override*/ fun getBoxQuads(/*0*/ options: org.w3c.dom.BoxQuadOptions = ...): kotlin.Array<org.w3c.dom.DOMQuad>
    public final override /*1*/ /*fake_override*/ fun getCTM(): org.w3c.dom.DOMMatrix?
    public final override /*1*/ /*fake_override*/ fun getClientRects(): kotlin.Array<org.w3c.dom.DOMRect>
    public final override /*1*/ /*fake_override*/ fun getElementsByClassName(/*0*/ classNames: kotlin.String): org.w3c.dom.HTMLCollection
    public final override /*1*/ /*fake_override*/ fun getElementsByTagName(/*0*/ qualifiedName: kotlin.String): org.w3c.dom.HTMLCollection
    public final override /*1*/ /*fake_override*/ fun getElementsByTagNameNS(/*0*/ namespace: kotlin.String?, /*1*/ localName: kotlin.String): org.w3c.dom.HTMLCollection
    public final override /*1*/ /*fake_override*/ fun getPointAtLength(/*0*/ distance: kotlin.Float): org.w3c.dom.DOMPoint
    public final override /*1*/ /*fake_override*/ fun getRootNode(/*0*/ options: org.w3c.dom.GetRootNodeOptions = ...): org.w3c.dom.Node
    public final override /*1*/ /*fake_override*/ fun getScreenCTM(): org.w3c.dom.DOMMatrix?
    public final override /*1*/ /*fake_override*/ fun getTotalLength(): kotlin.Float
    public final override /*1*/ /*fake_override*/ fun hasAttribute(/*0*/ qualifiedName: kotlin.String): kotlin.Boolean
    public final override /*1*/ /*fake_override*/ fun hasAttributeNS(/*0*/ namespace: kotlin.String?, /*1*/ localName: kotlin.String): kotlin.Boolean
    public final override /*1*/ /*fake_override*/ fun hasAttributes(): kotlin.Boolean
    public final override /*1*/ /*fake_override*/ fun hasChildNodes(): kotlin.Boolean
    public final override /*1*/ /*fake_override*/ fun hasPointerCapture(/*0*/ pointerId: kotlin.Int): kotlin.Boolean
    public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
    public final override /*1*/ /*fake_override*/ fun insertAdjacentElement(/*0*/ where: kotlin.String, /*1*/ element: org.w3c.dom.Element): org.w3c.dom.Element?
    public final override /*1*/ /*fake_override*/ fun insertAdjacentHTML(/*0*/ position: kotlin.String, /*1*/ text: kotlin.String): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun insertAdjacentText(/*0*/ where: kotlin.String, /*1*/ data: kotlin.String): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun insertBefore(/*0*/ node: org.w3c.dom.Node, /*1*/ child: org.w3c.dom.Node?): org.w3c.dom.Node
    public final override /*1*/ /*fake_override*/ fun isDefaultNamespace(/*0*/ namespace: kotlin.String?): kotlin.Boolean
    public final override /*1*/ /*fake_override*/ fun isEqualNode(/*0*/ otherNode: org.w3c.dom.Node?): kotlin.Boolean
    public final override /*1*/ /*fake_override*/ fun isPointInFill(/*0*/ point: org.w3c.dom.DOMPoint): kotlin.Boolean
    public final override /*1*/ /*fake_override*/ fun isPointInStroke(/*0*/ point: org.w3c.dom.DOMPoint): kotlin.Boolean
    public final override /*1*/ /*fake_override*/ fun isSameNode(/*0*/ otherNode: org.w3c.dom.Node?): kotlin.Boolean
    public final override /*1*/ /*fake_override*/ fun lookupNamespaceURI(/*0*/ prefix: kotlin.String?): kotlin.String?
    public final override /*1*/ /*fake_override*/ fun lookupPrefix(/*0*/ namespace: kotlin.String?): kotlin.String?
    public final override /*1*/ /*fake_override*/ fun matches(/*0*/ selectors: kotlin.String): kotlin.Boolean
    public final override /*1*/ /*fake_override*/ fun normalize(): kotlin.Unit
    public abstract override /*1*/ /*fake_override*/ fun prepend(/*0*/ vararg nodes: dynamic /*kotlin.Array<out dynamic>*/): kotlin.Unit
    public abstract override /*1*/ /*fake_override*/ fun querySelector(/*0*/ selectors: kotlin.String): org.w3c.dom.Element?
    public abstract override /*1*/ /*fake_override*/ fun querySelectorAll(/*0*/ selectors: kotlin.String): org.w3c.dom.NodeList
    public final override /*1*/ /*fake_override*/ fun releasePointerCapture(/*0*/ pointerId: kotlin.Int): kotlin.Unit
    public abstract override /*1*/ /*fake_override*/ fun remove(): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun removeAttribute(/*0*/ qualifiedName: kotlin.String): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun removeAttributeNS(/*0*/ namespace: kotlin.String?, /*1*/ localName: kotlin.String): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun removeAttributeNode(/*0*/ attr: org.w3c.dom.Attr): org.w3c.dom.Attr
    public final override /*1*/ /*fake_override*/ fun removeChild(/*0*/ child: org.w3c.dom.Node): org.w3c.dom.Node
    public final override /*1*/ /*fake_override*/ fun removeEventListener(/*0*/ type: kotlin.String, /*1*/ callback: ((org.w3c.dom.events.Event) -> kotlin.Unit)?, /*2*/ options: dynamic = ...): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun removeEventListener(/*0*/ type: kotlin.String, /*1*/ callback: org.w3c.dom.events.EventListener?, /*2*/ options: dynamic = ...): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun replaceChild(/*0*/ node: org.w3c.dom.Node, /*1*/ child: org.w3c.dom.Node): org.w3c.dom.Node
    public abstract override /*1*/ /*fake_override*/ fun replaceWith(/*0*/ vararg nodes: dynamic /*kotlin.Array<out dynamic>*/): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun requestFullscreen(): kotlin.js.Promise<kotlin.Unit>
    public final override /*1*/ /*fake_override*/ fun scroll(/*0*/ x: kotlin.Double, /*1*/ y: kotlin.Double): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun scroll(/*0*/ options: org.w3c.dom.ScrollToOptions = ...): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun scrollBy(/*0*/ x: kotlin.Double, /*1*/ y: kotlin.Double): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun scrollBy(/*0*/ options: org.w3c.dom.ScrollToOptions = ...): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun scrollIntoView(): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun scrollIntoView(/*0*/ arg: dynamic): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun scrollTo(/*0*/ x: kotlin.Double, /*1*/ y: kotlin.Double): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun scrollTo(/*0*/ options: org.w3c.dom.ScrollToOptions = ...): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun setAttribute(/*0*/ qualifiedName: kotlin.String, /*1*/ value: kotlin.String): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun setAttributeNS(/*0*/ namespace: kotlin.String?, /*1*/ qualifiedName: kotlin.String, /*2*/ value: kotlin.String): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun setAttributeNode(/*0*/ attr: org.w3c.dom.Attr): org.w3c.dom.Attr?
    public final override /*1*/ /*fake_override*/ fun setAttributeNodeNS(/*0*/ attr: org.w3c.dom.Attr): org.w3c.dom.Attr?
    public final override /*1*/ /*fake_override*/ fun setPointerCapture(/*0*/ pointerId: kotlin.Int): kotlin.Unit
    public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
    public final override /*1*/ /*fake_override*/ fun webkitMatchesSelector(/*0*/ selectors: kotlin.String): kotlin.Boolean

    public companion object Companion {
        /*primary*/ private constructor Companion()
        public final val ATTRIBUTE_NODE: kotlin.Short
            public final fun <get-ATTRIBUTE_NODE>(): kotlin.Short
        public final val CDATA_SECTION_NODE: kotlin.Short
            public final fun <get-CDATA_SECTION_NODE>(): kotlin.Short
        public final val COMMENT_NODE: kotlin.Short
            public final fun <get-COMMENT_NODE>(): kotlin.Short
        public final val DOCUMENT_FRAGMENT_NODE: kotlin.Short
            public final fun <get-DOCUMENT_FRAGMENT_NODE>(): kotlin.Short
        public final val DOCUMENT_NODE: kotlin.Short
            public final fun <get-DOCUMENT_NODE>(): kotlin.Short
        public final val DOCUMENT_POSITION_CONTAINED_BY: kotlin.Short
            public final fun <get-DOCUMENT_POSITION_CONTAINED_BY>(): kotlin.Short
        public final val DOCUMENT_POSITION_CONTAINS: kotlin.Short
            public final fun <get-DOCUMENT_POSITION_CONTAINS>(): kotlin.Short
        public final val DOCUMENT_POSITION_DISCONNECTED: kotlin.Short
            public final fun <get-DOCUMENT_POSITION_DISCONNECTED>(): kotlin.Short
        public final val DOCUMENT_POSITION_FOLLOWING: kotlin.Short
            public final fun <get-DOCUMENT_POSITION_FOLLOWING>(): kotlin.Short
        public final val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: kotlin.Short
            public final fun <get-DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC>(): kotlin.Short
        public final val DOCUMENT_POSITION_PRECEDING: kotlin.Short
            public final fun <get-DOCUMENT_POSITION_PRECEDING>(): kotlin.Short
        public final val DOCUMENT_TYPE_NODE: kotlin.Short
            public final fun <get-DOCUMENT_TYPE_NODE>(): kotlin.Short
        public final val ELEMENT_NODE: kotlin.Short
            public final fun <get-ELEMENT_NODE>(): kotlin.Short
        public final val ENTITY_NODE: kotlin.Short
            public final fun <get-ENTITY_NODE>(): kotlin.Short
        public final val ENTITY_REFERENCE_NODE: kotlin.Short
            public final fun <get-ENTITY_REFERENCE_NODE>(): kotlin.Short
        public final val NOTATION_NODE: kotlin.Short
            public final fun <get-NOTATION_NODE>(): kotlin.Short
        public final val PROCESSING_INSTRUCTION_NODE: kotlin.Short
            public final fun <get-PROCESSING_INSTRUCTION_NODE>(): kotlin.Short
        public final val TEXT_NODE: kotlin.Short
            public final fun <get-TEXT_NODE>(): kotlin.Short
        public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
        public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
        public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
    }
}

public abstract external class SVGCursorElement : org.w3c.dom.svg.SVGElement, org.w3c.dom.svg.SVGURIReference {
    /*primary*/ public constructor SVGCursorElement()
    public open override /*1*/ /*fake_override*/ val assignedSlot: org.w3c.dom.HTMLSlotElement?
        public open override /*1*/ /*fake_override*/ fun <get-assignedSlot>(): org.w3c.dom.HTMLSlotElement?
    public open override /*1*/ /*fake_override*/ val attributes: org.w3c.dom.NamedNodeMap
        public open override /*1*/ /*fake_override*/ fun <get-attributes>(): org.w3c.dom.NamedNodeMap
    public open override /*1*/ /*fake_override*/ val baseURI: kotlin.String
        public open override /*1*/ /*fake_override*/ fun <get-baseURI>(): kotlin.String
    public abstract override /*1*/ /*fake_override*/ val childElementCount: kotlin.Int
        public abstract override /*1*/ /*fake_override*/ fun <get-childElementCount>(): kotlin.Int
    public open override /*1*/ /*fake_override*/ val childNodes: org.w3c.dom.NodeList
        public open override /*1*/ /*fake_override*/ fun <get-childNodes>(): org.w3c.dom.NodeList
    public abstract override /*1*/ /*fake_override*/ val children: org.w3c.dom.HTMLCollection
        public abstract override /*1*/ /*fake_override*/ fun <get-children>(): org.w3c.dom.HTMLCollection
    public open override /*1*/ /*fake_override*/ val classList: org.w3c.dom.DOMTokenList
        public open override /*1*/ /*fake_override*/ fun <get-classList>(): org.w3c.dom.DOMTokenList
    public open override /*1*/ /*fake_override*/ var className: kotlin.String
        public open override /*1*/ /*fake_override*/ fun <get-className>(): kotlin.String
        public open override /*1*/ /*fake_override*/ fun <set-className>(/*0*/ <set-?>: kotlin.String): kotlin.Unit
    public open override /*1*/ /*fake_override*/ val clientHeight: kotlin.Int
        public open override /*1*/ /*fake_override*/ fun <get-clientHeight>(): kotlin.Int
    public open override /*1*/ /*fake_override*/ val clientLeft: kotlin.Int
        public open override /*1*/ /*fake_override*/ fun <get-clientLeft>(): kotlin.Int
    public open override /*1*/ /*fake_override*/ val clientTop: kotlin.Int
        public open override /*1*/ /*fake_override*/ fun <get-clientTop>(): kotlin.Int
    public open override /*1*/ /*fake_override*/ val clientWidth: kotlin.Int
        public open override /*1*/ /*fake_override*/ fun <get-clientWidth>(): kotlin.Int
    public open override /*1*/ /*fake_override*/ val correspondingElement: org.w3c.dom.svg.SVGElement?
        public open override /*1*/ /*fake_override*/ fun <get-correspondingElement>(): org.w3c.dom.svg.SVGElement?
    public open override /*1*/ /*fake_override*/ val correspondingUseElement: org.w3c.dom.svg.SVGUseElement?
        public open override /*1*/ /*fake_override*/ fun <get-correspondingUseElement>(): org.w3c.dom.svg.SVGUseElement?
    public open override /*1*/ /*fake_override*/ val dataset: org.w3c.dom.DOMStringMap
        public open override /*1*/ /*fake_override*/ fun <get-dataset>(): org.w3c.dom.DOMStringMap
    public open override /*1*/ /*fake_override*/ val firstChild: org.w3c.dom.Node?
        public open override /*1*/ /*fake_override*/ fun <get-firstChild>(): org.w3c.dom.Node?
    public open override /*1*/ /*fake_override*/ val firstElementChild: org.w3c.dom.Element?
        public open override /*1*/ /*fake_override*/ fun <get-firstElementChild>(): org.w3c.dom.Element?
    public abstract override /*1*/ /*fake_override*/ val href: org.w3c.dom.svg.SVGAnimatedString
        public abstract override /*1*/ /*fake_override*/ fun <get-href>(): org.w3c.dom.svg.SVGAnimatedString
    public open override /*1*/ /*fake_override*/ var id: kotlin.String
        public open override /*1*/ /*fake_override*/ fun <get-id>(): kotlin.String
        public open override /*1*/ /*fake_override*/ fun <set-id>(/*0*/ <set-?>: kotlin.String): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var innerHTML: kotlin.String
        public open override /*1*/ /*fake_override*/ fun <get-innerHTML>(): kotlin.String
        public open override /*1*/ /*fake_override*/ fun <set-innerHTML>(/*0*/ <set-?>: kotlin.String): kotlin.Unit
    public open override /*1*/ /*fake_override*/ val isConnected: kotlin.Boolean
        public open override /*1*/ /*fake_override*/ fun <get-isConnected>(): kotlin.Boolean
    public open override /*1*/ /*fake_override*/ val lastChild: org.w3c.dom.Node?
        public open override /*1*/ /*fake_override*/ fun <get-lastChild>(): org.w3c.dom.Node?
    public open override /*1*/ /*fake_override*/ val lastElementChild: org.w3c.dom.Element?
        public open override /*1*/ /*fake_override*/ fun <get-lastElementChild>(): org.w3c.dom.Element?
    public open override /*1*/ /*fake_override*/ val localName: kotlin.String
        public open override /*1*/ /*fake_override*/ fun <get-localName>(): kotlin.String
    public open override /*1*/ /*fake_override*/ val namespaceURI: kotlin.String?
        public open override /*1*/ /*fake_override*/ fun <get-namespaceURI>(): kotlin.String?
    public open override /*1*/ /*fake_override*/ val nextElementSibling: org.w3c.dom.Element?
        public open override /*1*/ /*fake_override*/ fun <get-nextElementSibling>(): org.w3c.dom.Element?
    public open override /*1*/ /*fake_override*/ val nextSibling: org.w3c.dom.Node?
        public open override /*1*/ /*fake_override*/ fun <get-nextSibling>(): org.w3c.dom.Node?
    public open override /*1*/ /*fake_override*/ val nodeName: kotlin.String
        public open override /*1*/ /*fake_override*/ fun <get-nodeName>(): kotlin.String
    public open override /*1*/ /*fake_override*/ val nodeType: kotlin.Short
        public open override /*1*/ /*fake_override*/ fun <get-nodeType>(): kotlin.Short
    public open override /*1*/ /*fake_override*/ var nodeValue: kotlin.String?
        public open override /*1*/ /*fake_override*/ fun <get-nodeValue>(): kotlin.String?
        public open override /*1*/ /*fake_override*/ fun <set-nodeValue>(/*0*/ <set-?>: kotlin.String?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onabort: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onabort>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onabort>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onblur: ((org.w3c.dom.events.FocusEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onblur>(): ((org.w3c.dom.events.FocusEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onblur>(/*0*/ value: ((org.w3c.dom.events.FocusEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var oncancel: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-oncancel>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-oncancel>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var oncanplay: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-oncanplay>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-oncanplay>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var oncanplaythrough: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-oncanplaythrough>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-oncanplaythrough>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onchange: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onchange>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onchange>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onclick: ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onclick>(): ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onclick>(/*0*/ value: ((org.w3c.dom.events.MouseEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onclose: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onclose>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onclose>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var oncontextmenu: ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-oncontextmenu>(): ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-oncontextmenu>(/*0*/ value: ((org.w3c.dom.events.MouseEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var oncuechange: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-oncuechange>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-oncuechange>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ondblclick: ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ondblclick>(): ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ondblclick>(/*0*/ value: ((org.w3c.dom.events.MouseEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ondrag: ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ondrag>(): ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ondrag>(/*0*/ value: ((org.w3c.dom.DragEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ondragend: ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ondragend>(): ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ondragend>(/*0*/ value: ((org.w3c.dom.DragEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ondragenter: ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ondragenter>(): ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ondragenter>(/*0*/ value: ((org.w3c.dom.DragEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ondragexit: ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ondragexit>(): ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ondragexit>(/*0*/ value: ((org.w3c.dom.DragEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ondragleave: ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ondragleave>(): ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ondragleave>(/*0*/ value: ((org.w3c.dom.DragEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ondragover: ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ondragover>(): ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ondragover>(/*0*/ value: ((org.w3c.dom.DragEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ondragstart: ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ondragstart>(): ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ondragstart>(/*0*/ value: ((org.w3c.dom.DragEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ondrop: ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ondrop>(): ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ondrop>(/*0*/ value: ((org.w3c.dom.DragEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ondurationchange: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ondurationchange>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ondurationchange>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onemptied: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onemptied>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onemptied>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onended: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onended>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onended>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onerror: ((dynamic, kotlin.String, kotlin.Int, kotlin.Int, kotlin.Any?) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onerror>(): ((dynamic, kotlin.String, kotlin.Int, kotlin.Int, kotlin.Any?) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onerror>(/*0*/ value: ((dynamic, kotlin.String, kotlin.Int, kotlin.Int, kotlin.Any?) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onfocus: ((org.w3c.dom.events.FocusEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onfocus>(): ((org.w3c.dom.events.FocusEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onfocus>(/*0*/ value: ((org.w3c.dom.events.FocusEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ongotpointercapture: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ongotpointercapture>(): ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ongotpointercapture>(/*0*/ value: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var oninput: ((org.w3c.dom.events.InputEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-oninput>(): ((org.w3c.dom.events.InputEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-oninput>(/*0*/ value: ((org.w3c.dom.events.InputEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var oninvalid: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-oninvalid>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-oninvalid>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onkeydown: ((org.w3c.dom.events.KeyboardEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onkeydown>(): ((org.w3c.dom.events.KeyboardEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onkeydown>(/*0*/ value: ((org.w3c.dom.events.KeyboardEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onkeypress: ((org.w3c.dom.events.KeyboardEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onkeypress>(): ((org.w3c.dom.events.KeyboardEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onkeypress>(/*0*/ value: ((org.w3c.dom.events.KeyboardEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onkeyup: ((org.w3c.dom.events.KeyboardEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onkeyup>(): ((org.w3c.dom.events.KeyboardEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onkeyup>(/*0*/ value: ((org.w3c.dom.events.KeyboardEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onload: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onload>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onload>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onloadeddata: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onloadeddata>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onloadeddata>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onloadedmetadata: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onloadedmetadata>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onloadedmetadata>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onloadend: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onloadend>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onloadend>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onloadstart: ((org.w3c.xhr.ProgressEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onloadstart>(): ((org.w3c.xhr.ProgressEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onloadstart>(/*0*/ value: ((org.w3c.xhr.ProgressEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onlostpointercapture: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onlostpointercapture>(): ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onlostpointercapture>(/*0*/ value: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onmousedown: ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onmousedown>(): ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onmousedown>(/*0*/ value: ((org.w3c.dom.events.MouseEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onmouseenter: ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onmouseenter>(): ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onmouseenter>(/*0*/ value: ((org.w3c.dom.events.MouseEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onmouseleave: ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onmouseleave>(): ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onmouseleave>(/*0*/ value: ((org.w3c.dom.events.MouseEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onmousemove: ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onmousemove>(): ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onmousemove>(/*0*/ value: ((org.w3c.dom.events.MouseEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onmouseout: ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onmouseout>(): ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onmouseout>(/*0*/ value: ((org.w3c.dom.events.MouseEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onmouseover: ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onmouseover>(): ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onmouseover>(/*0*/ value: ((org.w3c.dom.events.MouseEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onmouseup: ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onmouseup>(): ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onmouseup>(/*0*/ value: ((org.w3c.dom.events.MouseEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onpause: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onpause>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onpause>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onplay: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onplay>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onplay>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onplaying: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onplaying>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onplaying>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onpointercancel: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onpointercancel>(): ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onpointercancel>(/*0*/ value: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onpointerdown: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onpointerdown>(): ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onpointerdown>(/*0*/ value: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onpointerenter: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onpointerenter>(): ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onpointerenter>(/*0*/ value: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onpointerleave: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onpointerleave>(): ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onpointerleave>(/*0*/ value: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onpointermove: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onpointermove>(): ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onpointermove>(/*0*/ value: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onpointerout: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onpointerout>(): ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onpointerout>(/*0*/ value: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onpointerover: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onpointerover>(): ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onpointerover>(/*0*/ value: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onpointerup: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onpointerup>(): ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onpointerup>(/*0*/ value: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onprogress: ((org.w3c.xhr.ProgressEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onprogress>(): ((org.w3c.xhr.ProgressEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onprogress>(/*0*/ value: ((org.w3c.xhr.ProgressEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onratechange: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onratechange>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onratechange>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onreset: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onreset>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onreset>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onresize: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onresize>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onresize>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onscroll: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onscroll>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onscroll>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onseeked: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onseeked>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onseeked>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onseeking: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onseeking>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onseeking>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onselect: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onselect>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onselect>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onshow: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onshow>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onshow>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onstalled: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onstalled>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onstalled>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onsubmit: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onsubmit>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onsubmit>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onsuspend: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onsuspend>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onsuspend>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ontimeupdate: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ontimeupdate>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ontimeupdate>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ontoggle: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ontoggle>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ontoggle>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onvolumechange: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onvolumechange>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onvolumechange>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onwaiting: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onwaiting>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onwaiting>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onwheel: ((org.w3c.dom.events.WheelEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onwheel>(): ((org.w3c.dom.events.WheelEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onwheel>(/*0*/ value: ((org.w3c.dom.events.WheelEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var outerHTML: kotlin.String
        public open override /*1*/ /*fake_override*/ fun <get-outerHTML>(): kotlin.String
        public open override /*1*/ /*fake_override*/ fun <set-outerHTML>(/*0*/ <set-?>: kotlin.String): kotlin.Unit
    public open override /*1*/ /*fake_override*/ val ownerDocument: org.w3c.dom.Document?
        public open override /*1*/ /*fake_override*/ fun <get-ownerDocument>(): org.w3c.dom.Document?
    public open override /*1*/ /*fake_override*/ val ownerSVGElement: org.w3c.dom.svg.SVGSVGElement?
        public open override /*1*/ /*fake_override*/ fun <get-ownerSVGElement>(): org.w3c.dom.svg.SVGSVGElement?
    public open override /*1*/ /*fake_override*/ val parentElement: org.w3c.dom.Element?
        public open override /*1*/ /*fake_override*/ fun <get-parentElement>(): org.w3c.dom.Element?
    public open override /*1*/ /*fake_override*/ val parentNode: org.w3c.dom.Node?
        public open override /*1*/ /*fake_override*/ fun <get-parentNode>(): org.w3c.dom.Node?
    public open override /*1*/ /*fake_override*/ val prefix: kotlin.String?
        public open override /*1*/ /*fake_override*/ fun <get-prefix>(): kotlin.String?
    public open override /*1*/ /*fake_override*/ val previousElementSibling: org.w3c.dom.Element?
        public open override /*1*/ /*fake_override*/ fun <get-previousElementSibling>(): org.w3c.dom.Element?
    public open override /*1*/ /*fake_override*/ val previousSibling: org.w3c.dom.Node?
        public open override /*1*/ /*fake_override*/ fun <get-previousSibling>(): org.w3c.dom.Node?
    public open override /*1*/ /*fake_override*/ val scrollHeight: kotlin.Int
        public open override /*1*/ /*fake_override*/ fun <get-scrollHeight>(): kotlin.Int
    public open override /*1*/ /*fake_override*/ var scrollLeft: kotlin.Double
        public open override /*1*/ /*fake_override*/ fun <get-scrollLeft>(): kotlin.Double
        public open override /*1*/ /*fake_override*/ fun <set-scrollLeft>(/*0*/ <set-?>: kotlin.Double): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var scrollTop: kotlin.Double
        public open override /*1*/ /*fake_override*/ fun <get-scrollTop>(): kotlin.Double
        public open override /*1*/ /*fake_override*/ fun <set-scrollTop>(/*0*/ <set-?>: kotlin.Double): kotlin.Unit
    public open override /*1*/ /*fake_override*/ val scrollWidth: kotlin.Int
        public open override /*1*/ /*fake_override*/ fun <get-scrollWidth>(): kotlin.Int
    public open override /*1*/ /*fake_override*/ val shadowRoot: org.w3c.dom.ShadowRoot?
        public open override /*1*/ /*fake_override*/ fun <get-shadowRoot>(): org.w3c.dom.ShadowRoot?
    public open override /*1*/ /*fake_override*/ var slot: kotlin.String
        public open override /*1*/ /*fake_override*/ fun <get-slot>(): kotlin.String
        public open override /*1*/ /*fake_override*/ fun <set-slot>(/*0*/ <set-?>: kotlin.String): kotlin.Unit
    public abstract override /*1*/ /*fake_override*/ val style: org.w3c.dom.css.CSSStyleDeclaration
        public abstract override /*1*/ /*fake_override*/ fun <get-style>(): org.w3c.dom.css.CSSStyleDeclaration
    public open override /*1*/ /*fake_override*/ var tabIndex: kotlin.Int
        public open override /*1*/ /*fake_override*/ fun <get-tabIndex>(): kotlin.Int
        public open override /*1*/ /*fake_override*/ fun <set-tabIndex>(/*0*/ <set-?>: kotlin.Int): kotlin.Unit
    public open override /*1*/ /*fake_override*/ val tagName: kotlin.String
        public open override /*1*/ /*fake_override*/ fun <get-tagName>(): kotlin.String
    public open override /*1*/ /*fake_override*/ var textContent: kotlin.String?
        public open override /*1*/ /*fake_override*/ fun <get-textContent>(): kotlin.String?
        public open override /*1*/ /*fake_override*/ fun <set-textContent>(/*0*/ <set-?>: kotlin.String?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ val viewportElement: org.w3c.dom.svg.SVGElement?
        public open override /*1*/ /*fake_override*/ fun <get-viewportElement>(): org.w3c.dom.svg.SVGElement?
    public open val x: org.w3c.dom.svg.SVGAnimatedLength
        public open fun <get-x>(): org.w3c.dom.svg.SVGAnimatedLength
    public open val y: org.w3c.dom.svg.SVGAnimatedLength
        public open fun <get-y>(): org.w3c.dom.svg.SVGAnimatedLength
    public final override /*1*/ /*fake_override*/ fun addEventListener(/*0*/ type: kotlin.String, /*1*/ callback: ((org.w3c.dom.events.Event) -> kotlin.Unit)?, /*2*/ options: dynamic = ...): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun addEventListener(/*0*/ type: kotlin.String, /*1*/ callback: org.w3c.dom.events.EventListener?, /*2*/ options: dynamic = ...): kotlin.Unit
    public abstract override /*1*/ /*fake_override*/ fun after(/*0*/ vararg nodes: dynamic /*kotlin.Array<out dynamic>*/): kotlin.Unit
    public abstract override /*1*/ /*fake_override*/ fun append(/*0*/ vararg nodes: dynamic /*kotlin.Array<out dynamic>*/): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun appendChild(/*0*/ node: org.w3c.dom.Node): org.w3c.dom.Node
    public final override /*1*/ /*fake_override*/ fun attachShadow(/*0*/ init: org.w3c.dom.ShadowRootInit): org.w3c.dom.ShadowRoot
    public abstract override /*1*/ /*fake_override*/ fun before(/*0*/ vararg nodes: dynamic /*kotlin.Array<out dynamic>*/): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun blur(): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun cloneNode(/*0*/ deep: kotlin.Boolean = ...): org.w3c.dom.Node
    public final override /*1*/ /*fake_override*/ fun closest(/*0*/ selectors: kotlin.String): org.w3c.dom.Element?
    public final override /*1*/ /*fake_override*/ fun compareDocumentPosition(/*0*/ other: org.w3c.dom.Node): kotlin.Short
    public final override /*1*/ /*fake_override*/ fun contains(/*0*/ other: org.w3c.dom.Node?): kotlin.Boolean
    public abstract override /*1*/ /*fake_override*/ fun convertPointFromNode(/*0*/ point: org.w3c.dom.DOMPointInit, /*1*/ from: dynamic, /*2*/ options: org.w3c.dom.ConvertCoordinateOptions = ...): org.w3c.dom.DOMPoint
    public abstract override /*1*/ /*fake_override*/ fun convertQuadFromNode(/*0*/ quad: dynamic, /*1*/ from: dynamic, /*2*/ options: org.w3c.dom.ConvertCoordinateOptions = ...): org.w3c.dom.DOMQuad
    public abstract override /*1*/ /*fake_override*/ fun convertRectFromNode(/*0*/ rect: org.w3c.dom.DOMRectReadOnly, /*1*/ from: dynamic, /*2*/ options: org.w3c.dom.ConvertCoordinateOptions = ...): org.w3c.dom.DOMQuad
    public final override /*1*/ /*fake_override*/ fun dispatchEvent(/*0*/ event: org.w3c.dom.events.Event): kotlin.Boolean
    public open override /*2*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
    public final override /*1*/ /*fake_override*/ fun focus(): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun getAttribute(/*0*/ qualifiedName: kotlin.String): kotlin.String?
    public final override /*1*/ /*fake_override*/ fun getAttributeNS(/*0*/ namespace: kotlin.String?, /*1*/ localName: kotlin.String): kotlin.String?
    public final override /*1*/ /*fake_override*/ fun getAttributeNames(): kotlin.Array<kotlin.String>
    public final override /*1*/ /*fake_override*/ fun getAttributeNode(/*0*/ qualifiedName: kotlin.String): org.w3c.dom.Attr?
    public final override /*1*/ /*fake_override*/ fun getAttributeNodeNS(/*0*/ namespace: kotlin.String?, /*1*/ localName: kotlin.String): org.w3c.dom.Attr?
    public final override /*1*/ /*fake_override*/ fun getBoundingClientRect(): org.w3c.dom.DOMRect
    public abstract override /*1*/ /*fake_override*/ fun getBoxQuads(/*0*/ options: org.w3c.dom.BoxQuadOptions = ...): kotlin.Array<org.w3c.dom.DOMQuad>
    public final override /*1*/ /*fake_override*/ fun getClientRects(): kotlin.Array<org.w3c.dom.DOMRect>
    public final override /*1*/ /*fake_override*/ fun getElementsByClassName(/*0*/ classNames: kotlin.String): org.w3c.dom.HTMLCollection
    public final override /*1*/ /*fake_override*/ fun getElementsByTagName(/*0*/ qualifiedName: kotlin.String): org.w3c.dom.HTMLCollection
    public final override /*1*/ /*fake_override*/ fun getElementsByTagNameNS(/*0*/ namespace: kotlin.String?, /*1*/ localName: kotlin.String): org.w3c.dom.HTMLCollection
    public final override /*1*/ /*fake_override*/ fun getRootNode(/*0*/ options: org.w3c.dom.GetRootNodeOptions = ...): org.w3c.dom.Node
    public final override /*1*/ /*fake_override*/ fun hasAttribute(/*0*/ qualifiedName: kotlin.String): kotlin.Boolean
    public final override /*1*/ /*fake_override*/ fun hasAttributeNS(/*0*/ namespace: kotlin.String?, /*1*/ localName: kotlin.String): kotlin.Boolean
    public final override /*1*/ /*fake_override*/ fun hasAttributes(): kotlin.Boolean
    public final override /*1*/ /*fake_override*/ fun hasChildNodes(): kotlin.Boolean
    public final override /*1*/ /*fake_override*/ fun hasPointerCapture(/*0*/ pointerId: kotlin.Int): kotlin.Boolean
    public open override /*2*/ /*fake_override*/ fun hashCode(): kotlin.Int
    public final override /*1*/ /*fake_override*/ fun insertAdjacentElement(/*0*/ where: kotlin.String, /*1*/ element: org.w3c.dom.Element): org.w3c.dom.Element?
    public final override /*1*/ /*fake_override*/ fun insertAdjacentHTML(/*0*/ position: kotlin.String, /*1*/ text: kotlin.String): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun insertAdjacentText(/*0*/ where: kotlin.String, /*1*/ data: kotlin.String): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun insertBefore(/*0*/ node: org.w3c.dom.Node, /*1*/ child: org.w3c.dom.Node?): org.w3c.dom.Node
    public final override /*1*/ /*fake_override*/ fun isDefaultNamespace(/*0*/ namespace: kotlin.String?): kotlin.Boolean
    public final override /*1*/ /*fake_override*/ fun isEqualNode(/*0*/ otherNode: org.w3c.dom.Node?): kotlin.Boolean
    public final override /*1*/ /*fake_override*/ fun isSameNode(/*0*/ otherNode: org.w3c.dom.Node?): kotlin.Boolean
    public final override /*1*/ /*fake_override*/ fun lookupNamespaceURI(/*0*/ prefix: kotlin.String?): kotlin.String?
    public final override /*1*/ /*fake_override*/ fun lookupPrefix(/*0*/ namespace: kotlin.String?): kotlin.String?
    public final override /*1*/ /*fake_override*/ fun matches(/*0*/ selectors: kotlin.String): kotlin.Boolean
    public final override /*1*/ /*fake_override*/ fun normalize(): kotlin.Unit
    public abstract override /*1*/ /*fake_override*/ fun prepend(/*0*/ vararg nodes: dynamic /*kotlin.Array<out dynamic>*/): kotlin.Unit
    public abstract override /*1*/ /*fake_override*/ fun querySelector(/*0*/ selectors: kotlin.String): org.w3c.dom.Element?
    public abstract override /*1*/ /*fake_override*/ fun querySelectorAll(/*0*/ selectors: kotlin.String): org.w3c.dom.NodeList
    public final override /*1*/ /*fake_override*/ fun releasePointerCapture(/*0*/ pointerId: kotlin.Int): kotlin.Unit
    public abstract override /*1*/ /*fake_override*/ fun remove(): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun removeAttribute(/*0*/ qualifiedName: kotlin.String): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun removeAttributeNS(/*0*/ namespace: kotlin.String?, /*1*/ localName: kotlin.String): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun removeAttributeNode(/*0*/ attr: org.w3c.dom.Attr): org.w3c.dom.Attr
    public final override /*1*/ /*fake_override*/ fun removeChild(/*0*/ child: org.w3c.dom.Node): org.w3c.dom.Node
    public final override /*1*/ /*fake_override*/ fun removeEventListener(/*0*/ type: kotlin.String, /*1*/ callback: ((org.w3c.dom.events.Event) -> kotlin.Unit)?, /*2*/ options: dynamic = ...): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun removeEventListener(/*0*/ type: kotlin.String, /*1*/ callback: org.w3c.dom.events.EventListener?, /*2*/ options: dynamic = ...): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun replaceChild(/*0*/ node: org.w3c.dom.Node, /*1*/ child: org.w3c.dom.Node): org.w3c.dom.Node
    public abstract override /*1*/ /*fake_override*/ fun replaceWith(/*0*/ vararg nodes: dynamic /*kotlin.Array<out dynamic>*/): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun requestFullscreen(): kotlin.js.Promise<kotlin.Unit>
    public final override /*1*/ /*fake_override*/ fun scroll(/*0*/ x: kotlin.Double, /*1*/ y: kotlin.Double): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun scroll(/*0*/ options: org.w3c.dom.ScrollToOptions = ...): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun scrollBy(/*0*/ x: kotlin.Double, /*1*/ y: kotlin.Double): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun scrollBy(/*0*/ options: org.w3c.dom.ScrollToOptions = ...): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun scrollIntoView(): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun scrollIntoView(/*0*/ arg: dynamic): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun scrollTo(/*0*/ x: kotlin.Double, /*1*/ y: kotlin.Double): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun scrollTo(/*0*/ options: org.w3c.dom.ScrollToOptions = ...): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun setAttribute(/*0*/ qualifiedName: kotlin.String, /*1*/ value: kotlin.String): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun setAttributeNS(/*0*/ namespace: kotlin.String?, /*1*/ qualifiedName: kotlin.String, /*2*/ value: kotlin.String): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun setAttributeNode(/*0*/ attr: org.w3c.dom.Attr): org.w3c.dom.Attr?
    public final override /*1*/ /*fake_override*/ fun setAttributeNodeNS(/*0*/ attr: org.w3c.dom.Attr): org.w3c.dom.Attr?
    public final override /*1*/ /*fake_override*/ fun setPointerCapture(/*0*/ pointerId: kotlin.Int): kotlin.Unit
    public open override /*2*/ /*fake_override*/ fun toString(): kotlin.String
    public final override /*1*/ /*fake_override*/ fun webkitMatchesSelector(/*0*/ selectors: kotlin.String): kotlin.Boolean

    public companion object Companion {
        /*primary*/ private constructor Companion()
        public final val ATTRIBUTE_NODE: kotlin.Short
            public final fun <get-ATTRIBUTE_NODE>(): kotlin.Short
        public final val CDATA_SECTION_NODE: kotlin.Short
            public final fun <get-CDATA_SECTION_NODE>(): kotlin.Short
        public final val COMMENT_NODE: kotlin.Short
            public final fun <get-COMMENT_NODE>(): kotlin.Short
        public final val DOCUMENT_FRAGMENT_NODE: kotlin.Short
            public final fun <get-DOCUMENT_FRAGMENT_NODE>(): kotlin.Short
        public final val DOCUMENT_NODE: kotlin.Short
            public final fun <get-DOCUMENT_NODE>(): kotlin.Short
        public final val DOCUMENT_POSITION_CONTAINED_BY: kotlin.Short
            public final fun <get-DOCUMENT_POSITION_CONTAINED_BY>(): kotlin.Short
        public final val DOCUMENT_POSITION_CONTAINS: kotlin.Short
            public final fun <get-DOCUMENT_POSITION_CONTAINS>(): kotlin.Short
        public final val DOCUMENT_POSITION_DISCONNECTED: kotlin.Short
            public final fun <get-DOCUMENT_POSITION_DISCONNECTED>(): kotlin.Short
        public final val DOCUMENT_POSITION_FOLLOWING: kotlin.Short
            public final fun <get-DOCUMENT_POSITION_FOLLOWING>(): kotlin.Short
        public final val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: kotlin.Short
            public final fun <get-DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC>(): kotlin.Short
        public final val DOCUMENT_POSITION_PRECEDING: kotlin.Short
            public final fun <get-DOCUMENT_POSITION_PRECEDING>(): kotlin.Short
        public final val DOCUMENT_TYPE_NODE: kotlin.Short
            public final fun <get-DOCUMENT_TYPE_NODE>(): kotlin.Short
        public final val ELEMENT_NODE: kotlin.Short
            public final fun <get-ELEMENT_NODE>(): kotlin.Short
        public final val ENTITY_NODE: kotlin.Short
            public final fun <get-ENTITY_NODE>(): kotlin.Short
        public final val ENTITY_REFERENCE_NODE: kotlin.Short
            public final fun <get-ENTITY_REFERENCE_NODE>(): kotlin.Short
        public final val NOTATION_NODE: kotlin.Short
            public final fun <get-NOTATION_NODE>(): kotlin.Short
        public final val PROCESSING_INSTRUCTION_NODE: kotlin.Short
            public final fun <get-PROCESSING_INSTRUCTION_NODE>(): kotlin.Short
        public final val TEXT_NODE: kotlin.Short
            public final fun <get-TEXT_NODE>(): kotlin.Short
        public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
        public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
        public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
    }
}

public abstract external class SVGDefsElement : org.w3c.dom.svg.SVGGraphicsElement {
    /*primary*/ public constructor SVGDefsElement()
    public open override /*1*/ /*fake_override*/ val assignedSlot: org.w3c.dom.HTMLSlotElement?
        public open override /*1*/ /*fake_override*/ fun <get-assignedSlot>(): org.w3c.dom.HTMLSlotElement?
    public open override /*1*/ /*fake_override*/ val attributes: org.w3c.dom.NamedNodeMap
        public open override /*1*/ /*fake_override*/ fun <get-attributes>(): org.w3c.dom.NamedNodeMap
    public open override /*1*/ /*fake_override*/ val baseURI: kotlin.String
        public open override /*1*/ /*fake_override*/ fun <get-baseURI>(): kotlin.String
    public abstract override /*1*/ /*fake_override*/ val childElementCount: kotlin.Int
        public abstract override /*1*/ /*fake_override*/ fun <get-childElementCount>(): kotlin.Int
    public open override /*1*/ /*fake_override*/ val childNodes: org.w3c.dom.NodeList
        public open override /*1*/ /*fake_override*/ fun <get-childNodes>(): org.w3c.dom.NodeList
    public abstract override /*1*/ /*fake_override*/ val children: org.w3c.dom.HTMLCollection
        public abstract override /*1*/ /*fake_override*/ fun <get-children>(): org.w3c.dom.HTMLCollection
    public open override /*1*/ /*fake_override*/ val classList: org.w3c.dom.DOMTokenList
        public open override /*1*/ /*fake_override*/ fun <get-classList>(): org.w3c.dom.DOMTokenList
    public open override /*1*/ /*fake_override*/ var className: kotlin.String
        public open override /*1*/ /*fake_override*/ fun <get-className>(): kotlin.String
        public open override /*1*/ /*fake_override*/ fun <set-className>(/*0*/ <set-?>: kotlin.String): kotlin.Unit
    public open override /*1*/ /*fake_override*/ val clientHeight: kotlin.Int
        public open override /*1*/ /*fake_override*/ fun <get-clientHeight>(): kotlin.Int
    public open override /*1*/ /*fake_override*/ val clientLeft: kotlin.Int
        public open override /*1*/ /*fake_override*/ fun <get-clientLeft>(): kotlin.Int
    public open override /*1*/ /*fake_override*/ val clientTop: kotlin.Int
        public open override /*1*/ /*fake_override*/ fun <get-clientTop>(): kotlin.Int
    public open override /*1*/ /*fake_override*/ val clientWidth: kotlin.Int
        public open override /*1*/ /*fake_override*/ fun <get-clientWidth>(): kotlin.Int
    public open override /*1*/ /*fake_override*/ val correspondingElement: org.w3c.dom.svg.SVGElement?
        public open override /*1*/ /*fake_override*/ fun <get-correspondingElement>(): org.w3c.dom.svg.SVGElement?
    public open override /*1*/ /*fake_override*/ val correspondingUseElement: org.w3c.dom.svg.SVGUseElement?
        public open override /*1*/ /*fake_override*/ fun <get-correspondingUseElement>(): org.w3c.dom.svg.SVGUseElement?
    public open override /*1*/ /*fake_override*/ val dataset: org.w3c.dom.DOMStringMap
        public open override /*1*/ /*fake_override*/ fun <get-dataset>(): org.w3c.dom.DOMStringMap
    public open override /*1*/ /*fake_override*/ val firstChild: org.w3c.dom.Node?
        public open override /*1*/ /*fake_override*/ fun <get-firstChild>(): org.w3c.dom.Node?
    public open override /*1*/ /*fake_override*/ val firstElementChild: org.w3c.dom.Element?
        public open override /*1*/ /*fake_override*/ fun <get-firstElementChild>(): org.w3c.dom.Element?
    public open override /*1*/ /*fake_override*/ var id: kotlin.String
        public open override /*1*/ /*fake_override*/ fun <get-id>(): kotlin.String
        public open override /*1*/ /*fake_override*/ fun <set-id>(/*0*/ <set-?>: kotlin.String): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var innerHTML: kotlin.String
        public open override /*1*/ /*fake_override*/ fun <get-innerHTML>(): kotlin.String
        public open override /*1*/ /*fake_override*/ fun <set-innerHTML>(/*0*/ <set-?>: kotlin.String): kotlin.Unit
    public open override /*1*/ /*fake_override*/ val isConnected: kotlin.Boolean
        public open override /*1*/ /*fake_override*/ fun <get-isConnected>(): kotlin.Boolean
    public open override /*1*/ /*fake_override*/ val lastChild: org.w3c.dom.Node?
        public open override /*1*/ /*fake_override*/ fun <get-lastChild>(): org.w3c.dom.Node?
    public open override /*1*/ /*fake_override*/ val lastElementChild: org.w3c.dom.Element?
        public open override /*1*/ /*fake_override*/ fun <get-lastElementChild>(): org.w3c.dom.Element?
    public open override /*1*/ /*fake_override*/ val localName: kotlin.String
        public open override /*1*/ /*fake_override*/ fun <get-localName>(): kotlin.String
    public open override /*1*/ /*fake_override*/ val namespaceURI: kotlin.String?
        public open override /*1*/ /*fake_override*/ fun <get-namespaceURI>(): kotlin.String?
    public open override /*1*/ /*fake_override*/ val nextElementSibling: org.w3c.dom.Element?
        public open override /*1*/ /*fake_override*/ fun <get-nextElementSibling>(): org.w3c.dom.Element?
    public open override /*1*/ /*fake_override*/ val nextSibling: org.w3c.dom.Node?
        public open override /*1*/ /*fake_override*/ fun <get-nextSibling>(): org.w3c.dom.Node?
    public open override /*1*/ /*fake_override*/ val nodeName: kotlin.String
        public open override /*1*/ /*fake_override*/ fun <get-nodeName>(): kotlin.String
    public open override /*1*/ /*fake_override*/ val nodeType: kotlin.Short
        public open override /*1*/ /*fake_override*/ fun <get-nodeType>(): kotlin.Short
    public open override /*1*/ /*fake_override*/ var nodeValue: kotlin.String?
        public open override /*1*/ /*fake_override*/ fun <get-nodeValue>(): kotlin.String?
        public open override /*1*/ /*fake_override*/ fun <set-nodeValue>(/*0*/ <set-?>: kotlin.String?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onabort: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onabort>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onabort>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onblur: ((org.w3c.dom.events.FocusEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onblur>(): ((org.w3c.dom.events.FocusEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onblur>(/*0*/ value: ((org.w3c.dom.events.FocusEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var oncancel: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-oncancel>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-oncancel>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var oncanplay: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-oncanplay>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-oncanplay>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var oncanplaythrough: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-oncanplaythrough>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-oncanplaythrough>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onchange: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onchange>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onchange>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onclick: ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onclick>(): ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onclick>(/*0*/ value: ((org.w3c.dom.events.MouseEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onclose: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onclose>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onclose>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var oncontextmenu: ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-oncontextmenu>(): ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-oncontextmenu>(/*0*/ value: ((org.w3c.dom.events.MouseEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var oncuechange: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-oncuechange>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-oncuechange>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ondblclick: ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ondblclick>(): ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ondblclick>(/*0*/ value: ((org.w3c.dom.events.MouseEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ondrag: ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ondrag>(): ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ondrag>(/*0*/ value: ((org.w3c.dom.DragEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ondragend: ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ondragend>(): ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ondragend>(/*0*/ value: ((org.w3c.dom.DragEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ondragenter: ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ondragenter>(): ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ondragenter>(/*0*/ value: ((org.w3c.dom.DragEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ondragexit: ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ondragexit>(): ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ondragexit>(/*0*/ value: ((org.w3c.dom.DragEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ondragleave: ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ondragleave>(): ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ondragleave>(/*0*/ value: ((org.w3c.dom.DragEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ondragover: ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ondragover>(): ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ondragover>(/*0*/ value: ((org.w3c.dom.DragEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ondragstart: ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ondragstart>(): ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ondragstart>(/*0*/ value: ((org.w3c.dom.DragEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ondrop: ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ondrop>(): ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ondrop>(/*0*/ value: ((org.w3c.dom.DragEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ondurationchange: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ondurationchange>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ondurationchange>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onemptied: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onemptied>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onemptied>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onended: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onended>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onended>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onerror: ((dynamic, kotlin.String, kotlin.Int, kotlin.Int, kotlin.Any?) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onerror>(): ((dynamic, kotlin.String, kotlin.Int, kotlin.Int, kotlin.Any?) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onerror>(/*0*/ value: ((dynamic, kotlin.String, kotlin.Int, kotlin.Int, kotlin.Any?) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onfocus: ((org.w3c.dom.events.FocusEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onfocus>(): ((org.w3c.dom.events.FocusEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onfocus>(/*0*/ value: ((org.w3c.dom.events.FocusEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ongotpointercapture: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ongotpointercapture>(): ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ongotpointercapture>(/*0*/ value: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var oninput: ((org.w3c.dom.events.InputEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-oninput>(): ((org.w3c.dom.events.InputEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-oninput>(/*0*/ value: ((org.w3c.dom.events.InputEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var oninvalid: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-oninvalid>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-oninvalid>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onkeydown: ((org.w3c.dom.events.KeyboardEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onkeydown>(): ((org.w3c.dom.events.KeyboardEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onkeydown>(/*0*/ value: ((org.w3c.dom.events.KeyboardEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onkeypress: ((org.w3c.dom.events.KeyboardEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onkeypress>(): ((org.w3c.dom.events.KeyboardEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onkeypress>(/*0*/ value: ((org.w3c.dom.events.KeyboardEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onkeyup: ((org.w3c.dom.events.KeyboardEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onkeyup>(): ((org.w3c.dom.events.KeyboardEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onkeyup>(/*0*/ value: ((org.w3c.dom.events.KeyboardEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onload: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onload>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onload>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onloadeddata: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onloadeddata>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onloadeddata>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onloadedmetadata: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onloadedmetadata>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onloadedmetadata>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onloadend: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onloadend>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onloadend>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onloadstart: ((org.w3c.xhr.ProgressEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onloadstart>(): ((org.w3c.xhr.ProgressEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onloadstart>(/*0*/ value: ((org.w3c.xhr.ProgressEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onlostpointercapture: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onlostpointercapture>(): ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onlostpointercapture>(/*0*/ value: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onmousedown: ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onmousedown>(): ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onmousedown>(/*0*/ value: ((org.w3c.dom.events.MouseEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onmouseenter: ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onmouseenter>(): ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onmouseenter>(/*0*/ value: ((org.w3c.dom.events.MouseEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onmouseleave: ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onmouseleave>(): ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onmouseleave>(/*0*/ value: ((org.w3c.dom.events.MouseEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onmousemove: ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onmousemove>(): ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onmousemove>(/*0*/ value: ((org.w3c.dom.events.MouseEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onmouseout: ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onmouseout>(): ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onmouseout>(/*0*/ value: ((org.w3c.dom.events.MouseEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onmouseover: ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onmouseover>(): ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onmouseover>(/*0*/ value: ((org.w3c.dom.events.MouseEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onmouseup: ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onmouseup>(): ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onmouseup>(/*0*/ value: ((org.w3c.dom.events.MouseEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onpause: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onpause>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onpause>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onplay: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onplay>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onplay>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onplaying: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onplaying>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onplaying>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onpointercancel: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onpointercancel>(): ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onpointercancel>(/*0*/ value: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onpointerdown: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onpointerdown>(): ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onpointerdown>(/*0*/ value: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onpointerenter: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onpointerenter>(): ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onpointerenter>(/*0*/ value: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onpointerleave: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onpointerleave>(): ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onpointerleave>(/*0*/ value: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onpointermove: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onpointermove>(): ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onpointermove>(/*0*/ value: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onpointerout: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onpointerout>(): ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onpointerout>(/*0*/ value: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onpointerover: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onpointerover>(): ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onpointerover>(/*0*/ value: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onpointerup: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onpointerup>(): ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onpointerup>(/*0*/ value: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onprogress: ((org.w3c.xhr.ProgressEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onprogress>(): ((org.w3c.xhr.ProgressEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onprogress>(/*0*/ value: ((org.w3c.xhr.ProgressEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onratechange: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onratechange>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onratechange>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onreset: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onreset>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onreset>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onresize: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onresize>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onresize>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onscroll: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onscroll>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onscroll>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onseeked: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onseeked>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onseeked>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onseeking: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onseeking>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onseeking>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onselect: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onselect>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onselect>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onshow: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onshow>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onshow>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onstalled: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onstalled>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onstalled>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onsubmit: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onsubmit>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onsubmit>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onsuspend: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onsuspend>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onsuspend>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ontimeupdate: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ontimeupdate>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ontimeupdate>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ontoggle: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ontoggle>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ontoggle>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onvolumechange: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onvolumechange>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onvolumechange>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onwaiting: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onwaiting>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onwaiting>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onwheel: ((org.w3c.dom.events.WheelEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onwheel>(): ((org.w3c.dom.events.WheelEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onwheel>(/*0*/ value: ((org.w3c.dom.events.WheelEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var outerHTML: kotlin.String
        public open override /*1*/ /*fake_override*/ fun <get-outerHTML>(): kotlin.String
        public open override /*1*/ /*fake_override*/ fun <set-outerHTML>(/*0*/ <set-?>: kotlin.String): kotlin.Unit
    public open override /*1*/ /*fake_override*/ val ownerDocument: org.w3c.dom.Document?
        public open override /*1*/ /*fake_override*/ fun <get-ownerDocument>(): org.w3c.dom.Document?
    public open override /*1*/ /*fake_override*/ val ownerSVGElement: org.w3c.dom.svg.SVGSVGElement?
        public open override /*1*/ /*fake_override*/ fun <get-ownerSVGElement>(): org.w3c.dom.svg.SVGSVGElement?
    public open override /*1*/ /*fake_override*/ val parentElement: org.w3c.dom.Element?
        public open override /*1*/ /*fake_override*/ fun <get-parentElement>(): org.w3c.dom.Element?
    public open override /*1*/ /*fake_override*/ val parentNode: org.w3c.dom.Node?
        public open override /*1*/ /*fake_override*/ fun <get-parentNode>(): org.w3c.dom.Node?
    public open override /*1*/ /*fake_override*/ val prefix: kotlin.String?
        public open override /*1*/ /*fake_override*/ fun <get-prefix>(): kotlin.String?
    public open override /*1*/ /*fake_override*/ val previousElementSibling: org.w3c.dom.Element?
        public open override /*1*/ /*fake_override*/ fun <get-previousElementSibling>(): org.w3c.dom.Element?
    public open override /*1*/ /*fake_override*/ val previousSibling: org.w3c.dom.Node?
        public open override /*1*/ /*fake_override*/ fun <get-previousSibling>(): org.w3c.dom.Node?
    public abstract override /*1*/ /*fake_override*/ val requiredExtensions: org.w3c.dom.svg.SVGStringList
        public abstract override /*1*/ /*fake_override*/ fun <get-requiredExtensions>(): org.w3c.dom.svg.SVGStringList
    public open override /*1*/ /*fake_override*/ val scrollHeight: kotlin.Int
        public open override /*1*/ /*fake_override*/ fun <get-scrollHeight>(): kotlin.Int
    public open override /*1*/ /*fake_override*/ var scrollLeft: kotlin.Double
        public open override /*1*/ /*fake_override*/ fun <get-scrollLeft>(): kotlin.Double
        public open override /*1*/ /*fake_override*/ fun <set-scrollLeft>(/*0*/ <set-?>: kotlin.Double): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var scrollTop: kotlin.Double
        public open override /*1*/ /*fake_override*/ fun <get-scrollTop>(): kotlin.Double
        public open override /*1*/ /*fake_override*/ fun <set-scrollTop>(/*0*/ <set-?>: kotlin.Double): kotlin.Unit
    public open override /*1*/ /*fake_override*/ val scrollWidth: kotlin.Int
        public open override /*1*/ /*fake_override*/ fun <get-scrollWidth>(): kotlin.Int
    public open override /*1*/ /*fake_override*/ val shadowRoot: org.w3c.dom.ShadowRoot?
        public open override /*1*/ /*fake_override*/ fun <get-shadowRoot>(): org.w3c.dom.ShadowRoot?
    public open override /*1*/ /*fake_override*/ var slot: kotlin.String
        public open override /*1*/ /*fake_override*/ fun <get-slot>(): kotlin.String
        public open override /*1*/ /*fake_override*/ fun <set-slot>(/*0*/ <set-?>: kotlin.String): kotlin.Unit
    public abstract override /*1*/ /*fake_override*/ val style: org.w3c.dom.css.CSSStyleDeclaration
        public abstract override /*1*/ /*fake_override*/ fun <get-style>(): org.w3c.dom.css.CSSStyleDeclaration
    public abstract override /*1*/ /*fake_override*/ val systemLanguage: org.w3c.dom.svg.SVGStringList
        public abstract override /*1*/ /*fake_override*/ fun <get-systemLanguage>(): org.w3c.dom.svg.SVGStringList
    public open override /*1*/ /*fake_override*/ var tabIndex: kotlin.Int
        public open override /*1*/ /*fake_override*/ fun <get-tabIndex>(): kotlin.Int
        public open override /*1*/ /*fake_override*/ fun <set-tabIndex>(/*0*/ <set-?>: kotlin.Int): kotlin.Unit
    public open override /*1*/ /*fake_override*/ val tagName: kotlin.String
        public open override /*1*/ /*fake_override*/ fun <get-tagName>(): kotlin.String
    public open override /*1*/ /*fake_override*/ var textContent: kotlin.String?
        public open override /*1*/ /*fake_override*/ fun <get-textContent>(): kotlin.String?
        public open override /*1*/ /*fake_override*/ fun <set-textContent>(/*0*/ <set-?>: kotlin.String?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ val transform: org.w3c.dom.svg.SVGAnimatedTransformList
        public open override /*1*/ /*fake_override*/ fun <get-transform>(): org.w3c.dom.svg.SVGAnimatedTransformList
    public open override /*1*/ /*fake_override*/ val viewportElement: org.w3c.dom.svg.SVGElement?
        public open override /*1*/ /*fake_override*/ fun <get-viewportElement>(): org.w3c.dom.svg.SVGElement?
    public final override /*1*/ /*fake_override*/ fun addEventListener(/*0*/ type: kotlin.String, /*1*/ callback: ((org.w3c.dom.events.Event) -> kotlin.Unit)?, /*2*/ options: dynamic = ...): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun addEventListener(/*0*/ type: kotlin.String, /*1*/ callback: org.w3c.dom.events.EventListener?, /*2*/ options: dynamic = ...): kotlin.Unit
    public abstract override /*1*/ /*fake_override*/ fun after(/*0*/ vararg nodes: dynamic /*kotlin.Array<out dynamic>*/): kotlin.Unit
    public abstract override /*1*/ /*fake_override*/ fun append(/*0*/ vararg nodes: dynamic /*kotlin.Array<out dynamic>*/): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun appendChild(/*0*/ node: org.w3c.dom.Node): org.w3c.dom.Node
    public final override /*1*/ /*fake_override*/ fun attachShadow(/*0*/ init: org.w3c.dom.ShadowRootInit): org.w3c.dom.ShadowRoot
    public abstract override /*1*/ /*fake_override*/ fun before(/*0*/ vararg nodes: dynamic /*kotlin.Array<out dynamic>*/): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun blur(): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun cloneNode(/*0*/ deep: kotlin.Boolean = ...): org.w3c.dom.Node
    public final override /*1*/ /*fake_override*/ fun closest(/*0*/ selectors: kotlin.String): org.w3c.dom.Element?
    public final override /*1*/ /*fake_override*/ fun compareDocumentPosition(/*0*/ other: org.w3c.dom.Node): kotlin.Short
    public final override /*1*/ /*fake_override*/ fun contains(/*0*/ other: org.w3c.dom.Node?): kotlin.Boolean
    public abstract override /*1*/ /*fake_override*/ fun convertPointFromNode(/*0*/ point: org.w3c.dom.DOMPointInit, /*1*/ from: dynamic, /*2*/ options: org.w3c.dom.ConvertCoordinateOptions = ...): org.w3c.dom.DOMPoint
    public abstract override /*1*/ /*fake_override*/ fun convertQuadFromNode(/*0*/ quad: dynamic, /*1*/ from: dynamic, /*2*/ options: org.w3c.dom.ConvertCoordinateOptions = ...): org.w3c.dom.DOMQuad
    public abstract override /*1*/ /*fake_override*/ fun convertRectFromNode(/*0*/ rect: org.w3c.dom.DOMRectReadOnly, /*1*/ from: dynamic, /*2*/ options: org.w3c.dom.ConvertCoordinateOptions = ...): org.w3c.dom.DOMQuad
    public final override /*1*/ /*fake_override*/ fun dispatchEvent(/*0*/ event: org.w3c.dom.events.Event): kotlin.Boolean
    public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
    public final override /*1*/ /*fake_override*/ fun focus(): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun getAttribute(/*0*/ qualifiedName: kotlin.String): kotlin.String?
    public final override /*1*/ /*fake_override*/ fun getAttributeNS(/*0*/ namespace: kotlin.String?, /*1*/ localName: kotlin.String): kotlin.String?
    public final override /*1*/ /*fake_override*/ fun getAttributeNames(): kotlin.Array<kotlin.String>
    public final override /*1*/ /*fake_override*/ fun getAttributeNode(/*0*/ qualifiedName: kotlin.String): org.w3c.dom.Attr?
    public final override /*1*/ /*fake_override*/ fun getAttributeNodeNS(/*0*/ namespace: kotlin.String?, /*1*/ localName: kotlin.String): org.w3c.dom.Attr?
    public final override /*1*/ /*fake_override*/ fun getBBox(/*0*/ options: org.w3c.dom.svg.SVGBoundingBoxOptions = ...): org.w3c.dom.DOMRect
    public final override /*1*/ /*fake_override*/ fun getBoundingClientRect(): org.w3c.dom.DOMRect
    public abstract override /*1*/ /*fake_override*/ fun getBoxQuads(/*0*/ options: org.w3c.dom.BoxQuadOptions = ...): kotlin.Array<org.w3c.dom.DOMQuad>
    public final override /*1*/ /*fake_override*/ fun getCTM(): org.w3c.dom.DOMMatrix?
    public final override /*1*/ /*fake_override*/ fun getClientRects(): kotlin.Array<org.w3c.dom.DOMRect>
    public final override /*1*/ /*fake_override*/ fun getElementsByClassName(/*0*/ classNames: kotlin.String): org.w3c.dom.HTMLCollection
    public final override /*1*/ /*fake_override*/ fun getElementsByTagName(/*0*/ qualifiedName: kotlin.String): org.w3c.dom.HTMLCollection
    public final override /*1*/ /*fake_override*/ fun getElementsByTagNameNS(/*0*/ namespace: kotlin.String?, /*1*/ localName: kotlin.String): org.w3c.dom.HTMLCollection
    public final override /*1*/ /*fake_override*/ fun getRootNode(/*0*/ options: org.w3c.dom.GetRootNodeOptions = ...): org.w3c.dom.Node
    public final override /*1*/ /*fake_override*/ fun getScreenCTM(): org.w3c.dom.DOMMatrix?
    public final override /*1*/ /*fake_override*/ fun hasAttribute(/*0*/ qualifiedName: kotlin.String): kotlin.Boolean
    public final override /*1*/ /*fake_override*/ fun hasAttributeNS(/*0*/ namespace: kotlin.String?, /*1*/ localName: kotlin.String): kotlin.Boolean
    public final override /*1*/ /*fake_override*/ fun hasAttributes(): kotlin.Boolean
    public final override /*1*/ /*fake_override*/ fun hasChildNodes(): kotlin.Boolean
    public final override /*1*/ /*fake_override*/ fun hasPointerCapture(/*0*/ pointerId: kotlin.Int): kotlin.Boolean
    public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
    public final override /*1*/ /*fake_override*/ fun insertAdjacentElement(/*0*/ where: kotlin.String, /*1*/ element: org.w3c.dom.Element): org.w3c.dom.Element?
    public final override /*1*/ /*fake_override*/ fun insertAdjacentHTML(/*0*/ position: kotlin.String, /*1*/ text: kotlin.String): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun insertAdjacentText(/*0*/ where: kotlin.String, /*1*/ data: kotlin.String): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun insertBefore(/*0*/ node: org.w3c.dom.Node, /*1*/ child: org.w3c.dom.Node?): org.w3c.dom.Node
    public final override /*1*/ /*fake_override*/ fun isDefaultNamespace(/*0*/ namespace: kotlin.String?): kotlin.Boolean
    public final override /*1*/ /*fake_override*/ fun isEqualNode(/*0*/ otherNode: org.w3c.dom.Node?): kotlin.Boolean
    public final override /*1*/ /*fake_override*/ fun isSameNode(/*0*/ otherNode: org.w3c.dom.Node?): kotlin.Boolean
    public final override /*1*/ /*fake_override*/ fun lookupNamespaceURI(/*0*/ prefix: kotlin.String?): kotlin.String?
    public final override /*1*/ /*fake_override*/ fun lookupPrefix(/*0*/ namespace: kotlin.String?): kotlin.String?
    public final override /*1*/ /*fake_override*/ fun matches(/*0*/ selectors: kotlin.String): kotlin.Boolean
    public final override /*1*/ /*fake_override*/ fun normalize(): kotlin.Unit
    public abstract override /*1*/ /*fake_override*/ fun prepend(/*0*/ vararg nodes: dynamic /*kotlin.Array<out dynamic>*/): kotlin.Unit
    public abstract override /*1*/ /*fake_override*/ fun querySelector(/*0*/ selectors: kotlin.String): org.w3c.dom.Element?
    public abstract override /*1*/ /*fake_override*/ fun querySelectorAll(/*0*/ selectors: kotlin.String): org.w3c.dom.NodeList
    public final override /*1*/ /*fake_override*/ fun releasePointerCapture(/*0*/ pointerId: kotlin.Int): kotlin.Unit
    public abstract override /*1*/ /*fake_override*/ fun remove(): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun removeAttribute(/*0*/ qualifiedName: kotlin.String): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun removeAttributeNS(/*0*/ namespace: kotlin.String?, /*1*/ localName: kotlin.String): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun removeAttributeNode(/*0*/ attr: org.w3c.dom.Attr): org.w3c.dom.Attr
    public final override /*1*/ /*fake_override*/ fun removeChild(/*0*/ child: org.w3c.dom.Node): org.w3c.dom.Node
    public final override /*1*/ /*fake_override*/ fun removeEventListener(/*0*/ type: kotlin.String, /*1*/ callback: ((org.w3c.dom.events.Event) -> kotlin.Unit)?, /*2*/ options: dynamic = ...): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun removeEventListener(/*0*/ type: kotlin.String, /*1*/ callback: org.w3c.dom.events.EventListener?, /*2*/ options: dynamic = ...): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun replaceChild(/*0*/ node: org.w3c.dom.Node, /*1*/ child: org.w3c.dom.Node): org.w3c.dom.Node
    public abstract override /*1*/ /*fake_override*/ fun replaceWith(/*0*/ vararg nodes: dynamic /*kotlin.Array<out dynamic>*/): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun requestFullscreen(): kotlin.js.Promise<kotlin.Unit>
    public final override /*1*/ /*fake_override*/ fun scroll(/*0*/ x: kotlin.Double, /*1*/ y: kotlin.Double): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun scroll(/*0*/ options: org.w3c.dom.ScrollToOptions = ...): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun scrollBy(/*0*/ x: kotlin.Double, /*1*/ y: kotlin.Double): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun scrollBy(/*0*/ options: org.w3c.dom.ScrollToOptions = ...): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun scrollIntoView(): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun scrollIntoView(/*0*/ arg: dynamic): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun scrollTo(/*0*/ x: kotlin.Double, /*1*/ y: kotlin.Double): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun scrollTo(/*0*/ options: org.w3c.dom.ScrollToOptions = ...): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun setAttribute(/*0*/ qualifiedName: kotlin.String, /*1*/ value: kotlin.String): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun setAttributeNS(/*0*/ namespace: kotlin.String?, /*1*/ qualifiedName: kotlin.String, /*2*/ value: kotlin.String): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun setAttributeNode(/*0*/ attr: org.w3c.dom.Attr): org.w3c.dom.Attr?
    public final override /*1*/ /*fake_override*/ fun setAttributeNodeNS(/*0*/ attr: org.w3c.dom.Attr): org.w3c.dom.Attr?
    public final override /*1*/ /*fake_override*/ fun setPointerCapture(/*0*/ pointerId: kotlin.Int): kotlin.Unit
    public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
    public final override /*1*/ /*fake_override*/ fun webkitMatchesSelector(/*0*/ selectors: kotlin.String): kotlin.Boolean

    public companion object Companion {
        /*primary*/ private constructor Companion()
        public final val ATTRIBUTE_NODE: kotlin.Short
            public final fun <get-ATTRIBUTE_NODE>(): kotlin.Short
        public final val CDATA_SECTION_NODE: kotlin.Short
            public final fun <get-CDATA_SECTION_NODE>(): kotlin.Short
        public final val COMMENT_NODE: kotlin.Short
            public final fun <get-COMMENT_NODE>(): kotlin.Short
        public final val DOCUMENT_FRAGMENT_NODE: kotlin.Short
            public final fun <get-DOCUMENT_FRAGMENT_NODE>(): kotlin.Short
        public final val DOCUMENT_NODE: kotlin.Short
            public final fun <get-DOCUMENT_NODE>(): kotlin.Short
        public final val DOCUMENT_POSITION_CONTAINED_BY: kotlin.Short
            public final fun <get-DOCUMENT_POSITION_CONTAINED_BY>(): kotlin.Short
        public final val DOCUMENT_POSITION_CONTAINS: kotlin.Short
            public final fun <get-DOCUMENT_POSITION_CONTAINS>(): kotlin.Short
        public final val DOCUMENT_POSITION_DISCONNECTED: kotlin.Short
            public final fun <get-DOCUMENT_POSITION_DISCONNECTED>(): kotlin.Short
        public final val DOCUMENT_POSITION_FOLLOWING: kotlin.Short
            public final fun <get-DOCUMENT_POSITION_FOLLOWING>(): kotlin.Short
        public final val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: kotlin.Short
            public final fun <get-DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC>(): kotlin.Short
        public final val DOCUMENT_POSITION_PRECEDING: kotlin.Short
            public final fun <get-DOCUMENT_POSITION_PRECEDING>(): kotlin.Short
        public final val DOCUMENT_TYPE_NODE: kotlin.Short
            public final fun <get-DOCUMENT_TYPE_NODE>(): kotlin.Short
        public final val ELEMENT_NODE: kotlin.Short
            public final fun <get-ELEMENT_NODE>(): kotlin.Short
        public final val ENTITY_NODE: kotlin.Short
            public final fun <get-ENTITY_NODE>(): kotlin.Short
        public final val ENTITY_REFERENCE_NODE: kotlin.Short
            public final fun <get-ENTITY_REFERENCE_NODE>(): kotlin.Short
        public final val NOTATION_NODE: kotlin.Short
            public final fun <get-NOTATION_NODE>(): kotlin.Short
        public final val PROCESSING_INSTRUCTION_NODE: kotlin.Short
            public final fun <get-PROCESSING_INSTRUCTION_NODE>(): kotlin.Short
        public final val TEXT_NODE: kotlin.Short
            public final fun <get-TEXT_NODE>(): kotlin.Short
        public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
        public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
        public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
    }
}

public abstract external class SVGDescElement : org.w3c.dom.svg.SVGElement {
    /*primary*/ public constructor SVGDescElement()
    public open override /*1*/ /*fake_override*/ val assignedSlot: org.w3c.dom.HTMLSlotElement?
        public open override /*1*/ /*fake_override*/ fun <get-assignedSlot>(): org.w3c.dom.HTMLSlotElement?
    public open override /*1*/ /*fake_override*/ val attributes: org.w3c.dom.NamedNodeMap
        public open override /*1*/ /*fake_override*/ fun <get-attributes>(): org.w3c.dom.NamedNodeMap
    public open override /*1*/ /*fake_override*/ val baseURI: kotlin.String
        public open override /*1*/ /*fake_override*/ fun <get-baseURI>(): kotlin.String
    public abstract override /*1*/ /*fake_override*/ val childElementCount: kotlin.Int
        public abstract override /*1*/ /*fake_override*/ fun <get-childElementCount>(): kotlin.Int
    public open override /*1*/ /*fake_override*/ val childNodes: org.w3c.dom.NodeList
        public open override /*1*/ /*fake_override*/ fun <get-childNodes>(): org.w3c.dom.NodeList
    public abstract override /*1*/ /*fake_override*/ val children: org.w3c.dom.HTMLCollection
        public abstract override /*1*/ /*fake_override*/ fun <get-children>(): org.w3c.dom.HTMLCollection
    public open override /*1*/ /*fake_override*/ val classList: org.w3c.dom.DOMTokenList
        public open override /*1*/ /*fake_override*/ fun <get-classList>(): org.w3c.dom.DOMTokenList
    public open override /*1*/ /*fake_override*/ var className: kotlin.String
        public open override /*1*/ /*fake_override*/ fun <get-className>(): kotlin.String
        public open override /*1*/ /*fake_override*/ fun <set-className>(/*0*/ <set-?>: kotlin.String): kotlin.Unit
    public open override /*1*/ /*fake_override*/ val clientHeight: kotlin.Int
        public open override /*1*/ /*fake_override*/ fun <get-clientHeight>(): kotlin.Int
    public open override /*1*/ /*fake_override*/ val clientLeft: kotlin.Int
        public open override /*1*/ /*fake_override*/ fun <get-clientLeft>(): kotlin.Int
    public open override /*1*/ /*fake_override*/ val clientTop: kotlin.Int
        public open override /*1*/ /*fake_override*/ fun <get-clientTop>(): kotlin.Int
    public open override /*1*/ /*fake_override*/ val clientWidth: kotlin.Int
        public open override /*1*/ /*fake_override*/ fun <get-clientWidth>(): kotlin.Int
    public open override /*1*/ /*fake_override*/ val correspondingElement: org.w3c.dom.svg.SVGElement?
        public open override /*1*/ /*fake_override*/ fun <get-correspondingElement>(): org.w3c.dom.svg.SVGElement?
    public open override /*1*/ /*fake_override*/ val correspondingUseElement: org.w3c.dom.svg.SVGUseElement?
        public open override /*1*/ /*fake_override*/ fun <get-correspondingUseElement>(): org.w3c.dom.svg.SVGUseElement?
    public open override /*1*/ /*fake_override*/ val dataset: org.w3c.dom.DOMStringMap
        public open override /*1*/ /*fake_override*/ fun <get-dataset>(): org.w3c.dom.DOMStringMap
    public open override /*1*/ /*fake_override*/ val firstChild: org.w3c.dom.Node?
        public open override /*1*/ /*fake_override*/ fun <get-firstChild>(): org.w3c.dom.Node?
    public open override /*1*/ /*fake_override*/ val firstElementChild: org.w3c.dom.Element?
        public open override /*1*/ /*fake_override*/ fun <get-firstElementChild>(): org.w3c.dom.Element?
    public open override /*1*/ /*fake_override*/ var id: kotlin.String
        public open override /*1*/ /*fake_override*/ fun <get-id>(): kotlin.String
        public open override /*1*/ /*fake_override*/ fun <set-id>(/*0*/ <set-?>: kotlin.String): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var innerHTML: kotlin.String
        public open override /*1*/ /*fake_override*/ fun <get-innerHTML>(): kotlin.String
        public open override /*1*/ /*fake_override*/ fun <set-innerHTML>(/*0*/ <set-?>: kotlin.String): kotlin.Unit
    public open override /*1*/ /*fake_override*/ val isConnected: kotlin.Boolean
        public open override /*1*/ /*fake_override*/ fun <get-isConnected>(): kotlin.Boolean
    public open override /*1*/ /*fake_override*/ val lastChild: org.w3c.dom.Node?
        public open override /*1*/ /*fake_override*/ fun <get-lastChild>(): org.w3c.dom.Node?
    public open override /*1*/ /*fake_override*/ val lastElementChild: org.w3c.dom.Element?
        public open override /*1*/ /*fake_override*/ fun <get-lastElementChild>(): org.w3c.dom.Element?
    public open override /*1*/ /*fake_override*/ val localName: kotlin.String
        public open override /*1*/ /*fake_override*/ fun <get-localName>(): kotlin.String
    public open override /*1*/ /*fake_override*/ val namespaceURI: kotlin.String?
        public open override /*1*/ /*fake_override*/ fun <get-namespaceURI>(): kotlin.String?
    public open override /*1*/ /*fake_override*/ val nextElementSibling: org.w3c.dom.Element?
        public open override /*1*/ /*fake_override*/ fun <get-nextElementSibling>(): org.w3c.dom.Element?
    public open override /*1*/ /*fake_override*/ val nextSibling: org.w3c.dom.Node?
        public open override /*1*/ /*fake_override*/ fun <get-nextSibling>(): org.w3c.dom.Node?
    public open override /*1*/ /*fake_override*/ val nodeName: kotlin.String
        public open override /*1*/ /*fake_override*/ fun <get-nodeName>(): kotlin.String
    public open override /*1*/ /*fake_override*/ val nodeType: kotlin.Short
        public open override /*1*/ /*fake_override*/ fun <get-nodeType>(): kotlin.Short
    public open override /*1*/ /*fake_override*/ var nodeValue: kotlin.String?
        public open override /*1*/ /*fake_override*/ fun <get-nodeValue>(): kotlin.String?
        public open override /*1*/ /*fake_override*/ fun <set-nodeValue>(/*0*/ <set-?>: kotlin.String?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onabort: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onabort>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onabort>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onblur: ((org.w3c.dom.events.FocusEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onblur>(): ((org.w3c.dom.events.FocusEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onblur>(/*0*/ value: ((org.w3c.dom.events.FocusEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var oncancel: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-oncancel>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-oncancel>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var oncanplay: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-oncanplay>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-oncanplay>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var oncanplaythrough: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-oncanplaythrough>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-oncanplaythrough>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onchange: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onchange>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onchange>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onclick: ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onclick>(): ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onclick>(/*0*/ value: ((org.w3c.dom.events.MouseEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onclose: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onclose>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onclose>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var oncontextmenu: ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-oncontextmenu>(): ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-oncontextmenu>(/*0*/ value: ((org.w3c.dom.events.MouseEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var oncuechange: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-oncuechange>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-oncuechange>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ondblclick: ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ondblclick>(): ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ondblclick>(/*0*/ value: ((org.w3c.dom.events.MouseEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ondrag: ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ondrag>(): ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ondrag>(/*0*/ value: ((org.w3c.dom.DragEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ondragend: ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ondragend>(): ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ondragend>(/*0*/ value: ((org.w3c.dom.DragEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ondragenter: ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ondragenter>(): ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ondragenter>(/*0*/ value: ((org.w3c.dom.DragEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ondragexit: ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ondragexit>(): ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ondragexit>(/*0*/ value: ((org.w3c.dom.DragEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ondragleave: ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ondragleave>(): ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ondragleave>(/*0*/ value: ((org.w3c.dom.DragEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ondragover: ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ondragover>(): ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ondragover>(/*0*/ value: ((org.w3c.dom.DragEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ondragstart: ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ondragstart>(): ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ondragstart>(/*0*/ value: ((org.w3c.dom.DragEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ondrop: ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ondrop>(): ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ondrop>(/*0*/ value: ((org.w3c.dom.DragEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ondurationchange: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ondurationchange>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ondurationchange>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onemptied: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onemptied>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onemptied>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onended: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onended>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onended>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onerror: ((dynamic, kotlin.String, kotlin.Int, kotlin.Int, kotlin.Any?) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onerror>(): ((dynamic, kotlin.String, kotlin.Int, kotlin.Int, kotlin.Any?) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onerror>(/*0*/ value: ((dynamic, kotlin.String, kotlin.Int, kotlin.Int, kotlin.Any?) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onfocus: ((org.w3c.dom.events.FocusEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onfocus>(): ((org.w3c.dom.events.FocusEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onfocus>(/*0*/ value: ((org.w3c.dom.events.FocusEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ongotpointercapture: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ongotpointercapture>(): ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ongotpointercapture>(/*0*/ value: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var oninput: ((org.w3c.dom.events.InputEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-oninput>(): ((org.w3c.dom.events.InputEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-oninput>(/*0*/ value: ((org.w3c.dom.events.InputEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var oninvalid: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-oninvalid>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-oninvalid>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onkeydown: ((org.w3c.dom.events.KeyboardEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onkeydown>(): ((org.w3c.dom.events.KeyboardEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onkeydown>(/*0*/ value: ((org.w3c.dom.events.KeyboardEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onkeypress: ((org.w3c.dom.events.KeyboardEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onkeypress>(): ((org.w3c.dom.events.KeyboardEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onkeypress>(/*0*/ value: ((org.w3c.dom.events.KeyboardEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onkeyup: ((org.w3c.dom.events.KeyboardEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onkeyup>(): ((org.w3c.dom.events.KeyboardEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onkeyup>(/*0*/ value: ((org.w3c.dom.events.KeyboardEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onload: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onload>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onload>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onloadeddata: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onloadeddata>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onloadeddata>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onloadedmetadata: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onloadedmetadata>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onloadedmetadata>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onloadend: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onloadend>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onloadend>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onloadstart: ((org.w3c.xhr.ProgressEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onloadstart>(): ((org.w3c.xhr.ProgressEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onloadstart>(/*0*/ value: ((org.w3c.xhr.ProgressEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onlostpointercapture: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onlostpointercapture>(): ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onlostpointercapture>(/*0*/ value: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onmousedown: ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onmousedown>(): ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onmousedown>(/*0*/ value: ((org.w3c.dom.events.MouseEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onmouseenter: ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onmouseenter>(): ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onmouseenter>(/*0*/ value: ((org.w3c.dom.events.MouseEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onmouseleave: ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onmouseleave>(): ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onmouseleave>(/*0*/ value: ((org.w3c.dom.events.MouseEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onmousemove: ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onmousemove>(): ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onmousemove>(/*0*/ value: ((org.w3c.dom.events.MouseEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onmouseout: ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onmouseout>(): ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onmouseout>(/*0*/ value: ((org.w3c.dom.events.MouseEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onmouseover: ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onmouseover>(): ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onmouseover>(/*0*/ value: ((org.w3c.dom.events.MouseEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onmouseup: ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onmouseup>(): ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onmouseup>(/*0*/ value: ((org.w3c.dom.events.MouseEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onpause: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onpause>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onpause>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onplay: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onplay>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onplay>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onplaying: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onplaying>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onplaying>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onpointercancel: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onpointercancel>(): ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onpointercancel>(/*0*/ value: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onpointerdown: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onpointerdown>(): ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onpointerdown>(/*0*/ value: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onpointerenter: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onpointerenter>(): ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onpointerenter>(/*0*/ value: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onpointerleave: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onpointerleave>(): ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onpointerleave>(/*0*/ value: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onpointermove: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onpointermove>(): ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onpointermove>(/*0*/ value: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onpointerout: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onpointerout>(): ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onpointerout>(/*0*/ value: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onpointerover: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onpointerover>(): ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onpointerover>(/*0*/ value: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onpointerup: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onpointerup>(): ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onpointerup>(/*0*/ value: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onprogress: ((org.w3c.xhr.ProgressEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onprogress>(): ((org.w3c.xhr.ProgressEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onprogress>(/*0*/ value: ((org.w3c.xhr.ProgressEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onratechange: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onratechange>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onratechange>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onreset: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onreset>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onreset>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onresize: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onresize>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onresize>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onscroll: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onscroll>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onscroll>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onseeked: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onseeked>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onseeked>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onseeking: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onseeking>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onseeking>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onselect: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onselect>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onselect>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onshow: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onshow>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onshow>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onstalled: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onstalled>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onstalled>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onsubmit: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onsubmit>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onsubmit>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onsuspend: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onsuspend>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onsuspend>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ontimeupdate: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ontimeupdate>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ontimeupdate>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ontoggle: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ontoggle>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ontoggle>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onvolumechange: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onvolumechange>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onvolumechange>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onwaiting: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onwaiting>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onwaiting>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onwheel: ((org.w3c.dom.events.WheelEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onwheel>(): ((org.w3c.dom.events.WheelEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onwheel>(/*0*/ value: ((org.w3c.dom.events.WheelEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var outerHTML: kotlin.String
        public open override /*1*/ /*fake_override*/ fun <get-outerHTML>(): kotlin.String
        public open override /*1*/ /*fake_override*/ fun <set-outerHTML>(/*0*/ <set-?>: kotlin.String): kotlin.Unit
    public open override /*1*/ /*fake_override*/ val ownerDocument: org.w3c.dom.Document?
        public open override /*1*/ /*fake_override*/ fun <get-ownerDocument>(): org.w3c.dom.Document?
    public open override /*1*/ /*fake_override*/ val ownerSVGElement: org.w3c.dom.svg.SVGSVGElement?
        public open override /*1*/ /*fake_override*/ fun <get-ownerSVGElement>(): org.w3c.dom.svg.SVGSVGElement?
    public open override /*1*/ /*fake_override*/ val parentElement: org.w3c.dom.Element?
        public open override /*1*/ /*fake_override*/ fun <get-parentElement>(): org.w3c.dom.Element?
    public open override /*1*/ /*fake_override*/ val parentNode: org.w3c.dom.Node?
        public open override /*1*/ /*fake_override*/ fun <get-parentNode>(): org.w3c.dom.Node?
    public open override /*1*/ /*fake_override*/ val prefix: kotlin.String?
        public open override /*1*/ /*fake_override*/ fun <get-prefix>(): kotlin.String?
    public open override /*1*/ /*fake_override*/ val previousElementSibling: org.w3c.dom.Element?
        public open override /*1*/ /*fake_override*/ fun <get-previousElementSibling>(): org.w3c.dom.Element?
    public open override /*1*/ /*fake_override*/ val previousSibling: org.w3c.dom.Node?
        public open override /*1*/ /*fake_override*/ fun <get-previousSibling>(): org.w3c.dom.Node?
    public open override /*1*/ /*fake_override*/ val scrollHeight: kotlin.Int
        public open override /*1*/ /*fake_override*/ fun <get-scrollHeight>(): kotlin.Int
    public open override /*1*/ /*fake_override*/ var scrollLeft: kotlin.Double
        public open override /*1*/ /*fake_override*/ fun <get-scrollLeft>(): kotlin.Double
        public open override /*1*/ /*fake_override*/ fun <set-scrollLeft>(/*0*/ <set-?>: kotlin.Double): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var scrollTop: kotlin.Double
        public open override /*1*/ /*fake_override*/ fun <get-scrollTop>(): kotlin.Double
        public open override /*1*/ /*fake_override*/ fun <set-scrollTop>(/*0*/ <set-?>: kotlin.Double): kotlin.Unit
    public open override /*1*/ /*fake_override*/ val scrollWidth: kotlin.Int
        public open override /*1*/ /*fake_override*/ fun <get-scrollWidth>(): kotlin.Int
    public open override /*1*/ /*fake_override*/ val shadowRoot: org.w3c.dom.ShadowRoot?
        public open override /*1*/ /*fake_override*/ fun <get-shadowRoot>(): org.w3c.dom.ShadowRoot?
    public open override /*1*/ /*fake_override*/ var slot: kotlin.String
        public open override /*1*/ /*fake_override*/ fun <get-slot>(): kotlin.String
        public open override /*1*/ /*fake_override*/ fun <set-slot>(/*0*/ <set-?>: kotlin.String): kotlin.Unit
    public abstract override /*1*/ /*fake_override*/ val style: org.w3c.dom.css.CSSStyleDeclaration
        public abstract override /*1*/ /*fake_override*/ fun <get-style>(): org.w3c.dom.css.CSSStyleDeclaration
    public open override /*1*/ /*fake_override*/ var tabIndex: kotlin.Int
        public open override /*1*/ /*fake_override*/ fun <get-tabIndex>(): kotlin.Int
        public open override /*1*/ /*fake_override*/ fun <set-tabIndex>(/*0*/ <set-?>: kotlin.Int): kotlin.Unit
    public open override /*1*/ /*fake_override*/ val tagName: kotlin.String
        public open override /*1*/ /*fake_override*/ fun <get-tagName>(): kotlin.String
    public open override /*1*/ /*fake_override*/ var textContent: kotlin.String?
        public open override /*1*/ /*fake_override*/ fun <get-textContent>(): kotlin.String?
        public open override /*1*/ /*fake_override*/ fun <set-textContent>(/*0*/ <set-?>: kotlin.String?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ val viewportElement: org.w3c.dom.svg.SVGElement?
        public open override /*1*/ /*fake_override*/ fun <get-viewportElement>(): org.w3c.dom.svg.SVGElement?
    public final override /*1*/ /*fake_override*/ fun addEventListener(/*0*/ type: kotlin.String, /*1*/ callback: ((org.w3c.dom.events.Event) -> kotlin.Unit)?, /*2*/ options: dynamic = ...): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun addEventListener(/*0*/ type: kotlin.String, /*1*/ callback: org.w3c.dom.events.EventListener?, /*2*/ options: dynamic = ...): kotlin.Unit
    public abstract override /*1*/ /*fake_override*/ fun after(/*0*/ vararg nodes: dynamic /*kotlin.Array<out dynamic>*/): kotlin.Unit
    public abstract override /*1*/ /*fake_override*/ fun append(/*0*/ vararg nodes: dynamic /*kotlin.Array<out dynamic>*/): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun appendChild(/*0*/ node: org.w3c.dom.Node): org.w3c.dom.Node
    public final override /*1*/ /*fake_override*/ fun attachShadow(/*0*/ init: org.w3c.dom.ShadowRootInit): org.w3c.dom.ShadowRoot
    public abstract override /*1*/ /*fake_override*/ fun before(/*0*/ vararg nodes: dynamic /*kotlin.Array<out dynamic>*/): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun blur(): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun cloneNode(/*0*/ deep: kotlin.Boolean = ...): org.w3c.dom.Node
    public final override /*1*/ /*fake_override*/ fun closest(/*0*/ selectors: kotlin.String): org.w3c.dom.Element?
    public final override /*1*/ /*fake_override*/ fun compareDocumentPosition(/*0*/ other: org.w3c.dom.Node): kotlin.Short
    public final override /*1*/ /*fake_override*/ fun contains(/*0*/ other: org.w3c.dom.Node?): kotlin.Boolean
    public abstract override /*1*/ /*fake_override*/ fun convertPointFromNode(/*0*/ point: org.w3c.dom.DOMPointInit, /*1*/ from: dynamic, /*2*/ options: org.w3c.dom.ConvertCoordinateOptions = ...): org.w3c.dom.DOMPoint
    public abstract override /*1*/ /*fake_override*/ fun convertQuadFromNode(/*0*/ quad: dynamic, /*1*/ from: dynamic, /*2*/ options: org.w3c.dom.ConvertCoordinateOptions = ...): org.w3c.dom.DOMQuad
    public abstract override /*1*/ /*fake_override*/ fun convertRectFromNode(/*0*/ rect: org.w3c.dom.DOMRectReadOnly, /*1*/ from: dynamic, /*2*/ options: org.w3c.dom.ConvertCoordinateOptions = ...): org.w3c.dom.DOMQuad
    public final override /*1*/ /*fake_override*/ fun dispatchEvent(/*0*/ event: org.w3c.dom.events.Event): kotlin.Boolean
    public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
    public final override /*1*/ /*fake_override*/ fun focus(): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun getAttribute(/*0*/ qualifiedName: kotlin.String): kotlin.String?
    public final override /*1*/ /*fake_override*/ fun getAttributeNS(/*0*/ namespace: kotlin.String?, /*1*/ localName: kotlin.String): kotlin.String?
    public final override /*1*/ /*fake_override*/ fun getAttributeNames(): kotlin.Array<kotlin.String>
    public final override /*1*/ /*fake_override*/ fun getAttributeNode(/*0*/ qualifiedName: kotlin.String): org.w3c.dom.Attr?
    public final override /*1*/ /*fake_override*/ fun getAttributeNodeNS(/*0*/ namespace: kotlin.String?, /*1*/ localName: kotlin.String): org.w3c.dom.Attr?
    public final override /*1*/ /*fake_override*/ fun getBoundingClientRect(): org.w3c.dom.DOMRect
    public abstract override /*1*/ /*fake_override*/ fun getBoxQuads(/*0*/ options: org.w3c.dom.BoxQuadOptions = ...): kotlin.Array<org.w3c.dom.DOMQuad>
    public final override /*1*/ /*fake_override*/ fun getClientRects(): kotlin.Array<org.w3c.dom.DOMRect>
    public final override /*1*/ /*fake_override*/ fun getElementsByClassName(/*0*/ classNames: kotlin.String): org.w3c.dom.HTMLCollection
    public final override /*1*/ /*fake_override*/ fun getElementsByTagName(/*0*/ qualifiedName: kotlin.String): org.w3c.dom.HTMLCollection
    public final override /*1*/ /*fake_override*/ fun getElementsByTagNameNS(/*0*/ namespace: kotlin.String?, /*1*/ localName: kotlin.String): org.w3c.dom.HTMLCollection
    public final override /*1*/ /*fake_override*/ fun getRootNode(/*0*/ options: org.w3c.dom.GetRootNodeOptions = ...): org.w3c.dom.Node
    public final override /*1*/ /*fake_override*/ fun hasAttribute(/*0*/ qualifiedName: kotlin.String): kotlin.Boolean
    public final override /*1*/ /*fake_override*/ fun hasAttributeNS(/*0*/ namespace: kotlin.String?, /*1*/ localName: kotlin.String): kotlin.Boolean
    public final override /*1*/ /*fake_override*/ fun hasAttributes(): kotlin.Boolean
    public final override /*1*/ /*fake_override*/ fun hasChildNodes(): kotlin.Boolean
    public final override /*1*/ /*fake_override*/ fun hasPointerCapture(/*0*/ pointerId: kotlin.Int): kotlin.Boolean
    public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
    public final override /*1*/ /*fake_override*/ fun insertAdjacentElement(/*0*/ where: kotlin.String, /*1*/ element: org.w3c.dom.Element): org.w3c.dom.Element?
    public final override /*1*/ /*fake_override*/ fun insertAdjacentHTML(/*0*/ position: kotlin.String, /*1*/ text: kotlin.String): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun insertAdjacentText(/*0*/ where: kotlin.String, /*1*/ data: kotlin.String): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun insertBefore(/*0*/ node: org.w3c.dom.Node, /*1*/ child: org.w3c.dom.Node?): org.w3c.dom.Node
    public final override /*1*/ /*fake_override*/ fun isDefaultNamespace(/*0*/ namespace: kotlin.String?): kotlin.Boolean
    public final override /*1*/ /*fake_override*/ fun isEqualNode(/*0*/ otherNode: org.w3c.dom.Node?): kotlin.Boolean
    public final override /*1*/ /*fake_override*/ fun isSameNode(/*0*/ otherNode: org.w3c.dom.Node?): kotlin.Boolean
    public final override /*1*/ /*fake_override*/ fun lookupNamespaceURI(/*0*/ prefix: kotlin.String?): kotlin.String?
    public final override /*1*/ /*fake_override*/ fun lookupPrefix(/*0*/ namespace: kotlin.String?): kotlin.String?
    public final override /*1*/ /*fake_override*/ fun matches(/*0*/ selectors: kotlin.String): kotlin.Boolean
    public final override /*1*/ /*fake_override*/ fun normalize(): kotlin.Unit
    public abstract override /*1*/ /*fake_override*/ fun prepend(/*0*/ vararg nodes: dynamic /*kotlin.Array<out dynamic>*/): kotlin.Unit
    public abstract override /*1*/ /*fake_override*/ fun querySelector(/*0*/ selectors: kotlin.String): org.w3c.dom.Element?
    public abstract override /*1*/ /*fake_override*/ fun querySelectorAll(/*0*/ selectors: kotlin.String): org.w3c.dom.NodeList
    public final override /*1*/ /*fake_override*/ fun releasePointerCapture(/*0*/ pointerId: kotlin.Int): kotlin.Unit
    public abstract override /*1*/ /*fake_override*/ fun remove(): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun removeAttribute(/*0*/ qualifiedName: kotlin.String): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun removeAttributeNS(/*0*/ namespace: kotlin.String?, /*1*/ localName: kotlin.String): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun removeAttributeNode(/*0*/ attr: org.w3c.dom.Attr): org.w3c.dom.Attr
    public final override /*1*/ /*fake_override*/ fun removeChild(/*0*/ child: org.w3c.dom.Node): org.w3c.dom.Node
    public final override /*1*/ /*fake_override*/ fun removeEventListener(/*0*/ type: kotlin.String, /*1*/ callback: ((org.w3c.dom.events.Event) -> kotlin.Unit)?, /*2*/ options: dynamic = ...): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun removeEventListener(/*0*/ type: kotlin.String, /*1*/ callback: org.w3c.dom.events.EventListener?, /*2*/ options: dynamic = ...): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun replaceChild(/*0*/ node: org.w3c.dom.Node, /*1*/ child: org.w3c.dom.Node): org.w3c.dom.Node
    public abstract override /*1*/ /*fake_override*/ fun replaceWith(/*0*/ vararg nodes: dynamic /*kotlin.Array<out dynamic>*/): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun requestFullscreen(): kotlin.js.Promise<kotlin.Unit>
    public final override /*1*/ /*fake_override*/ fun scroll(/*0*/ x: kotlin.Double, /*1*/ y: kotlin.Double): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun scroll(/*0*/ options: org.w3c.dom.ScrollToOptions = ...): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun scrollBy(/*0*/ x: kotlin.Double, /*1*/ y: kotlin.Double): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun scrollBy(/*0*/ options: org.w3c.dom.ScrollToOptions = ...): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun scrollIntoView(): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun scrollIntoView(/*0*/ arg: dynamic): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun scrollTo(/*0*/ x: kotlin.Double, /*1*/ y: kotlin.Double): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun scrollTo(/*0*/ options: org.w3c.dom.ScrollToOptions = ...): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun setAttribute(/*0*/ qualifiedName: kotlin.String, /*1*/ value: kotlin.String): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun setAttributeNS(/*0*/ namespace: kotlin.String?, /*1*/ qualifiedName: kotlin.String, /*2*/ value: kotlin.String): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun setAttributeNode(/*0*/ attr: org.w3c.dom.Attr): org.w3c.dom.Attr?
    public final override /*1*/ /*fake_override*/ fun setAttributeNodeNS(/*0*/ attr: org.w3c.dom.Attr): org.w3c.dom.Attr?
    public final override /*1*/ /*fake_override*/ fun setPointerCapture(/*0*/ pointerId: kotlin.Int): kotlin.Unit
    public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
    public final override /*1*/ /*fake_override*/ fun webkitMatchesSelector(/*0*/ selectors: kotlin.String): kotlin.Boolean

    public companion object Companion {
        /*primary*/ private constructor Companion()
        public final val ATTRIBUTE_NODE: kotlin.Short
            public final fun <get-ATTRIBUTE_NODE>(): kotlin.Short
        public final val CDATA_SECTION_NODE: kotlin.Short
            public final fun <get-CDATA_SECTION_NODE>(): kotlin.Short
        public final val COMMENT_NODE: kotlin.Short
            public final fun <get-COMMENT_NODE>(): kotlin.Short
        public final val DOCUMENT_FRAGMENT_NODE: kotlin.Short
            public final fun <get-DOCUMENT_FRAGMENT_NODE>(): kotlin.Short
        public final val DOCUMENT_NODE: kotlin.Short
            public final fun <get-DOCUMENT_NODE>(): kotlin.Short
        public final val DOCUMENT_POSITION_CONTAINED_BY: kotlin.Short
            public final fun <get-DOCUMENT_POSITION_CONTAINED_BY>(): kotlin.Short
        public final val DOCUMENT_POSITION_CONTAINS: kotlin.Short
            public final fun <get-DOCUMENT_POSITION_CONTAINS>(): kotlin.Short
        public final val DOCUMENT_POSITION_DISCONNECTED: kotlin.Short
            public final fun <get-DOCUMENT_POSITION_DISCONNECTED>(): kotlin.Short
        public final val DOCUMENT_POSITION_FOLLOWING: kotlin.Short
            public final fun <get-DOCUMENT_POSITION_FOLLOWING>(): kotlin.Short
        public final val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: kotlin.Short
            public final fun <get-DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC>(): kotlin.Short
        public final val DOCUMENT_POSITION_PRECEDING: kotlin.Short
            public final fun <get-DOCUMENT_POSITION_PRECEDING>(): kotlin.Short
        public final val DOCUMENT_TYPE_NODE: kotlin.Short
            public final fun <get-DOCUMENT_TYPE_NODE>(): kotlin.Short
        public final val ELEMENT_NODE: kotlin.Short
            public final fun <get-ELEMENT_NODE>(): kotlin.Short
        public final val ENTITY_NODE: kotlin.Short
            public final fun <get-ENTITY_NODE>(): kotlin.Short
        public final val ENTITY_REFERENCE_NODE: kotlin.Short
            public final fun <get-ENTITY_REFERENCE_NODE>(): kotlin.Short
        public final val NOTATION_NODE: kotlin.Short
            public final fun <get-NOTATION_NODE>(): kotlin.Short
        public final val PROCESSING_INSTRUCTION_NODE: kotlin.Short
            public final fun <get-PROCESSING_INSTRUCTION_NODE>(): kotlin.Short
        public final val TEXT_NODE: kotlin.Short
            public final fun <get-TEXT_NODE>(): kotlin.Short
        public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
        public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
        public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
    }
}

public abstract external class SVGElement : org.w3c.dom.Element, org.w3c.dom.css.ElementCSSInlineStyle, org.w3c.dom.GlobalEventHandlers, org.w3c.dom.svg.SVGElementInstance {
    /*primary*/ public constructor SVGElement()
    public open override /*1*/ /*fake_override*/ val assignedSlot: org.w3c.dom.HTMLSlotElement?
        public open override /*1*/ /*fake_override*/ fun <get-assignedSlot>(): org.w3c.dom.HTMLSlotElement?
    public open override /*1*/ /*fake_override*/ val attributes: org.w3c.dom.NamedNodeMap
        public open override /*1*/ /*fake_override*/ fun <get-attributes>(): org.w3c.dom.NamedNodeMap
    public open override /*1*/ /*fake_override*/ val baseURI: kotlin.String
        public open override /*1*/ /*fake_override*/ fun <get-baseURI>(): kotlin.String
    public abstract override /*1*/ /*fake_override*/ val childElementCount: kotlin.Int
        public abstract override /*1*/ /*fake_override*/ fun <get-childElementCount>(): kotlin.Int
    public open override /*1*/ /*fake_override*/ val childNodes: org.w3c.dom.NodeList
        public open override /*1*/ /*fake_override*/ fun <get-childNodes>(): org.w3c.dom.NodeList
    public abstract override /*1*/ /*fake_override*/ val children: org.w3c.dom.HTMLCollection
        public abstract override /*1*/ /*fake_override*/ fun <get-children>(): org.w3c.dom.HTMLCollection
    public open override /*1*/ /*fake_override*/ val classList: org.w3c.dom.DOMTokenList
        public open override /*1*/ /*fake_override*/ fun <get-classList>(): org.w3c.dom.DOMTokenList
    public open override /*1*/ /*fake_override*/ var className: kotlin.String
        public open override /*1*/ /*fake_override*/ fun <get-className>(): kotlin.String
        public open override /*1*/ /*fake_override*/ fun <set-className>(/*0*/ <set-?>: kotlin.String): kotlin.Unit
    public open override /*1*/ /*fake_override*/ val clientHeight: kotlin.Int
        public open override /*1*/ /*fake_override*/ fun <get-clientHeight>(): kotlin.Int
    public open override /*1*/ /*fake_override*/ val clientLeft: kotlin.Int
        public open override /*1*/ /*fake_override*/ fun <get-clientLeft>(): kotlin.Int
    public open override /*1*/ /*fake_override*/ val clientTop: kotlin.Int
        public open override /*1*/ /*fake_override*/ fun <get-clientTop>(): kotlin.Int
    public open override /*1*/ /*fake_override*/ val clientWidth: kotlin.Int
        public open override /*1*/ /*fake_override*/ fun <get-clientWidth>(): kotlin.Int
    public open override /*1*/ /*fake_override*/ val correspondingElement: org.w3c.dom.svg.SVGElement?
        public open override /*1*/ /*fake_override*/ fun <get-correspondingElement>(): org.w3c.dom.svg.SVGElement?
    public open override /*1*/ /*fake_override*/ val correspondingUseElement: org.w3c.dom.svg.SVGUseElement?
        public open override /*1*/ /*fake_override*/ fun <get-correspondingUseElement>(): org.w3c.dom.svg.SVGUseElement?
    public open val dataset: org.w3c.dom.DOMStringMap
        public open fun <get-dataset>(): org.w3c.dom.DOMStringMap
    public open override /*1*/ /*fake_override*/ val firstChild: org.w3c.dom.Node?
        public open override /*1*/ /*fake_override*/ fun <get-firstChild>(): org.w3c.dom.Node?
    public open override /*1*/ /*fake_override*/ val firstElementChild: org.w3c.dom.Element?
        public open override /*1*/ /*fake_override*/ fun <get-firstElementChild>(): org.w3c.dom.Element?
    public open override /*1*/ /*fake_override*/ var id: kotlin.String
        public open override /*1*/ /*fake_override*/ fun <get-id>(): kotlin.String
        public open override /*1*/ /*fake_override*/ fun <set-id>(/*0*/ <set-?>: kotlin.String): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var innerHTML: kotlin.String
        public open override /*1*/ /*fake_override*/ fun <get-innerHTML>(): kotlin.String
        public open override /*1*/ /*fake_override*/ fun <set-innerHTML>(/*0*/ <set-?>: kotlin.String): kotlin.Unit
    public open override /*1*/ /*fake_override*/ val isConnected: kotlin.Boolean
        public open override /*1*/ /*fake_override*/ fun <get-isConnected>(): kotlin.Boolean
    public open override /*1*/ /*fake_override*/ val lastChild: org.w3c.dom.Node?
        public open override /*1*/ /*fake_override*/ fun <get-lastChild>(): org.w3c.dom.Node?
    public open override /*1*/ /*fake_override*/ val lastElementChild: org.w3c.dom.Element?
        public open override /*1*/ /*fake_override*/ fun <get-lastElementChild>(): org.w3c.dom.Element?
    public open override /*1*/ /*fake_override*/ val localName: kotlin.String
        public open override /*1*/ /*fake_override*/ fun <get-localName>(): kotlin.String
    public open override /*1*/ /*fake_override*/ val namespaceURI: kotlin.String?
        public open override /*1*/ /*fake_override*/ fun <get-namespaceURI>(): kotlin.String?
    public open override /*1*/ /*fake_override*/ val nextElementSibling: org.w3c.dom.Element?
        public open override /*1*/ /*fake_override*/ fun <get-nextElementSibling>(): org.w3c.dom.Element?
    public open override /*1*/ /*fake_override*/ val nextSibling: org.w3c.dom.Node?
        public open override /*1*/ /*fake_override*/ fun <get-nextSibling>(): org.w3c.dom.Node?
    public open override /*1*/ /*fake_override*/ val nodeName: kotlin.String
        public open override /*1*/ /*fake_override*/ fun <get-nodeName>(): kotlin.String
    public open override /*1*/ /*fake_override*/ val nodeType: kotlin.Short
        public open override /*1*/ /*fake_override*/ fun <get-nodeType>(): kotlin.Short
    public open override /*1*/ /*fake_override*/ var nodeValue: kotlin.String?
        public open override /*1*/ /*fake_override*/ fun <get-nodeValue>(): kotlin.String?
        public open override /*1*/ /*fake_override*/ fun <set-nodeValue>(/*0*/ <set-?>: kotlin.String?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onabort: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onabort>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onabort>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onblur: ((org.w3c.dom.events.FocusEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onblur>(): ((org.w3c.dom.events.FocusEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onblur>(/*0*/ value: ((org.w3c.dom.events.FocusEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var oncancel: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-oncancel>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-oncancel>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var oncanplay: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-oncanplay>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-oncanplay>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var oncanplaythrough: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-oncanplaythrough>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-oncanplaythrough>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onchange: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onchange>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onchange>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onclick: ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onclick>(): ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onclick>(/*0*/ value: ((org.w3c.dom.events.MouseEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onclose: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onclose>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onclose>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var oncontextmenu: ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-oncontextmenu>(): ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-oncontextmenu>(/*0*/ value: ((org.w3c.dom.events.MouseEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var oncuechange: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-oncuechange>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-oncuechange>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ondblclick: ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ondblclick>(): ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ondblclick>(/*0*/ value: ((org.w3c.dom.events.MouseEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ondrag: ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ondrag>(): ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ondrag>(/*0*/ value: ((org.w3c.dom.DragEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ondragend: ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ondragend>(): ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ondragend>(/*0*/ value: ((org.w3c.dom.DragEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ondragenter: ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ondragenter>(): ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ondragenter>(/*0*/ value: ((org.w3c.dom.DragEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ondragexit: ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ondragexit>(): ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ondragexit>(/*0*/ value: ((org.w3c.dom.DragEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ondragleave: ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ondragleave>(): ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ondragleave>(/*0*/ value: ((org.w3c.dom.DragEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ondragover: ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ondragover>(): ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ondragover>(/*0*/ value: ((org.w3c.dom.DragEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ondragstart: ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ondragstart>(): ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ondragstart>(/*0*/ value: ((org.w3c.dom.DragEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ondrop: ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ondrop>(): ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ondrop>(/*0*/ value: ((org.w3c.dom.DragEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ondurationchange: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ondurationchange>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ondurationchange>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onemptied: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onemptied>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onemptied>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onended: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onended>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onended>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onerror: ((dynamic, kotlin.String, kotlin.Int, kotlin.Int, kotlin.Any?) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onerror>(): ((dynamic, kotlin.String, kotlin.Int, kotlin.Int, kotlin.Any?) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onerror>(/*0*/ value: ((dynamic, kotlin.String, kotlin.Int, kotlin.Int, kotlin.Any?) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onfocus: ((org.w3c.dom.events.FocusEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onfocus>(): ((org.w3c.dom.events.FocusEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onfocus>(/*0*/ value: ((org.w3c.dom.events.FocusEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ongotpointercapture: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ongotpointercapture>(): ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ongotpointercapture>(/*0*/ value: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var oninput: ((org.w3c.dom.events.InputEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-oninput>(): ((org.w3c.dom.events.InputEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-oninput>(/*0*/ value: ((org.w3c.dom.events.InputEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var oninvalid: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-oninvalid>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-oninvalid>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onkeydown: ((org.w3c.dom.events.KeyboardEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onkeydown>(): ((org.w3c.dom.events.KeyboardEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onkeydown>(/*0*/ value: ((org.w3c.dom.events.KeyboardEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onkeypress: ((org.w3c.dom.events.KeyboardEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onkeypress>(): ((org.w3c.dom.events.KeyboardEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onkeypress>(/*0*/ value: ((org.w3c.dom.events.KeyboardEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onkeyup: ((org.w3c.dom.events.KeyboardEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onkeyup>(): ((org.w3c.dom.events.KeyboardEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onkeyup>(/*0*/ value: ((org.w3c.dom.events.KeyboardEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onload: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onload>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onload>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onloadeddata: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onloadeddata>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onloadeddata>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onloadedmetadata: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onloadedmetadata>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onloadedmetadata>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onloadend: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onloadend>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onloadend>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onloadstart: ((org.w3c.xhr.ProgressEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onloadstart>(): ((org.w3c.xhr.ProgressEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onloadstart>(/*0*/ value: ((org.w3c.xhr.ProgressEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onlostpointercapture: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onlostpointercapture>(): ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onlostpointercapture>(/*0*/ value: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onmousedown: ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onmousedown>(): ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onmousedown>(/*0*/ value: ((org.w3c.dom.events.MouseEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onmouseenter: ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onmouseenter>(): ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onmouseenter>(/*0*/ value: ((org.w3c.dom.events.MouseEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onmouseleave: ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onmouseleave>(): ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onmouseleave>(/*0*/ value: ((org.w3c.dom.events.MouseEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onmousemove: ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onmousemove>(): ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onmousemove>(/*0*/ value: ((org.w3c.dom.events.MouseEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onmouseout: ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onmouseout>(): ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onmouseout>(/*0*/ value: ((org.w3c.dom.events.MouseEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onmouseover: ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onmouseover>(): ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onmouseover>(/*0*/ value: ((org.w3c.dom.events.MouseEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onmouseup: ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onmouseup>(): ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onmouseup>(/*0*/ value: ((org.w3c.dom.events.MouseEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onpause: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onpause>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onpause>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onplay: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onplay>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onplay>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onplaying: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onplaying>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onplaying>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onpointercancel: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onpointercancel>(): ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onpointercancel>(/*0*/ value: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onpointerdown: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onpointerdown>(): ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onpointerdown>(/*0*/ value: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onpointerenter: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onpointerenter>(): ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onpointerenter>(/*0*/ value: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onpointerleave: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onpointerleave>(): ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onpointerleave>(/*0*/ value: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onpointermove: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onpointermove>(): ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onpointermove>(/*0*/ value: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onpointerout: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onpointerout>(): ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onpointerout>(/*0*/ value: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onpointerover: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onpointerover>(): ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onpointerover>(/*0*/ value: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onpointerup: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onpointerup>(): ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onpointerup>(/*0*/ value: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onprogress: ((org.w3c.xhr.ProgressEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onprogress>(): ((org.w3c.xhr.ProgressEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onprogress>(/*0*/ value: ((org.w3c.xhr.ProgressEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onratechange: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onratechange>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onratechange>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onreset: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onreset>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onreset>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onresize: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onresize>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onresize>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onscroll: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onscroll>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onscroll>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onseeked: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onseeked>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onseeked>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onseeking: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onseeking>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onseeking>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onselect: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onselect>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onselect>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onshow: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onshow>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onshow>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onstalled: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onstalled>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onstalled>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onsubmit: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onsubmit>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onsubmit>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onsuspend: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onsuspend>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onsuspend>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ontimeupdate: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ontimeupdate>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ontimeupdate>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ontoggle: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ontoggle>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ontoggle>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onvolumechange: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onvolumechange>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onvolumechange>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onwaiting: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onwaiting>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onwaiting>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onwheel: ((org.w3c.dom.events.WheelEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onwheel>(): ((org.w3c.dom.events.WheelEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onwheel>(/*0*/ value: ((org.w3c.dom.events.WheelEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var outerHTML: kotlin.String
        public open override /*1*/ /*fake_override*/ fun <get-outerHTML>(): kotlin.String
        public open override /*1*/ /*fake_override*/ fun <set-outerHTML>(/*0*/ <set-?>: kotlin.String): kotlin.Unit
    public open override /*1*/ /*fake_override*/ val ownerDocument: org.w3c.dom.Document?
        public open override /*1*/ /*fake_override*/ fun <get-ownerDocument>(): org.w3c.dom.Document?
    public open val ownerSVGElement: org.w3c.dom.svg.SVGSVGElement?
        public open fun <get-ownerSVGElement>(): org.w3c.dom.svg.SVGSVGElement?
    public open override /*1*/ /*fake_override*/ val parentElement: org.w3c.dom.Element?
        public open override /*1*/ /*fake_override*/ fun <get-parentElement>(): org.w3c.dom.Element?
    public open override /*1*/ /*fake_override*/ val parentNode: org.w3c.dom.Node?
        public open override /*1*/ /*fake_override*/ fun <get-parentNode>(): org.w3c.dom.Node?
    public open override /*1*/ /*fake_override*/ val prefix: kotlin.String?
        public open override /*1*/ /*fake_override*/ fun <get-prefix>(): kotlin.String?
    public open override /*1*/ /*fake_override*/ val previousElementSibling: org.w3c.dom.Element?
        public open override /*1*/ /*fake_override*/ fun <get-previousElementSibling>(): org.w3c.dom.Element?
    public open override /*1*/ /*fake_override*/ val previousSibling: org.w3c.dom.Node?
        public open override /*1*/ /*fake_override*/ fun <get-previousSibling>(): org.w3c.dom.Node?
    public open override /*1*/ /*fake_override*/ val scrollHeight: kotlin.Int
        public open override /*1*/ /*fake_override*/ fun <get-scrollHeight>(): kotlin.Int
    public open override /*1*/ /*fake_override*/ var scrollLeft: kotlin.Double
        public open override /*1*/ /*fake_override*/ fun <get-scrollLeft>(): kotlin.Double
        public open override /*1*/ /*fake_override*/ fun <set-scrollLeft>(/*0*/ <set-?>: kotlin.Double): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var scrollTop: kotlin.Double
        public open override /*1*/ /*fake_override*/ fun <get-scrollTop>(): kotlin.Double
        public open override /*1*/ /*fake_override*/ fun <set-scrollTop>(/*0*/ <set-?>: kotlin.Double): kotlin.Unit
    public open override /*1*/ /*fake_override*/ val scrollWidth: kotlin.Int
        public open override /*1*/ /*fake_override*/ fun <get-scrollWidth>(): kotlin.Int
    public open override /*1*/ /*fake_override*/ val shadowRoot: org.w3c.dom.ShadowRoot?
        public open override /*1*/ /*fake_override*/ fun <get-shadowRoot>(): org.w3c.dom.ShadowRoot?
    public open override /*1*/ /*fake_override*/ var slot: kotlin.String
        public open override /*1*/ /*fake_override*/ fun <get-slot>(): kotlin.String
        public open override /*1*/ /*fake_override*/ fun <set-slot>(/*0*/ <set-?>: kotlin.String): kotlin.Unit
    public abstract override /*1*/ /*fake_override*/ val style: org.w3c.dom.css.CSSStyleDeclaration
        public abstract override /*1*/ /*fake_override*/ fun <get-style>(): org.w3c.dom.css.CSSStyleDeclaration
    public open var tabIndex: kotlin.Int
        public open fun <get-tabIndex>(): kotlin.Int
        public open fun <set-tabIndex>(/*0*/ <set-?>: kotlin.Int): kotlin.Unit
    public open override /*1*/ /*fake_override*/ val tagName: kotlin.String
        public open override /*1*/ /*fake_override*/ fun <get-tagName>(): kotlin.String
    public open override /*1*/ /*fake_override*/ var textContent: kotlin.String?
        public open override /*1*/ /*fake_override*/ fun <get-textContent>(): kotlin.String?
        public open override /*1*/ /*fake_override*/ fun <set-textContent>(/*0*/ <set-?>: kotlin.String?): kotlin.Unit
    public open val viewportElement: org.w3c.dom.svg.SVGElement?
        public open fun <get-viewportElement>(): org.w3c.dom.svg.SVGElement?
    public final override /*1*/ /*fake_override*/ fun addEventListener(/*0*/ type: kotlin.String, /*1*/ callback: ((org.w3c.dom.events.Event) -> kotlin.Unit)?, /*2*/ options: dynamic = ...): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun addEventListener(/*0*/ type: kotlin.String, /*1*/ callback: org.w3c.dom.events.EventListener?, /*2*/ options: dynamic = ...): kotlin.Unit
    public abstract override /*1*/ /*fake_override*/ fun after(/*0*/ vararg nodes: dynamic /*kotlin.Array<out dynamic>*/): kotlin.Unit
    public abstract override /*1*/ /*fake_override*/ fun append(/*0*/ vararg nodes: dynamic /*kotlin.Array<out dynamic>*/): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun appendChild(/*0*/ node: org.w3c.dom.Node): org.w3c.dom.Node
    public final override /*1*/ /*fake_override*/ fun attachShadow(/*0*/ init: org.w3c.dom.ShadowRootInit): org.w3c.dom.ShadowRoot
    public abstract override /*1*/ /*fake_override*/ fun before(/*0*/ vararg nodes: dynamic /*kotlin.Array<out dynamic>*/): kotlin.Unit
    public final fun blur(): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun cloneNode(/*0*/ deep: kotlin.Boolean = ...): org.w3c.dom.Node
    public final override /*1*/ /*fake_override*/ fun closest(/*0*/ selectors: kotlin.String): org.w3c.dom.Element?
    public final override /*1*/ /*fake_override*/ fun compareDocumentPosition(/*0*/ other: org.w3c.dom.Node): kotlin.Short
    public final override /*1*/ /*fake_override*/ fun contains(/*0*/ other: org.w3c.dom.Node?): kotlin.Boolean
    public abstract override /*1*/ /*fake_override*/ fun convertPointFromNode(/*0*/ point: org.w3c.dom.DOMPointInit, /*1*/ from: dynamic, /*2*/ options: org.w3c.dom.ConvertCoordinateOptions = ...): org.w3c.dom.DOMPoint
    public abstract override /*1*/ /*fake_override*/ fun convertQuadFromNode(/*0*/ quad: dynamic, /*1*/ from: dynamic, /*2*/ options: org.w3c.dom.ConvertCoordinateOptions = ...): org.w3c.dom.DOMQuad
    public abstract override /*1*/ /*fake_override*/ fun convertRectFromNode(/*0*/ rect: org.w3c.dom.DOMRectReadOnly, /*1*/ from: dynamic, /*2*/ options: org.w3c.dom.ConvertCoordinateOptions = ...): org.w3c.dom.DOMQuad
    public final override /*1*/ /*fake_override*/ fun dispatchEvent(/*0*/ event: org.w3c.dom.events.Event): kotlin.Boolean
    public open override /*4*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
    public final fun focus(): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun getAttribute(/*0*/ qualifiedName: kotlin.String): kotlin.String?
    public final override /*1*/ /*fake_override*/ fun getAttributeNS(/*0*/ namespace: kotlin.String?, /*1*/ localName: kotlin.String): kotlin.String?
    public final override /*1*/ /*fake_override*/ fun getAttributeNames(): kotlin.Array<kotlin.String>
    public final override /*1*/ /*fake_override*/ fun getAttributeNode(/*0*/ qualifiedName: kotlin.String): org.w3c.dom.Attr?
    public final override /*1*/ /*fake_override*/ fun getAttributeNodeNS(/*0*/ namespace: kotlin.String?, /*1*/ localName: kotlin.String): org.w3c.dom.Attr?
    public final override /*1*/ /*fake_override*/ fun getBoundingClientRect(): org.w3c.dom.DOMRect
    public abstract override /*1*/ /*fake_override*/ fun getBoxQuads(/*0*/ options: org.w3c.dom.BoxQuadOptions = ...): kotlin.Array<org.w3c.dom.DOMQuad>
    public final override /*1*/ /*fake_override*/ fun getClientRects(): kotlin.Array<org.w3c.dom.DOMRect>
    public final override /*1*/ /*fake_override*/ fun getElementsByClassName(/*0*/ classNames: kotlin.String): org.w3c.dom.HTMLCollection
    public final override /*1*/ /*fake_override*/ fun getElementsByTagName(/*0*/ qualifiedName: kotlin.String): org.w3c.dom.HTMLCollection
    public final override /*1*/ /*fake_override*/ fun getElementsByTagNameNS(/*0*/ namespace: kotlin.String?, /*1*/ localName: kotlin.String): org.w3c.dom.HTMLCollection
    public final override /*1*/ /*fake_override*/ fun getRootNode(/*0*/ options: org.w3c.dom.GetRootNodeOptions = ...): org.w3c.dom.Node
    public final override /*1*/ /*fake_override*/ fun hasAttribute(/*0*/ qualifiedName: kotlin.String): kotlin.Boolean
    public final override /*1*/ /*fake_override*/ fun hasAttributeNS(/*0*/ namespace: kotlin.String?, /*1*/ localName: kotlin.String): kotlin.Boolean
    public final override /*1*/ /*fake_override*/ fun hasAttributes(): kotlin.Boolean
    public final override /*1*/ /*fake_override*/ fun hasChildNodes(): kotlin.Boolean
    public final override /*1*/ /*fake_override*/ fun hasPointerCapture(/*0*/ pointerId: kotlin.Int): kotlin.Boolean
    public open override /*4*/ /*fake_override*/ fun hashCode(): kotlin.Int
    public final override /*1*/ /*fake_override*/ fun insertAdjacentElement(/*0*/ where: kotlin.String, /*1*/ element: org.w3c.dom.Element): org.w3c.dom.Element?
    public final override /*1*/ /*fake_override*/ fun insertAdjacentHTML(/*0*/ position: kotlin.String, /*1*/ text: kotlin.String): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun insertAdjacentText(/*0*/ where: kotlin.String, /*1*/ data: kotlin.String): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun insertBefore(/*0*/ node: org.w3c.dom.Node, /*1*/ child: org.w3c.dom.Node?): org.w3c.dom.Node
    public final override /*1*/ /*fake_override*/ fun isDefaultNamespace(/*0*/ namespace: kotlin.String?): kotlin.Boolean
    public final override /*1*/ /*fake_override*/ fun isEqualNode(/*0*/ otherNode: org.w3c.dom.Node?): kotlin.Boolean
    public final override /*1*/ /*fake_override*/ fun isSameNode(/*0*/ otherNode: org.w3c.dom.Node?): kotlin.Boolean
    public final override /*1*/ /*fake_override*/ fun lookupNamespaceURI(/*0*/ prefix: kotlin.String?): kotlin.String?
    public final override /*1*/ /*fake_override*/ fun lookupPrefix(/*0*/ namespace: kotlin.String?): kotlin.String?
    public final override /*1*/ /*fake_override*/ fun matches(/*0*/ selectors: kotlin.String): kotlin.Boolean
    public final override /*1*/ /*fake_override*/ fun normalize(): kotlin.Unit
    public abstract override /*1*/ /*fake_override*/ fun prepend(/*0*/ vararg nodes: dynamic /*kotlin.Array<out dynamic>*/): kotlin.Unit
    public abstract override /*1*/ /*fake_override*/ fun querySelector(/*0*/ selectors: kotlin.String): org.w3c.dom.Element?
    public abstract override /*1*/ /*fake_override*/ fun querySelectorAll(/*0*/ selectors: kotlin.String): org.w3c.dom.NodeList
    public final override /*1*/ /*fake_override*/ fun releasePointerCapture(/*0*/ pointerId: kotlin.Int): kotlin.Unit
    public abstract override /*1*/ /*fake_override*/ fun remove(): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun removeAttribute(/*0*/ qualifiedName: kotlin.String): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun removeAttributeNS(/*0*/ namespace: kotlin.String?, /*1*/ localName: kotlin.String): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun removeAttributeNode(/*0*/ attr: org.w3c.dom.Attr): org.w3c.dom.Attr
    public final override /*1*/ /*fake_override*/ fun removeChild(/*0*/ child: org.w3c.dom.Node): org.w3c.dom.Node
    public final override /*1*/ /*fake_override*/ fun removeEventListener(/*0*/ type: kotlin.String, /*1*/ callback: ((org.w3c.dom.events.Event) -> kotlin.Unit)?, /*2*/ options: dynamic = ...): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun removeEventListener(/*0*/ type: kotlin.String, /*1*/ callback: org.w3c.dom.events.EventListener?, /*2*/ options: dynamic = ...): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun replaceChild(/*0*/ node: org.w3c.dom.Node, /*1*/ child: org.w3c.dom.Node): org.w3c.dom.Node
    public abstract override /*1*/ /*fake_override*/ fun replaceWith(/*0*/ vararg nodes: dynamic /*kotlin.Array<out dynamic>*/): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun requestFullscreen(): kotlin.js.Promise<kotlin.Unit>
    public final override /*1*/ /*fake_override*/ fun scroll(/*0*/ x: kotlin.Double, /*1*/ y: kotlin.Double): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun scroll(/*0*/ options: org.w3c.dom.ScrollToOptions = ...): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun scrollBy(/*0*/ x: kotlin.Double, /*1*/ y: kotlin.Double): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun scrollBy(/*0*/ options: org.w3c.dom.ScrollToOptions = ...): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun scrollIntoView(): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun scrollIntoView(/*0*/ arg: dynamic): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun scrollTo(/*0*/ x: kotlin.Double, /*1*/ y: kotlin.Double): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun scrollTo(/*0*/ options: org.w3c.dom.ScrollToOptions = ...): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun setAttribute(/*0*/ qualifiedName: kotlin.String, /*1*/ value: kotlin.String): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun setAttributeNS(/*0*/ namespace: kotlin.String?, /*1*/ qualifiedName: kotlin.String, /*2*/ value: kotlin.String): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun setAttributeNode(/*0*/ attr: org.w3c.dom.Attr): org.w3c.dom.Attr?
    public final override /*1*/ /*fake_override*/ fun setAttributeNodeNS(/*0*/ attr: org.w3c.dom.Attr): org.w3c.dom.Attr?
    public final override /*1*/ /*fake_override*/ fun setPointerCapture(/*0*/ pointerId: kotlin.Int): kotlin.Unit
    public open override /*4*/ /*fake_override*/ fun toString(): kotlin.String
    public final override /*1*/ /*fake_override*/ fun webkitMatchesSelector(/*0*/ selectors: kotlin.String): kotlin.Boolean

    public companion object Companion {
        /*primary*/ private constructor Companion()
        public final val ATTRIBUTE_NODE: kotlin.Short
            public final fun <get-ATTRIBUTE_NODE>(): kotlin.Short
        public final val CDATA_SECTION_NODE: kotlin.Short
            public final fun <get-CDATA_SECTION_NODE>(): kotlin.Short
        public final val COMMENT_NODE: kotlin.Short
            public final fun <get-COMMENT_NODE>(): kotlin.Short
        public final val DOCUMENT_FRAGMENT_NODE: kotlin.Short
            public final fun <get-DOCUMENT_FRAGMENT_NODE>(): kotlin.Short
        public final val DOCUMENT_NODE: kotlin.Short
            public final fun <get-DOCUMENT_NODE>(): kotlin.Short
        public final val DOCUMENT_POSITION_CONTAINED_BY: kotlin.Short
            public final fun <get-DOCUMENT_POSITION_CONTAINED_BY>(): kotlin.Short
        public final val DOCUMENT_POSITION_CONTAINS: kotlin.Short
            public final fun <get-DOCUMENT_POSITION_CONTAINS>(): kotlin.Short
        public final val DOCUMENT_POSITION_DISCONNECTED: kotlin.Short
            public final fun <get-DOCUMENT_POSITION_DISCONNECTED>(): kotlin.Short
        public final val DOCUMENT_POSITION_FOLLOWING: kotlin.Short
            public final fun <get-DOCUMENT_POSITION_FOLLOWING>(): kotlin.Short
        public final val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: kotlin.Short
            public final fun <get-DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC>(): kotlin.Short
        public final val DOCUMENT_POSITION_PRECEDING: kotlin.Short
            public final fun <get-DOCUMENT_POSITION_PRECEDING>(): kotlin.Short
        public final val DOCUMENT_TYPE_NODE: kotlin.Short
            public final fun <get-DOCUMENT_TYPE_NODE>(): kotlin.Short
        public final val ELEMENT_NODE: kotlin.Short
            public final fun <get-ELEMENT_NODE>(): kotlin.Short
        public final val ENTITY_NODE: kotlin.Short
            public final fun <get-ENTITY_NODE>(): kotlin.Short
        public final val ENTITY_REFERENCE_NODE: kotlin.Short
            public final fun <get-ENTITY_REFERENCE_NODE>(): kotlin.Short
        public final val NOTATION_NODE: kotlin.Short
            public final fun <get-NOTATION_NODE>(): kotlin.Short
        public final val PROCESSING_INSTRUCTION_NODE: kotlin.Short
            public final fun <get-PROCESSING_INSTRUCTION_NODE>(): kotlin.Short
        public final val TEXT_NODE: kotlin.Short
            public final fun <get-TEXT_NODE>(): kotlin.Short
        public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
        public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
        public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
    }
}

public external interface SVGElementInstance {
    public open val correspondingElement: org.w3c.dom.svg.SVGElement?
        public open fun <get-correspondingElement>(): org.w3c.dom.svg.SVGElement?
    public open val correspondingUseElement: org.w3c.dom.svg.SVGUseElement?
        public open fun <get-correspondingUseElement>(): org.w3c.dom.svg.SVGUseElement?
    public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
    public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
    public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
}

public abstract external class SVGEllipseElement : org.w3c.dom.svg.SVGGeometryElement {
    /*primary*/ public constructor SVGEllipseElement()
    public open override /*1*/ /*fake_override*/ val assignedSlot: org.w3c.dom.HTMLSlotElement?
        public open override /*1*/ /*fake_override*/ fun <get-assignedSlot>(): org.w3c.dom.HTMLSlotElement?
    public open override /*1*/ /*fake_override*/ val attributes: org.w3c.dom.NamedNodeMap
        public open override /*1*/ /*fake_override*/ fun <get-attributes>(): org.w3c.dom.NamedNodeMap
    public open override /*1*/ /*fake_override*/ val baseURI: kotlin.String
        public open override /*1*/ /*fake_override*/ fun <get-baseURI>(): kotlin.String
    public abstract override /*1*/ /*fake_override*/ val childElementCount: kotlin.Int
        public abstract override /*1*/ /*fake_override*/ fun <get-childElementCount>(): kotlin.Int
    public open override /*1*/ /*fake_override*/ val childNodes: org.w3c.dom.NodeList
        public open override /*1*/ /*fake_override*/ fun <get-childNodes>(): org.w3c.dom.NodeList
    public abstract override /*1*/ /*fake_override*/ val children: org.w3c.dom.HTMLCollection
        public abstract override /*1*/ /*fake_override*/ fun <get-children>(): org.w3c.dom.HTMLCollection
    public open override /*1*/ /*fake_override*/ val classList: org.w3c.dom.DOMTokenList
        public open override /*1*/ /*fake_override*/ fun <get-classList>(): org.w3c.dom.DOMTokenList
    public open override /*1*/ /*fake_override*/ var className: kotlin.String
        public open override /*1*/ /*fake_override*/ fun <get-className>(): kotlin.String
        public open override /*1*/ /*fake_override*/ fun <set-className>(/*0*/ <set-?>: kotlin.String): kotlin.Unit
    public open override /*1*/ /*fake_override*/ val clientHeight: kotlin.Int
        public open override /*1*/ /*fake_override*/ fun <get-clientHeight>(): kotlin.Int
    public open override /*1*/ /*fake_override*/ val clientLeft: kotlin.Int
        public open override /*1*/ /*fake_override*/ fun <get-clientLeft>(): kotlin.Int
    public open override /*1*/ /*fake_override*/ val clientTop: kotlin.Int
        public open override /*1*/ /*fake_override*/ fun <get-clientTop>(): kotlin.Int
    public open override /*1*/ /*fake_override*/ val clientWidth: kotlin.Int
        public open override /*1*/ /*fake_override*/ fun <get-clientWidth>(): kotlin.Int
    public open override /*1*/ /*fake_override*/ val correspondingElement: org.w3c.dom.svg.SVGElement?
        public open override /*1*/ /*fake_override*/ fun <get-correspondingElement>(): org.w3c.dom.svg.SVGElement?
    public open override /*1*/ /*fake_override*/ val correspondingUseElement: org.w3c.dom.svg.SVGUseElement?
        public open override /*1*/ /*fake_override*/ fun <get-correspondingUseElement>(): org.w3c.dom.svg.SVGUseElement?
    public open val cx: org.w3c.dom.svg.SVGAnimatedLength
        public open fun <get-cx>(): org.w3c.dom.svg.SVGAnimatedLength
    public open val cy: org.w3c.dom.svg.SVGAnimatedLength
        public open fun <get-cy>(): org.w3c.dom.svg.SVGAnimatedLength
    public open override /*1*/ /*fake_override*/ val dataset: org.w3c.dom.DOMStringMap
        public open override /*1*/ /*fake_override*/ fun <get-dataset>(): org.w3c.dom.DOMStringMap
    public open override /*1*/ /*fake_override*/ val firstChild: org.w3c.dom.Node?
        public open override /*1*/ /*fake_override*/ fun <get-firstChild>(): org.w3c.dom.Node?
    public open override /*1*/ /*fake_override*/ val firstElementChild: org.w3c.dom.Element?
        public open override /*1*/ /*fake_override*/ fun <get-firstElementChild>(): org.w3c.dom.Element?
    public open override /*1*/ /*fake_override*/ var id: kotlin.String
        public open override /*1*/ /*fake_override*/ fun <get-id>(): kotlin.String
        public open override /*1*/ /*fake_override*/ fun <set-id>(/*0*/ <set-?>: kotlin.String): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var innerHTML: kotlin.String
        public open override /*1*/ /*fake_override*/ fun <get-innerHTML>(): kotlin.String
        public open override /*1*/ /*fake_override*/ fun <set-innerHTML>(/*0*/ <set-?>: kotlin.String): kotlin.Unit
    public open override /*1*/ /*fake_override*/ val isConnected: kotlin.Boolean
        public open override /*1*/ /*fake_override*/ fun <get-isConnected>(): kotlin.Boolean
    public open override /*1*/ /*fake_override*/ val lastChild: org.w3c.dom.Node?
        public open override /*1*/ /*fake_override*/ fun <get-lastChild>(): org.w3c.dom.Node?
    public open override /*1*/ /*fake_override*/ val lastElementChild: org.w3c.dom.Element?
        public open override /*1*/ /*fake_override*/ fun <get-lastElementChild>(): org.w3c.dom.Element?
    public open override /*1*/ /*fake_override*/ val localName: kotlin.String
        public open override /*1*/ /*fake_override*/ fun <get-localName>(): kotlin.String
    public open override /*1*/ /*fake_override*/ val namespaceURI: kotlin.String?
        public open override /*1*/ /*fake_override*/ fun <get-namespaceURI>(): kotlin.String?
    public open override /*1*/ /*fake_override*/ val nextElementSibling: org.w3c.dom.Element?
        public open override /*1*/ /*fake_override*/ fun <get-nextElementSibling>(): org.w3c.dom.Element?
    public open override /*1*/ /*fake_override*/ val nextSibling: org.w3c.dom.Node?
        public open override /*1*/ /*fake_override*/ fun <get-nextSibling>(): org.w3c.dom.Node?
    public open override /*1*/ /*fake_override*/ val nodeName: kotlin.String
        public open override /*1*/ /*fake_override*/ fun <get-nodeName>(): kotlin.String
    public open override /*1*/ /*fake_override*/ val nodeType: kotlin.Short
        public open override /*1*/ /*fake_override*/ fun <get-nodeType>(): kotlin.Short
    public open override /*1*/ /*fake_override*/ var nodeValue: kotlin.String?
        public open override /*1*/ /*fake_override*/ fun <get-nodeValue>(): kotlin.String?
        public open override /*1*/ /*fake_override*/ fun <set-nodeValue>(/*0*/ <set-?>: kotlin.String?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onabort: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onabort>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onabort>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onblur: ((org.w3c.dom.events.FocusEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onblur>(): ((org.w3c.dom.events.FocusEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onblur>(/*0*/ value: ((org.w3c.dom.events.FocusEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var oncancel: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-oncancel>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-oncancel>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var oncanplay: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-oncanplay>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-oncanplay>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var oncanplaythrough: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-oncanplaythrough>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-oncanplaythrough>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onchange: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onchange>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onchange>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onclick: ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onclick>(): ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onclick>(/*0*/ value: ((org.w3c.dom.events.MouseEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onclose: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onclose>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onclose>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var oncontextmenu: ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-oncontextmenu>(): ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-oncontextmenu>(/*0*/ value: ((org.w3c.dom.events.MouseEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var oncuechange: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-oncuechange>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-oncuechange>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ondblclick: ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ondblclick>(): ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ondblclick>(/*0*/ value: ((org.w3c.dom.events.MouseEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ondrag: ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ondrag>(): ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ondrag>(/*0*/ value: ((org.w3c.dom.DragEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ondragend: ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ondragend>(): ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ondragend>(/*0*/ value: ((org.w3c.dom.DragEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ondragenter: ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ondragenter>(): ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ondragenter>(/*0*/ value: ((org.w3c.dom.DragEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ondragexit: ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ondragexit>(): ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ondragexit>(/*0*/ value: ((org.w3c.dom.DragEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ondragleave: ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ondragleave>(): ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ondragleave>(/*0*/ value: ((org.w3c.dom.DragEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ondragover: ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ondragover>(): ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ondragover>(/*0*/ value: ((org.w3c.dom.DragEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ondragstart: ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ondragstart>(): ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ondragstart>(/*0*/ value: ((org.w3c.dom.DragEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ondrop: ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ondrop>(): ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ondrop>(/*0*/ value: ((org.w3c.dom.DragEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ondurationchange: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ondurationchange>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ondurationchange>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onemptied: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onemptied>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onemptied>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onended: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onended>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onended>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onerror: ((dynamic, kotlin.String, kotlin.Int, kotlin.Int, kotlin.Any?) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onerror>(): ((dynamic, kotlin.String, kotlin.Int, kotlin.Int, kotlin.Any?) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onerror>(/*0*/ value: ((dynamic, kotlin.String, kotlin.Int, kotlin.Int, kotlin.Any?) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onfocus: ((org.w3c.dom.events.FocusEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onfocus>(): ((org.w3c.dom.events.FocusEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onfocus>(/*0*/ value: ((org.w3c.dom.events.FocusEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ongotpointercapture: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ongotpointercapture>(): ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ongotpointercapture>(/*0*/ value: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var oninput: ((org.w3c.dom.events.InputEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-oninput>(): ((org.w3c.dom.events.InputEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-oninput>(/*0*/ value: ((org.w3c.dom.events.InputEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var oninvalid: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-oninvalid>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-oninvalid>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onkeydown: ((org.w3c.dom.events.KeyboardEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onkeydown>(): ((org.w3c.dom.events.KeyboardEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onkeydown>(/*0*/ value: ((org.w3c.dom.events.KeyboardEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onkeypress: ((org.w3c.dom.events.KeyboardEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onkeypress>(): ((org.w3c.dom.events.KeyboardEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onkeypress>(/*0*/ value: ((org.w3c.dom.events.KeyboardEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onkeyup: ((org.w3c.dom.events.KeyboardEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onkeyup>(): ((org.w3c.dom.events.KeyboardEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onkeyup>(/*0*/ value: ((org.w3c.dom.events.KeyboardEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onload: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onload>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onload>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onloadeddata: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onloadeddata>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onloadeddata>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onloadedmetadata: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onloadedmetadata>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onloadedmetadata>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onloadend: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onloadend>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onloadend>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onloadstart: ((org.w3c.xhr.ProgressEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onloadstart>(): ((org.w3c.xhr.ProgressEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onloadstart>(/*0*/ value: ((org.w3c.xhr.ProgressEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onlostpointercapture: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onlostpointercapture>(): ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onlostpointercapture>(/*0*/ value: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onmousedown: ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onmousedown>(): ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onmousedown>(/*0*/ value: ((org.w3c.dom.events.MouseEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onmouseenter: ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onmouseenter>(): ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onmouseenter>(/*0*/ value: ((org.w3c.dom.events.MouseEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onmouseleave: ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onmouseleave>(): ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onmouseleave>(/*0*/ value: ((org.w3c.dom.events.MouseEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onmousemove: ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onmousemove>(): ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onmousemove>(/*0*/ value: ((org.w3c.dom.events.MouseEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onmouseout: ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onmouseout>(): ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onmouseout>(/*0*/ value: ((org.w3c.dom.events.MouseEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onmouseover: ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onmouseover>(): ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onmouseover>(/*0*/ value: ((org.w3c.dom.events.MouseEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onmouseup: ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onmouseup>(): ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onmouseup>(/*0*/ value: ((org.w3c.dom.events.MouseEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onpause: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onpause>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onpause>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onplay: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onplay>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onplay>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onplaying: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onplaying>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onplaying>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onpointercancel: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onpointercancel>(): ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onpointercancel>(/*0*/ value: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onpointerdown: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onpointerdown>(): ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onpointerdown>(/*0*/ value: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onpointerenter: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onpointerenter>(): ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onpointerenter>(/*0*/ value: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onpointerleave: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onpointerleave>(): ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onpointerleave>(/*0*/ value: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onpointermove: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onpointermove>(): ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onpointermove>(/*0*/ value: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onpointerout: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onpointerout>(): ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onpointerout>(/*0*/ value: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onpointerover: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onpointerover>(): ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onpointerover>(/*0*/ value: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onpointerup: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onpointerup>(): ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onpointerup>(/*0*/ value: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onprogress: ((org.w3c.xhr.ProgressEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onprogress>(): ((org.w3c.xhr.ProgressEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onprogress>(/*0*/ value: ((org.w3c.xhr.ProgressEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onratechange: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onratechange>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onratechange>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onreset: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onreset>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onreset>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onresize: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onresize>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onresize>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onscroll: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onscroll>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onscroll>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onseeked: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onseeked>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onseeked>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onseeking: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onseeking>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onseeking>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onselect: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onselect>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onselect>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onshow: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onshow>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onshow>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onstalled: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onstalled>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onstalled>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onsubmit: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onsubmit>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onsubmit>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onsuspend: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onsuspend>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onsuspend>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ontimeupdate: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ontimeupdate>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ontimeupdate>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ontoggle: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ontoggle>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ontoggle>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onvolumechange: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onvolumechange>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onvolumechange>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onwaiting: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onwaiting>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onwaiting>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onwheel: ((org.w3c.dom.events.WheelEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onwheel>(): ((org.w3c.dom.events.WheelEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onwheel>(/*0*/ value: ((org.w3c.dom.events.WheelEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var outerHTML: kotlin.String
        public open override /*1*/ /*fake_override*/ fun <get-outerHTML>(): kotlin.String
        public open override /*1*/ /*fake_override*/ fun <set-outerHTML>(/*0*/ <set-?>: kotlin.String): kotlin.Unit
    public open override /*1*/ /*fake_override*/ val ownerDocument: org.w3c.dom.Document?
        public open override /*1*/ /*fake_override*/ fun <get-ownerDocument>(): org.w3c.dom.Document?
    public open override /*1*/ /*fake_override*/ val ownerSVGElement: org.w3c.dom.svg.SVGSVGElement?
        public open override /*1*/ /*fake_override*/ fun <get-ownerSVGElement>(): org.w3c.dom.svg.SVGSVGElement?
    public open override /*1*/ /*fake_override*/ val parentElement: org.w3c.dom.Element?
        public open override /*1*/ /*fake_override*/ fun <get-parentElement>(): org.w3c.dom.Element?
    public open override /*1*/ /*fake_override*/ val parentNode: org.w3c.dom.Node?
        public open override /*1*/ /*fake_override*/ fun <get-parentNode>(): org.w3c.dom.Node?
    public open override /*1*/ /*fake_override*/ val pathLength: org.w3c.dom.svg.SVGAnimatedNumber
        public open override /*1*/ /*fake_override*/ fun <get-pathLength>(): org.w3c.dom.svg.SVGAnimatedNumber
    public open override /*1*/ /*fake_override*/ val prefix: kotlin.String?
        public open override /*1*/ /*fake_override*/ fun <get-prefix>(): kotlin.String?
    public open override /*1*/ /*fake_override*/ val previousElementSibling: org.w3c.dom.Element?
        public open override /*1*/ /*fake_override*/ fun <get-previousElementSibling>(): org.w3c.dom.Element?
    public open override /*1*/ /*fake_override*/ val previousSibling: org.w3c.dom.Node?
        public open override /*1*/ /*fake_override*/ fun <get-previousSibling>(): org.w3c.dom.Node?
    public abstract override /*1*/ /*fake_override*/ val requiredExtensions: org.w3c.dom.svg.SVGStringList
        public abstract override /*1*/ /*fake_override*/ fun <get-requiredExtensions>(): org.w3c.dom.svg.SVGStringList
    public open val rx: org.w3c.dom.svg.SVGAnimatedLength
        public open fun <get-rx>(): org.w3c.dom.svg.SVGAnimatedLength
    public open val ry: org.w3c.dom.svg.SVGAnimatedLength
        public open fun <get-ry>(): org.w3c.dom.svg.SVGAnimatedLength
    public open override /*1*/ /*fake_override*/ val scrollHeight: kotlin.Int
        public open override /*1*/ /*fake_override*/ fun <get-scrollHeight>(): kotlin.Int
    public open override /*1*/ /*fake_override*/ var scrollLeft: kotlin.Double
        public open override /*1*/ /*fake_override*/ fun <get-scrollLeft>(): kotlin.Double
        public open override /*1*/ /*fake_override*/ fun <set-scrollLeft>(/*0*/ <set-?>: kotlin.Double): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var scrollTop: kotlin.Double
        public open override /*1*/ /*fake_override*/ fun <get-scrollTop>(): kotlin.Double
        public open override /*1*/ /*fake_override*/ fun <set-scrollTop>(/*0*/ <set-?>: kotlin.Double): kotlin.Unit
    public open override /*1*/ /*fake_override*/ val scrollWidth: kotlin.Int
        public open override /*1*/ /*fake_override*/ fun <get-scrollWidth>(): kotlin.Int
    public open override /*1*/ /*fake_override*/ val shadowRoot: org.w3c.dom.ShadowRoot?
        public open override /*1*/ /*fake_override*/ fun <get-shadowRoot>(): org.w3c.dom.ShadowRoot?
    public open override /*1*/ /*fake_override*/ var slot: kotlin.String
        public open override /*1*/ /*fake_override*/ fun <get-slot>(): kotlin.String
        public open override /*1*/ /*fake_override*/ fun <set-slot>(/*0*/ <set-?>: kotlin.String): kotlin.Unit
    public abstract override /*1*/ /*fake_override*/ val style: org.w3c.dom.css.CSSStyleDeclaration
        public abstract override /*1*/ /*fake_override*/ fun <get-style>(): org.w3c.dom.css.CSSStyleDeclaration
    public abstract override /*1*/ /*fake_override*/ val systemLanguage: org.w3c.dom.svg.SVGStringList
        public abstract override /*1*/ /*fake_override*/ fun <get-systemLanguage>(): org.w3c.dom.svg.SVGStringList
    public open override /*1*/ /*fake_override*/ var tabIndex: kotlin.Int
        public open override /*1*/ /*fake_override*/ fun <get-tabIndex>(): kotlin.Int
        public open override /*1*/ /*fake_override*/ fun <set-tabIndex>(/*0*/ <set-?>: kotlin.Int): kotlin.Unit
    public open override /*1*/ /*fake_override*/ val tagName: kotlin.String
        public open override /*1*/ /*fake_override*/ fun <get-tagName>(): kotlin.String
    public open override /*1*/ /*fake_override*/ var textContent: kotlin.String?
        public open override /*1*/ /*fake_override*/ fun <get-textContent>(): kotlin.String?
        public open override /*1*/ /*fake_override*/ fun <set-textContent>(/*0*/ <set-?>: kotlin.String?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ val transform: org.w3c.dom.svg.SVGAnimatedTransformList
        public open override /*1*/ /*fake_override*/ fun <get-transform>(): org.w3c.dom.svg.SVGAnimatedTransformList
    public open override /*1*/ /*fake_override*/ val viewportElement: org.w3c.dom.svg.SVGElement?
        public open override /*1*/ /*fake_override*/ fun <get-viewportElement>(): org.w3c.dom.svg.SVGElement?
    public final override /*1*/ /*fake_override*/ fun addEventListener(/*0*/ type: kotlin.String, /*1*/ callback: ((org.w3c.dom.events.Event) -> kotlin.Unit)?, /*2*/ options: dynamic = ...): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun addEventListener(/*0*/ type: kotlin.String, /*1*/ callback: org.w3c.dom.events.EventListener?, /*2*/ options: dynamic = ...): kotlin.Unit
    public abstract override /*1*/ /*fake_override*/ fun after(/*0*/ vararg nodes: dynamic /*kotlin.Array<out dynamic>*/): kotlin.Unit
    public abstract override /*1*/ /*fake_override*/ fun append(/*0*/ vararg nodes: dynamic /*kotlin.Array<out dynamic>*/): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun appendChild(/*0*/ node: org.w3c.dom.Node): org.w3c.dom.Node
    public final override /*1*/ /*fake_override*/ fun attachShadow(/*0*/ init: org.w3c.dom.ShadowRootInit): org.w3c.dom.ShadowRoot
    public abstract override /*1*/ /*fake_override*/ fun before(/*0*/ vararg nodes: dynamic /*kotlin.Array<out dynamic>*/): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun blur(): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun cloneNode(/*0*/ deep: kotlin.Boolean = ...): org.w3c.dom.Node
    public final override /*1*/ /*fake_override*/ fun closest(/*0*/ selectors: kotlin.String): org.w3c.dom.Element?
    public final override /*1*/ /*fake_override*/ fun compareDocumentPosition(/*0*/ other: org.w3c.dom.Node): kotlin.Short
    public final override /*1*/ /*fake_override*/ fun contains(/*0*/ other: org.w3c.dom.Node?): kotlin.Boolean
    public abstract override /*1*/ /*fake_override*/ fun convertPointFromNode(/*0*/ point: org.w3c.dom.DOMPointInit, /*1*/ from: dynamic, /*2*/ options: org.w3c.dom.ConvertCoordinateOptions = ...): org.w3c.dom.DOMPoint
    public abstract override /*1*/ /*fake_override*/ fun convertQuadFromNode(/*0*/ quad: dynamic, /*1*/ from: dynamic, /*2*/ options: org.w3c.dom.ConvertCoordinateOptions = ...): org.w3c.dom.DOMQuad
    public abstract override /*1*/ /*fake_override*/ fun convertRectFromNode(/*0*/ rect: org.w3c.dom.DOMRectReadOnly, /*1*/ from: dynamic, /*2*/ options: org.w3c.dom.ConvertCoordinateOptions = ...): org.w3c.dom.DOMQuad
    public final override /*1*/ /*fake_override*/ fun dispatchEvent(/*0*/ event: org.w3c.dom.events.Event): kotlin.Boolean
    public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
    public final override /*1*/ /*fake_override*/ fun focus(): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun getAttribute(/*0*/ qualifiedName: kotlin.String): kotlin.String?
    public final override /*1*/ /*fake_override*/ fun getAttributeNS(/*0*/ namespace: kotlin.String?, /*1*/ localName: kotlin.String): kotlin.String?
    public final override /*1*/ /*fake_override*/ fun getAttributeNames(): kotlin.Array<kotlin.String>
    public final override /*1*/ /*fake_override*/ fun getAttributeNode(/*0*/ qualifiedName: kotlin.String): org.w3c.dom.Attr?
    public final override /*1*/ /*fake_override*/ fun getAttributeNodeNS(/*0*/ namespace: kotlin.String?, /*1*/ localName: kotlin.String): org.w3c.dom.Attr?
    public final override /*1*/ /*fake_override*/ fun getBBox(/*0*/ options: org.w3c.dom.svg.SVGBoundingBoxOptions = ...): org.w3c.dom.DOMRect
    public final override /*1*/ /*fake_override*/ fun getBoundingClientRect(): org.w3c.dom.DOMRect
    public abstract override /*1*/ /*fake_override*/ fun getBoxQuads(/*0*/ options: org.w3c.dom.BoxQuadOptions = ...): kotlin.Array<org.w3c.dom.DOMQuad>
    public final override /*1*/ /*fake_override*/ fun getCTM(): org.w3c.dom.DOMMatrix?
    public final override /*1*/ /*fake_override*/ fun getClientRects(): kotlin.Array<org.w3c.dom.DOMRect>
    public final override /*1*/ /*fake_override*/ fun getElementsByClassName(/*0*/ classNames: kotlin.String): org.w3c.dom.HTMLCollection
    public final override /*1*/ /*fake_override*/ fun getElementsByTagName(/*0*/ qualifiedName: kotlin.String): org.w3c.dom.HTMLCollection
    public final override /*1*/ /*fake_override*/ fun getElementsByTagNameNS(/*0*/ namespace: kotlin.String?, /*1*/ localName: kotlin.String): org.w3c.dom.HTMLCollection
    public final override /*1*/ /*fake_override*/ fun getPointAtLength(/*0*/ distance: kotlin.Float): org.w3c.dom.DOMPoint
    public final override /*1*/ /*fake_override*/ fun getRootNode(/*0*/ options: org.w3c.dom.GetRootNodeOptions = ...): org.w3c.dom.Node
    public final override /*1*/ /*fake_override*/ fun getScreenCTM(): org.w3c.dom.DOMMatrix?
    public final override /*1*/ /*fake_override*/ fun getTotalLength(): kotlin.Float
    public final override /*1*/ /*fake_override*/ fun hasAttribute(/*0*/ qualifiedName: kotlin.String): kotlin.Boolean
    public final override /*1*/ /*fake_override*/ fun hasAttributeNS(/*0*/ namespace: kotlin.String?, /*1*/ localName: kotlin.String): kotlin.Boolean
    public final override /*1*/ /*fake_override*/ fun hasAttributes(): kotlin.Boolean
    public final override /*1*/ /*fake_override*/ fun hasChildNodes(): kotlin.Boolean
    public final override /*1*/ /*fake_override*/ fun hasPointerCapture(/*0*/ pointerId: kotlin.Int): kotlin.Boolean
    public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
    public final override /*1*/ /*fake_override*/ fun insertAdjacentElement(/*0*/ where: kotlin.String, /*1*/ element: org.w3c.dom.Element): org.w3c.dom.Element?
    public final override /*1*/ /*fake_override*/ fun insertAdjacentHTML(/*0*/ position: kotlin.String, /*1*/ text: kotlin.String): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun insertAdjacentText(/*0*/ where: kotlin.String, /*1*/ data: kotlin.String): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun insertBefore(/*0*/ node: org.w3c.dom.Node, /*1*/ child: org.w3c.dom.Node?): org.w3c.dom.Node
    public final override /*1*/ /*fake_override*/ fun isDefaultNamespace(/*0*/ namespace: kotlin.String?): kotlin.Boolean
    public final override /*1*/ /*fake_override*/ fun isEqualNode(/*0*/ otherNode: org.w3c.dom.Node?): kotlin.Boolean
    public final override /*1*/ /*fake_override*/ fun isPointInFill(/*0*/ point: org.w3c.dom.DOMPoint): kotlin.Boolean
    public final override /*1*/ /*fake_override*/ fun isPointInStroke(/*0*/ point: org.w3c.dom.DOMPoint): kotlin.Boolean
    public final override /*1*/ /*fake_override*/ fun isSameNode(/*0*/ otherNode: org.w3c.dom.Node?): kotlin.Boolean
    public final override /*1*/ /*fake_override*/ fun lookupNamespaceURI(/*0*/ prefix: kotlin.String?): kotlin.String?
    public final override /*1*/ /*fake_override*/ fun lookupPrefix(/*0*/ namespace: kotlin.String?): kotlin.String?
    public final override /*1*/ /*fake_override*/ fun matches(/*0*/ selectors: kotlin.String): kotlin.Boolean
    public final override /*1*/ /*fake_override*/ fun normalize(): kotlin.Unit
    public abstract override /*1*/ /*fake_override*/ fun prepend(/*0*/ vararg nodes: dynamic /*kotlin.Array<out dynamic>*/): kotlin.Unit
    public abstract override /*1*/ /*fake_override*/ fun querySelector(/*0*/ selectors: kotlin.String): org.w3c.dom.Element?
    public abstract override /*1*/ /*fake_override*/ fun querySelectorAll(/*0*/ selectors: kotlin.String): org.w3c.dom.NodeList
    public final override /*1*/ /*fake_override*/ fun releasePointerCapture(/*0*/ pointerId: kotlin.Int): kotlin.Unit
    public abstract override /*1*/ /*fake_override*/ fun remove(): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun removeAttribute(/*0*/ qualifiedName: kotlin.String): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun removeAttributeNS(/*0*/ namespace: kotlin.String?, /*1*/ localName: kotlin.String): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun removeAttributeNode(/*0*/ attr: org.w3c.dom.Attr): org.w3c.dom.Attr
    public final override /*1*/ /*fake_override*/ fun removeChild(/*0*/ child: org.w3c.dom.Node): org.w3c.dom.Node
    public final override /*1*/ /*fake_override*/ fun removeEventListener(/*0*/ type: kotlin.String, /*1*/ callback: ((org.w3c.dom.events.Event) -> kotlin.Unit)?, /*2*/ options: dynamic = ...): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun removeEventListener(/*0*/ type: kotlin.String, /*1*/ callback: org.w3c.dom.events.EventListener?, /*2*/ options: dynamic = ...): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun replaceChild(/*0*/ node: org.w3c.dom.Node, /*1*/ child: org.w3c.dom.Node): org.w3c.dom.Node
    public abstract override /*1*/ /*fake_override*/ fun replaceWith(/*0*/ vararg nodes: dynamic /*kotlin.Array<out dynamic>*/): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun requestFullscreen(): kotlin.js.Promise<kotlin.Unit>
    public final override /*1*/ /*fake_override*/ fun scroll(/*0*/ x: kotlin.Double, /*1*/ y: kotlin.Double): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun scroll(/*0*/ options: org.w3c.dom.ScrollToOptions = ...): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun scrollBy(/*0*/ x: kotlin.Double, /*1*/ y: kotlin.Double): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun scrollBy(/*0*/ options: org.w3c.dom.ScrollToOptions = ...): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun scrollIntoView(): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun scrollIntoView(/*0*/ arg: dynamic): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun scrollTo(/*0*/ x: kotlin.Double, /*1*/ y: kotlin.Double): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun scrollTo(/*0*/ options: org.w3c.dom.ScrollToOptions = ...): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun setAttribute(/*0*/ qualifiedName: kotlin.String, /*1*/ value: kotlin.String): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun setAttributeNS(/*0*/ namespace: kotlin.String?, /*1*/ qualifiedName: kotlin.String, /*2*/ value: kotlin.String): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun setAttributeNode(/*0*/ attr: org.w3c.dom.Attr): org.w3c.dom.Attr?
    public final override /*1*/ /*fake_override*/ fun setAttributeNodeNS(/*0*/ attr: org.w3c.dom.Attr): org.w3c.dom.Attr?
    public final override /*1*/ /*fake_override*/ fun setPointerCapture(/*0*/ pointerId: kotlin.Int): kotlin.Unit
    public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
    public final override /*1*/ /*fake_override*/ fun webkitMatchesSelector(/*0*/ selectors: kotlin.String): kotlin.Boolean

    public companion object Companion {
        /*primary*/ private constructor Companion()
        public final val ATTRIBUTE_NODE: kotlin.Short
            public final fun <get-ATTRIBUTE_NODE>(): kotlin.Short
        public final val CDATA_SECTION_NODE: kotlin.Short
            public final fun <get-CDATA_SECTION_NODE>(): kotlin.Short
        public final val COMMENT_NODE: kotlin.Short
            public final fun <get-COMMENT_NODE>(): kotlin.Short
        public final val DOCUMENT_FRAGMENT_NODE: kotlin.Short
            public final fun <get-DOCUMENT_FRAGMENT_NODE>(): kotlin.Short
        public final val DOCUMENT_NODE: kotlin.Short
            public final fun <get-DOCUMENT_NODE>(): kotlin.Short
        public final val DOCUMENT_POSITION_CONTAINED_BY: kotlin.Short
            public final fun <get-DOCUMENT_POSITION_CONTAINED_BY>(): kotlin.Short
        public final val DOCUMENT_POSITION_CONTAINS: kotlin.Short
            public final fun <get-DOCUMENT_POSITION_CONTAINS>(): kotlin.Short
        public final val DOCUMENT_POSITION_DISCONNECTED: kotlin.Short
            public final fun <get-DOCUMENT_POSITION_DISCONNECTED>(): kotlin.Short
        public final val DOCUMENT_POSITION_FOLLOWING: kotlin.Short
            public final fun <get-DOCUMENT_POSITION_FOLLOWING>(): kotlin.Short
        public final val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: kotlin.Short
            public final fun <get-DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC>(): kotlin.Short
        public final val DOCUMENT_POSITION_PRECEDING: kotlin.Short
            public final fun <get-DOCUMENT_POSITION_PRECEDING>(): kotlin.Short
        public final val DOCUMENT_TYPE_NODE: kotlin.Short
            public final fun <get-DOCUMENT_TYPE_NODE>(): kotlin.Short
        public final val ELEMENT_NODE: kotlin.Short
            public final fun <get-ELEMENT_NODE>(): kotlin.Short
        public final val ENTITY_NODE: kotlin.Short
            public final fun <get-ENTITY_NODE>(): kotlin.Short
        public final val ENTITY_REFERENCE_NODE: kotlin.Short
            public final fun <get-ENTITY_REFERENCE_NODE>(): kotlin.Short
        public final val NOTATION_NODE: kotlin.Short
            public final fun <get-NOTATION_NODE>(): kotlin.Short
        public final val PROCESSING_INSTRUCTION_NODE: kotlin.Short
            public final fun <get-PROCESSING_INSTRUCTION_NODE>(): kotlin.Short
        public final val TEXT_NODE: kotlin.Short
            public final fun <get-TEXT_NODE>(): kotlin.Short
        public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
        public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
        public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
    }
}

public external interface SVGFitToViewBox {
    public abstract val preserveAspectRatio: org.w3c.dom.svg.SVGAnimatedPreserveAspectRatio
        public abstract fun <get-preserveAspectRatio>(): org.w3c.dom.svg.SVGAnimatedPreserveAspectRatio
    public abstract val viewBox: org.w3c.dom.svg.SVGAnimatedRect
        public abstract fun <get-viewBox>(): org.w3c.dom.svg.SVGAnimatedRect
    public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
    public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
    public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
}

public abstract external class SVGForeignObjectElement : org.w3c.dom.svg.SVGGraphicsElement {
    /*primary*/ public constructor SVGForeignObjectElement()
    public open override /*1*/ /*fake_override*/ val assignedSlot: org.w3c.dom.HTMLSlotElement?
        public open override /*1*/ /*fake_override*/ fun <get-assignedSlot>(): org.w3c.dom.HTMLSlotElement?
    public open override /*1*/ /*fake_override*/ val attributes: org.w3c.dom.NamedNodeMap
        public open override /*1*/ /*fake_override*/ fun <get-attributes>(): org.w3c.dom.NamedNodeMap
    public open override /*1*/ /*fake_override*/ val baseURI: kotlin.String
        public open override /*1*/ /*fake_override*/ fun <get-baseURI>(): kotlin.String
    public abstract override /*1*/ /*fake_override*/ val childElementCount: kotlin.Int
        public abstract override /*1*/ /*fake_override*/ fun <get-childElementCount>(): kotlin.Int
    public open override /*1*/ /*fake_override*/ val childNodes: org.w3c.dom.NodeList
        public open override /*1*/ /*fake_override*/ fun <get-childNodes>(): org.w3c.dom.NodeList
    public abstract override /*1*/ /*fake_override*/ val children: org.w3c.dom.HTMLCollection
        public abstract override /*1*/ /*fake_override*/ fun <get-children>(): org.w3c.dom.HTMLCollection
    public open override /*1*/ /*fake_override*/ val classList: org.w3c.dom.DOMTokenList
        public open override /*1*/ /*fake_override*/ fun <get-classList>(): org.w3c.dom.DOMTokenList
    public open override /*1*/ /*fake_override*/ var className: kotlin.String
        public open override /*1*/ /*fake_override*/ fun <get-className>(): kotlin.String
        public open override /*1*/ /*fake_override*/ fun <set-className>(/*0*/ <set-?>: kotlin.String): kotlin.Unit
    public open override /*1*/ /*fake_override*/ val clientHeight: kotlin.Int
        public open override /*1*/ /*fake_override*/ fun <get-clientHeight>(): kotlin.Int
    public open override /*1*/ /*fake_override*/ val clientLeft: kotlin.Int
        public open override /*1*/ /*fake_override*/ fun <get-clientLeft>(): kotlin.Int
    public open override /*1*/ /*fake_override*/ val clientTop: kotlin.Int
        public open override /*1*/ /*fake_override*/ fun <get-clientTop>(): kotlin.Int
    public open override /*1*/ /*fake_override*/ val clientWidth: kotlin.Int
        public open override /*1*/ /*fake_override*/ fun <get-clientWidth>(): kotlin.Int
    public open override /*1*/ /*fake_override*/ val correspondingElement: org.w3c.dom.svg.SVGElement?
        public open override /*1*/ /*fake_override*/ fun <get-correspondingElement>(): org.w3c.dom.svg.SVGElement?
    public open override /*1*/ /*fake_override*/ val correspondingUseElement: org.w3c.dom.svg.SVGUseElement?
        public open override /*1*/ /*fake_override*/ fun <get-correspondingUseElement>(): org.w3c.dom.svg.SVGUseElement?
    public open override /*1*/ /*fake_override*/ val dataset: org.w3c.dom.DOMStringMap
        public open override /*1*/ /*fake_override*/ fun <get-dataset>(): org.w3c.dom.DOMStringMap
    public open override /*1*/ /*fake_override*/ val firstChild: org.w3c.dom.Node?
        public open override /*1*/ /*fake_override*/ fun <get-firstChild>(): org.w3c.dom.Node?
    public open override /*1*/ /*fake_override*/ val firstElementChild: org.w3c.dom.Element?
        public open override /*1*/ /*fake_override*/ fun <get-firstElementChild>(): org.w3c.dom.Element?
    public open val height: org.w3c.dom.svg.SVGAnimatedLength
        public open fun <get-height>(): org.w3c.dom.svg.SVGAnimatedLength
    public open override /*1*/ /*fake_override*/ var id: kotlin.String
        public open override /*1*/ /*fake_override*/ fun <get-id>(): kotlin.String
        public open override /*1*/ /*fake_override*/ fun <set-id>(/*0*/ <set-?>: kotlin.String): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var innerHTML: kotlin.String
        public open override /*1*/ /*fake_override*/ fun <get-innerHTML>(): kotlin.String
        public open override /*1*/ /*fake_override*/ fun <set-innerHTML>(/*0*/ <set-?>: kotlin.String): kotlin.Unit
    public open override /*1*/ /*fake_override*/ val isConnected: kotlin.Boolean
        public open override /*1*/ /*fake_override*/ fun <get-isConnected>(): kotlin.Boolean
    public open override /*1*/ /*fake_override*/ val lastChild: org.w3c.dom.Node?
        public open override /*1*/ /*fake_override*/ fun <get-lastChild>(): org.w3c.dom.Node?
    public open override /*1*/ /*fake_override*/ val lastElementChild: org.w3c.dom.Element?
        public open override /*1*/ /*fake_override*/ fun <get-lastElementChild>(): org.w3c.dom.Element?
    public open override /*1*/ /*fake_override*/ val localName: kotlin.String
        public open override /*1*/ /*fake_override*/ fun <get-localName>(): kotlin.String
    public open override /*1*/ /*fake_override*/ val namespaceURI: kotlin.String?
        public open override /*1*/ /*fake_override*/ fun <get-namespaceURI>(): kotlin.String?
    public open override /*1*/ /*fake_override*/ val nextElementSibling: org.w3c.dom.Element?
        public open override /*1*/ /*fake_override*/ fun <get-nextElementSibling>(): org.w3c.dom.Element?
    public open override /*1*/ /*fake_override*/ val nextSibling: org.w3c.dom.Node?
        public open override /*1*/ /*fake_override*/ fun <get-nextSibling>(): org.w3c.dom.Node?
    public open override /*1*/ /*fake_override*/ val nodeName: kotlin.String
        public open override /*1*/ /*fake_override*/ fun <get-nodeName>(): kotlin.String
    public open override /*1*/ /*fake_override*/ val nodeType: kotlin.Short
        public open override /*1*/ /*fake_override*/ fun <get-nodeType>(): kotlin.Short
    public open override /*1*/ /*fake_override*/ var nodeValue: kotlin.String?
        public open override /*1*/ /*fake_override*/ fun <get-nodeValue>(): kotlin.String?
        public open override /*1*/ /*fake_override*/ fun <set-nodeValue>(/*0*/ <set-?>: kotlin.String?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onabort: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onabort>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onabort>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onblur: ((org.w3c.dom.events.FocusEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onblur>(): ((org.w3c.dom.events.FocusEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onblur>(/*0*/ value: ((org.w3c.dom.events.FocusEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var oncancel: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-oncancel>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-oncancel>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var oncanplay: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-oncanplay>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-oncanplay>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var oncanplaythrough: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-oncanplaythrough>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-oncanplaythrough>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onchange: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onchange>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onchange>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onclick: ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onclick>(): ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onclick>(/*0*/ value: ((org.w3c.dom.events.MouseEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onclose: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onclose>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onclose>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var oncontextmenu: ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-oncontextmenu>(): ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-oncontextmenu>(/*0*/ value: ((org.w3c.dom.events.MouseEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var oncuechange: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-oncuechange>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-oncuechange>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ondblclick: ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ondblclick>(): ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ondblclick>(/*0*/ value: ((org.w3c.dom.events.MouseEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ondrag: ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ondrag>(): ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ondrag>(/*0*/ value: ((org.w3c.dom.DragEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ondragend: ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ondragend>(): ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ondragend>(/*0*/ value: ((org.w3c.dom.DragEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ondragenter: ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ondragenter>(): ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ondragenter>(/*0*/ value: ((org.w3c.dom.DragEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ondragexit: ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ondragexit>(): ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ondragexit>(/*0*/ value: ((org.w3c.dom.DragEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ondragleave: ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ondragleave>(): ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ondragleave>(/*0*/ value: ((org.w3c.dom.DragEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ondragover: ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ondragover>(): ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ondragover>(/*0*/ value: ((org.w3c.dom.DragEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ondragstart: ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ondragstart>(): ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ondragstart>(/*0*/ value: ((org.w3c.dom.DragEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ondrop: ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ondrop>(): ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ondrop>(/*0*/ value: ((org.w3c.dom.DragEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ondurationchange: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ondurationchange>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ondurationchange>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onemptied: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onemptied>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onemptied>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onended: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onended>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onended>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onerror: ((dynamic, kotlin.String, kotlin.Int, kotlin.Int, kotlin.Any?) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onerror>(): ((dynamic, kotlin.String, kotlin.Int, kotlin.Int, kotlin.Any?) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onerror>(/*0*/ value: ((dynamic, kotlin.String, kotlin.Int, kotlin.Int, kotlin.Any?) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onfocus: ((org.w3c.dom.events.FocusEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onfocus>(): ((org.w3c.dom.events.FocusEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onfocus>(/*0*/ value: ((org.w3c.dom.events.FocusEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ongotpointercapture: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ongotpointercapture>(): ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ongotpointercapture>(/*0*/ value: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var oninput: ((org.w3c.dom.events.InputEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-oninput>(): ((org.w3c.dom.events.InputEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-oninput>(/*0*/ value: ((org.w3c.dom.events.InputEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var oninvalid: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-oninvalid>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-oninvalid>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onkeydown: ((org.w3c.dom.events.KeyboardEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onkeydown>(): ((org.w3c.dom.events.KeyboardEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onkeydown>(/*0*/ value: ((org.w3c.dom.events.KeyboardEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onkeypress: ((org.w3c.dom.events.KeyboardEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onkeypress>(): ((org.w3c.dom.events.KeyboardEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onkeypress>(/*0*/ value: ((org.w3c.dom.events.KeyboardEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onkeyup: ((org.w3c.dom.events.KeyboardEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onkeyup>(): ((org.w3c.dom.events.KeyboardEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onkeyup>(/*0*/ value: ((org.w3c.dom.events.KeyboardEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onload: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onload>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onload>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onloadeddata: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onloadeddata>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onloadeddata>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onloadedmetadata: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onloadedmetadata>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onloadedmetadata>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onloadend: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onloadend>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onloadend>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onloadstart: ((org.w3c.xhr.ProgressEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onloadstart>(): ((org.w3c.xhr.ProgressEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onloadstart>(/*0*/ value: ((org.w3c.xhr.ProgressEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onlostpointercapture: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onlostpointercapture>(): ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onlostpointercapture>(/*0*/ value: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onmousedown: ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onmousedown>(): ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onmousedown>(/*0*/ value: ((org.w3c.dom.events.MouseEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onmouseenter: ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onmouseenter>(): ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onmouseenter>(/*0*/ value: ((org.w3c.dom.events.MouseEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onmouseleave: ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onmouseleave>(): ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onmouseleave>(/*0*/ value: ((org.w3c.dom.events.MouseEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onmousemove: ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onmousemove>(): ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onmousemove>(/*0*/ value: ((org.w3c.dom.events.MouseEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onmouseout: ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onmouseout>(): ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onmouseout>(/*0*/ value: ((org.w3c.dom.events.MouseEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onmouseover: ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onmouseover>(): ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onmouseover>(/*0*/ value: ((org.w3c.dom.events.MouseEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onmouseup: ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onmouseup>(): ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onmouseup>(/*0*/ value: ((org.w3c.dom.events.MouseEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onpause: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onpause>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onpause>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onplay: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onplay>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onplay>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onplaying: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onplaying>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onplaying>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onpointercancel: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onpointercancel>(): ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onpointercancel>(/*0*/ value: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onpointerdown: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onpointerdown>(): ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onpointerdown>(/*0*/ value: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onpointerenter: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onpointerenter>(): ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onpointerenter>(/*0*/ value: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onpointerleave: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onpointerleave>(): ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onpointerleave>(/*0*/ value: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onpointermove: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onpointermove>(): ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onpointermove>(/*0*/ value: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onpointerout: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onpointerout>(): ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onpointerout>(/*0*/ value: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onpointerover: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onpointerover>(): ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onpointerover>(/*0*/ value: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onpointerup: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onpointerup>(): ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onpointerup>(/*0*/ value: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onprogress: ((org.w3c.xhr.ProgressEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onprogress>(): ((org.w3c.xhr.ProgressEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onprogress>(/*0*/ value: ((org.w3c.xhr.ProgressEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onratechange: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onratechange>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onratechange>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onreset: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onreset>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onreset>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onresize: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onresize>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onresize>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onscroll: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onscroll>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onscroll>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onseeked: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onseeked>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onseeked>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onseeking: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onseeking>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onseeking>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onselect: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onselect>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onselect>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onshow: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onshow>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onshow>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onstalled: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onstalled>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onstalled>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onsubmit: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onsubmit>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onsubmit>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onsuspend: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onsuspend>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onsuspend>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ontimeupdate: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ontimeupdate>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ontimeupdate>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ontoggle: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ontoggle>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ontoggle>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onvolumechange: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onvolumechange>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onvolumechange>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onwaiting: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onwaiting>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onwaiting>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onwheel: ((org.w3c.dom.events.WheelEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onwheel>(): ((org.w3c.dom.events.WheelEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onwheel>(/*0*/ value: ((org.w3c.dom.events.WheelEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var outerHTML: kotlin.String
        public open override /*1*/ /*fake_override*/ fun <get-outerHTML>(): kotlin.String
        public open override /*1*/ /*fake_override*/ fun <set-outerHTML>(/*0*/ <set-?>: kotlin.String): kotlin.Unit
    public open override /*1*/ /*fake_override*/ val ownerDocument: org.w3c.dom.Document?
        public open override /*1*/ /*fake_override*/ fun <get-ownerDocument>(): org.w3c.dom.Document?
    public open override /*1*/ /*fake_override*/ val ownerSVGElement: org.w3c.dom.svg.SVGSVGElement?
        public open override /*1*/ /*fake_override*/ fun <get-ownerSVGElement>(): org.w3c.dom.svg.SVGSVGElement?
    public open override /*1*/ /*fake_override*/ val parentElement: org.w3c.dom.Element?
        public open override /*1*/ /*fake_override*/ fun <get-parentElement>(): org.w3c.dom.Element?
    public open override /*1*/ /*fake_override*/ val parentNode: org.w3c.dom.Node?
        public open override /*1*/ /*fake_override*/ fun <get-parentNode>(): org.w3c.dom.Node?
    public open override /*1*/ /*fake_override*/ val prefix: kotlin.String?
        public open override /*1*/ /*fake_override*/ fun <get-prefix>(): kotlin.String?
    public open override /*1*/ /*fake_override*/ val previousElementSibling: org.w3c.dom.Element?
        public open override /*1*/ /*fake_override*/ fun <get-previousElementSibling>(): org.w3c.dom.Element?
    public open override /*1*/ /*fake_override*/ val previousSibling: org.w3c.dom.Node?
        public open override /*1*/ /*fake_override*/ fun <get-previousSibling>(): org.w3c.dom.Node?
    public abstract override /*1*/ /*fake_override*/ val requiredExtensions: org.w3c.dom.svg.SVGStringList
        public abstract override /*1*/ /*fake_override*/ fun <get-requiredExtensions>(): org.w3c.dom.svg.SVGStringList
    public open override /*1*/ /*fake_override*/ val scrollHeight: kotlin.Int
        public open override /*1*/ /*fake_override*/ fun <get-scrollHeight>(): kotlin.Int
    public open override /*1*/ /*fake_override*/ var scrollLeft: kotlin.Double
        public open override /*1*/ /*fake_override*/ fun <get-scrollLeft>(): kotlin.Double
        public open override /*1*/ /*fake_override*/ fun <set-scrollLeft>(/*0*/ <set-?>: kotlin.Double): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var scrollTop: kotlin.Double
        public open override /*1*/ /*fake_override*/ fun <get-scrollTop>(): kotlin.Double
        public open override /*1*/ /*fake_override*/ fun <set-scrollTop>(/*0*/ <set-?>: kotlin.Double): kotlin.Unit
    public open override /*1*/ /*fake_override*/ val scrollWidth: kotlin.Int
        public open override /*1*/ /*fake_override*/ fun <get-scrollWidth>(): kotlin.Int
    public open override /*1*/ /*fake_override*/ val shadowRoot: org.w3c.dom.ShadowRoot?
        public open override /*1*/ /*fake_override*/ fun <get-shadowRoot>(): org.w3c.dom.ShadowRoot?
    public open override /*1*/ /*fake_override*/ var slot: kotlin.String
        public open override /*1*/ /*fake_override*/ fun <get-slot>(): kotlin.String
        public open override /*1*/ /*fake_override*/ fun <set-slot>(/*0*/ <set-?>: kotlin.String): kotlin.Unit
    public abstract override /*1*/ /*fake_override*/ val style: org.w3c.dom.css.CSSStyleDeclaration
        public abstract override /*1*/ /*fake_override*/ fun <get-style>(): org.w3c.dom.css.CSSStyleDeclaration
    public abstract override /*1*/ /*fake_override*/ val systemLanguage: org.w3c.dom.svg.SVGStringList
        public abstract override /*1*/ /*fake_override*/ fun <get-systemLanguage>(): org.w3c.dom.svg.SVGStringList
    public open override /*1*/ /*fake_override*/ var tabIndex: kotlin.Int
        public open override /*1*/ /*fake_override*/ fun <get-tabIndex>(): kotlin.Int
        public open override /*1*/ /*fake_override*/ fun <set-tabIndex>(/*0*/ <set-?>: kotlin.Int): kotlin.Unit
    public open override /*1*/ /*fake_override*/ val tagName: kotlin.String
        public open override /*1*/ /*fake_override*/ fun <get-tagName>(): kotlin.String
    public open override /*1*/ /*fake_override*/ var textContent: kotlin.String?
        public open override /*1*/ /*fake_override*/ fun <get-textContent>(): kotlin.String?
        public open override /*1*/ /*fake_override*/ fun <set-textContent>(/*0*/ <set-?>: kotlin.String?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ val transform: org.w3c.dom.svg.SVGAnimatedTransformList
        public open override /*1*/ /*fake_override*/ fun <get-transform>(): org.w3c.dom.svg.SVGAnimatedTransformList
    public open override /*1*/ /*fake_override*/ val viewportElement: org.w3c.dom.svg.SVGElement?
        public open override /*1*/ /*fake_override*/ fun <get-viewportElement>(): org.w3c.dom.svg.SVGElement?
    public open val width: org.w3c.dom.svg.SVGAnimatedLength
        public open fun <get-width>(): org.w3c.dom.svg.SVGAnimatedLength
    public open val x: org.w3c.dom.svg.SVGAnimatedLength
        public open fun <get-x>(): org.w3c.dom.svg.SVGAnimatedLength
    public open val y: org.w3c.dom.svg.SVGAnimatedLength
        public open fun <get-y>(): org.w3c.dom.svg.SVGAnimatedLength
    public final override /*1*/ /*fake_override*/ fun addEventListener(/*0*/ type: kotlin.String, /*1*/ callback: ((org.w3c.dom.events.Event) -> kotlin.Unit)?, /*2*/ options: dynamic = ...): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun addEventListener(/*0*/ type: kotlin.String, /*1*/ callback: org.w3c.dom.events.EventListener?, /*2*/ options: dynamic = ...): kotlin.Unit
    public abstract override /*1*/ /*fake_override*/ fun after(/*0*/ vararg nodes: dynamic /*kotlin.Array<out dynamic>*/): kotlin.Unit
    public abstract override /*1*/ /*fake_override*/ fun append(/*0*/ vararg nodes: dynamic /*kotlin.Array<out dynamic>*/): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun appendChild(/*0*/ node: org.w3c.dom.Node): org.w3c.dom.Node
    public final override /*1*/ /*fake_override*/ fun attachShadow(/*0*/ init: org.w3c.dom.ShadowRootInit): org.w3c.dom.ShadowRoot
    public abstract override /*1*/ /*fake_override*/ fun before(/*0*/ vararg nodes: dynamic /*kotlin.Array<out dynamic>*/): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun blur(): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun cloneNode(/*0*/ deep: kotlin.Boolean = ...): org.w3c.dom.Node
    public final override /*1*/ /*fake_override*/ fun closest(/*0*/ selectors: kotlin.String): org.w3c.dom.Element?
    public final override /*1*/ /*fake_override*/ fun compareDocumentPosition(/*0*/ other: org.w3c.dom.Node): kotlin.Short
    public final override /*1*/ /*fake_override*/ fun contains(/*0*/ other: org.w3c.dom.Node?): kotlin.Boolean
    public abstract override /*1*/ /*fake_override*/ fun convertPointFromNode(/*0*/ point: org.w3c.dom.DOMPointInit, /*1*/ from: dynamic, /*2*/ options: org.w3c.dom.ConvertCoordinateOptions = ...): org.w3c.dom.DOMPoint
    public abstract override /*1*/ /*fake_override*/ fun convertQuadFromNode(/*0*/ quad: dynamic, /*1*/ from: dynamic, /*2*/ options: org.w3c.dom.ConvertCoordinateOptions = ...): org.w3c.dom.DOMQuad
    public abstract override /*1*/ /*fake_override*/ fun convertRectFromNode(/*0*/ rect: org.w3c.dom.DOMRectReadOnly, /*1*/ from: dynamic, /*2*/ options: org.w3c.dom.ConvertCoordinateOptions = ...): org.w3c.dom.DOMQuad
    public final override /*1*/ /*fake_override*/ fun dispatchEvent(/*0*/ event: org.w3c.dom.events.Event): kotlin.Boolean
    public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
    public final override /*1*/ /*fake_override*/ fun focus(): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun getAttribute(/*0*/ qualifiedName: kotlin.String): kotlin.String?
    public final override /*1*/ /*fake_override*/ fun getAttributeNS(/*0*/ namespace: kotlin.String?, /*1*/ localName: kotlin.String): kotlin.String?
    public final override /*1*/ /*fake_override*/ fun getAttributeNames(): kotlin.Array<kotlin.String>
    public final override /*1*/ /*fake_override*/ fun getAttributeNode(/*0*/ qualifiedName: kotlin.String): org.w3c.dom.Attr?
    public final override /*1*/ /*fake_override*/ fun getAttributeNodeNS(/*0*/ namespace: kotlin.String?, /*1*/ localName: kotlin.String): org.w3c.dom.Attr?
    public final override /*1*/ /*fake_override*/ fun getBBox(/*0*/ options: org.w3c.dom.svg.SVGBoundingBoxOptions = ...): org.w3c.dom.DOMRect
    public final override /*1*/ /*fake_override*/ fun getBoundingClientRect(): org.w3c.dom.DOMRect
    public abstract override /*1*/ /*fake_override*/ fun getBoxQuads(/*0*/ options: org.w3c.dom.BoxQuadOptions = ...): kotlin.Array<org.w3c.dom.DOMQuad>
    public final override /*1*/ /*fake_override*/ fun getCTM(): org.w3c.dom.DOMMatrix?
    public final override /*1*/ /*fake_override*/ fun getClientRects(): kotlin.Array<org.w3c.dom.DOMRect>
    public final override /*1*/ /*fake_override*/ fun getElementsByClassName(/*0*/ classNames: kotlin.String): org.w3c.dom.HTMLCollection
    public final override /*1*/ /*fake_override*/ fun getElementsByTagName(/*0*/ qualifiedName: kotlin.String): org.w3c.dom.HTMLCollection
    public final override /*1*/ /*fake_override*/ fun getElementsByTagNameNS(/*0*/ namespace: kotlin.String?, /*1*/ localName: kotlin.String): org.w3c.dom.HTMLCollection
    public final override /*1*/ /*fake_override*/ fun getRootNode(/*0*/ options: org.w3c.dom.GetRootNodeOptions = ...): org.w3c.dom.Node
    public final override /*1*/ /*fake_override*/ fun getScreenCTM(): org.w3c.dom.DOMMatrix?
    public final override /*1*/ /*fake_override*/ fun hasAttribute(/*0*/ qualifiedName: kotlin.String): kotlin.Boolean
    public final override /*1*/ /*fake_override*/ fun hasAttributeNS(/*0*/ namespace: kotlin.String?, /*1*/ localName: kotlin.String): kotlin.Boolean
    public final override /*1*/ /*fake_override*/ fun hasAttributes(): kotlin.Boolean
    public final override /*1*/ /*fake_override*/ fun hasChildNodes(): kotlin.Boolean
    public final override /*1*/ /*fake_override*/ fun hasPointerCapture(/*0*/ pointerId: kotlin.Int): kotlin.Boolean
    public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
    public final override /*1*/ /*fake_override*/ fun insertAdjacentElement(/*0*/ where: kotlin.String, /*1*/ element: org.w3c.dom.Element): org.w3c.dom.Element?
    public final override /*1*/ /*fake_override*/ fun insertAdjacentHTML(/*0*/ position: kotlin.String, /*1*/ text: kotlin.String): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun insertAdjacentText(/*0*/ where: kotlin.String, /*1*/ data: kotlin.String): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun insertBefore(/*0*/ node: org.w3c.dom.Node, /*1*/ child: org.w3c.dom.Node?): org.w3c.dom.Node
    public final override /*1*/ /*fake_override*/ fun isDefaultNamespace(/*0*/ namespace: kotlin.String?): kotlin.Boolean
    public final override /*1*/ /*fake_override*/ fun isEqualNode(/*0*/ otherNode: org.w3c.dom.Node?): kotlin.Boolean
    public final override /*1*/ /*fake_override*/ fun isSameNode(/*0*/ otherNode: org.w3c.dom.Node?): kotlin.Boolean
    public final override /*1*/ /*fake_override*/ fun lookupNamespaceURI(/*0*/ prefix: kotlin.String?): kotlin.String?
    public final override /*1*/ /*fake_override*/ fun lookupPrefix(/*0*/ namespace: kotlin.String?): kotlin.String?
    public final override /*1*/ /*fake_override*/ fun matches(/*0*/ selectors: kotlin.String): kotlin.Boolean
    public final override /*1*/ /*fake_override*/ fun normalize(): kotlin.Unit
    public abstract override /*1*/ /*fake_override*/ fun prepend(/*0*/ vararg nodes: dynamic /*kotlin.Array<out dynamic>*/): kotlin.Unit
    public abstract override /*1*/ /*fake_override*/ fun querySelector(/*0*/ selectors: kotlin.String): org.w3c.dom.Element?
    public abstract override /*1*/ /*fake_override*/ fun querySelectorAll(/*0*/ selectors: kotlin.String): org.w3c.dom.NodeList
    public final override /*1*/ /*fake_override*/ fun releasePointerCapture(/*0*/ pointerId: kotlin.Int): kotlin.Unit
    public abstract override /*1*/ /*fake_override*/ fun remove(): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun removeAttribute(/*0*/ qualifiedName: kotlin.String): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun removeAttributeNS(/*0*/ namespace: kotlin.String?, /*1*/ localName: kotlin.String): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun removeAttributeNode(/*0*/ attr: org.w3c.dom.Attr): org.w3c.dom.Attr
    public final override /*1*/ /*fake_override*/ fun removeChild(/*0*/ child: org.w3c.dom.Node): org.w3c.dom.Node
    public final override /*1*/ /*fake_override*/ fun removeEventListener(/*0*/ type: kotlin.String, /*1*/ callback: ((org.w3c.dom.events.Event) -> kotlin.Unit)?, /*2*/ options: dynamic = ...): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun removeEventListener(/*0*/ type: kotlin.String, /*1*/ callback: org.w3c.dom.events.EventListener?, /*2*/ options: dynamic = ...): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun replaceChild(/*0*/ node: org.w3c.dom.Node, /*1*/ child: org.w3c.dom.Node): org.w3c.dom.Node
    public abstract override /*1*/ /*fake_override*/ fun replaceWith(/*0*/ vararg nodes: dynamic /*kotlin.Array<out dynamic>*/): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun requestFullscreen(): kotlin.js.Promise<kotlin.Unit>
    public final override /*1*/ /*fake_override*/ fun scroll(/*0*/ x: kotlin.Double, /*1*/ y: kotlin.Double): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun scroll(/*0*/ options: org.w3c.dom.ScrollToOptions = ...): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun scrollBy(/*0*/ x: kotlin.Double, /*1*/ y: kotlin.Double): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun scrollBy(/*0*/ options: org.w3c.dom.ScrollToOptions = ...): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun scrollIntoView(): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun scrollIntoView(/*0*/ arg: dynamic): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun scrollTo(/*0*/ x: kotlin.Double, /*1*/ y: kotlin.Double): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun scrollTo(/*0*/ options: org.w3c.dom.ScrollToOptions = ...): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun setAttribute(/*0*/ qualifiedName: kotlin.String, /*1*/ value: kotlin.String): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun setAttributeNS(/*0*/ namespace: kotlin.String?, /*1*/ qualifiedName: kotlin.String, /*2*/ value: kotlin.String): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun setAttributeNode(/*0*/ attr: org.w3c.dom.Attr): org.w3c.dom.Attr?
    public final override /*1*/ /*fake_override*/ fun setAttributeNodeNS(/*0*/ attr: org.w3c.dom.Attr): org.w3c.dom.Attr?
    public final override /*1*/ /*fake_override*/ fun setPointerCapture(/*0*/ pointerId: kotlin.Int): kotlin.Unit
    public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
    public final override /*1*/ /*fake_override*/ fun webkitMatchesSelector(/*0*/ selectors: kotlin.String): kotlin.Boolean

    public companion object Companion {
        /*primary*/ private constructor Companion()
        public final val ATTRIBUTE_NODE: kotlin.Short
            public final fun <get-ATTRIBUTE_NODE>(): kotlin.Short
        public final val CDATA_SECTION_NODE: kotlin.Short
            public final fun <get-CDATA_SECTION_NODE>(): kotlin.Short
        public final val COMMENT_NODE: kotlin.Short
            public final fun <get-COMMENT_NODE>(): kotlin.Short
        public final val DOCUMENT_FRAGMENT_NODE: kotlin.Short
            public final fun <get-DOCUMENT_FRAGMENT_NODE>(): kotlin.Short
        public final val DOCUMENT_NODE: kotlin.Short
            public final fun <get-DOCUMENT_NODE>(): kotlin.Short
        public final val DOCUMENT_POSITION_CONTAINED_BY: kotlin.Short
            public final fun <get-DOCUMENT_POSITION_CONTAINED_BY>(): kotlin.Short
        public final val DOCUMENT_POSITION_CONTAINS: kotlin.Short
            public final fun <get-DOCUMENT_POSITION_CONTAINS>(): kotlin.Short
        public final val DOCUMENT_POSITION_DISCONNECTED: kotlin.Short
            public final fun <get-DOCUMENT_POSITION_DISCONNECTED>(): kotlin.Short
        public final val DOCUMENT_POSITION_FOLLOWING: kotlin.Short
            public final fun <get-DOCUMENT_POSITION_FOLLOWING>(): kotlin.Short
        public final val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: kotlin.Short
            public final fun <get-DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC>(): kotlin.Short
        public final val DOCUMENT_POSITION_PRECEDING: kotlin.Short
            public final fun <get-DOCUMENT_POSITION_PRECEDING>(): kotlin.Short
        public final val DOCUMENT_TYPE_NODE: kotlin.Short
            public final fun <get-DOCUMENT_TYPE_NODE>(): kotlin.Short
        public final val ELEMENT_NODE: kotlin.Short
            public final fun <get-ELEMENT_NODE>(): kotlin.Short
        public final val ENTITY_NODE: kotlin.Short
            public final fun <get-ENTITY_NODE>(): kotlin.Short
        public final val ENTITY_REFERENCE_NODE: kotlin.Short
            public final fun <get-ENTITY_REFERENCE_NODE>(): kotlin.Short
        public final val NOTATION_NODE: kotlin.Short
            public final fun <get-NOTATION_NODE>(): kotlin.Short
        public final val PROCESSING_INSTRUCTION_NODE: kotlin.Short
            public final fun <get-PROCESSING_INSTRUCTION_NODE>(): kotlin.Short
        public final val TEXT_NODE: kotlin.Short
            public final fun <get-TEXT_NODE>(): kotlin.Short
        public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
        public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
        public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
    }
}

public abstract external class SVGGElement : org.w3c.dom.svg.SVGGraphicsElement {
    /*primary*/ public constructor SVGGElement()
    public open override /*1*/ /*fake_override*/ val assignedSlot: org.w3c.dom.HTMLSlotElement?
        public open override /*1*/ /*fake_override*/ fun <get-assignedSlot>(): org.w3c.dom.HTMLSlotElement?
    public open override /*1*/ /*fake_override*/ val attributes: org.w3c.dom.NamedNodeMap
        public open override /*1*/ /*fake_override*/ fun <get-attributes>(): org.w3c.dom.NamedNodeMap
    public open override /*1*/ /*fake_override*/ val baseURI: kotlin.String
        public open override /*1*/ /*fake_override*/ fun <get-baseURI>(): kotlin.String
    public abstract override /*1*/ /*fake_override*/ val childElementCount: kotlin.Int
        public abstract override /*1*/ /*fake_override*/ fun <get-childElementCount>(): kotlin.Int
    public open override /*1*/ /*fake_override*/ val childNodes: org.w3c.dom.NodeList
        public open override /*1*/ /*fake_override*/ fun <get-childNodes>(): org.w3c.dom.NodeList
    public abstract override /*1*/ /*fake_override*/ val children: org.w3c.dom.HTMLCollection
        public abstract override /*1*/ /*fake_override*/ fun <get-children>(): org.w3c.dom.HTMLCollection
    public open override /*1*/ /*fake_override*/ val classList: org.w3c.dom.DOMTokenList
        public open override /*1*/ /*fake_override*/ fun <get-classList>(): org.w3c.dom.DOMTokenList
    public open override /*1*/ /*fake_override*/ var className: kotlin.String
        public open override /*1*/ /*fake_override*/ fun <get-className>(): kotlin.String
        public open override /*1*/ /*fake_override*/ fun <set-className>(/*0*/ <set-?>: kotlin.String): kotlin.Unit
    public open override /*1*/ /*fake_override*/ val clientHeight: kotlin.Int
        public open override /*1*/ /*fake_override*/ fun <get-clientHeight>(): kotlin.Int
    public open override /*1*/ /*fake_override*/ val clientLeft: kotlin.Int
        public open override /*1*/ /*fake_override*/ fun <get-clientLeft>(): kotlin.Int
    public open override /*1*/ /*fake_override*/ val clientTop: kotlin.Int
        public open override /*1*/ /*fake_override*/ fun <get-clientTop>(): kotlin.Int
    public open override /*1*/ /*fake_override*/ val clientWidth: kotlin.Int
        public open override /*1*/ /*fake_override*/ fun <get-clientWidth>(): kotlin.Int
    public open override /*1*/ /*fake_override*/ val correspondingElement: org.w3c.dom.svg.SVGElement?
        public open override /*1*/ /*fake_override*/ fun <get-correspondingElement>(): org.w3c.dom.svg.SVGElement?
    public open override /*1*/ /*fake_override*/ val correspondingUseElement: org.w3c.dom.svg.SVGUseElement?
        public open override /*1*/ /*fake_override*/ fun <get-correspondingUseElement>(): org.w3c.dom.svg.SVGUseElement?
    public open override /*1*/ /*fake_override*/ val dataset: org.w3c.dom.DOMStringMap
        public open override /*1*/ /*fake_override*/ fun <get-dataset>(): org.w3c.dom.DOMStringMap
    public open override /*1*/ /*fake_override*/ val firstChild: org.w3c.dom.Node?
        public open override /*1*/ /*fake_override*/ fun <get-firstChild>(): org.w3c.dom.Node?
    public open override /*1*/ /*fake_override*/ val firstElementChild: org.w3c.dom.Element?
        public open override /*1*/ /*fake_override*/ fun <get-firstElementChild>(): org.w3c.dom.Element?
    public open override /*1*/ /*fake_override*/ var id: kotlin.String
        public open override /*1*/ /*fake_override*/ fun <get-id>(): kotlin.String
        public open override /*1*/ /*fake_override*/ fun <set-id>(/*0*/ <set-?>: kotlin.String): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var innerHTML: kotlin.String
        public open override /*1*/ /*fake_override*/ fun <get-innerHTML>(): kotlin.String
        public open override /*1*/ /*fake_override*/ fun <set-innerHTML>(/*0*/ <set-?>: kotlin.String): kotlin.Unit
    public open override /*1*/ /*fake_override*/ val isConnected: kotlin.Boolean
        public open override /*1*/ /*fake_override*/ fun <get-isConnected>(): kotlin.Boolean
    public open override /*1*/ /*fake_override*/ val lastChild: org.w3c.dom.Node?
        public open override /*1*/ /*fake_override*/ fun <get-lastChild>(): org.w3c.dom.Node?
    public open override /*1*/ /*fake_override*/ val lastElementChild: org.w3c.dom.Element?
        public open override /*1*/ /*fake_override*/ fun <get-lastElementChild>(): org.w3c.dom.Element?
    public open override /*1*/ /*fake_override*/ val localName: kotlin.String
        public open override /*1*/ /*fake_override*/ fun <get-localName>(): kotlin.String
    public open override /*1*/ /*fake_override*/ val namespaceURI: kotlin.String?
        public open override /*1*/ /*fake_override*/ fun <get-namespaceURI>(): kotlin.String?
    public open override /*1*/ /*fake_override*/ val nextElementSibling: org.w3c.dom.Element?
        public open override /*1*/ /*fake_override*/ fun <get-nextElementSibling>(): org.w3c.dom.Element?
    public open override /*1*/ /*fake_override*/ val nextSibling: org.w3c.dom.Node?
        public open override /*1*/ /*fake_override*/ fun <get-nextSibling>(): org.w3c.dom.Node?
    public open override /*1*/ /*fake_override*/ val nodeName: kotlin.String
        public open override /*1*/ /*fake_override*/ fun <get-nodeName>(): kotlin.String
    public open override /*1*/ /*fake_override*/ val nodeType: kotlin.Short
        public open override /*1*/ /*fake_override*/ fun <get-nodeType>(): kotlin.Short
    public open override /*1*/ /*fake_override*/ var nodeValue: kotlin.String?
        public open override /*1*/ /*fake_override*/ fun <get-nodeValue>(): kotlin.String?
        public open override /*1*/ /*fake_override*/ fun <set-nodeValue>(/*0*/ <set-?>: kotlin.String?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onabort: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onabort>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onabort>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onblur: ((org.w3c.dom.events.FocusEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onblur>(): ((org.w3c.dom.events.FocusEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onblur>(/*0*/ value: ((org.w3c.dom.events.FocusEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var oncancel: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-oncancel>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-oncancel>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var oncanplay: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-oncanplay>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-oncanplay>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var oncanplaythrough: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-oncanplaythrough>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-oncanplaythrough>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onchange: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onchange>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onchange>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onclick: ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onclick>(): ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onclick>(/*0*/ value: ((org.w3c.dom.events.MouseEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onclose: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onclose>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onclose>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var oncontextmenu: ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-oncontextmenu>(): ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-oncontextmenu>(/*0*/ value: ((org.w3c.dom.events.MouseEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var oncuechange: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-oncuechange>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-oncuechange>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ondblclick: ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ondblclick>(): ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ondblclick>(/*0*/ value: ((org.w3c.dom.events.MouseEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ondrag: ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ondrag>(): ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ondrag>(/*0*/ value: ((org.w3c.dom.DragEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ondragend: ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ondragend>(): ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ondragend>(/*0*/ value: ((org.w3c.dom.DragEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ondragenter: ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ondragenter>(): ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ondragenter>(/*0*/ value: ((org.w3c.dom.DragEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ondragexit: ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ondragexit>(): ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ondragexit>(/*0*/ value: ((org.w3c.dom.DragEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ondragleave: ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ondragleave>(): ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ondragleave>(/*0*/ value: ((org.w3c.dom.DragEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ondragover: ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ondragover>(): ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ondragover>(/*0*/ value: ((org.w3c.dom.DragEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ondragstart: ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ondragstart>(): ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ondragstart>(/*0*/ value: ((org.w3c.dom.DragEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ondrop: ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ondrop>(): ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ondrop>(/*0*/ value: ((org.w3c.dom.DragEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ondurationchange: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ondurationchange>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ondurationchange>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onemptied: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onemptied>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onemptied>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onended: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onended>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onended>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onerror: ((dynamic, kotlin.String, kotlin.Int, kotlin.Int, kotlin.Any?) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onerror>(): ((dynamic, kotlin.String, kotlin.Int, kotlin.Int, kotlin.Any?) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onerror>(/*0*/ value: ((dynamic, kotlin.String, kotlin.Int, kotlin.Int, kotlin.Any?) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onfocus: ((org.w3c.dom.events.FocusEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onfocus>(): ((org.w3c.dom.events.FocusEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onfocus>(/*0*/ value: ((org.w3c.dom.events.FocusEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ongotpointercapture: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ongotpointercapture>(): ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ongotpointercapture>(/*0*/ value: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var oninput: ((org.w3c.dom.events.InputEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-oninput>(): ((org.w3c.dom.events.InputEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-oninput>(/*0*/ value: ((org.w3c.dom.events.InputEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var oninvalid: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-oninvalid>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-oninvalid>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onkeydown: ((org.w3c.dom.events.KeyboardEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onkeydown>(): ((org.w3c.dom.events.KeyboardEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onkeydown>(/*0*/ value: ((org.w3c.dom.events.KeyboardEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onkeypress: ((org.w3c.dom.events.KeyboardEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onkeypress>(): ((org.w3c.dom.events.KeyboardEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onkeypress>(/*0*/ value: ((org.w3c.dom.events.KeyboardEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onkeyup: ((org.w3c.dom.events.KeyboardEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onkeyup>(): ((org.w3c.dom.events.KeyboardEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onkeyup>(/*0*/ value: ((org.w3c.dom.events.KeyboardEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onload: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onload>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onload>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onloadeddata: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onloadeddata>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onloadeddata>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onloadedmetadata: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onloadedmetadata>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onloadedmetadata>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onloadend: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onloadend>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onloadend>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onloadstart: ((org.w3c.xhr.ProgressEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onloadstart>(): ((org.w3c.xhr.ProgressEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onloadstart>(/*0*/ value: ((org.w3c.xhr.ProgressEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onlostpointercapture: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onlostpointercapture>(): ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onlostpointercapture>(/*0*/ value: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onmousedown: ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onmousedown>(): ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onmousedown>(/*0*/ value: ((org.w3c.dom.events.MouseEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onmouseenter: ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onmouseenter>(): ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onmouseenter>(/*0*/ value: ((org.w3c.dom.events.MouseEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onmouseleave: ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onmouseleave>(): ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onmouseleave>(/*0*/ value: ((org.w3c.dom.events.MouseEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onmousemove: ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onmousemove>(): ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onmousemove>(/*0*/ value: ((org.w3c.dom.events.MouseEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onmouseout: ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onmouseout>(): ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onmouseout>(/*0*/ value: ((org.w3c.dom.events.MouseEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onmouseover: ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onmouseover>(): ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onmouseover>(/*0*/ value: ((org.w3c.dom.events.MouseEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onmouseup: ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onmouseup>(): ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onmouseup>(/*0*/ value: ((org.w3c.dom.events.MouseEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onpause: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onpause>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onpause>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onplay: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onplay>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onplay>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onplaying: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onplaying>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onplaying>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onpointercancel: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onpointercancel>(): ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onpointercancel>(/*0*/ value: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onpointerdown: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onpointerdown>(): ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onpointerdown>(/*0*/ value: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onpointerenter: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onpointerenter>(): ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onpointerenter>(/*0*/ value: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onpointerleave: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onpointerleave>(): ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onpointerleave>(/*0*/ value: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onpointermove: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onpointermove>(): ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onpointermove>(/*0*/ value: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onpointerout: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onpointerout>(): ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onpointerout>(/*0*/ value: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onpointerover: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onpointerover>(): ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onpointerover>(/*0*/ value: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onpointerup: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onpointerup>(): ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onpointerup>(/*0*/ value: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onprogress: ((org.w3c.xhr.ProgressEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onprogress>(): ((org.w3c.xhr.ProgressEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onprogress>(/*0*/ value: ((org.w3c.xhr.ProgressEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onratechange: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onratechange>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onratechange>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onreset: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onreset>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onreset>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onresize: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onresize>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onresize>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onscroll: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onscroll>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onscroll>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onseeked: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onseeked>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onseeked>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onseeking: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onseeking>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onseeking>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onselect: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onselect>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onselect>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onshow: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onshow>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onshow>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onstalled: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onstalled>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onstalled>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onsubmit: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onsubmit>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onsubmit>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onsuspend: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onsuspend>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onsuspend>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ontimeupdate: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ontimeupdate>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ontimeupdate>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ontoggle: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ontoggle>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ontoggle>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onvolumechange: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onvolumechange>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onvolumechange>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onwaiting: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onwaiting>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onwaiting>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onwheel: ((org.w3c.dom.events.WheelEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onwheel>(): ((org.w3c.dom.events.WheelEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onwheel>(/*0*/ value: ((org.w3c.dom.events.WheelEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var outerHTML: kotlin.String
        public open override /*1*/ /*fake_override*/ fun <get-outerHTML>(): kotlin.String
        public open override /*1*/ /*fake_override*/ fun <set-outerHTML>(/*0*/ <set-?>: kotlin.String): kotlin.Unit
    public open override /*1*/ /*fake_override*/ val ownerDocument: org.w3c.dom.Document?
        public open override /*1*/ /*fake_override*/ fun <get-ownerDocument>(): org.w3c.dom.Document?
    public open override /*1*/ /*fake_override*/ val ownerSVGElement: org.w3c.dom.svg.SVGSVGElement?
        public open override /*1*/ /*fake_override*/ fun <get-ownerSVGElement>(): org.w3c.dom.svg.SVGSVGElement?
    public open override /*1*/ /*fake_override*/ val parentElement: org.w3c.dom.Element?
        public open override /*1*/ /*fake_override*/ fun <get-parentElement>(): org.w3c.dom.Element?
    public open override /*1*/ /*fake_override*/ val parentNode: org.w3c.dom.Node?
        public open override /*1*/ /*fake_override*/ fun <get-parentNode>(): org.w3c.dom.Node?
    public open override /*1*/ /*fake_override*/ val prefix: kotlin.String?
        public open override /*1*/ /*fake_override*/ fun <get-prefix>(): kotlin.String?
    public open override /*1*/ /*fake_override*/ val previousElementSibling: org.w3c.dom.Element?
        public open override /*1*/ /*fake_override*/ fun <get-previousElementSibling>(): org.w3c.dom.Element?
    public open override /*1*/ /*fake_override*/ val previousSibling: org.w3c.dom.Node?
        public open override /*1*/ /*fake_override*/ fun <get-previousSibling>(): org.w3c.dom.Node?
    public abstract override /*1*/ /*fake_override*/ val requiredExtensions: org.w3c.dom.svg.SVGStringList
        public abstract override /*1*/ /*fake_override*/ fun <get-requiredExtensions>(): org.w3c.dom.svg.SVGStringList
    public open override /*1*/ /*fake_override*/ val scrollHeight: kotlin.Int
        public open override /*1*/ /*fake_override*/ fun <get-scrollHeight>(): kotlin.Int
    public open override /*1*/ /*fake_override*/ var scrollLeft: kotlin.Double
        public open override /*1*/ /*fake_override*/ fun <get-scrollLeft>(): kotlin.Double
        public open override /*1*/ /*fake_override*/ fun <set-scrollLeft>(/*0*/ <set-?>: kotlin.Double): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var scrollTop: kotlin.Double
        public open override /*1*/ /*fake_override*/ fun <get-scrollTop>(): kotlin.Double
        public open override /*1*/ /*fake_override*/ fun <set-scrollTop>(/*0*/ <set-?>: kotlin.Double): kotlin.Unit
    public open override /*1*/ /*fake_override*/ val scrollWidth: kotlin.Int
        public open override /*1*/ /*fake_override*/ fun <get-scrollWidth>(): kotlin.Int
    public open override /*1*/ /*fake_override*/ val shadowRoot: org.w3c.dom.ShadowRoot?
        public open override /*1*/ /*fake_override*/ fun <get-shadowRoot>(): org.w3c.dom.ShadowRoot?
    public open override /*1*/ /*fake_override*/ var slot: kotlin.String
        public open override /*1*/ /*fake_override*/ fun <get-slot>(): kotlin.String
        public open override /*1*/ /*fake_override*/ fun <set-slot>(/*0*/ <set-?>: kotlin.String): kotlin.Unit
    public abstract override /*1*/ /*fake_override*/ val style: org.w3c.dom.css.CSSStyleDeclaration
        public abstract override /*1*/ /*fake_override*/ fun <get-style>(): org.w3c.dom.css.CSSStyleDeclaration
    public abstract override /*1*/ /*fake_override*/ val systemLanguage: org.w3c.dom.svg.SVGStringList
        public abstract override /*1*/ /*fake_override*/ fun <get-systemLanguage>(): org.w3c.dom.svg.SVGStringList
    public open override /*1*/ /*fake_override*/ var tabIndex: kotlin.Int
        public open override /*1*/ /*fake_override*/ fun <get-tabIndex>(): kotlin.Int
        public open override /*1*/ /*fake_override*/ fun <set-tabIndex>(/*0*/ <set-?>: kotlin.Int): kotlin.Unit
    public open override /*1*/ /*fake_override*/ val tagName: kotlin.String
        public open override /*1*/ /*fake_override*/ fun <get-tagName>(): kotlin.String
    public open override /*1*/ /*fake_override*/ var textContent: kotlin.String?
        public open override /*1*/ /*fake_override*/ fun <get-textContent>(): kotlin.String?
        public open override /*1*/ /*fake_override*/ fun <set-textContent>(/*0*/ <set-?>: kotlin.String?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ val transform: org.w3c.dom.svg.SVGAnimatedTransformList
        public open override /*1*/ /*fake_override*/ fun <get-transform>(): org.w3c.dom.svg.SVGAnimatedTransformList
    public open override /*1*/ /*fake_override*/ val viewportElement: org.w3c.dom.svg.SVGElement?
        public open override /*1*/ /*fake_override*/ fun <get-viewportElement>(): org.w3c.dom.svg.SVGElement?
    public final override /*1*/ /*fake_override*/ fun addEventListener(/*0*/ type: kotlin.String, /*1*/ callback: ((org.w3c.dom.events.Event) -> kotlin.Unit)?, /*2*/ options: dynamic = ...): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun addEventListener(/*0*/ type: kotlin.String, /*1*/ callback: org.w3c.dom.events.EventListener?, /*2*/ options: dynamic = ...): kotlin.Unit
    public abstract override /*1*/ /*fake_override*/ fun after(/*0*/ vararg nodes: dynamic /*kotlin.Array<out dynamic>*/): kotlin.Unit
    public abstract override /*1*/ /*fake_override*/ fun append(/*0*/ vararg nodes: dynamic /*kotlin.Array<out dynamic>*/): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun appendChild(/*0*/ node: org.w3c.dom.Node): org.w3c.dom.Node
    public final override /*1*/ /*fake_override*/ fun attachShadow(/*0*/ init: org.w3c.dom.ShadowRootInit): org.w3c.dom.ShadowRoot
    public abstract override /*1*/ /*fake_override*/ fun before(/*0*/ vararg nodes: dynamic /*kotlin.Array<out dynamic>*/): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun blur(): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun cloneNode(/*0*/ deep: kotlin.Boolean = ...): org.w3c.dom.Node
    public final override /*1*/ /*fake_override*/ fun closest(/*0*/ selectors: kotlin.String): org.w3c.dom.Element?
    public final override /*1*/ /*fake_override*/ fun compareDocumentPosition(/*0*/ other: org.w3c.dom.Node): kotlin.Short
    public final override /*1*/ /*fake_override*/ fun contains(/*0*/ other: org.w3c.dom.Node?): kotlin.Boolean
    public abstract override /*1*/ /*fake_override*/ fun convertPointFromNode(/*0*/ point: org.w3c.dom.DOMPointInit, /*1*/ from: dynamic, /*2*/ options: org.w3c.dom.ConvertCoordinateOptions = ...): org.w3c.dom.DOMPoint
    public abstract override /*1*/ /*fake_override*/ fun convertQuadFromNode(/*0*/ quad: dynamic, /*1*/ from: dynamic, /*2*/ options: org.w3c.dom.ConvertCoordinateOptions = ...): org.w3c.dom.DOMQuad
    public abstract override /*1*/ /*fake_override*/ fun convertRectFromNode(/*0*/ rect: org.w3c.dom.DOMRectReadOnly, /*1*/ from: dynamic, /*2*/ options: org.w3c.dom.ConvertCoordinateOptions = ...): org.w3c.dom.DOMQuad
    public final override /*1*/ /*fake_override*/ fun dispatchEvent(/*0*/ event: org.w3c.dom.events.Event): kotlin.Boolean
    public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
    public final override /*1*/ /*fake_override*/ fun focus(): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun getAttribute(/*0*/ qualifiedName: kotlin.String): kotlin.String?
    public final override /*1*/ /*fake_override*/ fun getAttributeNS(/*0*/ namespace: kotlin.String?, /*1*/ localName: kotlin.String): kotlin.String?
    public final override /*1*/ /*fake_override*/ fun getAttributeNames(): kotlin.Array<kotlin.String>
    public final override /*1*/ /*fake_override*/ fun getAttributeNode(/*0*/ qualifiedName: kotlin.String): org.w3c.dom.Attr?
    public final override /*1*/ /*fake_override*/ fun getAttributeNodeNS(/*0*/ namespace: kotlin.String?, /*1*/ localName: kotlin.String): org.w3c.dom.Attr?
    public final override /*1*/ /*fake_override*/ fun getBBox(/*0*/ options: org.w3c.dom.svg.SVGBoundingBoxOptions = ...): org.w3c.dom.DOMRect
    public final override /*1*/ /*fake_override*/ fun getBoundingClientRect(): org.w3c.dom.DOMRect
    public abstract override /*1*/ /*fake_override*/ fun getBoxQuads(/*0*/ options: org.w3c.dom.BoxQuadOptions = ...): kotlin.Array<org.w3c.dom.DOMQuad>
    public final override /*1*/ /*fake_override*/ fun getCTM(): org.w3c.dom.DOMMatrix?
    public final override /*1*/ /*fake_override*/ fun getClientRects(): kotlin.Array<org.w3c.dom.DOMRect>
    public final override /*1*/ /*fake_override*/ fun getElementsByClassName(/*0*/ classNames: kotlin.String): org.w3c.dom.HTMLCollection
    public final override /*1*/ /*fake_override*/ fun getElementsByTagName(/*0*/ qualifiedName: kotlin.String): org.w3c.dom.HTMLCollection
    public final override /*1*/ /*fake_override*/ fun getElementsByTagNameNS(/*0*/ namespace: kotlin.String?, /*1*/ localName: kotlin.String): org.w3c.dom.HTMLCollection
    public final override /*1*/ /*fake_override*/ fun getRootNode(/*0*/ options: org.w3c.dom.GetRootNodeOptions = ...): org.w3c.dom.Node
    public final override /*1*/ /*fake_override*/ fun getScreenCTM(): org.w3c.dom.DOMMatrix?
    public final override /*1*/ /*fake_override*/ fun hasAttribute(/*0*/ qualifiedName: kotlin.String): kotlin.Boolean
    public final override /*1*/ /*fake_override*/ fun hasAttributeNS(/*0*/ namespace: kotlin.String?, /*1*/ localName: kotlin.String): kotlin.Boolean
    public final override /*1*/ /*fake_override*/ fun hasAttributes(): kotlin.Boolean
    public final override /*1*/ /*fake_override*/ fun hasChildNodes(): kotlin.Boolean
    public final override /*1*/ /*fake_override*/ fun hasPointerCapture(/*0*/ pointerId: kotlin.Int): kotlin.Boolean
    public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
    public final override /*1*/ /*fake_override*/ fun insertAdjacentElement(/*0*/ where: kotlin.String, /*1*/ element: org.w3c.dom.Element): org.w3c.dom.Element?
    public final override /*1*/ /*fake_override*/ fun insertAdjacentHTML(/*0*/ position: kotlin.String, /*1*/ text: kotlin.String): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun insertAdjacentText(/*0*/ where: kotlin.String, /*1*/ data: kotlin.String): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun insertBefore(/*0*/ node: org.w3c.dom.Node, /*1*/ child: org.w3c.dom.Node?): org.w3c.dom.Node
    public final override /*1*/ /*fake_override*/ fun isDefaultNamespace(/*0*/ namespace: kotlin.String?): kotlin.Boolean
    public final override /*1*/ /*fake_override*/ fun isEqualNode(/*0*/ otherNode: org.w3c.dom.Node?): kotlin.Boolean
    public final override /*1*/ /*fake_override*/ fun isSameNode(/*0*/ otherNode: org.w3c.dom.Node?): kotlin.Boolean
    public final override /*1*/ /*fake_override*/ fun lookupNamespaceURI(/*0*/ prefix: kotlin.String?): kotlin.String?
    public final override /*1*/ /*fake_override*/ fun lookupPrefix(/*0*/ namespace: kotlin.String?): kotlin.String?
    public final override /*1*/ /*fake_override*/ fun matches(/*0*/ selectors: kotlin.String): kotlin.Boolean
    public final override /*1*/ /*fake_override*/ fun normalize(): kotlin.Unit
    public abstract override /*1*/ /*fake_override*/ fun prepend(/*0*/ vararg nodes: dynamic /*kotlin.Array<out dynamic>*/): kotlin.Unit
    public abstract override /*1*/ /*fake_override*/ fun querySelector(/*0*/ selectors: kotlin.String): org.w3c.dom.Element?
    public abstract override /*1*/ /*fake_override*/ fun querySelectorAll(/*0*/ selectors: kotlin.String): org.w3c.dom.NodeList
    public final override /*1*/ /*fake_override*/ fun releasePointerCapture(/*0*/ pointerId: kotlin.Int): kotlin.Unit
    public abstract override /*1*/ /*fake_override*/ fun remove(): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun removeAttribute(/*0*/ qualifiedName: kotlin.String): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun removeAttributeNS(/*0*/ namespace: kotlin.String?, /*1*/ localName: kotlin.String): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun removeAttributeNode(/*0*/ attr: org.w3c.dom.Attr): org.w3c.dom.Attr
    public final override /*1*/ /*fake_override*/ fun removeChild(/*0*/ child: org.w3c.dom.Node): org.w3c.dom.Node
    public final override /*1*/ /*fake_override*/ fun removeEventListener(/*0*/ type: kotlin.String, /*1*/ callback: ((org.w3c.dom.events.Event) -> kotlin.Unit)?, /*2*/ options: dynamic = ...): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun removeEventListener(/*0*/ type: kotlin.String, /*1*/ callback: org.w3c.dom.events.EventListener?, /*2*/ options: dynamic = ...): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun replaceChild(/*0*/ node: org.w3c.dom.Node, /*1*/ child: org.w3c.dom.Node): org.w3c.dom.Node
    public abstract override /*1*/ /*fake_override*/ fun replaceWith(/*0*/ vararg nodes: dynamic /*kotlin.Array<out dynamic>*/): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun requestFullscreen(): kotlin.js.Promise<kotlin.Unit>
    public final override /*1*/ /*fake_override*/ fun scroll(/*0*/ x: kotlin.Double, /*1*/ y: kotlin.Double): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun scroll(/*0*/ options: org.w3c.dom.ScrollToOptions = ...): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun scrollBy(/*0*/ x: kotlin.Double, /*1*/ y: kotlin.Double): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun scrollBy(/*0*/ options: org.w3c.dom.ScrollToOptions = ...): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun scrollIntoView(): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun scrollIntoView(/*0*/ arg: dynamic): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun scrollTo(/*0*/ x: kotlin.Double, /*1*/ y: kotlin.Double): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun scrollTo(/*0*/ options: org.w3c.dom.ScrollToOptions = ...): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun setAttribute(/*0*/ qualifiedName: kotlin.String, /*1*/ value: kotlin.String): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun setAttributeNS(/*0*/ namespace: kotlin.String?, /*1*/ qualifiedName: kotlin.String, /*2*/ value: kotlin.String): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun setAttributeNode(/*0*/ attr: org.w3c.dom.Attr): org.w3c.dom.Attr?
    public final override /*1*/ /*fake_override*/ fun setAttributeNodeNS(/*0*/ attr: org.w3c.dom.Attr): org.w3c.dom.Attr?
    public final override /*1*/ /*fake_override*/ fun setPointerCapture(/*0*/ pointerId: kotlin.Int): kotlin.Unit
    public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
    public final override /*1*/ /*fake_override*/ fun webkitMatchesSelector(/*0*/ selectors: kotlin.String): kotlin.Boolean

    public companion object Companion {
        /*primary*/ private constructor Companion()
        public final val ATTRIBUTE_NODE: kotlin.Short
            public final fun <get-ATTRIBUTE_NODE>(): kotlin.Short
        public final val CDATA_SECTION_NODE: kotlin.Short
            public final fun <get-CDATA_SECTION_NODE>(): kotlin.Short
        public final val COMMENT_NODE: kotlin.Short
            public final fun <get-COMMENT_NODE>(): kotlin.Short
        public final val DOCUMENT_FRAGMENT_NODE: kotlin.Short
            public final fun <get-DOCUMENT_FRAGMENT_NODE>(): kotlin.Short
        public final val DOCUMENT_NODE: kotlin.Short
            public final fun <get-DOCUMENT_NODE>(): kotlin.Short
        public final val DOCUMENT_POSITION_CONTAINED_BY: kotlin.Short
            public final fun <get-DOCUMENT_POSITION_CONTAINED_BY>(): kotlin.Short
        public final val DOCUMENT_POSITION_CONTAINS: kotlin.Short
            public final fun <get-DOCUMENT_POSITION_CONTAINS>(): kotlin.Short
        public final val DOCUMENT_POSITION_DISCONNECTED: kotlin.Short
            public final fun <get-DOCUMENT_POSITION_DISCONNECTED>(): kotlin.Short
        public final val DOCUMENT_POSITION_FOLLOWING: kotlin.Short
            public final fun <get-DOCUMENT_POSITION_FOLLOWING>(): kotlin.Short
        public final val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: kotlin.Short
            public final fun <get-DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC>(): kotlin.Short
        public final val DOCUMENT_POSITION_PRECEDING: kotlin.Short
            public final fun <get-DOCUMENT_POSITION_PRECEDING>(): kotlin.Short
        public final val DOCUMENT_TYPE_NODE: kotlin.Short
            public final fun <get-DOCUMENT_TYPE_NODE>(): kotlin.Short
        public final val ELEMENT_NODE: kotlin.Short
            public final fun <get-ELEMENT_NODE>(): kotlin.Short
        public final val ENTITY_NODE: kotlin.Short
            public final fun <get-ENTITY_NODE>(): kotlin.Short
        public final val ENTITY_REFERENCE_NODE: kotlin.Short
            public final fun <get-ENTITY_REFERENCE_NODE>(): kotlin.Short
        public final val NOTATION_NODE: kotlin.Short
            public final fun <get-NOTATION_NODE>(): kotlin.Short
        public final val PROCESSING_INSTRUCTION_NODE: kotlin.Short
            public final fun <get-PROCESSING_INSTRUCTION_NODE>(): kotlin.Short
        public final val TEXT_NODE: kotlin.Short
            public final fun <get-TEXT_NODE>(): kotlin.Short
        public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
        public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
        public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
    }
}

public abstract external class SVGGeometryElement : org.w3c.dom.svg.SVGGraphicsElement {
    /*primary*/ public constructor SVGGeometryElement()
    public open override /*1*/ /*fake_override*/ val assignedSlot: org.w3c.dom.HTMLSlotElement?
        public open override /*1*/ /*fake_override*/ fun <get-assignedSlot>(): org.w3c.dom.HTMLSlotElement?
    public open override /*1*/ /*fake_override*/ val attributes: org.w3c.dom.NamedNodeMap
        public open override /*1*/ /*fake_override*/ fun <get-attributes>(): org.w3c.dom.NamedNodeMap
    public open override /*1*/ /*fake_override*/ val baseURI: kotlin.String
        public open override /*1*/ /*fake_override*/ fun <get-baseURI>(): kotlin.String
    public abstract override /*1*/ /*fake_override*/ val childElementCount: kotlin.Int
        public abstract override /*1*/ /*fake_override*/ fun <get-childElementCount>(): kotlin.Int
    public open override /*1*/ /*fake_override*/ val childNodes: org.w3c.dom.NodeList
        public open override /*1*/ /*fake_override*/ fun <get-childNodes>(): org.w3c.dom.NodeList
    public abstract override /*1*/ /*fake_override*/ val children: org.w3c.dom.HTMLCollection
        public abstract override /*1*/ /*fake_override*/ fun <get-children>(): org.w3c.dom.HTMLCollection
    public open override /*1*/ /*fake_override*/ val classList: org.w3c.dom.DOMTokenList
        public open override /*1*/ /*fake_override*/ fun <get-classList>(): org.w3c.dom.DOMTokenList
    public open override /*1*/ /*fake_override*/ var className: kotlin.String
        public open override /*1*/ /*fake_override*/ fun <get-className>(): kotlin.String
        public open override /*1*/ /*fake_override*/ fun <set-className>(/*0*/ <set-?>: kotlin.String): kotlin.Unit
    public open override /*1*/ /*fake_override*/ val clientHeight: kotlin.Int
        public open override /*1*/ /*fake_override*/ fun <get-clientHeight>(): kotlin.Int
    public open override /*1*/ /*fake_override*/ val clientLeft: kotlin.Int
        public open override /*1*/ /*fake_override*/ fun <get-clientLeft>(): kotlin.Int
    public open override /*1*/ /*fake_override*/ val clientTop: kotlin.Int
        public open override /*1*/ /*fake_override*/ fun <get-clientTop>(): kotlin.Int
    public open override /*1*/ /*fake_override*/ val clientWidth: kotlin.Int
        public open override /*1*/ /*fake_override*/ fun <get-clientWidth>(): kotlin.Int
    public open override /*1*/ /*fake_override*/ val correspondingElement: org.w3c.dom.svg.SVGElement?
        public open override /*1*/ /*fake_override*/ fun <get-correspondingElement>(): org.w3c.dom.svg.SVGElement?
    public open override /*1*/ /*fake_override*/ val correspondingUseElement: org.w3c.dom.svg.SVGUseElement?
        public open override /*1*/ /*fake_override*/ fun <get-correspondingUseElement>(): org.w3c.dom.svg.SVGUseElement?
    public open override /*1*/ /*fake_override*/ val dataset: org.w3c.dom.DOMStringMap
        public open override /*1*/ /*fake_override*/ fun <get-dataset>(): org.w3c.dom.DOMStringMap
    public open override /*1*/ /*fake_override*/ val firstChild: org.w3c.dom.Node?
        public open override /*1*/ /*fake_override*/ fun <get-firstChild>(): org.w3c.dom.Node?
    public open override /*1*/ /*fake_override*/ val firstElementChild: org.w3c.dom.Element?
        public open override /*1*/ /*fake_override*/ fun <get-firstElementChild>(): org.w3c.dom.Element?
    public open override /*1*/ /*fake_override*/ var id: kotlin.String
        public open override /*1*/ /*fake_override*/ fun <get-id>(): kotlin.String
        public open override /*1*/ /*fake_override*/ fun <set-id>(/*0*/ <set-?>: kotlin.String): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var innerHTML: kotlin.String
        public open override /*1*/ /*fake_override*/ fun <get-innerHTML>(): kotlin.String
        public open override /*1*/ /*fake_override*/ fun <set-innerHTML>(/*0*/ <set-?>: kotlin.String): kotlin.Unit
    public open override /*1*/ /*fake_override*/ val isConnected: kotlin.Boolean
        public open override /*1*/ /*fake_override*/ fun <get-isConnected>(): kotlin.Boolean
    public open override /*1*/ /*fake_override*/ val lastChild: org.w3c.dom.Node?
        public open override /*1*/ /*fake_override*/ fun <get-lastChild>(): org.w3c.dom.Node?
    public open override /*1*/ /*fake_override*/ val lastElementChild: org.w3c.dom.Element?
        public open override /*1*/ /*fake_override*/ fun <get-lastElementChild>(): org.w3c.dom.Element?
    public open override /*1*/ /*fake_override*/ val localName: kotlin.String
        public open override /*1*/ /*fake_override*/ fun <get-localName>(): kotlin.String
    public open override /*1*/ /*fake_override*/ val namespaceURI: kotlin.String?
        public open override /*1*/ /*fake_override*/ fun <get-namespaceURI>(): kotlin.String?
    public open override /*1*/ /*fake_override*/ val nextElementSibling: org.w3c.dom.Element?
        public open override /*1*/ /*fake_override*/ fun <get-nextElementSibling>(): org.w3c.dom.Element?
    public open override /*1*/ /*fake_override*/ val nextSibling: org.w3c.dom.Node?
        public open override /*1*/ /*fake_override*/ fun <get-nextSibling>(): org.w3c.dom.Node?
    public open override /*1*/ /*fake_override*/ val nodeName: kotlin.String
        public open override /*1*/ /*fake_override*/ fun <get-nodeName>(): kotlin.String
    public open override /*1*/ /*fake_override*/ val nodeType: kotlin.Short
        public open override /*1*/ /*fake_override*/ fun <get-nodeType>(): kotlin.Short
    public open override /*1*/ /*fake_override*/ var nodeValue: kotlin.String?
        public open override /*1*/ /*fake_override*/ fun <get-nodeValue>(): kotlin.String?
        public open override /*1*/ /*fake_override*/ fun <set-nodeValue>(/*0*/ <set-?>: kotlin.String?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onabort: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onabort>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onabort>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onblur: ((org.w3c.dom.events.FocusEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onblur>(): ((org.w3c.dom.events.FocusEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onblur>(/*0*/ value: ((org.w3c.dom.events.FocusEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var oncancel: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-oncancel>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-oncancel>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var oncanplay: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-oncanplay>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-oncanplay>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var oncanplaythrough: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-oncanplaythrough>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-oncanplaythrough>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onchange: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onchange>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onchange>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onclick: ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onclick>(): ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onclick>(/*0*/ value: ((org.w3c.dom.events.MouseEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onclose: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onclose>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onclose>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var oncontextmenu: ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-oncontextmenu>(): ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-oncontextmenu>(/*0*/ value: ((org.w3c.dom.events.MouseEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var oncuechange: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-oncuechange>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-oncuechange>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ondblclick: ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ondblclick>(): ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ondblclick>(/*0*/ value: ((org.w3c.dom.events.MouseEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ondrag: ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ondrag>(): ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ondrag>(/*0*/ value: ((org.w3c.dom.DragEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ondragend: ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ondragend>(): ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ondragend>(/*0*/ value: ((org.w3c.dom.DragEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ondragenter: ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ondragenter>(): ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ondragenter>(/*0*/ value: ((org.w3c.dom.DragEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ondragexit: ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ondragexit>(): ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ondragexit>(/*0*/ value: ((org.w3c.dom.DragEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ondragleave: ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ondragleave>(): ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ondragleave>(/*0*/ value: ((org.w3c.dom.DragEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ondragover: ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ondragover>(): ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ondragover>(/*0*/ value: ((org.w3c.dom.DragEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ondragstart: ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ondragstart>(): ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ondragstart>(/*0*/ value: ((org.w3c.dom.DragEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ondrop: ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ondrop>(): ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ondrop>(/*0*/ value: ((org.w3c.dom.DragEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ondurationchange: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ondurationchange>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ondurationchange>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onemptied: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onemptied>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onemptied>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onended: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onended>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onended>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onerror: ((dynamic, kotlin.String, kotlin.Int, kotlin.Int, kotlin.Any?) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onerror>(): ((dynamic, kotlin.String, kotlin.Int, kotlin.Int, kotlin.Any?) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onerror>(/*0*/ value: ((dynamic, kotlin.String, kotlin.Int, kotlin.Int, kotlin.Any?) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onfocus: ((org.w3c.dom.events.FocusEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onfocus>(): ((org.w3c.dom.events.FocusEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onfocus>(/*0*/ value: ((org.w3c.dom.events.FocusEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ongotpointercapture: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ongotpointercapture>(): ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ongotpointercapture>(/*0*/ value: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var oninput: ((org.w3c.dom.events.InputEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-oninput>(): ((org.w3c.dom.events.InputEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-oninput>(/*0*/ value: ((org.w3c.dom.events.InputEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var oninvalid: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-oninvalid>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-oninvalid>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onkeydown: ((org.w3c.dom.events.KeyboardEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onkeydown>(): ((org.w3c.dom.events.KeyboardEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onkeydown>(/*0*/ value: ((org.w3c.dom.events.KeyboardEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onkeypress: ((org.w3c.dom.events.KeyboardEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onkeypress>(): ((org.w3c.dom.events.KeyboardEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onkeypress>(/*0*/ value: ((org.w3c.dom.events.KeyboardEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onkeyup: ((org.w3c.dom.events.KeyboardEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onkeyup>(): ((org.w3c.dom.events.KeyboardEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onkeyup>(/*0*/ value: ((org.w3c.dom.events.KeyboardEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onload: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onload>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onload>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onloadeddata: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onloadeddata>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onloadeddata>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onloadedmetadata: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onloadedmetadata>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onloadedmetadata>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onloadend: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onloadend>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onloadend>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onloadstart: ((org.w3c.xhr.ProgressEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onloadstart>(): ((org.w3c.xhr.ProgressEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onloadstart>(/*0*/ value: ((org.w3c.xhr.ProgressEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onlostpointercapture: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onlostpointercapture>(): ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onlostpointercapture>(/*0*/ value: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onmousedown: ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onmousedown>(): ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onmousedown>(/*0*/ value: ((org.w3c.dom.events.MouseEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onmouseenter: ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onmouseenter>(): ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onmouseenter>(/*0*/ value: ((org.w3c.dom.events.MouseEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onmouseleave: ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onmouseleave>(): ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onmouseleave>(/*0*/ value: ((org.w3c.dom.events.MouseEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onmousemove: ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onmousemove>(): ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onmousemove>(/*0*/ value: ((org.w3c.dom.events.MouseEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onmouseout: ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onmouseout>(): ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onmouseout>(/*0*/ value: ((org.w3c.dom.events.MouseEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onmouseover: ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onmouseover>(): ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onmouseover>(/*0*/ value: ((org.w3c.dom.events.MouseEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onmouseup: ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onmouseup>(): ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onmouseup>(/*0*/ value: ((org.w3c.dom.events.MouseEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onpause: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onpause>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onpause>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onplay: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onplay>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onplay>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onplaying: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onplaying>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onplaying>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onpointercancel: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onpointercancel>(): ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onpointercancel>(/*0*/ value: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onpointerdown: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onpointerdown>(): ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onpointerdown>(/*0*/ value: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onpointerenter: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onpointerenter>(): ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onpointerenter>(/*0*/ value: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onpointerleave: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onpointerleave>(): ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onpointerleave>(/*0*/ value: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onpointermove: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onpointermove>(): ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onpointermove>(/*0*/ value: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onpointerout: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onpointerout>(): ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onpointerout>(/*0*/ value: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onpointerover: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onpointerover>(): ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onpointerover>(/*0*/ value: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onpointerup: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onpointerup>(): ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onpointerup>(/*0*/ value: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onprogress: ((org.w3c.xhr.ProgressEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onprogress>(): ((org.w3c.xhr.ProgressEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onprogress>(/*0*/ value: ((org.w3c.xhr.ProgressEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onratechange: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onratechange>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onratechange>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onreset: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onreset>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onreset>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onresize: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onresize>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onresize>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onscroll: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onscroll>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onscroll>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onseeked: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onseeked>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onseeked>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onseeking: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onseeking>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onseeking>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onselect: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onselect>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onselect>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onshow: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onshow>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onshow>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onstalled: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onstalled>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onstalled>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onsubmit: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onsubmit>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onsubmit>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onsuspend: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onsuspend>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onsuspend>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ontimeupdate: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ontimeupdate>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ontimeupdate>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ontoggle: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ontoggle>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ontoggle>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onvolumechange: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onvolumechange>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onvolumechange>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onwaiting: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onwaiting>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onwaiting>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onwheel: ((org.w3c.dom.events.WheelEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onwheel>(): ((org.w3c.dom.events.WheelEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onwheel>(/*0*/ value: ((org.w3c.dom.events.WheelEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var outerHTML: kotlin.String
        public open override /*1*/ /*fake_override*/ fun <get-outerHTML>(): kotlin.String
        public open override /*1*/ /*fake_override*/ fun <set-outerHTML>(/*0*/ <set-?>: kotlin.String): kotlin.Unit
    public open override /*1*/ /*fake_override*/ val ownerDocument: org.w3c.dom.Document?
        public open override /*1*/ /*fake_override*/ fun <get-ownerDocument>(): org.w3c.dom.Document?
    public open override /*1*/ /*fake_override*/ val ownerSVGElement: org.w3c.dom.svg.SVGSVGElement?
        public open override /*1*/ /*fake_override*/ fun <get-ownerSVGElement>(): org.w3c.dom.svg.SVGSVGElement?
    public open override /*1*/ /*fake_override*/ val parentElement: org.w3c.dom.Element?
        public open override /*1*/ /*fake_override*/ fun <get-parentElement>(): org.w3c.dom.Element?
    public open override /*1*/ /*fake_override*/ val parentNode: org.w3c.dom.Node?
        public open override /*1*/ /*fake_override*/ fun <get-parentNode>(): org.w3c.dom.Node?
    public open val pathLength: org.w3c.dom.svg.SVGAnimatedNumber
        public open fun <get-pathLength>(): org.w3c.dom.svg.SVGAnimatedNumber
    public open override /*1*/ /*fake_override*/ val prefix: kotlin.String?
        public open override /*1*/ /*fake_override*/ fun <get-prefix>(): kotlin.String?
    public open override /*1*/ /*fake_override*/ val previousElementSibling: org.w3c.dom.Element?
        public open override /*1*/ /*fake_override*/ fun <get-previousElementSibling>(): org.w3c.dom.Element?
    public open override /*1*/ /*fake_override*/ val previousSibling: org.w3c.dom.Node?
        public open override /*1*/ /*fake_override*/ fun <get-previousSibling>(): org.w3c.dom.Node?
    public abstract override /*1*/ /*fake_override*/ val requiredExtensions: org.w3c.dom.svg.SVGStringList
        public abstract override /*1*/ /*fake_override*/ fun <get-requiredExtensions>(): org.w3c.dom.svg.SVGStringList
    public open override /*1*/ /*fake_override*/ val scrollHeight: kotlin.Int
        public open override /*1*/ /*fake_override*/ fun <get-scrollHeight>(): kotlin.Int
    public open override /*1*/ /*fake_override*/ var scrollLeft: kotlin.Double
        public open override /*1*/ /*fake_override*/ fun <get-scrollLeft>(): kotlin.Double
        public open override /*1*/ /*fake_override*/ fun <set-scrollLeft>(/*0*/ <set-?>: kotlin.Double): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var scrollTop: kotlin.Double
        public open override /*1*/ /*fake_override*/ fun <get-scrollTop>(): kotlin.Double
        public open override /*1*/ /*fake_override*/ fun <set-scrollTop>(/*0*/ <set-?>: kotlin.Double): kotlin.Unit
    public open override /*1*/ /*fake_override*/ val scrollWidth: kotlin.Int
        public open override /*1*/ /*fake_override*/ fun <get-scrollWidth>(): kotlin.Int
    public open override /*1*/ /*fake_override*/ val shadowRoot: org.w3c.dom.ShadowRoot?
        public open override /*1*/ /*fake_override*/ fun <get-shadowRoot>(): org.w3c.dom.ShadowRoot?
    public open override /*1*/ /*fake_override*/ var slot: kotlin.String
        public open override /*1*/ /*fake_override*/ fun <get-slot>(): kotlin.String
        public open override /*1*/ /*fake_override*/ fun <set-slot>(/*0*/ <set-?>: kotlin.String): kotlin.Unit
    public abstract override /*1*/ /*fake_override*/ val style: org.w3c.dom.css.CSSStyleDeclaration
        public abstract override /*1*/ /*fake_override*/ fun <get-style>(): org.w3c.dom.css.CSSStyleDeclaration
    public abstract override /*1*/ /*fake_override*/ val systemLanguage: org.w3c.dom.svg.SVGStringList
        public abstract override /*1*/ /*fake_override*/ fun <get-systemLanguage>(): org.w3c.dom.svg.SVGStringList
    public open override /*1*/ /*fake_override*/ var tabIndex: kotlin.Int
        public open override /*1*/ /*fake_override*/ fun <get-tabIndex>(): kotlin.Int
        public open override /*1*/ /*fake_override*/ fun <set-tabIndex>(/*0*/ <set-?>: kotlin.Int): kotlin.Unit
    public open override /*1*/ /*fake_override*/ val tagName: kotlin.String
        public open override /*1*/ /*fake_override*/ fun <get-tagName>(): kotlin.String
    public open override /*1*/ /*fake_override*/ var textContent: kotlin.String?
        public open override /*1*/ /*fake_override*/ fun <get-textContent>(): kotlin.String?
        public open override /*1*/ /*fake_override*/ fun <set-textContent>(/*0*/ <set-?>: kotlin.String?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ val transform: org.w3c.dom.svg.SVGAnimatedTransformList
        public open override /*1*/ /*fake_override*/ fun <get-transform>(): org.w3c.dom.svg.SVGAnimatedTransformList
    public open override /*1*/ /*fake_override*/ val viewportElement: org.w3c.dom.svg.SVGElement?
        public open override /*1*/ /*fake_override*/ fun <get-viewportElement>(): org.w3c.dom.svg.SVGElement?
    public final override /*1*/ /*fake_override*/ fun addEventListener(/*0*/ type: kotlin.String, /*1*/ callback: ((org.w3c.dom.events.Event) -> kotlin.Unit)?, /*2*/ options: dynamic = ...): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun addEventListener(/*0*/ type: kotlin.String, /*1*/ callback: org.w3c.dom.events.EventListener?, /*2*/ options: dynamic = ...): kotlin.Unit
    public abstract override /*1*/ /*fake_override*/ fun after(/*0*/ vararg nodes: dynamic /*kotlin.Array<out dynamic>*/): kotlin.Unit
    public abstract override /*1*/ /*fake_override*/ fun append(/*0*/ vararg nodes: dynamic /*kotlin.Array<out dynamic>*/): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun appendChild(/*0*/ node: org.w3c.dom.Node): org.w3c.dom.Node
    public final override /*1*/ /*fake_override*/ fun attachShadow(/*0*/ init: org.w3c.dom.ShadowRootInit): org.w3c.dom.ShadowRoot
    public abstract override /*1*/ /*fake_override*/ fun before(/*0*/ vararg nodes: dynamic /*kotlin.Array<out dynamic>*/): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun blur(): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun cloneNode(/*0*/ deep: kotlin.Boolean = ...): org.w3c.dom.Node
    public final override /*1*/ /*fake_override*/ fun closest(/*0*/ selectors: kotlin.String): org.w3c.dom.Element?
    public final override /*1*/ /*fake_override*/ fun compareDocumentPosition(/*0*/ other: org.w3c.dom.Node): kotlin.Short
    public final override /*1*/ /*fake_override*/ fun contains(/*0*/ other: org.w3c.dom.Node?): kotlin.Boolean
    public abstract override /*1*/ /*fake_override*/ fun convertPointFromNode(/*0*/ point: org.w3c.dom.DOMPointInit, /*1*/ from: dynamic, /*2*/ options: org.w3c.dom.ConvertCoordinateOptions = ...): org.w3c.dom.DOMPoint
    public abstract override /*1*/ /*fake_override*/ fun convertQuadFromNode(/*0*/ quad: dynamic, /*1*/ from: dynamic, /*2*/ options: org.w3c.dom.ConvertCoordinateOptions = ...): org.w3c.dom.DOMQuad
    public abstract override /*1*/ /*fake_override*/ fun convertRectFromNode(/*0*/ rect: org.w3c.dom.DOMRectReadOnly, /*1*/ from: dynamic, /*2*/ options: org.w3c.dom.ConvertCoordinateOptions = ...): org.w3c.dom.DOMQuad
    public final override /*1*/ /*fake_override*/ fun dispatchEvent(/*0*/ event: org.w3c.dom.events.Event): kotlin.Boolean
    public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
    public final override /*1*/ /*fake_override*/ fun focus(): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun getAttribute(/*0*/ qualifiedName: kotlin.String): kotlin.String?
    public final override /*1*/ /*fake_override*/ fun getAttributeNS(/*0*/ namespace: kotlin.String?, /*1*/ localName: kotlin.String): kotlin.String?
    public final override /*1*/ /*fake_override*/ fun getAttributeNames(): kotlin.Array<kotlin.String>
    public final override /*1*/ /*fake_override*/ fun getAttributeNode(/*0*/ qualifiedName: kotlin.String): org.w3c.dom.Attr?
    public final override /*1*/ /*fake_override*/ fun getAttributeNodeNS(/*0*/ namespace: kotlin.String?, /*1*/ localName: kotlin.String): org.w3c.dom.Attr?
    public final override /*1*/ /*fake_override*/ fun getBBox(/*0*/ options: org.w3c.dom.svg.SVGBoundingBoxOptions = ...): org.w3c.dom.DOMRect
    public final override /*1*/ /*fake_override*/ fun getBoundingClientRect(): org.w3c.dom.DOMRect
    public abstract override /*1*/ /*fake_override*/ fun getBoxQuads(/*0*/ options: org.w3c.dom.BoxQuadOptions = ...): kotlin.Array<org.w3c.dom.DOMQuad>
    public final override /*1*/ /*fake_override*/ fun getCTM(): org.w3c.dom.DOMMatrix?
    public final override /*1*/ /*fake_override*/ fun getClientRects(): kotlin.Array<org.w3c.dom.DOMRect>
    public final override /*1*/ /*fake_override*/ fun getElementsByClassName(/*0*/ classNames: kotlin.String): org.w3c.dom.HTMLCollection
    public final override /*1*/ /*fake_override*/ fun getElementsByTagName(/*0*/ qualifiedName: kotlin.String): org.w3c.dom.HTMLCollection
    public final override /*1*/ /*fake_override*/ fun getElementsByTagNameNS(/*0*/ namespace: kotlin.String?, /*1*/ localName: kotlin.String): org.w3c.dom.HTMLCollection
    public final fun getPointAtLength(/*0*/ distance: kotlin.Float): org.w3c.dom.DOMPoint
    public final override /*1*/ /*fake_override*/ fun getRootNode(/*0*/ options: org.w3c.dom.GetRootNodeOptions = ...): org.w3c.dom.Node
    public final override /*1*/ /*fake_override*/ fun getScreenCTM(): org.w3c.dom.DOMMatrix?
    public final fun getTotalLength(): kotlin.Float
    public final override /*1*/ /*fake_override*/ fun hasAttribute(/*0*/ qualifiedName: kotlin.String): kotlin.Boolean
    public final override /*1*/ /*fake_override*/ fun hasAttributeNS(/*0*/ namespace: kotlin.String?, /*1*/ localName: kotlin.String): kotlin.Boolean
    public final override /*1*/ /*fake_override*/ fun hasAttributes(): kotlin.Boolean
    public final override /*1*/ /*fake_override*/ fun hasChildNodes(): kotlin.Boolean
    public final override /*1*/ /*fake_override*/ fun hasPointerCapture(/*0*/ pointerId: kotlin.Int): kotlin.Boolean
    public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
    public final override /*1*/ /*fake_override*/ fun insertAdjacentElement(/*0*/ where: kotlin.String, /*1*/ element: org.w3c.dom.Element): org.w3c.dom.Element?
    public final override /*1*/ /*fake_override*/ fun insertAdjacentHTML(/*0*/ position: kotlin.String, /*1*/ text: kotlin.String): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun insertAdjacentText(/*0*/ where: kotlin.String, /*1*/ data: kotlin.String): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun insertBefore(/*0*/ node: org.w3c.dom.Node, /*1*/ child: org.w3c.dom.Node?): org.w3c.dom.Node
    public final override /*1*/ /*fake_override*/ fun isDefaultNamespace(/*0*/ namespace: kotlin.String?): kotlin.Boolean
    public final override /*1*/ /*fake_override*/ fun isEqualNode(/*0*/ otherNode: org.w3c.dom.Node?): kotlin.Boolean
    public final fun isPointInFill(/*0*/ point: org.w3c.dom.DOMPoint): kotlin.Boolean
    public final fun isPointInStroke(/*0*/ point: org.w3c.dom.DOMPoint): kotlin.Boolean
    public final override /*1*/ /*fake_override*/ fun isSameNode(/*0*/ otherNode: org.w3c.dom.Node?): kotlin.Boolean
    public final override /*1*/ /*fake_override*/ fun lookupNamespaceURI(/*0*/ prefix: kotlin.String?): kotlin.String?
    public final override /*1*/ /*fake_override*/ fun lookupPrefix(/*0*/ namespace: kotlin.String?): kotlin.String?
    public final override /*1*/ /*fake_override*/ fun matches(/*0*/ selectors: kotlin.String): kotlin.Boolean
    public final override /*1*/ /*fake_override*/ fun normalize(): kotlin.Unit
    public abstract override /*1*/ /*fake_override*/ fun prepend(/*0*/ vararg nodes: dynamic /*kotlin.Array<out dynamic>*/): kotlin.Unit
    public abstract override /*1*/ /*fake_override*/ fun querySelector(/*0*/ selectors: kotlin.String): org.w3c.dom.Element?
    public abstract override /*1*/ /*fake_override*/ fun querySelectorAll(/*0*/ selectors: kotlin.String): org.w3c.dom.NodeList
    public final override /*1*/ /*fake_override*/ fun releasePointerCapture(/*0*/ pointerId: kotlin.Int): kotlin.Unit
    public abstract override /*1*/ /*fake_override*/ fun remove(): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun removeAttribute(/*0*/ qualifiedName: kotlin.String): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun removeAttributeNS(/*0*/ namespace: kotlin.String?, /*1*/ localName: kotlin.String): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun removeAttributeNode(/*0*/ attr: org.w3c.dom.Attr): org.w3c.dom.Attr
    public final override /*1*/ /*fake_override*/ fun removeChild(/*0*/ child: org.w3c.dom.Node): org.w3c.dom.Node
    public final override /*1*/ /*fake_override*/ fun removeEventListener(/*0*/ type: kotlin.String, /*1*/ callback: ((org.w3c.dom.events.Event) -> kotlin.Unit)?, /*2*/ options: dynamic = ...): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun removeEventListener(/*0*/ type: kotlin.String, /*1*/ callback: org.w3c.dom.events.EventListener?, /*2*/ options: dynamic = ...): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun replaceChild(/*0*/ node: org.w3c.dom.Node, /*1*/ child: org.w3c.dom.Node): org.w3c.dom.Node
    public abstract override /*1*/ /*fake_override*/ fun replaceWith(/*0*/ vararg nodes: dynamic /*kotlin.Array<out dynamic>*/): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun requestFullscreen(): kotlin.js.Promise<kotlin.Unit>
    public final override /*1*/ /*fake_override*/ fun scroll(/*0*/ x: kotlin.Double, /*1*/ y: kotlin.Double): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun scroll(/*0*/ options: org.w3c.dom.ScrollToOptions = ...): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun scrollBy(/*0*/ x: kotlin.Double, /*1*/ y: kotlin.Double): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun scrollBy(/*0*/ options: org.w3c.dom.ScrollToOptions = ...): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun scrollIntoView(): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun scrollIntoView(/*0*/ arg: dynamic): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun scrollTo(/*0*/ x: kotlin.Double, /*1*/ y: kotlin.Double): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun scrollTo(/*0*/ options: org.w3c.dom.ScrollToOptions = ...): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun setAttribute(/*0*/ qualifiedName: kotlin.String, /*1*/ value: kotlin.String): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun setAttributeNS(/*0*/ namespace: kotlin.String?, /*1*/ qualifiedName: kotlin.String, /*2*/ value: kotlin.String): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun setAttributeNode(/*0*/ attr: org.w3c.dom.Attr): org.w3c.dom.Attr?
    public final override /*1*/ /*fake_override*/ fun setAttributeNodeNS(/*0*/ attr: org.w3c.dom.Attr): org.w3c.dom.Attr?
    public final override /*1*/ /*fake_override*/ fun setPointerCapture(/*0*/ pointerId: kotlin.Int): kotlin.Unit
    public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
    public final override /*1*/ /*fake_override*/ fun webkitMatchesSelector(/*0*/ selectors: kotlin.String): kotlin.Boolean

    public companion object Companion {
        /*primary*/ private constructor Companion()
        public final val ATTRIBUTE_NODE: kotlin.Short
            public final fun <get-ATTRIBUTE_NODE>(): kotlin.Short
        public final val CDATA_SECTION_NODE: kotlin.Short
            public final fun <get-CDATA_SECTION_NODE>(): kotlin.Short
        public final val COMMENT_NODE: kotlin.Short
            public final fun <get-COMMENT_NODE>(): kotlin.Short
        public final val DOCUMENT_FRAGMENT_NODE: kotlin.Short
            public final fun <get-DOCUMENT_FRAGMENT_NODE>(): kotlin.Short
        public final val DOCUMENT_NODE: kotlin.Short
            public final fun <get-DOCUMENT_NODE>(): kotlin.Short
        public final val DOCUMENT_POSITION_CONTAINED_BY: kotlin.Short
            public final fun <get-DOCUMENT_POSITION_CONTAINED_BY>(): kotlin.Short
        public final val DOCUMENT_POSITION_CONTAINS: kotlin.Short
            public final fun <get-DOCUMENT_POSITION_CONTAINS>(): kotlin.Short
        public final val DOCUMENT_POSITION_DISCONNECTED: kotlin.Short
            public final fun <get-DOCUMENT_POSITION_DISCONNECTED>(): kotlin.Short
        public final val DOCUMENT_POSITION_FOLLOWING: kotlin.Short
            public final fun <get-DOCUMENT_POSITION_FOLLOWING>(): kotlin.Short
        public final val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: kotlin.Short
            public final fun <get-DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC>(): kotlin.Short
        public final val DOCUMENT_POSITION_PRECEDING: kotlin.Short
            public final fun <get-DOCUMENT_POSITION_PRECEDING>(): kotlin.Short
        public final val DOCUMENT_TYPE_NODE: kotlin.Short
            public final fun <get-DOCUMENT_TYPE_NODE>(): kotlin.Short
        public final val ELEMENT_NODE: kotlin.Short
            public final fun <get-ELEMENT_NODE>(): kotlin.Short
        public final val ENTITY_NODE: kotlin.Short
            public final fun <get-ENTITY_NODE>(): kotlin.Short
        public final val ENTITY_REFERENCE_NODE: kotlin.Short
            public final fun <get-ENTITY_REFERENCE_NODE>(): kotlin.Short
        public final val NOTATION_NODE: kotlin.Short
            public final fun <get-NOTATION_NODE>(): kotlin.Short
        public final val PROCESSING_INSTRUCTION_NODE: kotlin.Short
            public final fun <get-PROCESSING_INSTRUCTION_NODE>(): kotlin.Short
        public final val TEXT_NODE: kotlin.Short
            public final fun <get-TEXT_NODE>(): kotlin.Short
        public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
        public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
        public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
    }
}

public abstract external class SVGGradientElement : org.w3c.dom.svg.SVGElement, org.w3c.dom.svg.SVGURIReference, org.w3c.dom.svg.SVGUnitTypes {
    /*primary*/ public constructor SVGGradientElement()
    public open override /*1*/ /*fake_override*/ val assignedSlot: org.w3c.dom.HTMLSlotElement?
        public open override /*1*/ /*fake_override*/ fun <get-assignedSlot>(): org.w3c.dom.HTMLSlotElement?
    public open override /*1*/ /*fake_override*/ val attributes: org.w3c.dom.NamedNodeMap
        public open override /*1*/ /*fake_override*/ fun <get-attributes>(): org.w3c.dom.NamedNodeMap
    public open override /*1*/ /*fake_override*/ val baseURI: kotlin.String
        public open override /*1*/ /*fake_override*/ fun <get-baseURI>(): kotlin.String
    public abstract override /*1*/ /*fake_override*/ val childElementCount: kotlin.Int
        public abstract override /*1*/ /*fake_override*/ fun <get-childElementCount>(): kotlin.Int
    public open override /*1*/ /*fake_override*/ val childNodes: org.w3c.dom.NodeList
        public open override /*1*/ /*fake_override*/ fun <get-childNodes>(): org.w3c.dom.NodeList
    public abstract override /*1*/ /*fake_override*/ val children: org.w3c.dom.HTMLCollection
        public abstract override /*1*/ /*fake_override*/ fun <get-children>(): org.w3c.dom.HTMLCollection
    public open override /*1*/ /*fake_override*/ val classList: org.w3c.dom.DOMTokenList
        public open override /*1*/ /*fake_override*/ fun <get-classList>(): org.w3c.dom.DOMTokenList
    public open override /*1*/ /*fake_override*/ var className: kotlin.String
        public open override /*1*/ /*fake_override*/ fun <get-className>(): kotlin.String
        public open override /*1*/ /*fake_override*/ fun <set-className>(/*0*/ <set-?>: kotlin.String): kotlin.Unit
    public open override /*1*/ /*fake_override*/ val clientHeight: kotlin.Int
        public open override /*1*/ /*fake_override*/ fun <get-clientHeight>(): kotlin.Int
    public open override /*1*/ /*fake_override*/ val clientLeft: kotlin.Int
        public open override /*1*/ /*fake_override*/ fun <get-clientLeft>(): kotlin.Int
    public open override /*1*/ /*fake_override*/ val clientTop: kotlin.Int
        public open override /*1*/ /*fake_override*/ fun <get-clientTop>(): kotlin.Int
    public open override /*1*/ /*fake_override*/ val clientWidth: kotlin.Int
        public open override /*1*/ /*fake_override*/ fun <get-clientWidth>(): kotlin.Int
    public open override /*1*/ /*fake_override*/ val correspondingElement: org.w3c.dom.svg.SVGElement?
        public open override /*1*/ /*fake_override*/ fun <get-correspondingElement>(): org.w3c.dom.svg.SVGElement?
    public open override /*1*/ /*fake_override*/ val correspondingUseElement: org.w3c.dom.svg.SVGUseElement?
        public open override /*1*/ /*fake_override*/ fun <get-correspondingUseElement>(): org.w3c.dom.svg.SVGUseElement?
    public open override /*1*/ /*fake_override*/ val dataset: org.w3c.dom.DOMStringMap
        public open override /*1*/ /*fake_override*/ fun <get-dataset>(): org.w3c.dom.DOMStringMap
    public open override /*1*/ /*fake_override*/ val firstChild: org.w3c.dom.Node?
        public open override /*1*/ /*fake_override*/ fun <get-firstChild>(): org.w3c.dom.Node?
    public open override /*1*/ /*fake_override*/ val firstElementChild: org.w3c.dom.Element?
        public open override /*1*/ /*fake_override*/ fun <get-firstElementChild>(): org.w3c.dom.Element?
    public open val gradientTransform: org.w3c.dom.svg.SVGAnimatedTransformList
        public open fun <get-gradientTransform>(): org.w3c.dom.svg.SVGAnimatedTransformList
    public open val gradientUnits: org.w3c.dom.svg.SVGAnimatedEnumeration
        public open fun <get-gradientUnits>(): org.w3c.dom.svg.SVGAnimatedEnumeration
    public abstract override /*1*/ /*fake_override*/ val href: org.w3c.dom.svg.SVGAnimatedString
        public abstract override /*1*/ /*fake_override*/ fun <get-href>(): org.w3c.dom.svg.SVGAnimatedString
    public open override /*1*/ /*fake_override*/ var id: kotlin.String
        public open override /*1*/ /*fake_override*/ fun <get-id>(): kotlin.String
        public open override /*1*/ /*fake_override*/ fun <set-id>(/*0*/ <set-?>: kotlin.String): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var innerHTML: kotlin.String
        public open override /*1*/ /*fake_override*/ fun <get-innerHTML>(): kotlin.String
        public open override /*1*/ /*fake_override*/ fun <set-innerHTML>(/*0*/ <set-?>: kotlin.String): kotlin.Unit
    public open override /*1*/ /*fake_override*/ val isConnected: kotlin.Boolean
        public open override /*1*/ /*fake_override*/ fun <get-isConnected>(): kotlin.Boolean
    public open override /*1*/ /*fake_override*/ val lastChild: org.w3c.dom.Node?
        public open override /*1*/ /*fake_override*/ fun <get-lastChild>(): org.w3c.dom.Node?
    public open override /*1*/ /*fake_override*/ val lastElementChild: org.w3c.dom.Element?
        public open override /*1*/ /*fake_override*/ fun <get-lastElementChild>(): org.w3c.dom.Element?
    public open override /*1*/ /*fake_override*/ val localName: kotlin.String
        public open override /*1*/ /*fake_override*/ fun <get-localName>(): kotlin.String
    public open override /*1*/ /*fake_override*/ val namespaceURI: kotlin.String?
        public open override /*1*/ /*fake_override*/ fun <get-namespaceURI>(): kotlin.String?
    public open override /*1*/ /*fake_override*/ val nextElementSibling: org.w3c.dom.Element?
        public open override /*1*/ /*fake_override*/ fun <get-nextElementSibling>(): org.w3c.dom.Element?
    public open override /*1*/ /*fake_override*/ val nextSibling: org.w3c.dom.Node?
        public open override /*1*/ /*fake_override*/ fun <get-nextSibling>(): org.w3c.dom.Node?
    public open override /*1*/ /*fake_override*/ val nodeName: kotlin.String
        public open override /*1*/ /*fake_override*/ fun <get-nodeName>(): kotlin.String
    public open override /*1*/ /*fake_override*/ val nodeType: kotlin.Short
        public open override /*1*/ /*fake_override*/ fun <get-nodeType>(): kotlin.Short
    public open override /*1*/ /*fake_override*/ var nodeValue: kotlin.String?
        public open override /*1*/ /*fake_override*/ fun <get-nodeValue>(): kotlin.String?
        public open override /*1*/ /*fake_override*/ fun <set-nodeValue>(/*0*/ <set-?>: kotlin.String?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onabort: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onabort>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onabort>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onblur: ((org.w3c.dom.events.FocusEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onblur>(): ((org.w3c.dom.events.FocusEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onblur>(/*0*/ value: ((org.w3c.dom.events.FocusEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var oncancel: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-oncancel>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-oncancel>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var oncanplay: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-oncanplay>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-oncanplay>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var oncanplaythrough: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-oncanplaythrough>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-oncanplaythrough>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onchange: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onchange>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onchange>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onclick: ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onclick>(): ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onclick>(/*0*/ value: ((org.w3c.dom.events.MouseEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onclose: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onclose>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onclose>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var oncontextmenu: ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-oncontextmenu>(): ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-oncontextmenu>(/*0*/ value: ((org.w3c.dom.events.MouseEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var oncuechange: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-oncuechange>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-oncuechange>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ondblclick: ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ondblclick>(): ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ondblclick>(/*0*/ value: ((org.w3c.dom.events.MouseEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ondrag: ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ondrag>(): ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ondrag>(/*0*/ value: ((org.w3c.dom.DragEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ondragend: ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ondragend>(): ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ondragend>(/*0*/ value: ((org.w3c.dom.DragEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ondragenter: ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ondragenter>(): ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ondragenter>(/*0*/ value: ((org.w3c.dom.DragEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ondragexit: ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ondragexit>(): ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ondragexit>(/*0*/ value: ((org.w3c.dom.DragEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ondragleave: ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ondragleave>(): ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ondragleave>(/*0*/ value: ((org.w3c.dom.DragEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ondragover: ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ondragover>(): ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ondragover>(/*0*/ value: ((org.w3c.dom.DragEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ondragstart: ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ondragstart>(): ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ondragstart>(/*0*/ value: ((org.w3c.dom.DragEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ondrop: ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ondrop>(): ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ondrop>(/*0*/ value: ((org.w3c.dom.DragEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ondurationchange: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ondurationchange>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ondurationchange>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onemptied: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onemptied>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onemptied>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onended: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onended>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onended>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onerror: ((dynamic, kotlin.String, kotlin.Int, kotlin.Int, kotlin.Any?) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onerror>(): ((dynamic, kotlin.String, kotlin.Int, kotlin.Int, kotlin.Any?) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onerror>(/*0*/ value: ((dynamic, kotlin.String, kotlin.Int, kotlin.Int, kotlin.Any?) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onfocus: ((org.w3c.dom.events.FocusEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onfocus>(): ((org.w3c.dom.events.FocusEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onfocus>(/*0*/ value: ((org.w3c.dom.events.FocusEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ongotpointercapture: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ongotpointercapture>(): ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ongotpointercapture>(/*0*/ value: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var oninput: ((org.w3c.dom.events.InputEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-oninput>(): ((org.w3c.dom.events.InputEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-oninput>(/*0*/ value: ((org.w3c.dom.events.InputEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var oninvalid: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-oninvalid>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-oninvalid>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onkeydown: ((org.w3c.dom.events.KeyboardEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onkeydown>(): ((org.w3c.dom.events.KeyboardEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onkeydown>(/*0*/ value: ((org.w3c.dom.events.KeyboardEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onkeypress: ((org.w3c.dom.events.KeyboardEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onkeypress>(): ((org.w3c.dom.events.KeyboardEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onkeypress>(/*0*/ value: ((org.w3c.dom.events.KeyboardEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onkeyup: ((org.w3c.dom.events.KeyboardEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onkeyup>(): ((org.w3c.dom.events.KeyboardEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onkeyup>(/*0*/ value: ((org.w3c.dom.events.KeyboardEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onload: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onload>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onload>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onloadeddata: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onloadeddata>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onloadeddata>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onloadedmetadata: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onloadedmetadata>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onloadedmetadata>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onloadend: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onloadend>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onloadend>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onloadstart: ((org.w3c.xhr.ProgressEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onloadstart>(): ((org.w3c.xhr.ProgressEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onloadstart>(/*0*/ value: ((org.w3c.xhr.ProgressEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onlostpointercapture: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onlostpointercapture>(): ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onlostpointercapture>(/*0*/ value: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onmousedown: ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onmousedown>(): ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onmousedown>(/*0*/ value: ((org.w3c.dom.events.MouseEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onmouseenter: ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onmouseenter>(): ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onmouseenter>(/*0*/ value: ((org.w3c.dom.events.MouseEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onmouseleave: ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onmouseleave>(): ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onmouseleave>(/*0*/ value: ((org.w3c.dom.events.MouseEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onmousemove: ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onmousemove>(): ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onmousemove>(/*0*/ value: ((org.w3c.dom.events.MouseEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onmouseout: ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onmouseout>(): ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onmouseout>(/*0*/ value: ((org.w3c.dom.events.MouseEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onmouseover: ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onmouseover>(): ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onmouseover>(/*0*/ value: ((org.w3c.dom.events.MouseEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onmouseup: ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onmouseup>(): ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onmouseup>(/*0*/ value: ((org.w3c.dom.events.MouseEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onpause: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onpause>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onpause>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onplay: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onplay>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onplay>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onplaying: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onplaying>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onplaying>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onpointercancel: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onpointercancel>(): ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onpointercancel>(/*0*/ value: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onpointerdown: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onpointerdown>(): ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onpointerdown>(/*0*/ value: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onpointerenter: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onpointerenter>(): ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onpointerenter>(/*0*/ value: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onpointerleave: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onpointerleave>(): ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onpointerleave>(/*0*/ value: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onpointermove: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onpointermove>(): ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onpointermove>(/*0*/ value: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onpointerout: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onpointerout>(): ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onpointerout>(/*0*/ value: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onpointerover: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onpointerover>(): ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onpointerover>(/*0*/ value: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onpointerup: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onpointerup>(): ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onpointerup>(/*0*/ value: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onprogress: ((org.w3c.xhr.ProgressEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onprogress>(): ((org.w3c.xhr.ProgressEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onprogress>(/*0*/ value: ((org.w3c.xhr.ProgressEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onratechange: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onratechange>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onratechange>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onreset: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onreset>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onreset>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onresize: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onresize>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onresize>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onscroll: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onscroll>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onscroll>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onseeked: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onseeked>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onseeked>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onseeking: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onseeking>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onseeking>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onselect: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onselect>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onselect>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onshow: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onshow>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onshow>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onstalled: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onstalled>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onstalled>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onsubmit: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onsubmit>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onsubmit>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onsuspend: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onsuspend>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onsuspend>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ontimeupdate: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ontimeupdate>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ontimeupdate>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ontoggle: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ontoggle>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ontoggle>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onvolumechange: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onvolumechange>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onvolumechange>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onwaiting: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onwaiting>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onwaiting>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onwheel: ((org.w3c.dom.events.WheelEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onwheel>(): ((org.w3c.dom.events.WheelEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onwheel>(/*0*/ value: ((org.w3c.dom.events.WheelEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var outerHTML: kotlin.String
        public open override /*1*/ /*fake_override*/ fun <get-outerHTML>(): kotlin.String
        public open override /*1*/ /*fake_override*/ fun <set-outerHTML>(/*0*/ <set-?>: kotlin.String): kotlin.Unit
    public open override /*1*/ /*fake_override*/ val ownerDocument: org.w3c.dom.Document?
        public open override /*1*/ /*fake_override*/ fun <get-ownerDocument>(): org.w3c.dom.Document?
    public open override /*1*/ /*fake_override*/ val ownerSVGElement: org.w3c.dom.svg.SVGSVGElement?
        public open override /*1*/ /*fake_override*/ fun <get-ownerSVGElement>(): org.w3c.dom.svg.SVGSVGElement?
    public open override /*1*/ /*fake_override*/ val parentElement: org.w3c.dom.Element?
        public open override /*1*/ /*fake_override*/ fun <get-parentElement>(): org.w3c.dom.Element?
    public open override /*1*/ /*fake_override*/ val parentNode: org.w3c.dom.Node?
        public open override /*1*/ /*fake_override*/ fun <get-parentNode>(): org.w3c.dom.Node?
    public open override /*1*/ /*fake_override*/ val prefix: kotlin.String?
        public open override /*1*/ /*fake_override*/ fun <get-prefix>(): kotlin.String?
    public open override /*1*/ /*fake_override*/ val previousElementSibling: org.w3c.dom.Element?
        public open override /*1*/ /*fake_override*/ fun <get-previousElementSibling>(): org.w3c.dom.Element?
    public open override /*1*/ /*fake_override*/ val previousSibling: org.w3c.dom.Node?
        public open override /*1*/ /*fake_override*/ fun <get-previousSibling>(): org.w3c.dom.Node?
    public open override /*1*/ /*fake_override*/ val scrollHeight: kotlin.Int
        public open override /*1*/ /*fake_override*/ fun <get-scrollHeight>(): kotlin.Int
    public open override /*1*/ /*fake_override*/ var scrollLeft: kotlin.Double
        public open override /*1*/ /*fake_override*/ fun <get-scrollLeft>(): kotlin.Double
        public open override /*1*/ /*fake_override*/ fun <set-scrollLeft>(/*0*/ <set-?>: kotlin.Double): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var scrollTop: kotlin.Double
        public open override /*1*/ /*fake_override*/ fun <get-scrollTop>(): kotlin.Double
        public open override /*1*/ /*fake_override*/ fun <set-scrollTop>(/*0*/ <set-?>: kotlin.Double): kotlin.Unit
    public open override /*1*/ /*fake_override*/ val scrollWidth: kotlin.Int
        public open override /*1*/ /*fake_override*/ fun <get-scrollWidth>(): kotlin.Int
    public open override /*1*/ /*fake_override*/ val shadowRoot: org.w3c.dom.ShadowRoot?
        public open override /*1*/ /*fake_override*/ fun <get-shadowRoot>(): org.w3c.dom.ShadowRoot?
    public open override /*1*/ /*fake_override*/ var slot: kotlin.String
        public open override /*1*/ /*fake_override*/ fun <get-slot>(): kotlin.String
        public open override /*1*/ /*fake_override*/ fun <set-slot>(/*0*/ <set-?>: kotlin.String): kotlin.Unit
    public open val spreadMethod: org.w3c.dom.svg.SVGAnimatedEnumeration
        public open fun <get-spreadMethod>(): org.w3c.dom.svg.SVGAnimatedEnumeration
    public abstract override /*1*/ /*fake_override*/ val style: org.w3c.dom.css.CSSStyleDeclaration
        public abstract override /*1*/ /*fake_override*/ fun <get-style>(): org.w3c.dom.css.CSSStyleDeclaration
    public open override /*1*/ /*fake_override*/ var tabIndex: kotlin.Int
        public open override /*1*/ /*fake_override*/ fun <get-tabIndex>(): kotlin.Int
        public open override /*1*/ /*fake_override*/ fun <set-tabIndex>(/*0*/ <set-?>: kotlin.Int): kotlin.Unit
    public open override /*1*/ /*fake_override*/ val tagName: kotlin.String
        public open override /*1*/ /*fake_override*/ fun <get-tagName>(): kotlin.String
    public open override /*1*/ /*fake_override*/ var textContent: kotlin.String?
        public open override /*1*/ /*fake_override*/ fun <get-textContent>(): kotlin.String?
        public open override /*1*/ /*fake_override*/ fun <set-textContent>(/*0*/ <set-?>: kotlin.String?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ val viewportElement: org.w3c.dom.svg.SVGElement?
        public open override /*1*/ /*fake_override*/ fun <get-viewportElement>(): org.w3c.dom.svg.SVGElement?
    public final override /*1*/ /*fake_override*/ fun addEventListener(/*0*/ type: kotlin.String, /*1*/ callback: ((org.w3c.dom.events.Event) -> kotlin.Unit)?, /*2*/ options: dynamic = ...): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun addEventListener(/*0*/ type: kotlin.String, /*1*/ callback: org.w3c.dom.events.EventListener?, /*2*/ options: dynamic = ...): kotlin.Unit
    public abstract override /*1*/ /*fake_override*/ fun after(/*0*/ vararg nodes: dynamic /*kotlin.Array<out dynamic>*/): kotlin.Unit
    public abstract override /*1*/ /*fake_override*/ fun append(/*0*/ vararg nodes: dynamic /*kotlin.Array<out dynamic>*/): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun appendChild(/*0*/ node: org.w3c.dom.Node): org.w3c.dom.Node
    public final override /*1*/ /*fake_override*/ fun attachShadow(/*0*/ init: org.w3c.dom.ShadowRootInit): org.w3c.dom.ShadowRoot
    public abstract override /*1*/ /*fake_override*/ fun before(/*0*/ vararg nodes: dynamic /*kotlin.Array<out dynamic>*/): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun blur(): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun cloneNode(/*0*/ deep: kotlin.Boolean = ...): org.w3c.dom.Node
    public final override /*1*/ /*fake_override*/ fun closest(/*0*/ selectors: kotlin.String): org.w3c.dom.Element?
    public final override /*1*/ /*fake_override*/ fun compareDocumentPosition(/*0*/ other: org.w3c.dom.Node): kotlin.Short
    public final override /*1*/ /*fake_override*/ fun contains(/*0*/ other: org.w3c.dom.Node?): kotlin.Boolean
    public abstract override /*1*/ /*fake_override*/ fun convertPointFromNode(/*0*/ point: org.w3c.dom.DOMPointInit, /*1*/ from: dynamic, /*2*/ options: org.w3c.dom.ConvertCoordinateOptions = ...): org.w3c.dom.DOMPoint
    public abstract override /*1*/ /*fake_override*/ fun convertQuadFromNode(/*0*/ quad: dynamic, /*1*/ from: dynamic, /*2*/ options: org.w3c.dom.ConvertCoordinateOptions = ...): org.w3c.dom.DOMQuad
    public abstract override /*1*/ /*fake_override*/ fun convertRectFromNode(/*0*/ rect: org.w3c.dom.DOMRectReadOnly, /*1*/ from: dynamic, /*2*/ options: org.w3c.dom.ConvertCoordinateOptions = ...): org.w3c.dom.DOMQuad
    public final override /*1*/ /*fake_override*/ fun dispatchEvent(/*0*/ event: org.w3c.dom.events.Event): kotlin.Boolean
    public open override /*3*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
    public final override /*1*/ /*fake_override*/ fun focus(): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun getAttribute(/*0*/ qualifiedName: kotlin.String): kotlin.String?
    public final override /*1*/ /*fake_override*/ fun getAttributeNS(/*0*/ namespace: kotlin.String?, /*1*/ localName: kotlin.String): kotlin.String?
    public final override /*1*/ /*fake_override*/ fun getAttributeNames(): kotlin.Array<kotlin.String>
    public final override /*1*/ /*fake_override*/ fun getAttributeNode(/*0*/ qualifiedName: kotlin.String): org.w3c.dom.Attr?
    public final override /*1*/ /*fake_override*/ fun getAttributeNodeNS(/*0*/ namespace: kotlin.String?, /*1*/ localName: kotlin.String): org.w3c.dom.Attr?
    public final override /*1*/ /*fake_override*/ fun getBoundingClientRect(): org.w3c.dom.DOMRect
    public abstract override /*1*/ /*fake_override*/ fun getBoxQuads(/*0*/ options: org.w3c.dom.BoxQuadOptions = ...): kotlin.Array<org.w3c.dom.DOMQuad>
    public final override /*1*/ /*fake_override*/ fun getClientRects(): kotlin.Array<org.w3c.dom.DOMRect>
    public final override /*1*/ /*fake_override*/ fun getElementsByClassName(/*0*/ classNames: kotlin.String): org.w3c.dom.HTMLCollection
    public final override /*1*/ /*fake_override*/ fun getElementsByTagName(/*0*/ qualifiedName: kotlin.String): org.w3c.dom.HTMLCollection
    public final override /*1*/ /*fake_override*/ fun getElementsByTagNameNS(/*0*/ namespace: kotlin.String?, /*1*/ localName: kotlin.String): org.w3c.dom.HTMLCollection
    public final override /*1*/ /*fake_override*/ fun getRootNode(/*0*/ options: org.w3c.dom.GetRootNodeOptions = ...): org.w3c.dom.Node
    public final override /*1*/ /*fake_override*/ fun hasAttribute(/*0*/ qualifiedName: kotlin.String): kotlin.Boolean
    public final override /*1*/ /*fake_override*/ fun hasAttributeNS(/*0*/ namespace: kotlin.String?, /*1*/ localName: kotlin.String): kotlin.Boolean
    public final override /*1*/ /*fake_override*/ fun hasAttributes(): kotlin.Boolean
    public final override /*1*/ /*fake_override*/ fun hasChildNodes(): kotlin.Boolean
    public final override /*1*/ /*fake_override*/ fun hasPointerCapture(/*0*/ pointerId: kotlin.Int): kotlin.Boolean
    public open override /*3*/ /*fake_override*/ fun hashCode(): kotlin.Int
    public final override /*1*/ /*fake_override*/ fun insertAdjacentElement(/*0*/ where: kotlin.String, /*1*/ element: org.w3c.dom.Element): org.w3c.dom.Element?
    public final override /*1*/ /*fake_override*/ fun insertAdjacentHTML(/*0*/ position: kotlin.String, /*1*/ text: kotlin.String): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun insertAdjacentText(/*0*/ where: kotlin.String, /*1*/ data: kotlin.String): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun insertBefore(/*0*/ node: org.w3c.dom.Node, /*1*/ child: org.w3c.dom.Node?): org.w3c.dom.Node
    public final override /*1*/ /*fake_override*/ fun isDefaultNamespace(/*0*/ namespace: kotlin.String?): kotlin.Boolean
    public final override /*1*/ /*fake_override*/ fun isEqualNode(/*0*/ otherNode: org.w3c.dom.Node?): kotlin.Boolean
    public final override /*1*/ /*fake_override*/ fun isSameNode(/*0*/ otherNode: org.w3c.dom.Node?): kotlin.Boolean
    public final override /*1*/ /*fake_override*/ fun lookupNamespaceURI(/*0*/ prefix: kotlin.String?): kotlin.String?
    public final override /*1*/ /*fake_override*/ fun lookupPrefix(/*0*/ namespace: kotlin.String?): kotlin.String?
    public final override /*1*/ /*fake_override*/ fun matches(/*0*/ selectors: kotlin.String): kotlin.Boolean
    public final override /*1*/ /*fake_override*/ fun normalize(): kotlin.Unit
    public abstract override /*1*/ /*fake_override*/ fun prepend(/*0*/ vararg nodes: dynamic /*kotlin.Array<out dynamic>*/): kotlin.Unit
    public abstract override /*1*/ /*fake_override*/ fun querySelector(/*0*/ selectors: kotlin.String): org.w3c.dom.Element?
    public abstract override /*1*/ /*fake_override*/ fun querySelectorAll(/*0*/ selectors: kotlin.String): org.w3c.dom.NodeList
    public final override /*1*/ /*fake_override*/ fun releasePointerCapture(/*0*/ pointerId: kotlin.Int): kotlin.Unit
    public abstract override /*1*/ /*fake_override*/ fun remove(): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun removeAttribute(/*0*/ qualifiedName: kotlin.String): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun removeAttributeNS(/*0*/ namespace: kotlin.String?, /*1*/ localName: kotlin.String): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun removeAttributeNode(/*0*/ attr: org.w3c.dom.Attr): org.w3c.dom.Attr
    public final override /*1*/ /*fake_override*/ fun removeChild(/*0*/ child: org.w3c.dom.Node): org.w3c.dom.Node
    public final override /*1*/ /*fake_override*/ fun removeEventListener(/*0*/ type: kotlin.String, /*1*/ callback: ((org.w3c.dom.events.Event) -> kotlin.Unit)?, /*2*/ options: dynamic = ...): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun removeEventListener(/*0*/ type: kotlin.String, /*1*/ callback: org.w3c.dom.events.EventListener?, /*2*/ options: dynamic = ...): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun replaceChild(/*0*/ node: org.w3c.dom.Node, /*1*/ child: org.w3c.dom.Node): org.w3c.dom.Node
    public abstract override /*1*/ /*fake_override*/ fun replaceWith(/*0*/ vararg nodes: dynamic /*kotlin.Array<out dynamic>*/): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun requestFullscreen(): kotlin.js.Promise<kotlin.Unit>
    public final override /*1*/ /*fake_override*/ fun scroll(/*0*/ x: kotlin.Double, /*1*/ y: kotlin.Double): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun scroll(/*0*/ options: org.w3c.dom.ScrollToOptions = ...): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun scrollBy(/*0*/ x: kotlin.Double, /*1*/ y: kotlin.Double): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun scrollBy(/*0*/ options: org.w3c.dom.ScrollToOptions = ...): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun scrollIntoView(): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun scrollIntoView(/*0*/ arg: dynamic): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun scrollTo(/*0*/ x: kotlin.Double, /*1*/ y: kotlin.Double): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun scrollTo(/*0*/ options: org.w3c.dom.ScrollToOptions = ...): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun setAttribute(/*0*/ qualifiedName: kotlin.String, /*1*/ value: kotlin.String): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun setAttributeNS(/*0*/ namespace: kotlin.String?, /*1*/ qualifiedName: kotlin.String, /*2*/ value: kotlin.String): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun setAttributeNode(/*0*/ attr: org.w3c.dom.Attr): org.w3c.dom.Attr?
    public final override /*1*/ /*fake_override*/ fun setAttributeNodeNS(/*0*/ attr: org.w3c.dom.Attr): org.w3c.dom.Attr?
    public final override /*1*/ /*fake_override*/ fun setPointerCapture(/*0*/ pointerId: kotlin.Int): kotlin.Unit
    public open override /*3*/ /*fake_override*/ fun toString(): kotlin.String
    public final override /*1*/ /*fake_override*/ fun webkitMatchesSelector(/*0*/ selectors: kotlin.String): kotlin.Boolean

    public companion object Companion {
        /*primary*/ private constructor Companion()
        public final val ATTRIBUTE_NODE: kotlin.Short
            public final fun <get-ATTRIBUTE_NODE>(): kotlin.Short
        public final val CDATA_SECTION_NODE: kotlin.Short
            public final fun <get-CDATA_SECTION_NODE>(): kotlin.Short
        public final val COMMENT_NODE: kotlin.Short
            public final fun <get-COMMENT_NODE>(): kotlin.Short
        public final val DOCUMENT_FRAGMENT_NODE: kotlin.Short
            public final fun <get-DOCUMENT_FRAGMENT_NODE>(): kotlin.Short
        public final val DOCUMENT_NODE: kotlin.Short
            public final fun <get-DOCUMENT_NODE>(): kotlin.Short
        public final val DOCUMENT_POSITION_CONTAINED_BY: kotlin.Short
            public final fun <get-DOCUMENT_POSITION_CONTAINED_BY>(): kotlin.Short
        public final val DOCUMENT_POSITION_CONTAINS: kotlin.Short
            public final fun <get-DOCUMENT_POSITION_CONTAINS>(): kotlin.Short
        public final val DOCUMENT_POSITION_DISCONNECTED: kotlin.Short
            public final fun <get-DOCUMENT_POSITION_DISCONNECTED>(): kotlin.Short
        public final val DOCUMENT_POSITION_FOLLOWING: kotlin.Short
            public final fun <get-DOCUMENT_POSITION_FOLLOWING>(): kotlin.Short
        public final val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: kotlin.Short
            public final fun <get-DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC>(): kotlin.Short
        public final val DOCUMENT_POSITION_PRECEDING: kotlin.Short
            public final fun <get-DOCUMENT_POSITION_PRECEDING>(): kotlin.Short
        public final val DOCUMENT_TYPE_NODE: kotlin.Short
            public final fun <get-DOCUMENT_TYPE_NODE>(): kotlin.Short
        public final val ELEMENT_NODE: kotlin.Short
            public final fun <get-ELEMENT_NODE>(): kotlin.Short
        public final val ENTITY_NODE: kotlin.Short
            public final fun <get-ENTITY_NODE>(): kotlin.Short
        public final val ENTITY_REFERENCE_NODE: kotlin.Short
            public final fun <get-ENTITY_REFERENCE_NODE>(): kotlin.Short
        public final val NOTATION_NODE: kotlin.Short
            public final fun <get-NOTATION_NODE>(): kotlin.Short
        public final val PROCESSING_INSTRUCTION_NODE: kotlin.Short
            public final fun <get-PROCESSING_INSTRUCTION_NODE>(): kotlin.Short
        public final val SVG_SPREADMETHOD_PAD: kotlin.Short
            public final fun <get-SVG_SPREADMETHOD_PAD>(): kotlin.Short
        public final val SVG_SPREADMETHOD_REFLECT: kotlin.Short
            public final fun <get-SVG_SPREADMETHOD_REFLECT>(): kotlin.Short
        public final val SVG_SPREADMETHOD_REPEAT: kotlin.Short
            public final fun <get-SVG_SPREADMETHOD_REPEAT>(): kotlin.Short
        public final val SVG_SPREADMETHOD_UNKNOWN: kotlin.Short
            public final fun <get-SVG_SPREADMETHOD_UNKNOWN>(): kotlin.Short
        public final val SVG_UNIT_TYPE_OBJECTBOUNDINGBOX: kotlin.Short
            public final fun <get-SVG_UNIT_TYPE_OBJECTBOUNDINGBOX>(): kotlin.Short
        public final val SVG_UNIT_TYPE_UNKNOWN: kotlin.Short
            public final fun <get-SVG_UNIT_TYPE_UNKNOWN>(): kotlin.Short
        public final val SVG_UNIT_TYPE_USERSPACEONUSE: kotlin.Short
            public final fun <get-SVG_UNIT_TYPE_USERSPACEONUSE>(): kotlin.Short
        public final val TEXT_NODE: kotlin.Short
            public final fun <get-TEXT_NODE>(): kotlin.Short
        public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
        public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
        public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
    }
}

public abstract external class SVGGraphicsElement : org.w3c.dom.svg.SVGElement, org.w3c.dom.svg.SVGTests {
    /*primary*/ public constructor SVGGraphicsElement()
    public open override /*1*/ /*fake_override*/ val assignedSlot: org.w3c.dom.HTMLSlotElement?
        public open override /*1*/ /*fake_override*/ fun <get-assignedSlot>(): org.w3c.dom.HTMLSlotElement?
    public open override /*1*/ /*fake_override*/ val attributes: org.w3c.dom.NamedNodeMap
        public open override /*1*/ /*fake_override*/ fun <get-attributes>(): org.w3c.dom.NamedNodeMap
    public open override /*1*/ /*fake_override*/ val baseURI: kotlin.String
        public open override /*1*/ /*fake_override*/ fun <get-baseURI>(): kotlin.String
    public abstract override /*1*/ /*fake_override*/ val childElementCount: kotlin.Int
        public abstract override /*1*/ /*fake_override*/ fun <get-childElementCount>(): kotlin.Int
    public open override /*1*/ /*fake_override*/ val childNodes: org.w3c.dom.NodeList
        public open override /*1*/ /*fake_override*/ fun <get-childNodes>(): org.w3c.dom.NodeList
    public abstract override /*1*/ /*fake_override*/ val children: org.w3c.dom.HTMLCollection
        public abstract override /*1*/ /*fake_override*/ fun <get-children>(): org.w3c.dom.HTMLCollection
    public open override /*1*/ /*fake_override*/ val classList: org.w3c.dom.DOMTokenList
        public open override /*1*/ /*fake_override*/ fun <get-classList>(): org.w3c.dom.DOMTokenList
    public open override /*1*/ /*fake_override*/ var className: kotlin.String
        public open override /*1*/ /*fake_override*/ fun <get-className>(): kotlin.String
        public open override /*1*/ /*fake_override*/ fun <set-className>(/*0*/ <set-?>: kotlin.String): kotlin.Unit
    public open override /*1*/ /*fake_override*/ val clientHeight: kotlin.Int
        public open override /*1*/ /*fake_override*/ fun <get-clientHeight>(): kotlin.Int
    public open override /*1*/ /*fake_override*/ val clientLeft: kotlin.Int
        public open override /*1*/ /*fake_override*/ fun <get-clientLeft>(): kotlin.Int
    public open override /*1*/ /*fake_override*/ val clientTop: kotlin.Int
        public open override /*1*/ /*fake_override*/ fun <get-clientTop>(): kotlin.Int
    public open override /*1*/ /*fake_override*/ val clientWidth: kotlin.Int
        public open override /*1*/ /*fake_override*/ fun <get-clientWidth>(): kotlin.Int
    public open override /*1*/ /*fake_override*/ val correspondingElement: org.w3c.dom.svg.SVGElement?
        public open override /*1*/ /*fake_override*/ fun <get-correspondingElement>(): org.w3c.dom.svg.SVGElement?
    public open override /*1*/ /*fake_override*/ val correspondingUseElement: org.w3c.dom.svg.SVGUseElement?
        public open override /*1*/ /*fake_override*/ fun <get-correspondingUseElement>(): org.w3c.dom.svg.SVGUseElement?
    public open override /*1*/ /*fake_override*/ val dataset: org.w3c.dom.DOMStringMap
        public open override /*1*/ /*fake_override*/ fun <get-dataset>(): org.w3c.dom.DOMStringMap
    public open override /*1*/ /*fake_override*/ val firstChild: org.w3c.dom.Node?
        public open override /*1*/ /*fake_override*/ fun <get-firstChild>(): org.w3c.dom.Node?
    public open override /*1*/ /*fake_override*/ val firstElementChild: org.w3c.dom.Element?
        public open override /*1*/ /*fake_override*/ fun <get-firstElementChild>(): org.w3c.dom.Element?
    public open override /*1*/ /*fake_override*/ var id: kotlin.String
        public open override /*1*/ /*fake_override*/ fun <get-id>(): kotlin.String
        public open override /*1*/ /*fake_override*/ fun <set-id>(/*0*/ <set-?>: kotlin.String): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var innerHTML: kotlin.String
        public open override /*1*/ /*fake_override*/ fun <get-innerHTML>(): kotlin.String
        public open override /*1*/ /*fake_override*/ fun <set-innerHTML>(/*0*/ <set-?>: kotlin.String): kotlin.Unit
    public open override /*1*/ /*fake_override*/ val isConnected: kotlin.Boolean
        public open override /*1*/ /*fake_override*/ fun <get-isConnected>(): kotlin.Boolean
    public open override /*1*/ /*fake_override*/ val lastChild: org.w3c.dom.Node?
        public open override /*1*/ /*fake_override*/ fun <get-lastChild>(): org.w3c.dom.Node?
    public open override /*1*/ /*fake_override*/ val lastElementChild: org.w3c.dom.Element?
        public open override /*1*/ /*fake_override*/ fun <get-lastElementChild>(): org.w3c.dom.Element?
    public open override /*1*/ /*fake_override*/ val localName: kotlin.String
        public open override /*1*/ /*fake_override*/ fun <get-localName>(): kotlin.String
    public open override /*1*/ /*fake_override*/ val namespaceURI: kotlin.String?
        public open override /*1*/ /*fake_override*/ fun <get-namespaceURI>(): kotlin.String?
    public open override /*1*/ /*fake_override*/ val nextElementSibling: org.w3c.dom.Element?
        public open override /*1*/ /*fake_override*/ fun <get-nextElementSibling>(): org.w3c.dom.Element?
    public open override /*1*/ /*fake_override*/ val nextSibling: org.w3c.dom.Node?
        public open override /*1*/ /*fake_override*/ fun <get-nextSibling>(): org.w3c.dom.Node?
    public open override /*1*/ /*fake_override*/ val nodeName: kotlin.String
        public open override /*1*/ /*fake_override*/ fun <get-nodeName>(): kotlin.String
    public open override /*1*/ /*fake_override*/ val nodeType: kotlin.Short
        public open override /*1*/ /*fake_override*/ fun <get-nodeType>(): kotlin.Short
    public open override /*1*/ /*fake_override*/ var nodeValue: kotlin.String?
        public open override /*1*/ /*fake_override*/ fun <get-nodeValue>(): kotlin.String?
        public open override /*1*/ /*fake_override*/ fun <set-nodeValue>(/*0*/ <set-?>: kotlin.String?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onabort: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onabort>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onabort>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onblur: ((org.w3c.dom.events.FocusEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onblur>(): ((org.w3c.dom.events.FocusEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onblur>(/*0*/ value: ((org.w3c.dom.events.FocusEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var oncancel: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-oncancel>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-oncancel>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var oncanplay: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-oncanplay>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-oncanplay>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var oncanplaythrough: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-oncanplaythrough>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-oncanplaythrough>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onchange: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onchange>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onchange>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onclick: ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onclick>(): ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onclick>(/*0*/ value: ((org.w3c.dom.events.MouseEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onclose: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onclose>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onclose>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var oncontextmenu: ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-oncontextmenu>(): ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-oncontextmenu>(/*0*/ value: ((org.w3c.dom.events.MouseEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var oncuechange: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-oncuechange>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-oncuechange>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ondblclick: ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ondblclick>(): ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ondblclick>(/*0*/ value: ((org.w3c.dom.events.MouseEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ondrag: ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ondrag>(): ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ondrag>(/*0*/ value: ((org.w3c.dom.DragEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ondragend: ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ondragend>(): ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ondragend>(/*0*/ value: ((org.w3c.dom.DragEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ondragenter: ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ondragenter>(): ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ondragenter>(/*0*/ value: ((org.w3c.dom.DragEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ondragexit: ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ondragexit>(): ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ondragexit>(/*0*/ value: ((org.w3c.dom.DragEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ondragleave: ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ondragleave>(): ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ondragleave>(/*0*/ value: ((org.w3c.dom.DragEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ondragover: ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ondragover>(): ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ondragover>(/*0*/ value: ((org.w3c.dom.DragEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ondragstart: ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ondragstart>(): ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ondragstart>(/*0*/ value: ((org.w3c.dom.DragEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ondrop: ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ondrop>(): ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ondrop>(/*0*/ value: ((org.w3c.dom.DragEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ondurationchange: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ondurationchange>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ondurationchange>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onemptied: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onemptied>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onemptied>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onended: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onended>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onended>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onerror: ((dynamic, kotlin.String, kotlin.Int, kotlin.Int, kotlin.Any?) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onerror>(): ((dynamic, kotlin.String, kotlin.Int, kotlin.Int, kotlin.Any?) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onerror>(/*0*/ value: ((dynamic, kotlin.String, kotlin.Int, kotlin.Int, kotlin.Any?) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onfocus: ((org.w3c.dom.events.FocusEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onfocus>(): ((org.w3c.dom.events.FocusEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onfocus>(/*0*/ value: ((org.w3c.dom.events.FocusEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ongotpointercapture: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ongotpointercapture>(): ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ongotpointercapture>(/*0*/ value: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var oninput: ((org.w3c.dom.events.InputEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-oninput>(): ((org.w3c.dom.events.InputEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-oninput>(/*0*/ value: ((org.w3c.dom.events.InputEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var oninvalid: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-oninvalid>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-oninvalid>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onkeydown: ((org.w3c.dom.events.KeyboardEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onkeydown>(): ((org.w3c.dom.events.KeyboardEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onkeydown>(/*0*/ value: ((org.w3c.dom.events.KeyboardEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onkeypress: ((org.w3c.dom.events.KeyboardEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onkeypress>(): ((org.w3c.dom.events.KeyboardEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onkeypress>(/*0*/ value: ((org.w3c.dom.events.KeyboardEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onkeyup: ((org.w3c.dom.events.KeyboardEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onkeyup>(): ((org.w3c.dom.events.KeyboardEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onkeyup>(/*0*/ value: ((org.w3c.dom.events.KeyboardEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onload: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onload>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onload>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onloadeddata: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onloadeddata>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onloadeddata>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onloadedmetadata: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onloadedmetadata>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onloadedmetadata>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onloadend: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onloadend>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onloadend>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onloadstart: ((org.w3c.xhr.ProgressEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onloadstart>(): ((org.w3c.xhr.ProgressEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onloadstart>(/*0*/ value: ((org.w3c.xhr.ProgressEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onlostpointercapture: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onlostpointercapture>(): ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onlostpointercapture>(/*0*/ value: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onmousedown: ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onmousedown>(): ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onmousedown>(/*0*/ value: ((org.w3c.dom.events.MouseEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onmouseenter: ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onmouseenter>(): ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onmouseenter>(/*0*/ value: ((org.w3c.dom.events.MouseEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onmouseleave: ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onmouseleave>(): ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onmouseleave>(/*0*/ value: ((org.w3c.dom.events.MouseEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onmousemove: ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onmousemove>(): ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onmousemove>(/*0*/ value: ((org.w3c.dom.events.MouseEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onmouseout: ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onmouseout>(): ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onmouseout>(/*0*/ value: ((org.w3c.dom.events.MouseEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onmouseover: ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onmouseover>(): ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onmouseover>(/*0*/ value: ((org.w3c.dom.events.MouseEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onmouseup: ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onmouseup>(): ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onmouseup>(/*0*/ value: ((org.w3c.dom.events.MouseEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onpause: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onpause>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onpause>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onplay: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onplay>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onplay>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onplaying: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onplaying>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onplaying>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onpointercancel: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onpointercancel>(): ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onpointercancel>(/*0*/ value: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onpointerdown: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onpointerdown>(): ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onpointerdown>(/*0*/ value: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onpointerenter: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onpointerenter>(): ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onpointerenter>(/*0*/ value: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onpointerleave: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onpointerleave>(): ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onpointerleave>(/*0*/ value: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onpointermove: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onpointermove>(): ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onpointermove>(/*0*/ value: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onpointerout: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onpointerout>(): ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onpointerout>(/*0*/ value: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onpointerover: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onpointerover>(): ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onpointerover>(/*0*/ value: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onpointerup: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onpointerup>(): ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onpointerup>(/*0*/ value: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onprogress: ((org.w3c.xhr.ProgressEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onprogress>(): ((org.w3c.xhr.ProgressEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onprogress>(/*0*/ value: ((org.w3c.xhr.ProgressEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onratechange: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onratechange>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onratechange>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onreset: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onreset>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onreset>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onresize: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onresize>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onresize>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onscroll: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onscroll>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onscroll>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onseeked: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onseeked>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onseeked>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onseeking: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onseeking>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onseeking>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onselect: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onselect>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onselect>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onshow: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onshow>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onshow>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onstalled: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onstalled>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onstalled>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onsubmit: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onsubmit>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onsubmit>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onsuspend: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onsuspend>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onsuspend>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ontimeupdate: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ontimeupdate>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ontimeupdate>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ontoggle: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ontoggle>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ontoggle>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onvolumechange: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onvolumechange>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onvolumechange>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onwaiting: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onwaiting>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onwaiting>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onwheel: ((org.w3c.dom.events.WheelEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onwheel>(): ((org.w3c.dom.events.WheelEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onwheel>(/*0*/ value: ((org.w3c.dom.events.WheelEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var outerHTML: kotlin.String
        public open override /*1*/ /*fake_override*/ fun <get-outerHTML>(): kotlin.String
        public open override /*1*/ /*fake_override*/ fun <set-outerHTML>(/*0*/ <set-?>: kotlin.String): kotlin.Unit
    public open override /*1*/ /*fake_override*/ val ownerDocument: org.w3c.dom.Document?
        public open override /*1*/ /*fake_override*/ fun <get-ownerDocument>(): org.w3c.dom.Document?
    public open override /*1*/ /*fake_override*/ val ownerSVGElement: org.w3c.dom.svg.SVGSVGElement?
        public open override /*1*/ /*fake_override*/ fun <get-ownerSVGElement>(): org.w3c.dom.svg.SVGSVGElement?
    public open override /*1*/ /*fake_override*/ val parentElement: org.w3c.dom.Element?
        public open override /*1*/ /*fake_override*/ fun <get-parentElement>(): org.w3c.dom.Element?
    public open override /*1*/ /*fake_override*/ val parentNode: org.w3c.dom.Node?
        public open override /*1*/ /*fake_override*/ fun <get-parentNode>(): org.w3c.dom.Node?
    public open override /*1*/ /*fake_override*/ val prefix: kotlin.String?
        public open override /*1*/ /*fake_override*/ fun <get-prefix>(): kotlin.String?
    public open override /*1*/ /*fake_override*/ val previousElementSibling: org.w3c.dom.Element?
        public open override /*1*/ /*fake_override*/ fun <get-previousElementSibling>(): org.w3c.dom.Element?
    public open override /*1*/ /*fake_override*/ val previousSibling: org.w3c.dom.Node?
        public open override /*1*/ /*fake_override*/ fun <get-previousSibling>(): org.w3c.dom.Node?
    public abstract override /*1*/ /*fake_override*/ val requiredExtensions: org.w3c.dom.svg.SVGStringList
        public abstract override /*1*/ /*fake_override*/ fun <get-requiredExtensions>(): org.w3c.dom.svg.SVGStringList
    public open override /*1*/ /*fake_override*/ val scrollHeight: kotlin.Int
        public open override /*1*/ /*fake_override*/ fun <get-scrollHeight>(): kotlin.Int
    public open override /*1*/ /*fake_override*/ var scrollLeft: kotlin.Double
        public open override /*1*/ /*fake_override*/ fun <get-scrollLeft>(): kotlin.Double
        public open override /*1*/ /*fake_override*/ fun <set-scrollLeft>(/*0*/ <set-?>: kotlin.Double): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var scrollTop: kotlin.Double
        public open override /*1*/ /*fake_override*/ fun <get-scrollTop>(): kotlin.Double
        public open override /*1*/ /*fake_override*/ fun <set-scrollTop>(/*0*/ <set-?>: kotlin.Double): kotlin.Unit
    public open override /*1*/ /*fake_override*/ val scrollWidth: kotlin.Int
        public open override /*1*/ /*fake_override*/ fun <get-scrollWidth>(): kotlin.Int
    public open override /*1*/ /*fake_override*/ val shadowRoot: org.w3c.dom.ShadowRoot?
        public open override /*1*/ /*fake_override*/ fun <get-shadowRoot>(): org.w3c.dom.ShadowRoot?
    public open override /*1*/ /*fake_override*/ var slot: kotlin.String
        public open override /*1*/ /*fake_override*/ fun <get-slot>(): kotlin.String
        public open override /*1*/ /*fake_override*/ fun <set-slot>(/*0*/ <set-?>: kotlin.String): kotlin.Unit
    public abstract override /*1*/ /*fake_override*/ val style: org.w3c.dom.css.CSSStyleDeclaration
        public abstract override /*1*/ /*fake_override*/ fun <get-style>(): org.w3c.dom.css.CSSStyleDeclaration
    public abstract override /*1*/ /*fake_override*/ val systemLanguage: org.w3c.dom.svg.SVGStringList
        public abstract override /*1*/ /*fake_override*/ fun <get-systemLanguage>(): org.w3c.dom.svg.SVGStringList
    public open override /*1*/ /*fake_override*/ var tabIndex: kotlin.Int
        public open override /*1*/ /*fake_override*/ fun <get-tabIndex>(): kotlin.Int
        public open override /*1*/ /*fake_override*/ fun <set-tabIndex>(/*0*/ <set-?>: kotlin.Int): kotlin.Unit
    public open override /*1*/ /*fake_override*/ val tagName: kotlin.String
        public open override /*1*/ /*fake_override*/ fun <get-tagName>(): kotlin.String
    public open override /*1*/ /*fake_override*/ var textContent: kotlin.String?
        public open override /*1*/ /*fake_override*/ fun <get-textContent>(): kotlin.String?
        public open override /*1*/ /*fake_override*/ fun <set-textContent>(/*0*/ <set-?>: kotlin.String?): kotlin.Unit
    public open val transform: org.w3c.dom.svg.SVGAnimatedTransformList
        public open fun <get-transform>(): org.w3c.dom.svg.SVGAnimatedTransformList
    public open override /*1*/ /*fake_override*/ val viewportElement: org.w3c.dom.svg.SVGElement?
        public open override /*1*/ /*fake_override*/ fun <get-viewportElement>(): org.w3c.dom.svg.SVGElement?
    public final override /*1*/ /*fake_override*/ fun addEventListener(/*0*/ type: kotlin.String, /*1*/ callback: ((org.w3c.dom.events.Event) -> kotlin.Unit)?, /*2*/ options: dynamic = ...): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun addEventListener(/*0*/ type: kotlin.String, /*1*/ callback: org.w3c.dom.events.EventListener?, /*2*/ options: dynamic = ...): kotlin.Unit
    public abstract override /*1*/ /*fake_override*/ fun after(/*0*/ vararg nodes: dynamic /*kotlin.Array<out dynamic>*/): kotlin.Unit
    public abstract override /*1*/ /*fake_override*/ fun append(/*0*/ vararg nodes: dynamic /*kotlin.Array<out dynamic>*/): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun appendChild(/*0*/ node: org.w3c.dom.Node): org.w3c.dom.Node
    public final override /*1*/ /*fake_override*/ fun attachShadow(/*0*/ init: org.w3c.dom.ShadowRootInit): org.w3c.dom.ShadowRoot
    public abstract override /*1*/ /*fake_override*/ fun before(/*0*/ vararg nodes: dynamic /*kotlin.Array<out dynamic>*/): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun blur(): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun cloneNode(/*0*/ deep: kotlin.Boolean = ...): org.w3c.dom.Node
    public final override /*1*/ /*fake_override*/ fun closest(/*0*/ selectors: kotlin.String): org.w3c.dom.Element?
    public final override /*1*/ /*fake_override*/ fun compareDocumentPosition(/*0*/ other: org.w3c.dom.Node): kotlin.Short
    public final override /*1*/ /*fake_override*/ fun contains(/*0*/ other: org.w3c.dom.Node?): kotlin.Boolean
    public abstract override /*1*/ /*fake_override*/ fun convertPointFromNode(/*0*/ point: org.w3c.dom.DOMPointInit, /*1*/ from: dynamic, /*2*/ options: org.w3c.dom.ConvertCoordinateOptions = ...): org.w3c.dom.DOMPoint
    public abstract override /*1*/ /*fake_override*/ fun convertQuadFromNode(/*0*/ quad: dynamic, /*1*/ from: dynamic, /*2*/ options: org.w3c.dom.ConvertCoordinateOptions = ...): org.w3c.dom.DOMQuad
    public abstract override /*1*/ /*fake_override*/ fun convertRectFromNode(/*0*/ rect: org.w3c.dom.DOMRectReadOnly, /*1*/ from: dynamic, /*2*/ options: org.w3c.dom.ConvertCoordinateOptions = ...): org.w3c.dom.DOMQuad
    public final override /*1*/ /*fake_override*/ fun dispatchEvent(/*0*/ event: org.w3c.dom.events.Event): kotlin.Boolean
    public open override /*2*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
    public final override /*1*/ /*fake_override*/ fun focus(): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun getAttribute(/*0*/ qualifiedName: kotlin.String): kotlin.String?
    public final override /*1*/ /*fake_override*/ fun getAttributeNS(/*0*/ namespace: kotlin.String?, /*1*/ localName: kotlin.String): kotlin.String?
    public final override /*1*/ /*fake_override*/ fun getAttributeNames(): kotlin.Array<kotlin.String>
    public final override /*1*/ /*fake_override*/ fun getAttributeNode(/*0*/ qualifiedName: kotlin.String): org.w3c.dom.Attr?
    public final override /*1*/ /*fake_override*/ fun getAttributeNodeNS(/*0*/ namespace: kotlin.String?, /*1*/ localName: kotlin.String): org.w3c.dom.Attr?
    public final fun getBBox(/*0*/ options: org.w3c.dom.svg.SVGBoundingBoxOptions = ...): org.w3c.dom.DOMRect
    public final override /*1*/ /*fake_override*/ fun getBoundingClientRect(): org.w3c.dom.DOMRect
    public abstract override /*1*/ /*fake_override*/ fun getBoxQuads(/*0*/ options: org.w3c.dom.BoxQuadOptions = ...): kotlin.Array<org.w3c.dom.DOMQuad>
    public final fun getCTM(): org.w3c.dom.DOMMatrix?
    public final override /*1*/ /*fake_override*/ fun getClientRects(): kotlin.Array<org.w3c.dom.DOMRect>
    public final override /*1*/ /*fake_override*/ fun getElementsByClassName(/*0*/ classNames: kotlin.String): org.w3c.dom.HTMLCollection
    public final override /*1*/ /*fake_override*/ fun getElementsByTagName(/*0*/ qualifiedName: kotlin.String): org.w3c.dom.HTMLCollection
    public final override /*1*/ /*fake_override*/ fun getElementsByTagNameNS(/*0*/ namespace: kotlin.String?, /*1*/ localName: kotlin.String): org.w3c.dom.HTMLCollection
    public final override /*1*/ /*fake_override*/ fun getRootNode(/*0*/ options: org.w3c.dom.GetRootNodeOptions = ...): org.w3c.dom.Node
    public final fun getScreenCTM(): org.w3c.dom.DOMMatrix?
    public final override /*1*/ /*fake_override*/ fun hasAttribute(/*0*/ qualifiedName: kotlin.String): kotlin.Boolean
    public final override /*1*/ /*fake_override*/ fun hasAttributeNS(/*0*/ namespace: kotlin.String?, /*1*/ localName: kotlin.String): kotlin.Boolean
    public final override /*1*/ /*fake_override*/ fun hasAttributes(): kotlin.Boolean
    public final override /*1*/ /*fake_override*/ fun hasChildNodes(): kotlin.Boolean
    public final override /*1*/ /*fake_override*/ fun hasPointerCapture(/*0*/ pointerId: kotlin.Int): kotlin.Boolean
    public open override /*2*/ /*fake_override*/ fun hashCode(): kotlin.Int
    public final override /*1*/ /*fake_override*/ fun insertAdjacentElement(/*0*/ where: kotlin.String, /*1*/ element: org.w3c.dom.Element): org.w3c.dom.Element?
    public final override /*1*/ /*fake_override*/ fun insertAdjacentHTML(/*0*/ position: kotlin.String, /*1*/ text: kotlin.String): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun insertAdjacentText(/*0*/ where: kotlin.String, /*1*/ data: kotlin.String): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun insertBefore(/*0*/ node: org.w3c.dom.Node, /*1*/ child: org.w3c.dom.Node?): org.w3c.dom.Node
    public final override /*1*/ /*fake_override*/ fun isDefaultNamespace(/*0*/ namespace: kotlin.String?): kotlin.Boolean
    public final override /*1*/ /*fake_override*/ fun isEqualNode(/*0*/ otherNode: org.w3c.dom.Node?): kotlin.Boolean
    public final override /*1*/ /*fake_override*/ fun isSameNode(/*0*/ otherNode: org.w3c.dom.Node?): kotlin.Boolean
    public final override /*1*/ /*fake_override*/ fun lookupNamespaceURI(/*0*/ prefix: kotlin.String?): kotlin.String?
    public final override /*1*/ /*fake_override*/ fun lookupPrefix(/*0*/ namespace: kotlin.String?): kotlin.String?
    public final override /*1*/ /*fake_override*/ fun matches(/*0*/ selectors: kotlin.String): kotlin.Boolean
    public final override /*1*/ /*fake_override*/ fun normalize(): kotlin.Unit
    public abstract override /*1*/ /*fake_override*/ fun prepend(/*0*/ vararg nodes: dynamic /*kotlin.Array<out dynamic>*/): kotlin.Unit
    public abstract override /*1*/ /*fake_override*/ fun querySelector(/*0*/ selectors: kotlin.String): org.w3c.dom.Element?
    public abstract override /*1*/ /*fake_override*/ fun querySelectorAll(/*0*/ selectors: kotlin.String): org.w3c.dom.NodeList
    public final override /*1*/ /*fake_override*/ fun releasePointerCapture(/*0*/ pointerId: kotlin.Int): kotlin.Unit
    public abstract override /*1*/ /*fake_override*/ fun remove(): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun removeAttribute(/*0*/ qualifiedName: kotlin.String): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun removeAttributeNS(/*0*/ namespace: kotlin.String?, /*1*/ localName: kotlin.String): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun removeAttributeNode(/*0*/ attr: org.w3c.dom.Attr): org.w3c.dom.Attr
    public final override /*1*/ /*fake_override*/ fun removeChild(/*0*/ child: org.w3c.dom.Node): org.w3c.dom.Node
    public final override /*1*/ /*fake_override*/ fun removeEventListener(/*0*/ type: kotlin.String, /*1*/ callback: ((org.w3c.dom.events.Event) -> kotlin.Unit)?, /*2*/ options: dynamic = ...): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun removeEventListener(/*0*/ type: kotlin.String, /*1*/ callback: org.w3c.dom.events.EventListener?, /*2*/ options: dynamic = ...): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun replaceChild(/*0*/ node: org.w3c.dom.Node, /*1*/ child: org.w3c.dom.Node): org.w3c.dom.Node
    public abstract override /*1*/ /*fake_override*/ fun replaceWith(/*0*/ vararg nodes: dynamic /*kotlin.Array<out dynamic>*/): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun requestFullscreen(): kotlin.js.Promise<kotlin.Unit>
    public final override /*1*/ /*fake_override*/ fun scroll(/*0*/ x: kotlin.Double, /*1*/ y: kotlin.Double): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun scroll(/*0*/ options: org.w3c.dom.ScrollToOptions = ...): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun scrollBy(/*0*/ x: kotlin.Double, /*1*/ y: kotlin.Double): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun scrollBy(/*0*/ options: org.w3c.dom.ScrollToOptions = ...): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun scrollIntoView(): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun scrollIntoView(/*0*/ arg: dynamic): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun scrollTo(/*0*/ x: kotlin.Double, /*1*/ y: kotlin.Double): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun scrollTo(/*0*/ options: org.w3c.dom.ScrollToOptions = ...): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun setAttribute(/*0*/ qualifiedName: kotlin.String, /*1*/ value: kotlin.String): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun setAttributeNS(/*0*/ namespace: kotlin.String?, /*1*/ qualifiedName: kotlin.String, /*2*/ value: kotlin.String): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun setAttributeNode(/*0*/ attr: org.w3c.dom.Attr): org.w3c.dom.Attr?
    public final override /*1*/ /*fake_override*/ fun setAttributeNodeNS(/*0*/ attr: org.w3c.dom.Attr): org.w3c.dom.Attr?
    public final override /*1*/ /*fake_override*/ fun setPointerCapture(/*0*/ pointerId: kotlin.Int): kotlin.Unit
    public open override /*2*/ /*fake_override*/ fun toString(): kotlin.String
    public final override /*1*/ /*fake_override*/ fun webkitMatchesSelector(/*0*/ selectors: kotlin.String): kotlin.Boolean

    public companion object Companion {
        /*primary*/ private constructor Companion()
        public final val ATTRIBUTE_NODE: kotlin.Short
            public final fun <get-ATTRIBUTE_NODE>(): kotlin.Short
        public final val CDATA_SECTION_NODE: kotlin.Short
            public final fun <get-CDATA_SECTION_NODE>(): kotlin.Short
        public final val COMMENT_NODE: kotlin.Short
            public final fun <get-COMMENT_NODE>(): kotlin.Short
        public final val DOCUMENT_FRAGMENT_NODE: kotlin.Short
            public final fun <get-DOCUMENT_FRAGMENT_NODE>(): kotlin.Short
        public final val DOCUMENT_NODE: kotlin.Short
            public final fun <get-DOCUMENT_NODE>(): kotlin.Short
        public final val DOCUMENT_POSITION_CONTAINED_BY: kotlin.Short
            public final fun <get-DOCUMENT_POSITION_CONTAINED_BY>(): kotlin.Short
        public final val DOCUMENT_POSITION_CONTAINS: kotlin.Short
            public final fun <get-DOCUMENT_POSITION_CONTAINS>(): kotlin.Short
        public final val DOCUMENT_POSITION_DISCONNECTED: kotlin.Short
            public final fun <get-DOCUMENT_POSITION_DISCONNECTED>(): kotlin.Short
        public final val DOCUMENT_POSITION_FOLLOWING: kotlin.Short
            public final fun <get-DOCUMENT_POSITION_FOLLOWING>(): kotlin.Short
        public final val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: kotlin.Short
            public final fun <get-DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC>(): kotlin.Short
        public final val DOCUMENT_POSITION_PRECEDING: kotlin.Short
            public final fun <get-DOCUMENT_POSITION_PRECEDING>(): kotlin.Short
        public final val DOCUMENT_TYPE_NODE: kotlin.Short
            public final fun <get-DOCUMENT_TYPE_NODE>(): kotlin.Short
        public final val ELEMENT_NODE: kotlin.Short
            public final fun <get-ELEMENT_NODE>(): kotlin.Short
        public final val ENTITY_NODE: kotlin.Short
            public final fun <get-ENTITY_NODE>(): kotlin.Short
        public final val ENTITY_REFERENCE_NODE: kotlin.Short
            public final fun <get-ENTITY_REFERENCE_NODE>(): kotlin.Short
        public final val NOTATION_NODE: kotlin.Short
            public final fun <get-NOTATION_NODE>(): kotlin.Short
        public final val PROCESSING_INSTRUCTION_NODE: kotlin.Short
            public final fun <get-PROCESSING_INSTRUCTION_NODE>(): kotlin.Short
        public final val TEXT_NODE: kotlin.Short
            public final fun <get-TEXT_NODE>(): kotlin.Short
        public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
        public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
        public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
    }
}

public abstract external class SVGHatchElement : org.w3c.dom.svg.SVGElement {
    /*primary*/ public constructor SVGHatchElement()
    public open override /*1*/ /*fake_override*/ val assignedSlot: org.w3c.dom.HTMLSlotElement?
        public open override /*1*/ /*fake_override*/ fun <get-assignedSlot>(): org.w3c.dom.HTMLSlotElement?
    public open override /*1*/ /*fake_override*/ val attributes: org.w3c.dom.NamedNodeMap
        public open override /*1*/ /*fake_override*/ fun <get-attributes>(): org.w3c.dom.NamedNodeMap
    public open override /*1*/ /*fake_override*/ val baseURI: kotlin.String
        public open override /*1*/ /*fake_override*/ fun <get-baseURI>(): kotlin.String
    public abstract override /*1*/ /*fake_override*/ val childElementCount: kotlin.Int
        public abstract override /*1*/ /*fake_override*/ fun <get-childElementCount>(): kotlin.Int
    public open override /*1*/ /*fake_override*/ val childNodes: org.w3c.dom.NodeList
        public open override /*1*/ /*fake_override*/ fun <get-childNodes>(): org.w3c.dom.NodeList
    public abstract override /*1*/ /*fake_override*/ val children: org.w3c.dom.HTMLCollection
        public abstract override /*1*/ /*fake_override*/ fun <get-children>(): org.w3c.dom.HTMLCollection
    public open override /*1*/ /*fake_override*/ val classList: org.w3c.dom.DOMTokenList
        public open override /*1*/ /*fake_override*/ fun <get-classList>(): org.w3c.dom.DOMTokenList
    public open override /*1*/ /*fake_override*/ var className: kotlin.String
        public open override /*1*/ /*fake_override*/ fun <get-className>(): kotlin.String
        public open override /*1*/ /*fake_override*/ fun <set-className>(/*0*/ <set-?>: kotlin.String): kotlin.Unit
    public open override /*1*/ /*fake_override*/ val clientHeight: kotlin.Int
        public open override /*1*/ /*fake_override*/ fun <get-clientHeight>(): kotlin.Int
    public open override /*1*/ /*fake_override*/ val clientLeft: kotlin.Int
        public open override /*1*/ /*fake_override*/ fun <get-clientLeft>(): kotlin.Int
    public open override /*1*/ /*fake_override*/ val clientTop: kotlin.Int
        public open override /*1*/ /*fake_override*/ fun <get-clientTop>(): kotlin.Int
    public open override /*1*/ /*fake_override*/ val clientWidth: kotlin.Int
        public open override /*1*/ /*fake_override*/ fun <get-clientWidth>(): kotlin.Int
    public open override /*1*/ /*fake_override*/ val correspondingElement: org.w3c.dom.svg.SVGElement?
        public open override /*1*/ /*fake_override*/ fun <get-correspondingElement>(): org.w3c.dom.svg.SVGElement?
    public open override /*1*/ /*fake_override*/ val correspondingUseElement: org.w3c.dom.svg.SVGUseElement?
        public open override /*1*/ /*fake_override*/ fun <get-correspondingUseElement>(): org.w3c.dom.svg.SVGUseElement?
    public open override /*1*/ /*fake_override*/ val dataset: org.w3c.dom.DOMStringMap
        public open override /*1*/ /*fake_override*/ fun <get-dataset>(): org.w3c.dom.DOMStringMap
    public open override /*1*/ /*fake_override*/ val firstChild: org.w3c.dom.Node?
        public open override /*1*/ /*fake_override*/ fun <get-firstChild>(): org.w3c.dom.Node?
    public open override /*1*/ /*fake_override*/ val firstElementChild: org.w3c.dom.Element?
        public open override /*1*/ /*fake_override*/ fun <get-firstElementChild>(): org.w3c.dom.Element?
    public open override /*1*/ /*fake_override*/ var id: kotlin.String
        public open override /*1*/ /*fake_override*/ fun <get-id>(): kotlin.String
        public open override /*1*/ /*fake_override*/ fun <set-id>(/*0*/ <set-?>: kotlin.String): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var innerHTML: kotlin.String
        public open override /*1*/ /*fake_override*/ fun <get-innerHTML>(): kotlin.String
        public open override /*1*/ /*fake_override*/ fun <set-innerHTML>(/*0*/ <set-?>: kotlin.String): kotlin.Unit
    public open override /*1*/ /*fake_override*/ val isConnected: kotlin.Boolean
        public open override /*1*/ /*fake_override*/ fun <get-isConnected>(): kotlin.Boolean
    public open override /*1*/ /*fake_override*/ val lastChild: org.w3c.dom.Node?
        public open override /*1*/ /*fake_override*/ fun <get-lastChild>(): org.w3c.dom.Node?
    public open override /*1*/ /*fake_override*/ val lastElementChild: org.w3c.dom.Element?
        public open override /*1*/ /*fake_override*/ fun <get-lastElementChild>(): org.w3c.dom.Element?
    public open override /*1*/ /*fake_override*/ val localName: kotlin.String
        public open override /*1*/ /*fake_override*/ fun <get-localName>(): kotlin.String
    public open override /*1*/ /*fake_override*/ val namespaceURI: kotlin.String?
        public open override /*1*/ /*fake_override*/ fun <get-namespaceURI>(): kotlin.String?
    public open override /*1*/ /*fake_override*/ val nextElementSibling: org.w3c.dom.Element?
        public open override /*1*/ /*fake_override*/ fun <get-nextElementSibling>(): org.w3c.dom.Element?
    public open override /*1*/ /*fake_override*/ val nextSibling: org.w3c.dom.Node?
        public open override /*1*/ /*fake_override*/ fun <get-nextSibling>(): org.w3c.dom.Node?
    public open override /*1*/ /*fake_override*/ val nodeName: kotlin.String
        public open override /*1*/ /*fake_override*/ fun <get-nodeName>(): kotlin.String
    public open override /*1*/ /*fake_override*/ val nodeType: kotlin.Short
        public open override /*1*/ /*fake_override*/ fun <get-nodeType>(): kotlin.Short
    public open override /*1*/ /*fake_override*/ var nodeValue: kotlin.String?
        public open override /*1*/ /*fake_override*/ fun <get-nodeValue>(): kotlin.String?
        public open override /*1*/ /*fake_override*/ fun <set-nodeValue>(/*0*/ <set-?>: kotlin.String?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onabort: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onabort>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onabort>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onblur: ((org.w3c.dom.events.FocusEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onblur>(): ((org.w3c.dom.events.FocusEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onblur>(/*0*/ value: ((org.w3c.dom.events.FocusEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var oncancel: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-oncancel>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-oncancel>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var oncanplay: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-oncanplay>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-oncanplay>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var oncanplaythrough: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-oncanplaythrough>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-oncanplaythrough>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onchange: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onchange>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onchange>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onclick: ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onclick>(): ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onclick>(/*0*/ value: ((org.w3c.dom.events.MouseEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onclose: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onclose>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onclose>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var oncontextmenu: ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-oncontextmenu>(): ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-oncontextmenu>(/*0*/ value: ((org.w3c.dom.events.MouseEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var oncuechange: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-oncuechange>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-oncuechange>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ondblclick: ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ondblclick>(): ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ondblclick>(/*0*/ value: ((org.w3c.dom.events.MouseEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ondrag: ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ondrag>(): ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ondrag>(/*0*/ value: ((org.w3c.dom.DragEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ondragend: ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ondragend>(): ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ondragend>(/*0*/ value: ((org.w3c.dom.DragEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ondragenter: ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ondragenter>(): ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ondragenter>(/*0*/ value: ((org.w3c.dom.DragEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ondragexit: ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ondragexit>(): ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ondragexit>(/*0*/ value: ((org.w3c.dom.DragEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ondragleave: ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ondragleave>(): ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ondragleave>(/*0*/ value: ((org.w3c.dom.DragEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ondragover: ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ondragover>(): ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ondragover>(/*0*/ value: ((org.w3c.dom.DragEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ondragstart: ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ondragstart>(): ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ondragstart>(/*0*/ value: ((org.w3c.dom.DragEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ondrop: ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ondrop>(): ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ondrop>(/*0*/ value: ((org.w3c.dom.DragEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ondurationchange: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ondurationchange>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ondurationchange>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onemptied: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onemptied>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onemptied>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onended: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onended>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onended>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onerror: ((dynamic, kotlin.String, kotlin.Int, kotlin.Int, kotlin.Any?) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onerror>(): ((dynamic, kotlin.String, kotlin.Int, kotlin.Int, kotlin.Any?) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onerror>(/*0*/ value: ((dynamic, kotlin.String, kotlin.Int, kotlin.Int, kotlin.Any?) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onfocus: ((org.w3c.dom.events.FocusEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onfocus>(): ((org.w3c.dom.events.FocusEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onfocus>(/*0*/ value: ((org.w3c.dom.events.FocusEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ongotpointercapture: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ongotpointercapture>(): ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ongotpointercapture>(/*0*/ value: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var oninput: ((org.w3c.dom.events.InputEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-oninput>(): ((org.w3c.dom.events.InputEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-oninput>(/*0*/ value: ((org.w3c.dom.events.InputEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var oninvalid: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-oninvalid>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-oninvalid>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onkeydown: ((org.w3c.dom.events.KeyboardEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onkeydown>(): ((org.w3c.dom.events.KeyboardEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onkeydown>(/*0*/ value: ((org.w3c.dom.events.KeyboardEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onkeypress: ((org.w3c.dom.events.KeyboardEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onkeypress>(): ((org.w3c.dom.events.KeyboardEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onkeypress>(/*0*/ value: ((org.w3c.dom.events.KeyboardEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onkeyup: ((org.w3c.dom.events.KeyboardEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onkeyup>(): ((org.w3c.dom.events.KeyboardEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onkeyup>(/*0*/ value: ((org.w3c.dom.events.KeyboardEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onload: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onload>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onload>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onloadeddata: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onloadeddata>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onloadeddata>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onloadedmetadata: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onloadedmetadata>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onloadedmetadata>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onloadend: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onloadend>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onloadend>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onloadstart: ((org.w3c.xhr.ProgressEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onloadstart>(): ((org.w3c.xhr.ProgressEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onloadstart>(/*0*/ value: ((org.w3c.xhr.ProgressEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onlostpointercapture: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onlostpointercapture>(): ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onlostpointercapture>(/*0*/ value: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onmousedown: ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onmousedown>(): ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onmousedown>(/*0*/ value: ((org.w3c.dom.events.MouseEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onmouseenter: ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onmouseenter>(): ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onmouseenter>(/*0*/ value: ((org.w3c.dom.events.MouseEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onmouseleave: ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onmouseleave>(): ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onmouseleave>(/*0*/ value: ((org.w3c.dom.events.MouseEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onmousemove: ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onmousemove>(): ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onmousemove>(/*0*/ value: ((org.w3c.dom.events.MouseEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onmouseout: ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onmouseout>(): ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onmouseout>(/*0*/ value: ((org.w3c.dom.events.MouseEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onmouseover: ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onmouseover>(): ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onmouseover>(/*0*/ value: ((org.w3c.dom.events.MouseEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onmouseup: ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onmouseup>(): ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onmouseup>(/*0*/ value: ((org.w3c.dom.events.MouseEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onpause: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onpause>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onpause>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onplay: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onplay>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onplay>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onplaying: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onplaying>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onplaying>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onpointercancel: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onpointercancel>(): ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onpointercancel>(/*0*/ value: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onpointerdown: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onpointerdown>(): ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onpointerdown>(/*0*/ value: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onpointerenter: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onpointerenter>(): ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onpointerenter>(/*0*/ value: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onpointerleave: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onpointerleave>(): ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onpointerleave>(/*0*/ value: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onpointermove: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onpointermove>(): ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onpointermove>(/*0*/ value: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onpointerout: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onpointerout>(): ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onpointerout>(/*0*/ value: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onpointerover: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onpointerover>(): ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onpointerover>(/*0*/ value: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onpointerup: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onpointerup>(): ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onpointerup>(/*0*/ value: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onprogress: ((org.w3c.xhr.ProgressEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onprogress>(): ((org.w3c.xhr.ProgressEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onprogress>(/*0*/ value: ((org.w3c.xhr.ProgressEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onratechange: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onratechange>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onratechange>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onreset: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onreset>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onreset>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onresize: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onresize>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onresize>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onscroll: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onscroll>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onscroll>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onseeked: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onseeked>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onseeked>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onseeking: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onseeking>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onseeking>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onselect: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onselect>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onselect>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onshow: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onshow>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onshow>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onstalled: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onstalled>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onstalled>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onsubmit: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onsubmit>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onsubmit>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onsuspend: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onsuspend>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onsuspend>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ontimeupdate: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ontimeupdate>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ontimeupdate>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ontoggle: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ontoggle>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ontoggle>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onvolumechange: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onvolumechange>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onvolumechange>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onwaiting: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onwaiting>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onwaiting>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onwheel: ((org.w3c.dom.events.WheelEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onwheel>(): ((org.w3c.dom.events.WheelEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onwheel>(/*0*/ value: ((org.w3c.dom.events.WheelEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var outerHTML: kotlin.String
        public open override /*1*/ /*fake_override*/ fun <get-outerHTML>(): kotlin.String
        public open override /*1*/ /*fake_override*/ fun <set-outerHTML>(/*0*/ <set-?>: kotlin.String): kotlin.Unit
    public open override /*1*/ /*fake_override*/ val ownerDocument: org.w3c.dom.Document?
        public open override /*1*/ /*fake_override*/ fun <get-ownerDocument>(): org.w3c.dom.Document?
    public open override /*1*/ /*fake_override*/ val ownerSVGElement: org.w3c.dom.svg.SVGSVGElement?
        public open override /*1*/ /*fake_override*/ fun <get-ownerSVGElement>(): org.w3c.dom.svg.SVGSVGElement?
    public open override /*1*/ /*fake_override*/ val parentElement: org.w3c.dom.Element?
        public open override /*1*/ /*fake_override*/ fun <get-parentElement>(): org.w3c.dom.Element?
    public open override /*1*/ /*fake_override*/ val parentNode: org.w3c.dom.Node?
        public open override /*1*/ /*fake_override*/ fun <get-parentNode>(): org.w3c.dom.Node?
    public open override /*1*/ /*fake_override*/ val prefix: kotlin.String?
        public open override /*1*/ /*fake_override*/ fun <get-prefix>(): kotlin.String?
    public open override /*1*/ /*fake_override*/ val previousElementSibling: org.w3c.dom.Element?
        public open override /*1*/ /*fake_override*/ fun <get-previousElementSibling>(): org.w3c.dom.Element?
    public open override /*1*/ /*fake_override*/ val previousSibling: org.w3c.dom.Node?
        public open override /*1*/ /*fake_override*/ fun <get-previousSibling>(): org.w3c.dom.Node?
    public open override /*1*/ /*fake_override*/ val scrollHeight: kotlin.Int
        public open override /*1*/ /*fake_override*/ fun <get-scrollHeight>(): kotlin.Int
    public open override /*1*/ /*fake_override*/ var scrollLeft: kotlin.Double
        public open override /*1*/ /*fake_override*/ fun <get-scrollLeft>(): kotlin.Double
        public open override /*1*/ /*fake_override*/ fun <set-scrollLeft>(/*0*/ <set-?>: kotlin.Double): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var scrollTop: kotlin.Double
        public open override /*1*/ /*fake_override*/ fun <get-scrollTop>(): kotlin.Double
        public open override /*1*/ /*fake_override*/ fun <set-scrollTop>(/*0*/ <set-?>: kotlin.Double): kotlin.Unit
    public open override /*1*/ /*fake_override*/ val scrollWidth: kotlin.Int
        public open override /*1*/ /*fake_override*/ fun <get-scrollWidth>(): kotlin.Int
    public open override /*1*/ /*fake_override*/ val shadowRoot: org.w3c.dom.ShadowRoot?
        public open override /*1*/ /*fake_override*/ fun <get-shadowRoot>(): org.w3c.dom.ShadowRoot?
    public open override /*1*/ /*fake_override*/ var slot: kotlin.String
        public open override /*1*/ /*fake_override*/ fun <get-slot>(): kotlin.String
        public open override /*1*/ /*fake_override*/ fun <set-slot>(/*0*/ <set-?>: kotlin.String): kotlin.Unit
    public abstract override /*1*/ /*fake_override*/ val style: org.w3c.dom.css.CSSStyleDeclaration
        public abstract override /*1*/ /*fake_override*/ fun <get-style>(): org.w3c.dom.css.CSSStyleDeclaration
    public open override /*1*/ /*fake_override*/ var tabIndex: kotlin.Int
        public open override /*1*/ /*fake_override*/ fun <get-tabIndex>(): kotlin.Int
        public open override /*1*/ /*fake_override*/ fun <set-tabIndex>(/*0*/ <set-?>: kotlin.Int): kotlin.Unit
    public open override /*1*/ /*fake_override*/ val tagName: kotlin.String
        public open override /*1*/ /*fake_override*/ fun <get-tagName>(): kotlin.String
    public open override /*1*/ /*fake_override*/ var textContent: kotlin.String?
        public open override /*1*/ /*fake_override*/ fun <get-textContent>(): kotlin.String?
        public open override /*1*/ /*fake_override*/ fun <set-textContent>(/*0*/ <set-?>: kotlin.String?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ val viewportElement: org.w3c.dom.svg.SVGElement?
        public open override /*1*/ /*fake_override*/ fun <get-viewportElement>(): org.w3c.dom.svg.SVGElement?
    public final override /*1*/ /*fake_override*/ fun addEventListener(/*0*/ type: kotlin.String, /*1*/ callback: ((org.w3c.dom.events.Event) -> kotlin.Unit)?, /*2*/ options: dynamic = ...): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun addEventListener(/*0*/ type: kotlin.String, /*1*/ callback: org.w3c.dom.events.EventListener?, /*2*/ options: dynamic = ...): kotlin.Unit
    public abstract override /*1*/ /*fake_override*/ fun after(/*0*/ vararg nodes: dynamic /*kotlin.Array<out dynamic>*/): kotlin.Unit
    public abstract override /*1*/ /*fake_override*/ fun append(/*0*/ vararg nodes: dynamic /*kotlin.Array<out dynamic>*/): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun appendChild(/*0*/ node: org.w3c.dom.Node): org.w3c.dom.Node
    public final override /*1*/ /*fake_override*/ fun attachShadow(/*0*/ init: org.w3c.dom.ShadowRootInit): org.w3c.dom.ShadowRoot
    public abstract override /*1*/ /*fake_override*/ fun before(/*0*/ vararg nodes: dynamic /*kotlin.Array<out dynamic>*/): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun blur(): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun cloneNode(/*0*/ deep: kotlin.Boolean = ...): org.w3c.dom.Node
    public final override /*1*/ /*fake_override*/ fun closest(/*0*/ selectors: kotlin.String): org.w3c.dom.Element?
    public final override /*1*/ /*fake_override*/ fun compareDocumentPosition(/*0*/ other: org.w3c.dom.Node): kotlin.Short
    public final override /*1*/ /*fake_override*/ fun contains(/*0*/ other: org.w3c.dom.Node?): kotlin.Boolean
    public abstract override /*1*/ /*fake_override*/ fun convertPointFromNode(/*0*/ point: org.w3c.dom.DOMPointInit, /*1*/ from: dynamic, /*2*/ options: org.w3c.dom.ConvertCoordinateOptions = ...): org.w3c.dom.DOMPoint
    public abstract override /*1*/ /*fake_override*/ fun convertQuadFromNode(/*0*/ quad: dynamic, /*1*/ from: dynamic, /*2*/ options: org.w3c.dom.ConvertCoordinateOptions = ...): org.w3c.dom.DOMQuad
    public abstract override /*1*/ /*fake_override*/ fun convertRectFromNode(/*0*/ rect: org.w3c.dom.DOMRectReadOnly, /*1*/ from: dynamic, /*2*/ options: org.w3c.dom.ConvertCoordinateOptions = ...): org.w3c.dom.DOMQuad
    public final override /*1*/ /*fake_override*/ fun dispatchEvent(/*0*/ event: org.w3c.dom.events.Event): kotlin.Boolean
    public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
    public final override /*1*/ /*fake_override*/ fun focus(): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun getAttribute(/*0*/ qualifiedName: kotlin.String): kotlin.String?
    public final override /*1*/ /*fake_override*/ fun getAttributeNS(/*0*/ namespace: kotlin.String?, /*1*/ localName: kotlin.String): kotlin.String?
    public final override /*1*/ /*fake_override*/ fun getAttributeNames(): kotlin.Array<kotlin.String>
    public final override /*1*/ /*fake_override*/ fun getAttributeNode(/*0*/ qualifiedName: kotlin.String): org.w3c.dom.Attr?
    public final override /*1*/ /*fake_override*/ fun getAttributeNodeNS(/*0*/ namespace: kotlin.String?, /*1*/ localName: kotlin.String): org.w3c.dom.Attr?
    public final override /*1*/ /*fake_override*/ fun getBoundingClientRect(): org.w3c.dom.DOMRect
    public abstract override /*1*/ /*fake_override*/ fun getBoxQuads(/*0*/ options: org.w3c.dom.BoxQuadOptions = ...): kotlin.Array<org.w3c.dom.DOMQuad>
    public final override /*1*/ /*fake_override*/ fun getClientRects(): kotlin.Array<org.w3c.dom.DOMRect>
    public final override /*1*/ /*fake_override*/ fun getElementsByClassName(/*0*/ classNames: kotlin.String): org.w3c.dom.HTMLCollection
    public final override /*1*/ /*fake_override*/ fun getElementsByTagName(/*0*/ qualifiedName: kotlin.String): org.w3c.dom.HTMLCollection
    public final override /*1*/ /*fake_override*/ fun getElementsByTagNameNS(/*0*/ namespace: kotlin.String?, /*1*/ localName: kotlin.String): org.w3c.dom.HTMLCollection
    public final override /*1*/ /*fake_override*/ fun getRootNode(/*0*/ options: org.w3c.dom.GetRootNodeOptions = ...): org.w3c.dom.Node
    public final override /*1*/ /*fake_override*/ fun hasAttribute(/*0*/ qualifiedName: kotlin.String): kotlin.Boolean
    public final override /*1*/ /*fake_override*/ fun hasAttributeNS(/*0*/ namespace: kotlin.String?, /*1*/ localName: kotlin.String): kotlin.Boolean
    public final override /*1*/ /*fake_override*/ fun hasAttributes(): kotlin.Boolean
    public final override /*1*/ /*fake_override*/ fun hasChildNodes(): kotlin.Boolean
    public final override /*1*/ /*fake_override*/ fun hasPointerCapture(/*0*/ pointerId: kotlin.Int): kotlin.Boolean
    public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
    public final override /*1*/ /*fake_override*/ fun insertAdjacentElement(/*0*/ where: kotlin.String, /*1*/ element: org.w3c.dom.Element): org.w3c.dom.Element?
    public final override /*1*/ /*fake_override*/ fun insertAdjacentHTML(/*0*/ position: kotlin.String, /*1*/ text: kotlin.String): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun insertAdjacentText(/*0*/ where: kotlin.String, /*1*/ data: kotlin.String): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun insertBefore(/*0*/ node: org.w3c.dom.Node, /*1*/ child: org.w3c.dom.Node?): org.w3c.dom.Node
    public final override /*1*/ /*fake_override*/ fun isDefaultNamespace(/*0*/ namespace: kotlin.String?): kotlin.Boolean
    public final override /*1*/ /*fake_override*/ fun isEqualNode(/*0*/ otherNode: org.w3c.dom.Node?): kotlin.Boolean
    public final override /*1*/ /*fake_override*/ fun isSameNode(/*0*/ otherNode: org.w3c.dom.Node?): kotlin.Boolean
    public final override /*1*/ /*fake_override*/ fun lookupNamespaceURI(/*0*/ prefix: kotlin.String?): kotlin.String?
    public final override /*1*/ /*fake_override*/ fun lookupPrefix(/*0*/ namespace: kotlin.String?): kotlin.String?
    public final override /*1*/ /*fake_override*/ fun matches(/*0*/ selectors: kotlin.String): kotlin.Boolean
    public final override /*1*/ /*fake_override*/ fun normalize(): kotlin.Unit
    public abstract override /*1*/ /*fake_override*/ fun prepend(/*0*/ vararg nodes: dynamic /*kotlin.Array<out dynamic>*/): kotlin.Unit
    public abstract override /*1*/ /*fake_override*/ fun querySelector(/*0*/ selectors: kotlin.String): org.w3c.dom.Element?
    public abstract override /*1*/ /*fake_override*/ fun querySelectorAll(/*0*/ selectors: kotlin.String): org.w3c.dom.NodeList
    public final override /*1*/ /*fake_override*/ fun releasePointerCapture(/*0*/ pointerId: kotlin.Int): kotlin.Unit
    public abstract override /*1*/ /*fake_override*/ fun remove(): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun removeAttribute(/*0*/ qualifiedName: kotlin.String): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun removeAttributeNS(/*0*/ namespace: kotlin.String?, /*1*/ localName: kotlin.String): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun removeAttributeNode(/*0*/ attr: org.w3c.dom.Attr): org.w3c.dom.Attr
    public final override /*1*/ /*fake_override*/ fun removeChild(/*0*/ child: org.w3c.dom.Node): org.w3c.dom.Node
    public final override /*1*/ /*fake_override*/ fun removeEventListener(/*0*/ type: kotlin.String, /*1*/ callback: ((org.w3c.dom.events.Event) -> kotlin.Unit)?, /*2*/ options: dynamic = ...): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun removeEventListener(/*0*/ type: kotlin.String, /*1*/ callback: org.w3c.dom.events.EventListener?, /*2*/ options: dynamic = ...): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun replaceChild(/*0*/ node: org.w3c.dom.Node, /*1*/ child: org.w3c.dom.Node): org.w3c.dom.Node
    public abstract override /*1*/ /*fake_override*/ fun replaceWith(/*0*/ vararg nodes: dynamic /*kotlin.Array<out dynamic>*/): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun requestFullscreen(): kotlin.js.Promise<kotlin.Unit>
    public final override /*1*/ /*fake_override*/ fun scroll(/*0*/ x: kotlin.Double, /*1*/ y: kotlin.Double): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun scroll(/*0*/ options: org.w3c.dom.ScrollToOptions = ...): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun scrollBy(/*0*/ x: kotlin.Double, /*1*/ y: kotlin.Double): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun scrollBy(/*0*/ options: org.w3c.dom.ScrollToOptions = ...): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun scrollIntoView(): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun scrollIntoView(/*0*/ arg: dynamic): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun scrollTo(/*0*/ x: kotlin.Double, /*1*/ y: kotlin.Double): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun scrollTo(/*0*/ options: org.w3c.dom.ScrollToOptions = ...): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun setAttribute(/*0*/ qualifiedName: kotlin.String, /*1*/ value: kotlin.String): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun setAttributeNS(/*0*/ namespace: kotlin.String?, /*1*/ qualifiedName: kotlin.String, /*2*/ value: kotlin.String): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun setAttributeNode(/*0*/ attr: org.w3c.dom.Attr): org.w3c.dom.Attr?
    public final override /*1*/ /*fake_override*/ fun setAttributeNodeNS(/*0*/ attr: org.w3c.dom.Attr): org.w3c.dom.Attr?
    public final override /*1*/ /*fake_override*/ fun setPointerCapture(/*0*/ pointerId: kotlin.Int): kotlin.Unit
    public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
    public final override /*1*/ /*fake_override*/ fun webkitMatchesSelector(/*0*/ selectors: kotlin.String): kotlin.Boolean

    public companion object Companion {
        /*primary*/ private constructor Companion()
        public final val ATTRIBUTE_NODE: kotlin.Short
            public final fun <get-ATTRIBUTE_NODE>(): kotlin.Short
        public final val CDATA_SECTION_NODE: kotlin.Short
            public final fun <get-CDATA_SECTION_NODE>(): kotlin.Short
        public final val COMMENT_NODE: kotlin.Short
            public final fun <get-COMMENT_NODE>(): kotlin.Short
        public final val DOCUMENT_FRAGMENT_NODE: kotlin.Short
            public final fun <get-DOCUMENT_FRAGMENT_NODE>(): kotlin.Short
        public final val DOCUMENT_NODE: kotlin.Short
            public final fun <get-DOCUMENT_NODE>(): kotlin.Short
        public final val DOCUMENT_POSITION_CONTAINED_BY: kotlin.Short
            public final fun <get-DOCUMENT_POSITION_CONTAINED_BY>(): kotlin.Short
        public final val DOCUMENT_POSITION_CONTAINS: kotlin.Short
            public final fun <get-DOCUMENT_POSITION_CONTAINS>(): kotlin.Short
        public final val DOCUMENT_POSITION_DISCONNECTED: kotlin.Short
            public final fun <get-DOCUMENT_POSITION_DISCONNECTED>(): kotlin.Short
        public final val DOCUMENT_POSITION_FOLLOWING: kotlin.Short
            public final fun <get-DOCUMENT_POSITION_FOLLOWING>(): kotlin.Short
        public final val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: kotlin.Short
            public final fun <get-DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC>(): kotlin.Short
        public final val DOCUMENT_POSITION_PRECEDING: kotlin.Short
            public final fun <get-DOCUMENT_POSITION_PRECEDING>(): kotlin.Short
        public final val DOCUMENT_TYPE_NODE: kotlin.Short
            public final fun <get-DOCUMENT_TYPE_NODE>(): kotlin.Short
        public final val ELEMENT_NODE: kotlin.Short
            public final fun <get-ELEMENT_NODE>(): kotlin.Short
        public final val ENTITY_NODE: kotlin.Short
            public final fun <get-ENTITY_NODE>(): kotlin.Short
        public final val ENTITY_REFERENCE_NODE: kotlin.Short
            public final fun <get-ENTITY_REFERENCE_NODE>(): kotlin.Short
        public final val NOTATION_NODE: kotlin.Short
            public final fun <get-NOTATION_NODE>(): kotlin.Short
        public final val PROCESSING_INSTRUCTION_NODE: kotlin.Short
            public final fun <get-PROCESSING_INSTRUCTION_NODE>(): kotlin.Short
        public final val TEXT_NODE: kotlin.Short
            public final fun <get-TEXT_NODE>(): kotlin.Short
        public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
        public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
        public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
    }
}

public abstract external class SVGHatchpathElement : org.w3c.dom.svg.SVGElement {
    /*primary*/ public constructor SVGHatchpathElement()
    public open override /*1*/ /*fake_override*/ val assignedSlot: org.w3c.dom.HTMLSlotElement?
        public open override /*1*/ /*fake_override*/ fun <get-assignedSlot>(): org.w3c.dom.HTMLSlotElement?
    public open override /*1*/ /*fake_override*/ val attributes: org.w3c.dom.NamedNodeMap
        public open override /*1*/ /*fake_override*/ fun <get-attributes>(): org.w3c.dom.NamedNodeMap
    public open override /*1*/ /*fake_override*/ val baseURI: kotlin.String
        public open override /*1*/ /*fake_override*/ fun <get-baseURI>(): kotlin.String
    public abstract override /*1*/ /*fake_override*/ val childElementCount: kotlin.Int
        public abstract override /*1*/ /*fake_override*/ fun <get-childElementCount>(): kotlin.Int
    public open override /*1*/ /*fake_override*/ val childNodes: org.w3c.dom.NodeList
        public open override /*1*/ /*fake_override*/ fun <get-childNodes>(): org.w3c.dom.NodeList
    public abstract override /*1*/ /*fake_override*/ val children: org.w3c.dom.HTMLCollection
        public abstract override /*1*/ /*fake_override*/ fun <get-children>(): org.w3c.dom.HTMLCollection
    public open override /*1*/ /*fake_override*/ val classList: org.w3c.dom.DOMTokenList
        public open override /*1*/ /*fake_override*/ fun <get-classList>(): org.w3c.dom.DOMTokenList
    public open override /*1*/ /*fake_override*/ var className: kotlin.String
        public open override /*1*/ /*fake_override*/ fun <get-className>(): kotlin.String
        public open override /*1*/ /*fake_override*/ fun <set-className>(/*0*/ <set-?>: kotlin.String): kotlin.Unit
    public open override /*1*/ /*fake_override*/ val clientHeight: kotlin.Int
        public open override /*1*/ /*fake_override*/ fun <get-clientHeight>(): kotlin.Int
    public open override /*1*/ /*fake_override*/ val clientLeft: kotlin.Int
        public open override /*1*/ /*fake_override*/ fun <get-clientLeft>(): kotlin.Int
    public open override /*1*/ /*fake_override*/ val clientTop: kotlin.Int
        public open override /*1*/ /*fake_override*/ fun <get-clientTop>(): kotlin.Int
    public open override /*1*/ /*fake_override*/ val clientWidth: kotlin.Int
        public open override /*1*/ /*fake_override*/ fun <get-clientWidth>(): kotlin.Int
    public open override /*1*/ /*fake_override*/ val correspondingElement: org.w3c.dom.svg.SVGElement?
        public open override /*1*/ /*fake_override*/ fun <get-correspondingElement>(): org.w3c.dom.svg.SVGElement?
    public open override /*1*/ /*fake_override*/ val correspondingUseElement: org.w3c.dom.svg.SVGUseElement?
        public open override /*1*/ /*fake_override*/ fun <get-correspondingUseElement>(): org.w3c.dom.svg.SVGUseElement?
    public open override /*1*/ /*fake_override*/ val dataset: org.w3c.dom.DOMStringMap
        public open override /*1*/ /*fake_override*/ fun <get-dataset>(): org.w3c.dom.DOMStringMap
    public open override /*1*/ /*fake_override*/ val firstChild: org.w3c.dom.Node?
        public open override /*1*/ /*fake_override*/ fun <get-firstChild>(): org.w3c.dom.Node?
    public open override /*1*/ /*fake_override*/ val firstElementChild: org.w3c.dom.Element?
        public open override /*1*/ /*fake_override*/ fun <get-firstElementChild>(): org.w3c.dom.Element?
    public open override /*1*/ /*fake_override*/ var id: kotlin.String
        public open override /*1*/ /*fake_override*/ fun <get-id>(): kotlin.String
        public open override /*1*/ /*fake_override*/ fun <set-id>(/*0*/ <set-?>: kotlin.String): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var innerHTML: kotlin.String
        public open override /*1*/ /*fake_override*/ fun <get-innerHTML>(): kotlin.String
        public open override /*1*/ /*fake_override*/ fun <set-innerHTML>(/*0*/ <set-?>: kotlin.String): kotlin.Unit
    public open override /*1*/ /*fake_override*/ val isConnected: kotlin.Boolean
        public open override /*1*/ /*fake_override*/ fun <get-isConnected>(): kotlin.Boolean
    public open override /*1*/ /*fake_override*/ val lastChild: org.w3c.dom.Node?
        public open override /*1*/ /*fake_override*/ fun <get-lastChild>(): org.w3c.dom.Node?
    public open override /*1*/ /*fake_override*/ val lastElementChild: org.w3c.dom.Element?
        public open override /*1*/ /*fake_override*/ fun <get-lastElementChild>(): org.w3c.dom.Element?
    public open override /*1*/ /*fake_override*/ val localName: kotlin.String
        public open override /*1*/ /*fake_override*/ fun <get-localName>(): kotlin.String
    public open override /*1*/ /*fake_override*/ val namespaceURI: kotlin.String?
        public open override /*1*/ /*fake_override*/ fun <get-namespaceURI>(): kotlin.String?
    public open override /*1*/ /*fake_override*/ val nextElementSibling: org.w3c.dom.Element?
        public open override /*1*/ /*fake_override*/ fun <get-nextElementSibling>(): org.w3c.dom.Element?
    public open override /*1*/ /*fake_override*/ val nextSibling: org.w3c.dom.Node?
        public open override /*1*/ /*fake_override*/ fun <get-nextSibling>(): org.w3c.dom.Node?
    public open override /*1*/ /*fake_override*/ val nodeName: kotlin.String
        public open override /*1*/ /*fake_override*/ fun <get-nodeName>(): kotlin.String
    public open override /*1*/ /*fake_override*/ val nodeType: kotlin.Short
        public open override /*1*/ /*fake_override*/ fun <get-nodeType>(): kotlin.Short
    public open override /*1*/ /*fake_override*/ var nodeValue: kotlin.String?
        public open override /*1*/ /*fake_override*/ fun <get-nodeValue>(): kotlin.String?
        public open override /*1*/ /*fake_override*/ fun <set-nodeValue>(/*0*/ <set-?>: kotlin.String?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onabort: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onabort>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onabort>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onblur: ((org.w3c.dom.events.FocusEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onblur>(): ((org.w3c.dom.events.FocusEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onblur>(/*0*/ value: ((org.w3c.dom.events.FocusEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var oncancel: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-oncancel>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-oncancel>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var oncanplay: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-oncanplay>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-oncanplay>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var oncanplaythrough: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-oncanplaythrough>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-oncanplaythrough>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onchange: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onchange>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onchange>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onclick: ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onclick>(): ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onclick>(/*0*/ value: ((org.w3c.dom.events.MouseEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onclose: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onclose>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onclose>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var oncontextmenu: ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-oncontextmenu>(): ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-oncontextmenu>(/*0*/ value: ((org.w3c.dom.events.MouseEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var oncuechange: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-oncuechange>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-oncuechange>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ondblclick: ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ondblclick>(): ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ondblclick>(/*0*/ value: ((org.w3c.dom.events.MouseEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ondrag: ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ondrag>(): ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ondrag>(/*0*/ value: ((org.w3c.dom.DragEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ondragend: ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ondragend>(): ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ondragend>(/*0*/ value: ((org.w3c.dom.DragEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ondragenter: ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ondragenter>(): ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ondragenter>(/*0*/ value: ((org.w3c.dom.DragEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ondragexit: ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ondragexit>(): ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ondragexit>(/*0*/ value: ((org.w3c.dom.DragEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ondragleave: ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ondragleave>(): ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ondragleave>(/*0*/ value: ((org.w3c.dom.DragEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ondragover: ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ondragover>(): ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ondragover>(/*0*/ value: ((org.w3c.dom.DragEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ondragstart: ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ondragstart>(): ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ondragstart>(/*0*/ value: ((org.w3c.dom.DragEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ondrop: ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ondrop>(): ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ondrop>(/*0*/ value: ((org.w3c.dom.DragEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ondurationchange: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ondurationchange>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ondurationchange>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onemptied: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onemptied>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onemptied>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onended: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onended>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onended>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onerror: ((dynamic, kotlin.String, kotlin.Int, kotlin.Int, kotlin.Any?) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onerror>(): ((dynamic, kotlin.String, kotlin.Int, kotlin.Int, kotlin.Any?) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onerror>(/*0*/ value: ((dynamic, kotlin.String, kotlin.Int, kotlin.Int, kotlin.Any?) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onfocus: ((org.w3c.dom.events.FocusEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onfocus>(): ((org.w3c.dom.events.FocusEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onfocus>(/*0*/ value: ((org.w3c.dom.events.FocusEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ongotpointercapture: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ongotpointercapture>(): ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ongotpointercapture>(/*0*/ value: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var oninput: ((org.w3c.dom.events.InputEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-oninput>(): ((org.w3c.dom.events.InputEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-oninput>(/*0*/ value: ((org.w3c.dom.events.InputEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var oninvalid: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-oninvalid>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-oninvalid>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onkeydown: ((org.w3c.dom.events.KeyboardEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onkeydown>(): ((org.w3c.dom.events.KeyboardEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onkeydown>(/*0*/ value: ((org.w3c.dom.events.KeyboardEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onkeypress: ((org.w3c.dom.events.KeyboardEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onkeypress>(): ((org.w3c.dom.events.KeyboardEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onkeypress>(/*0*/ value: ((org.w3c.dom.events.KeyboardEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onkeyup: ((org.w3c.dom.events.KeyboardEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onkeyup>(): ((org.w3c.dom.events.KeyboardEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onkeyup>(/*0*/ value: ((org.w3c.dom.events.KeyboardEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onload: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onload>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onload>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onloadeddata: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onloadeddata>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onloadeddata>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onloadedmetadata: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onloadedmetadata>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onloadedmetadata>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onloadend: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onloadend>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onloadend>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onloadstart: ((org.w3c.xhr.ProgressEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onloadstart>(): ((org.w3c.xhr.ProgressEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onloadstart>(/*0*/ value: ((org.w3c.xhr.ProgressEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onlostpointercapture: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onlostpointercapture>(): ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onlostpointercapture>(/*0*/ value: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onmousedown: ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onmousedown>(): ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onmousedown>(/*0*/ value: ((org.w3c.dom.events.MouseEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onmouseenter: ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onmouseenter>(): ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onmouseenter>(/*0*/ value: ((org.w3c.dom.events.MouseEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onmouseleave: ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onmouseleave>(): ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onmouseleave>(/*0*/ value: ((org.w3c.dom.events.MouseEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onmousemove: ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onmousemove>(): ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onmousemove>(/*0*/ value: ((org.w3c.dom.events.MouseEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onmouseout: ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onmouseout>(): ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onmouseout>(/*0*/ value: ((org.w3c.dom.events.MouseEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onmouseover: ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onmouseover>(): ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onmouseover>(/*0*/ value: ((org.w3c.dom.events.MouseEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onmouseup: ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onmouseup>(): ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onmouseup>(/*0*/ value: ((org.w3c.dom.events.MouseEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onpause: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onpause>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onpause>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onplay: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onplay>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onplay>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onplaying: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onplaying>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onplaying>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onpointercancel: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onpointercancel>(): ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onpointercancel>(/*0*/ value: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onpointerdown: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onpointerdown>(): ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onpointerdown>(/*0*/ value: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onpointerenter: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onpointerenter>(): ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onpointerenter>(/*0*/ value: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onpointerleave: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onpointerleave>(): ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onpointerleave>(/*0*/ value: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onpointermove: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onpointermove>(): ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onpointermove>(/*0*/ value: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onpointerout: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onpointerout>(): ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onpointerout>(/*0*/ value: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onpointerover: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onpointerover>(): ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onpointerover>(/*0*/ value: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onpointerup: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onpointerup>(): ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onpointerup>(/*0*/ value: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onprogress: ((org.w3c.xhr.ProgressEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onprogress>(): ((org.w3c.xhr.ProgressEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onprogress>(/*0*/ value: ((org.w3c.xhr.ProgressEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onratechange: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onratechange>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onratechange>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onreset: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onreset>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onreset>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onresize: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onresize>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onresize>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onscroll: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onscroll>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onscroll>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onseeked: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onseeked>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onseeked>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onseeking: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onseeking>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onseeking>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onselect: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onselect>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onselect>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onshow: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onshow>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onshow>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onstalled: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onstalled>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onstalled>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onsubmit: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onsubmit>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onsubmit>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onsuspend: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onsuspend>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onsuspend>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ontimeupdate: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ontimeupdate>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ontimeupdate>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ontoggle: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ontoggle>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ontoggle>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onvolumechange: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onvolumechange>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onvolumechange>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onwaiting: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onwaiting>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onwaiting>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onwheel: ((org.w3c.dom.events.WheelEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onwheel>(): ((org.w3c.dom.events.WheelEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onwheel>(/*0*/ value: ((org.w3c.dom.events.WheelEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var outerHTML: kotlin.String
        public open override /*1*/ /*fake_override*/ fun <get-outerHTML>(): kotlin.String
        public open override /*1*/ /*fake_override*/ fun <set-outerHTML>(/*0*/ <set-?>: kotlin.String): kotlin.Unit
    public open override /*1*/ /*fake_override*/ val ownerDocument: org.w3c.dom.Document?
        public open override /*1*/ /*fake_override*/ fun <get-ownerDocument>(): org.w3c.dom.Document?
    public open override /*1*/ /*fake_override*/ val ownerSVGElement: org.w3c.dom.svg.SVGSVGElement?
        public open override /*1*/ /*fake_override*/ fun <get-ownerSVGElement>(): org.w3c.dom.svg.SVGSVGElement?
    public open override /*1*/ /*fake_override*/ val parentElement: org.w3c.dom.Element?
        public open override /*1*/ /*fake_override*/ fun <get-parentElement>(): org.w3c.dom.Element?
    public open override /*1*/ /*fake_override*/ val parentNode: org.w3c.dom.Node?
        public open override /*1*/ /*fake_override*/ fun <get-parentNode>(): org.w3c.dom.Node?
    public open override /*1*/ /*fake_override*/ val prefix: kotlin.String?
        public open override /*1*/ /*fake_override*/ fun <get-prefix>(): kotlin.String?
    public open override /*1*/ /*fake_override*/ val previousElementSibling: org.w3c.dom.Element?
        public open override /*1*/ /*fake_override*/ fun <get-previousElementSibling>(): org.w3c.dom.Element?
    public open override /*1*/ /*fake_override*/ val previousSibling: org.w3c.dom.Node?
        public open override /*1*/ /*fake_override*/ fun <get-previousSibling>(): org.w3c.dom.Node?
    public open override /*1*/ /*fake_override*/ val scrollHeight: kotlin.Int
        public open override /*1*/ /*fake_override*/ fun <get-scrollHeight>(): kotlin.Int
    public open override /*1*/ /*fake_override*/ var scrollLeft: kotlin.Double
        public open override /*1*/ /*fake_override*/ fun <get-scrollLeft>(): kotlin.Double
        public open override /*1*/ /*fake_override*/ fun <set-scrollLeft>(/*0*/ <set-?>: kotlin.Double): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var scrollTop: kotlin.Double
        public open override /*1*/ /*fake_override*/ fun <get-scrollTop>(): kotlin.Double
        public open override /*1*/ /*fake_override*/ fun <set-scrollTop>(/*0*/ <set-?>: kotlin.Double): kotlin.Unit
    public open override /*1*/ /*fake_override*/ val scrollWidth: kotlin.Int
        public open override /*1*/ /*fake_override*/ fun <get-scrollWidth>(): kotlin.Int
    public open override /*1*/ /*fake_override*/ val shadowRoot: org.w3c.dom.ShadowRoot?
        public open override /*1*/ /*fake_override*/ fun <get-shadowRoot>(): org.w3c.dom.ShadowRoot?
    public open override /*1*/ /*fake_override*/ var slot: kotlin.String
        public open override /*1*/ /*fake_override*/ fun <get-slot>(): kotlin.String
        public open override /*1*/ /*fake_override*/ fun <set-slot>(/*0*/ <set-?>: kotlin.String): kotlin.Unit
    public abstract override /*1*/ /*fake_override*/ val style: org.w3c.dom.css.CSSStyleDeclaration
        public abstract override /*1*/ /*fake_override*/ fun <get-style>(): org.w3c.dom.css.CSSStyleDeclaration
    public open override /*1*/ /*fake_override*/ var tabIndex: kotlin.Int
        public open override /*1*/ /*fake_override*/ fun <get-tabIndex>(): kotlin.Int
        public open override /*1*/ /*fake_override*/ fun <set-tabIndex>(/*0*/ <set-?>: kotlin.Int): kotlin.Unit
    public open override /*1*/ /*fake_override*/ val tagName: kotlin.String
        public open override /*1*/ /*fake_override*/ fun <get-tagName>(): kotlin.String
    public open override /*1*/ /*fake_override*/ var textContent: kotlin.String?
        public open override /*1*/ /*fake_override*/ fun <get-textContent>(): kotlin.String?
        public open override /*1*/ /*fake_override*/ fun <set-textContent>(/*0*/ <set-?>: kotlin.String?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ val viewportElement: org.w3c.dom.svg.SVGElement?
        public open override /*1*/ /*fake_override*/ fun <get-viewportElement>(): org.w3c.dom.svg.SVGElement?
    public final override /*1*/ /*fake_override*/ fun addEventListener(/*0*/ type: kotlin.String, /*1*/ callback: ((org.w3c.dom.events.Event) -> kotlin.Unit)?, /*2*/ options: dynamic = ...): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun addEventListener(/*0*/ type: kotlin.String, /*1*/ callback: org.w3c.dom.events.EventListener?, /*2*/ options: dynamic = ...): kotlin.Unit
    public abstract override /*1*/ /*fake_override*/ fun after(/*0*/ vararg nodes: dynamic /*kotlin.Array<out dynamic>*/): kotlin.Unit
    public abstract override /*1*/ /*fake_override*/ fun append(/*0*/ vararg nodes: dynamic /*kotlin.Array<out dynamic>*/): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun appendChild(/*0*/ node: org.w3c.dom.Node): org.w3c.dom.Node
    public final override /*1*/ /*fake_override*/ fun attachShadow(/*0*/ init: org.w3c.dom.ShadowRootInit): org.w3c.dom.ShadowRoot
    public abstract override /*1*/ /*fake_override*/ fun before(/*0*/ vararg nodes: dynamic /*kotlin.Array<out dynamic>*/): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun blur(): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun cloneNode(/*0*/ deep: kotlin.Boolean = ...): org.w3c.dom.Node
    public final override /*1*/ /*fake_override*/ fun closest(/*0*/ selectors: kotlin.String): org.w3c.dom.Element?
    public final override /*1*/ /*fake_override*/ fun compareDocumentPosition(/*0*/ other: org.w3c.dom.Node): kotlin.Short
    public final override /*1*/ /*fake_override*/ fun contains(/*0*/ other: org.w3c.dom.Node?): kotlin.Boolean
    public abstract override /*1*/ /*fake_override*/ fun convertPointFromNode(/*0*/ point: org.w3c.dom.DOMPointInit, /*1*/ from: dynamic, /*2*/ options: org.w3c.dom.ConvertCoordinateOptions = ...): org.w3c.dom.DOMPoint
    public abstract override /*1*/ /*fake_override*/ fun convertQuadFromNode(/*0*/ quad: dynamic, /*1*/ from: dynamic, /*2*/ options: org.w3c.dom.ConvertCoordinateOptions = ...): org.w3c.dom.DOMQuad
    public abstract override /*1*/ /*fake_override*/ fun convertRectFromNode(/*0*/ rect: org.w3c.dom.DOMRectReadOnly, /*1*/ from: dynamic, /*2*/ options: org.w3c.dom.ConvertCoordinateOptions = ...): org.w3c.dom.DOMQuad
    public final override /*1*/ /*fake_override*/ fun dispatchEvent(/*0*/ event: org.w3c.dom.events.Event): kotlin.Boolean
    public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
    public final override /*1*/ /*fake_override*/ fun focus(): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun getAttribute(/*0*/ qualifiedName: kotlin.String): kotlin.String?
    public final override /*1*/ /*fake_override*/ fun getAttributeNS(/*0*/ namespace: kotlin.String?, /*1*/ localName: kotlin.String): kotlin.String?
    public final override /*1*/ /*fake_override*/ fun getAttributeNames(): kotlin.Array<kotlin.String>
    public final override /*1*/ /*fake_override*/ fun getAttributeNode(/*0*/ qualifiedName: kotlin.String): org.w3c.dom.Attr?
    public final override /*1*/ /*fake_override*/ fun getAttributeNodeNS(/*0*/ namespace: kotlin.String?, /*1*/ localName: kotlin.String): org.w3c.dom.Attr?
    public final override /*1*/ /*fake_override*/ fun getBoundingClientRect(): org.w3c.dom.DOMRect
    public abstract override /*1*/ /*fake_override*/ fun getBoxQuads(/*0*/ options: org.w3c.dom.BoxQuadOptions = ...): kotlin.Array<org.w3c.dom.DOMQuad>
    public final override /*1*/ /*fake_override*/ fun getClientRects(): kotlin.Array<org.w3c.dom.DOMRect>
    public final override /*1*/ /*fake_override*/ fun getElementsByClassName(/*0*/ classNames: kotlin.String): org.w3c.dom.HTMLCollection
    public final override /*1*/ /*fake_override*/ fun getElementsByTagName(/*0*/ qualifiedName: kotlin.String): org.w3c.dom.HTMLCollection
    public final override /*1*/ /*fake_override*/ fun getElementsByTagNameNS(/*0*/ namespace: kotlin.String?, /*1*/ localName: kotlin.String): org.w3c.dom.HTMLCollection
    public final override /*1*/ /*fake_override*/ fun getRootNode(/*0*/ options: org.w3c.dom.GetRootNodeOptions = ...): org.w3c.dom.Node
    public final override /*1*/ /*fake_override*/ fun hasAttribute(/*0*/ qualifiedName: kotlin.String): kotlin.Boolean
    public final override /*1*/ /*fake_override*/ fun hasAttributeNS(/*0*/ namespace: kotlin.String?, /*1*/ localName: kotlin.String): kotlin.Boolean
    public final override /*1*/ /*fake_override*/ fun hasAttributes(): kotlin.Boolean
    public final override /*1*/ /*fake_override*/ fun hasChildNodes(): kotlin.Boolean
    public final override /*1*/ /*fake_override*/ fun hasPointerCapture(/*0*/ pointerId: kotlin.Int): kotlin.Boolean
    public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
    public final override /*1*/ /*fake_override*/ fun insertAdjacentElement(/*0*/ where: kotlin.String, /*1*/ element: org.w3c.dom.Element): org.w3c.dom.Element?
    public final override /*1*/ /*fake_override*/ fun insertAdjacentHTML(/*0*/ position: kotlin.String, /*1*/ text: kotlin.String): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun insertAdjacentText(/*0*/ where: kotlin.String, /*1*/ data: kotlin.String): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun insertBefore(/*0*/ node: org.w3c.dom.Node, /*1*/ child: org.w3c.dom.Node?): org.w3c.dom.Node
    public final override /*1*/ /*fake_override*/ fun isDefaultNamespace(/*0*/ namespace: kotlin.String?): kotlin.Boolean
    public final override /*1*/ /*fake_override*/ fun isEqualNode(/*0*/ otherNode: org.w3c.dom.Node?): kotlin.Boolean
    public final override /*1*/ /*fake_override*/ fun isSameNode(/*0*/ otherNode: org.w3c.dom.Node?): kotlin.Boolean
    public final override /*1*/ /*fake_override*/ fun lookupNamespaceURI(/*0*/ prefix: kotlin.String?): kotlin.String?
    public final override /*1*/ /*fake_override*/ fun lookupPrefix(/*0*/ namespace: kotlin.String?): kotlin.String?
    public final override /*1*/ /*fake_override*/ fun matches(/*0*/ selectors: kotlin.String): kotlin.Boolean
    public final override /*1*/ /*fake_override*/ fun normalize(): kotlin.Unit
    public abstract override /*1*/ /*fake_override*/ fun prepend(/*0*/ vararg nodes: dynamic /*kotlin.Array<out dynamic>*/): kotlin.Unit
    public abstract override /*1*/ /*fake_override*/ fun querySelector(/*0*/ selectors: kotlin.String): org.w3c.dom.Element?
    public abstract override /*1*/ /*fake_override*/ fun querySelectorAll(/*0*/ selectors: kotlin.String): org.w3c.dom.NodeList
    public final override /*1*/ /*fake_override*/ fun releasePointerCapture(/*0*/ pointerId: kotlin.Int): kotlin.Unit
    public abstract override /*1*/ /*fake_override*/ fun remove(): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun removeAttribute(/*0*/ qualifiedName: kotlin.String): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun removeAttributeNS(/*0*/ namespace: kotlin.String?, /*1*/ localName: kotlin.String): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun removeAttributeNode(/*0*/ attr: org.w3c.dom.Attr): org.w3c.dom.Attr
    public final override /*1*/ /*fake_override*/ fun removeChild(/*0*/ child: org.w3c.dom.Node): org.w3c.dom.Node
    public final override /*1*/ /*fake_override*/ fun removeEventListener(/*0*/ type: kotlin.String, /*1*/ callback: ((org.w3c.dom.events.Event) -> kotlin.Unit)?, /*2*/ options: dynamic = ...): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun removeEventListener(/*0*/ type: kotlin.String, /*1*/ callback: org.w3c.dom.events.EventListener?, /*2*/ options: dynamic = ...): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun replaceChild(/*0*/ node: org.w3c.dom.Node, /*1*/ child: org.w3c.dom.Node): org.w3c.dom.Node
    public abstract override /*1*/ /*fake_override*/ fun replaceWith(/*0*/ vararg nodes: dynamic /*kotlin.Array<out dynamic>*/): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun requestFullscreen(): kotlin.js.Promise<kotlin.Unit>
    public final override /*1*/ /*fake_override*/ fun scroll(/*0*/ x: kotlin.Double, /*1*/ y: kotlin.Double): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun scroll(/*0*/ options: org.w3c.dom.ScrollToOptions = ...): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun scrollBy(/*0*/ x: kotlin.Double, /*1*/ y: kotlin.Double): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun scrollBy(/*0*/ options: org.w3c.dom.ScrollToOptions = ...): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun scrollIntoView(): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun scrollIntoView(/*0*/ arg: dynamic): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun scrollTo(/*0*/ x: kotlin.Double, /*1*/ y: kotlin.Double): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun scrollTo(/*0*/ options: org.w3c.dom.ScrollToOptions = ...): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun setAttribute(/*0*/ qualifiedName: kotlin.String, /*1*/ value: kotlin.String): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun setAttributeNS(/*0*/ namespace: kotlin.String?, /*1*/ qualifiedName: kotlin.String, /*2*/ value: kotlin.String): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun setAttributeNode(/*0*/ attr: org.w3c.dom.Attr): org.w3c.dom.Attr?
    public final override /*1*/ /*fake_override*/ fun setAttributeNodeNS(/*0*/ attr: org.w3c.dom.Attr): org.w3c.dom.Attr?
    public final override /*1*/ /*fake_override*/ fun setPointerCapture(/*0*/ pointerId: kotlin.Int): kotlin.Unit
    public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
    public final override /*1*/ /*fake_override*/ fun webkitMatchesSelector(/*0*/ selectors: kotlin.String): kotlin.Boolean

    public companion object Companion {
        /*primary*/ private constructor Companion()
        public final val ATTRIBUTE_NODE: kotlin.Short
            public final fun <get-ATTRIBUTE_NODE>(): kotlin.Short
        public final val CDATA_SECTION_NODE: kotlin.Short
            public final fun <get-CDATA_SECTION_NODE>(): kotlin.Short
        public final val COMMENT_NODE: kotlin.Short
            public final fun <get-COMMENT_NODE>(): kotlin.Short
        public final val DOCUMENT_FRAGMENT_NODE: kotlin.Short
            public final fun <get-DOCUMENT_FRAGMENT_NODE>(): kotlin.Short
        public final val DOCUMENT_NODE: kotlin.Short
            public final fun <get-DOCUMENT_NODE>(): kotlin.Short
        public final val DOCUMENT_POSITION_CONTAINED_BY: kotlin.Short
            public final fun <get-DOCUMENT_POSITION_CONTAINED_BY>(): kotlin.Short
        public final val DOCUMENT_POSITION_CONTAINS: kotlin.Short
            public final fun <get-DOCUMENT_POSITION_CONTAINS>(): kotlin.Short
        public final val DOCUMENT_POSITION_DISCONNECTED: kotlin.Short
            public final fun <get-DOCUMENT_POSITION_DISCONNECTED>(): kotlin.Short
        public final val DOCUMENT_POSITION_FOLLOWING: kotlin.Short
            public final fun <get-DOCUMENT_POSITION_FOLLOWING>(): kotlin.Short
        public final val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: kotlin.Short
            public final fun <get-DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC>(): kotlin.Short
        public final val DOCUMENT_POSITION_PRECEDING: kotlin.Short
            public final fun <get-DOCUMENT_POSITION_PRECEDING>(): kotlin.Short
        public final val DOCUMENT_TYPE_NODE: kotlin.Short
            public final fun <get-DOCUMENT_TYPE_NODE>(): kotlin.Short
        public final val ELEMENT_NODE: kotlin.Short
            public final fun <get-ELEMENT_NODE>(): kotlin.Short
        public final val ENTITY_NODE: kotlin.Short
            public final fun <get-ENTITY_NODE>(): kotlin.Short
        public final val ENTITY_REFERENCE_NODE: kotlin.Short
            public final fun <get-ENTITY_REFERENCE_NODE>(): kotlin.Short
        public final val NOTATION_NODE: kotlin.Short
            public final fun <get-NOTATION_NODE>(): kotlin.Short
        public final val PROCESSING_INSTRUCTION_NODE: kotlin.Short
            public final fun <get-PROCESSING_INSTRUCTION_NODE>(): kotlin.Short
        public final val TEXT_NODE: kotlin.Short
            public final fun <get-TEXT_NODE>(): kotlin.Short
        public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
        public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
        public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
    }
}

public abstract external class SVGImageElement : org.w3c.dom.svg.SVGGraphicsElement, org.w3c.dom.svg.SVGURIReference, org.w3c.dom.HTMLOrSVGImageElement {
    /*primary*/ public constructor SVGImageElement()
    public open override /*1*/ /*fake_override*/ val assignedSlot: org.w3c.dom.HTMLSlotElement?
        public open override /*1*/ /*fake_override*/ fun <get-assignedSlot>(): org.w3c.dom.HTMLSlotElement?
    public open override /*1*/ /*fake_override*/ val attributes: org.w3c.dom.NamedNodeMap
        public open override /*1*/ /*fake_override*/ fun <get-attributes>(): org.w3c.dom.NamedNodeMap
    public open override /*1*/ /*fake_override*/ val baseURI: kotlin.String
        public open override /*1*/ /*fake_override*/ fun <get-baseURI>(): kotlin.String
    public abstract override /*1*/ /*fake_override*/ val childElementCount: kotlin.Int
        public abstract override /*1*/ /*fake_override*/ fun <get-childElementCount>(): kotlin.Int
    public open override /*1*/ /*fake_override*/ val childNodes: org.w3c.dom.NodeList
        public open override /*1*/ /*fake_override*/ fun <get-childNodes>(): org.w3c.dom.NodeList
    public abstract override /*1*/ /*fake_override*/ val children: org.w3c.dom.HTMLCollection
        public abstract override /*1*/ /*fake_override*/ fun <get-children>(): org.w3c.dom.HTMLCollection
    public open override /*1*/ /*fake_override*/ val classList: org.w3c.dom.DOMTokenList
        public open override /*1*/ /*fake_override*/ fun <get-classList>(): org.w3c.dom.DOMTokenList
    public open override /*1*/ /*fake_override*/ var className: kotlin.String
        public open override /*1*/ /*fake_override*/ fun <get-className>(): kotlin.String
        public open override /*1*/ /*fake_override*/ fun <set-className>(/*0*/ <set-?>: kotlin.String): kotlin.Unit
    public open override /*1*/ /*fake_override*/ val clientHeight: kotlin.Int
        public open override /*1*/ /*fake_override*/ fun <get-clientHeight>(): kotlin.Int
    public open override /*1*/ /*fake_override*/ val clientLeft: kotlin.Int
        public open override /*1*/ /*fake_override*/ fun <get-clientLeft>(): kotlin.Int
    public open override /*1*/ /*fake_override*/ val clientTop: kotlin.Int
        public open override /*1*/ /*fake_override*/ fun <get-clientTop>(): kotlin.Int
    public open override /*1*/ /*fake_override*/ val clientWidth: kotlin.Int
        public open override /*1*/ /*fake_override*/ fun <get-clientWidth>(): kotlin.Int
    public open override /*1*/ /*fake_override*/ val correspondingElement: org.w3c.dom.svg.SVGElement?
        public open override /*1*/ /*fake_override*/ fun <get-correspondingElement>(): org.w3c.dom.svg.SVGElement?
    public open override /*1*/ /*fake_override*/ val correspondingUseElement: org.w3c.dom.svg.SVGUseElement?
        public open override /*1*/ /*fake_override*/ fun <get-correspondingUseElement>(): org.w3c.dom.svg.SVGUseElement?
    public open var crossOrigin: kotlin.String?
        public open fun <get-crossOrigin>(): kotlin.String?
        public open fun <set-crossOrigin>(/*0*/ <set-?>: kotlin.String?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ val dataset: org.w3c.dom.DOMStringMap
        public open override /*1*/ /*fake_override*/ fun <get-dataset>(): org.w3c.dom.DOMStringMap
    public open override /*1*/ /*fake_override*/ val firstChild: org.w3c.dom.Node?
        public open override /*1*/ /*fake_override*/ fun <get-firstChild>(): org.w3c.dom.Node?
    public open override /*1*/ /*fake_override*/ val firstElementChild: org.w3c.dom.Element?
        public open override /*1*/ /*fake_override*/ fun <get-firstElementChild>(): org.w3c.dom.Element?
    public open val height: org.w3c.dom.svg.SVGAnimatedLength
        public open fun <get-height>(): org.w3c.dom.svg.SVGAnimatedLength
    public abstract override /*1*/ /*fake_override*/ val href: org.w3c.dom.svg.SVGAnimatedString
        public abstract override /*1*/ /*fake_override*/ fun <get-href>(): org.w3c.dom.svg.SVGAnimatedString
    public open override /*1*/ /*fake_override*/ var id: kotlin.String
        public open override /*1*/ /*fake_override*/ fun <get-id>(): kotlin.String
        public open override /*1*/ /*fake_override*/ fun <set-id>(/*0*/ <set-?>: kotlin.String): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var innerHTML: kotlin.String
        public open override /*1*/ /*fake_override*/ fun <get-innerHTML>(): kotlin.String
        public open override /*1*/ /*fake_override*/ fun <set-innerHTML>(/*0*/ <set-?>: kotlin.String): kotlin.Unit
    public open override /*1*/ /*fake_override*/ val isConnected: kotlin.Boolean
        public open override /*1*/ /*fake_override*/ fun <get-isConnected>(): kotlin.Boolean
    public open override /*1*/ /*fake_override*/ val lastChild: org.w3c.dom.Node?
        public open override /*1*/ /*fake_override*/ fun <get-lastChild>(): org.w3c.dom.Node?
    public open override /*1*/ /*fake_override*/ val lastElementChild: org.w3c.dom.Element?
        public open override /*1*/ /*fake_override*/ fun <get-lastElementChild>(): org.w3c.dom.Element?
    public open override /*1*/ /*fake_override*/ val localName: kotlin.String
        public open override /*1*/ /*fake_override*/ fun <get-localName>(): kotlin.String
    public open override /*1*/ /*fake_override*/ val namespaceURI: kotlin.String?
        public open override /*1*/ /*fake_override*/ fun <get-namespaceURI>(): kotlin.String?
    public open override /*1*/ /*fake_override*/ val nextElementSibling: org.w3c.dom.Element?
        public open override /*1*/ /*fake_override*/ fun <get-nextElementSibling>(): org.w3c.dom.Element?
    public open override /*1*/ /*fake_override*/ val nextSibling: org.w3c.dom.Node?
        public open override /*1*/ /*fake_override*/ fun <get-nextSibling>(): org.w3c.dom.Node?
    public open override /*1*/ /*fake_override*/ val nodeName: kotlin.String
        public open override /*1*/ /*fake_override*/ fun <get-nodeName>(): kotlin.String
    public open override /*1*/ /*fake_override*/ val nodeType: kotlin.Short
        public open override /*1*/ /*fake_override*/ fun <get-nodeType>(): kotlin.Short
    public open override /*1*/ /*fake_override*/ var nodeValue: kotlin.String?
        public open override /*1*/ /*fake_override*/ fun <get-nodeValue>(): kotlin.String?
        public open override /*1*/ /*fake_override*/ fun <set-nodeValue>(/*0*/ <set-?>: kotlin.String?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onabort: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onabort>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onabort>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onblur: ((org.w3c.dom.events.FocusEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onblur>(): ((org.w3c.dom.events.FocusEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onblur>(/*0*/ value: ((org.w3c.dom.events.FocusEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var oncancel: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-oncancel>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-oncancel>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var oncanplay: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-oncanplay>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-oncanplay>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var oncanplaythrough: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-oncanplaythrough>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-oncanplaythrough>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onchange: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onchange>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onchange>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onclick: ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onclick>(): ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onclick>(/*0*/ value: ((org.w3c.dom.events.MouseEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onclose: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onclose>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onclose>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var oncontextmenu: ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-oncontextmenu>(): ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-oncontextmenu>(/*0*/ value: ((org.w3c.dom.events.MouseEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var oncuechange: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-oncuechange>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-oncuechange>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ondblclick: ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ondblclick>(): ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ondblclick>(/*0*/ value: ((org.w3c.dom.events.MouseEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ondrag: ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ondrag>(): ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ondrag>(/*0*/ value: ((org.w3c.dom.DragEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ondragend: ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ondragend>(): ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ondragend>(/*0*/ value: ((org.w3c.dom.DragEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ondragenter: ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ondragenter>(): ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ondragenter>(/*0*/ value: ((org.w3c.dom.DragEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ondragexit: ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ondragexit>(): ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ondragexit>(/*0*/ value: ((org.w3c.dom.DragEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ondragleave: ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ondragleave>(): ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ondragleave>(/*0*/ value: ((org.w3c.dom.DragEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ondragover: ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ondragover>(): ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ondragover>(/*0*/ value: ((org.w3c.dom.DragEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ondragstart: ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ondragstart>(): ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ondragstart>(/*0*/ value: ((org.w3c.dom.DragEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ondrop: ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ondrop>(): ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ondrop>(/*0*/ value: ((org.w3c.dom.DragEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ondurationchange: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ondurationchange>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ondurationchange>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onemptied: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onemptied>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onemptied>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onended: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onended>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onended>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onerror: ((dynamic, kotlin.String, kotlin.Int, kotlin.Int, kotlin.Any?) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onerror>(): ((dynamic, kotlin.String, kotlin.Int, kotlin.Int, kotlin.Any?) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onerror>(/*0*/ value: ((dynamic, kotlin.String, kotlin.Int, kotlin.Int, kotlin.Any?) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onfocus: ((org.w3c.dom.events.FocusEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onfocus>(): ((org.w3c.dom.events.FocusEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onfocus>(/*0*/ value: ((org.w3c.dom.events.FocusEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ongotpointercapture: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ongotpointercapture>(): ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ongotpointercapture>(/*0*/ value: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var oninput: ((org.w3c.dom.events.InputEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-oninput>(): ((org.w3c.dom.events.InputEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-oninput>(/*0*/ value: ((org.w3c.dom.events.InputEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var oninvalid: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-oninvalid>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-oninvalid>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onkeydown: ((org.w3c.dom.events.KeyboardEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onkeydown>(): ((org.w3c.dom.events.KeyboardEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onkeydown>(/*0*/ value: ((org.w3c.dom.events.KeyboardEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onkeypress: ((org.w3c.dom.events.KeyboardEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onkeypress>(): ((org.w3c.dom.events.KeyboardEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onkeypress>(/*0*/ value: ((org.w3c.dom.events.KeyboardEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onkeyup: ((org.w3c.dom.events.KeyboardEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onkeyup>(): ((org.w3c.dom.events.KeyboardEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onkeyup>(/*0*/ value: ((org.w3c.dom.events.KeyboardEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onload: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onload>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onload>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onloadeddata: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onloadeddata>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onloadeddata>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onloadedmetadata: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onloadedmetadata>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onloadedmetadata>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onloadend: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onloadend>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onloadend>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onloadstart: ((org.w3c.xhr.ProgressEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onloadstart>(): ((org.w3c.xhr.ProgressEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onloadstart>(/*0*/ value: ((org.w3c.xhr.ProgressEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onlostpointercapture: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onlostpointercapture>(): ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onlostpointercapture>(/*0*/ value: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onmousedown: ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onmousedown>(): ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onmousedown>(/*0*/ value: ((org.w3c.dom.events.MouseEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onmouseenter: ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onmouseenter>(): ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onmouseenter>(/*0*/ value: ((org.w3c.dom.events.MouseEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onmouseleave: ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onmouseleave>(): ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onmouseleave>(/*0*/ value: ((org.w3c.dom.events.MouseEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onmousemove: ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onmousemove>(): ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onmousemove>(/*0*/ value: ((org.w3c.dom.events.MouseEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onmouseout: ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onmouseout>(): ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onmouseout>(/*0*/ value: ((org.w3c.dom.events.MouseEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onmouseover: ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onmouseover>(): ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onmouseover>(/*0*/ value: ((org.w3c.dom.events.MouseEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onmouseup: ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onmouseup>(): ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onmouseup>(/*0*/ value: ((org.w3c.dom.events.MouseEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onpause: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onpause>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onpause>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onplay: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onplay>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onplay>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onplaying: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onplaying>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onplaying>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onpointercancel: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onpointercancel>(): ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onpointercancel>(/*0*/ value: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onpointerdown: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onpointerdown>(): ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onpointerdown>(/*0*/ value: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onpointerenter: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onpointerenter>(): ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onpointerenter>(/*0*/ value: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onpointerleave: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onpointerleave>(): ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onpointerleave>(/*0*/ value: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onpointermove: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onpointermove>(): ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onpointermove>(/*0*/ value: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onpointerout: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onpointerout>(): ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onpointerout>(/*0*/ value: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onpointerover: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onpointerover>(): ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onpointerover>(/*0*/ value: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onpointerup: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onpointerup>(): ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onpointerup>(/*0*/ value: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onprogress: ((org.w3c.xhr.ProgressEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onprogress>(): ((org.w3c.xhr.ProgressEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onprogress>(/*0*/ value: ((org.w3c.xhr.ProgressEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onratechange: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onratechange>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onratechange>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onreset: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onreset>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onreset>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onresize: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onresize>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onresize>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onscroll: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onscroll>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onscroll>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onseeked: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onseeked>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onseeked>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onseeking: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onseeking>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onseeking>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onselect: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onselect>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onselect>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onshow: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onshow>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onshow>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onstalled: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onstalled>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onstalled>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onsubmit: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onsubmit>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onsubmit>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onsuspend: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onsuspend>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onsuspend>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ontimeupdate: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ontimeupdate>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ontimeupdate>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ontoggle: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ontoggle>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ontoggle>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onvolumechange: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onvolumechange>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onvolumechange>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onwaiting: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onwaiting>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onwaiting>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onwheel: ((org.w3c.dom.events.WheelEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onwheel>(): ((org.w3c.dom.events.WheelEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onwheel>(/*0*/ value: ((org.w3c.dom.events.WheelEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var outerHTML: kotlin.String
        public open override /*1*/ /*fake_override*/ fun <get-outerHTML>(): kotlin.String
        public open override /*1*/ /*fake_override*/ fun <set-outerHTML>(/*0*/ <set-?>: kotlin.String): kotlin.Unit
    public open override /*1*/ /*fake_override*/ val ownerDocument: org.w3c.dom.Document?
        public open override /*1*/ /*fake_override*/ fun <get-ownerDocument>(): org.w3c.dom.Document?
    public open override /*1*/ /*fake_override*/ val ownerSVGElement: org.w3c.dom.svg.SVGSVGElement?
        public open override /*1*/ /*fake_override*/ fun <get-ownerSVGElement>(): org.w3c.dom.svg.SVGSVGElement?
    public open override /*1*/ /*fake_override*/ val parentElement: org.w3c.dom.Element?
        public open override /*1*/ /*fake_override*/ fun <get-parentElement>(): org.w3c.dom.Element?
    public open override /*1*/ /*fake_override*/ val parentNode: org.w3c.dom.Node?
        public open override /*1*/ /*fake_override*/ fun <get-parentNode>(): org.w3c.dom.Node?
    public open override /*1*/ /*fake_override*/ val prefix: kotlin.String?
        public open override /*1*/ /*fake_override*/ fun <get-prefix>(): kotlin.String?
    public open val preserveAspectRatio: org.w3c.dom.svg.SVGAnimatedPreserveAspectRatio
        public open fun <get-preserveAspectRatio>(): org.w3c.dom.svg.SVGAnimatedPreserveAspectRatio
    public open override /*1*/ /*fake_override*/ val previousElementSibling: org.w3c.dom.Element?
        public open override /*1*/ /*fake_override*/ fun <get-previousElementSibling>(): org.w3c.dom.Element?
    public open override /*1*/ /*fake_override*/ val previousSibling: org.w3c.dom.Node?
        public open override /*1*/ /*fake_override*/ fun <get-previousSibling>(): org.w3c.dom.Node?
    public abstract override /*1*/ /*fake_override*/ val requiredExtensions: org.w3c.dom.svg.SVGStringList
        public abstract override /*1*/ /*fake_override*/ fun <get-requiredExtensions>(): org.w3c.dom.svg.SVGStringList
    public open override /*1*/ /*fake_override*/ val scrollHeight: kotlin.Int
        public open override /*1*/ /*fake_override*/ fun <get-scrollHeight>(): kotlin.Int
    public open override /*1*/ /*fake_override*/ var scrollLeft: kotlin.Double
        public open override /*1*/ /*fake_override*/ fun <get-scrollLeft>(): kotlin.Double
        public open override /*1*/ /*fake_override*/ fun <set-scrollLeft>(/*0*/ <set-?>: kotlin.Double): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var scrollTop: kotlin.Double
        public open override /*1*/ /*fake_override*/ fun <get-scrollTop>(): kotlin.Double
        public open override /*1*/ /*fake_override*/ fun <set-scrollTop>(/*0*/ <set-?>: kotlin.Double): kotlin.Unit
    public open override /*1*/ /*fake_override*/ val scrollWidth: kotlin.Int
        public open override /*1*/ /*fake_override*/ fun <get-scrollWidth>(): kotlin.Int
    public open override /*1*/ /*fake_override*/ val shadowRoot: org.w3c.dom.ShadowRoot?
        public open override /*1*/ /*fake_override*/ fun <get-shadowRoot>(): org.w3c.dom.ShadowRoot?
    public open override /*1*/ /*fake_override*/ var slot: kotlin.String
        public open override /*1*/ /*fake_override*/ fun <get-slot>(): kotlin.String
        public open override /*1*/ /*fake_override*/ fun <set-slot>(/*0*/ <set-?>: kotlin.String): kotlin.Unit
    public abstract override /*1*/ /*fake_override*/ val style: org.w3c.dom.css.CSSStyleDeclaration
        public abstract override /*1*/ /*fake_override*/ fun <get-style>(): org.w3c.dom.css.CSSStyleDeclaration
    public abstract override /*1*/ /*fake_override*/ val systemLanguage: org.w3c.dom.svg.SVGStringList
        public abstract override /*1*/ /*fake_override*/ fun <get-systemLanguage>(): org.w3c.dom.svg.SVGStringList
    public open override /*1*/ /*fake_override*/ var tabIndex: kotlin.Int
        public open override /*1*/ /*fake_override*/ fun <get-tabIndex>(): kotlin.Int
        public open override /*1*/ /*fake_override*/ fun <set-tabIndex>(/*0*/ <set-?>: kotlin.Int): kotlin.Unit
    public open override /*1*/ /*fake_override*/ val tagName: kotlin.String
        public open override /*1*/ /*fake_override*/ fun <get-tagName>(): kotlin.String
    public open override /*1*/ /*fake_override*/ var textContent: kotlin.String?
        public open override /*1*/ /*fake_override*/ fun <get-textContent>(): kotlin.String?
        public open override /*1*/ /*fake_override*/ fun <set-textContent>(/*0*/ <set-?>: kotlin.String?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ val transform: org.w3c.dom.svg.SVGAnimatedTransformList
        public open override /*1*/ /*fake_override*/ fun <get-transform>(): org.w3c.dom.svg.SVGAnimatedTransformList
    public open override /*1*/ /*fake_override*/ val viewportElement: org.w3c.dom.svg.SVGElement?
        public open override /*1*/ /*fake_override*/ fun <get-viewportElement>(): org.w3c.dom.svg.SVGElement?
    public open val width: org.w3c.dom.svg.SVGAnimatedLength
        public open fun <get-width>(): org.w3c.dom.svg.SVGAnimatedLength
    public open val x: org.w3c.dom.svg.SVGAnimatedLength
        public open fun <get-x>(): org.w3c.dom.svg.SVGAnimatedLength
    public open val y: org.w3c.dom.svg.SVGAnimatedLength
        public open fun <get-y>(): org.w3c.dom.svg.SVGAnimatedLength
    public final override /*1*/ /*fake_override*/ fun addEventListener(/*0*/ type: kotlin.String, /*1*/ callback: ((org.w3c.dom.events.Event) -> kotlin.Unit)?, /*2*/ options: dynamic = ...): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun addEventListener(/*0*/ type: kotlin.String, /*1*/ callback: org.w3c.dom.events.EventListener?, /*2*/ options: dynamic = ...): kotlin.Unit
    public abstract override /*1*/ /*fake_override*/ fun after(/*0*/ vararg nodes: dynamic /*kotlin.Array<out dynamic>*/): kotlin.Unit
    public abstract override /*1*/ /*fake_override*/ fun append(/*0*/ vararg nodes: dynamic /*kotlin.Array<out dynamic>*/): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun appendChild(/*0*/ node: org.w3c.dom.Node): org.w3c.dom.Node
    public final override /*1*/ /*fake_override*/ fun attachShadow(/*0*/ init: org.w3c.dom.ShadowRootInit): org.w3c.dom.ShadowRoot
    public abstract override /*1*/ /*fake_override*/ fun before(/*0*/ vararg nodes: dynamic /*kotlin.Array<out dynamic>*/): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun blur(): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun cloneNode(/*0*/ deep: kotlin.Boolean = ...): org.w3c.dom.Node
    public final override /*1*/ /*fake_override*/ fun closest(/*0*/ selectors: kotlin.String): org.w3c.dom.Element?
    public final override /*1*/ /*fake_override*/ fun compareDocumentPosition(/*0*/ other: org.w3c.dom.Node): kotlin.Short
    public final override /*1*/ /*fake_override*/ fun contains(/*0*/ other: org.w3c.dom.Node?): kotlin.Boolean
    public abstract override /*1*/ /*fake_override*/ fun convertPointFromNode(/*0*/ point: org.w3c.dom.DOMPointInit, /*1*/ from: dynamic, /*2*/ options: org.w3c.dom.ConvertCoordinateOptions = ...): org.w3c.dom.DOMPoint
    public abstract override /*1*/ /*fake_override*/ fun convertQuadFromNode(/*0*/ quad: dynamic, /*1*/ from: dynamic, /*2*/ options: org.w3c.dom.ConvertCoordinateOptions = ...): org.w3c.dom.DOMQuad
    public abstract override /*1*/ /*fake_override*/ fun convertRectFromNode(/*0*/ rect: org.w3c.dom.DOMRectReadOnly, /*1*/ from: dynamic, /*2*/ options: org.w3c.dom.ConvertCoordinateOptions = ...): org.w3c.dom.DOMQuad
    public final override /*1*/ /*fake_override*/ fun dispatchEvent(/*0*/ event: org.w3c.dom.events.Event): kotlin.Boolean
    public open override /*3*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
    public final override /*1*/ /*fake_override*/ fun focus(): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun getAttribute(/*0*/ qualifiedName: kotlin.String): kotlin.String?
    public final override /*1*/ /*fake_override*/ fun getAttributeNS(/*0*/ namespace: kotlin.String?, /*1*/ localName: kotlin.String): kotlin.String?
    public final override /*1*/ /*fake_override*/ fun getAttributeNames(): kotlin.Array<kotlin.String>
    public final override /*1*/ /*fake_override*/ fun getAttributeNode(/*0*/ qualifiedName: kotlin.String): org.w3c.dom.Attr?
    public final override /*1*/ /*fake_override*/ fun getAttributeNodeNS(/*0*/ namespace: kotlin.String?, /*1*/ localName: kotlin.String): org.w3c.dom.Attr?
    public final override /*1*/ /*fake_override*/ fun getBBox(/*0*/ options: org.w3c.dom.svg.SVGBoundingBoxOptions = ...): org.w3c.dom.DOMRect
    public final override /*1*/ /*fake_override*/ fun getBoundingClientRect(): org.w3c.dom.DOMRect
    public abstract override /*1*/ /*fake_override*/ fun getBoxQuads(/*0*/ options: org.w3c.dom.BoxQuadOptions = ...): kotlin.Array<org.w3c.dom.DOMQuad>
    public final override /*1*/ /*fake_override*/ fun getCTM(): org.w3c.dom.DOMMatrix?
    public final override /*1*/ /*fake_override*/ fun getClientRects(): kotlin.Array<org.w3c.dom.DOMRect>
    public final override /*1*/ /*fake_override*/ fun getElementsByClassName(/*0*/ classNames: kotlin.String): org.w3c.dom.HTMLCollection
    public final override /*1*/ /*fake_override*/ fun getElementsByTagName(/*0*/ qualifiedName: kotlin.String): org.w3c.dom.HTMLCollection
    public final override /*1*/ /*fake_override*/ fun getElementsByTagNameNS(/*0*/ namespace: kotlin.String?, /*1*/ localName: kotlin.String): org.w3c.dom.HTMLCollection
    public final override /*1*/ /*fake_override*/ fun getRootNode(/*0*/ options: org.w3c.dom.GetRootNodeOptions = ...): org.w3c.dom.Node
    public final override /*1*/ /*fake_override*/ fun getScreenCTM(): org.w3c.dom.DOMMatrix?
    public final override /*1*/ /*fake_override*/ fun hasAttribute(/*0*/ qualifiedName: kotlin.String): kotlin.Boolean
    public final override /*1*/ /*fake_override*/ fun hasAttributeNS(/*0*/ namespace: kotlin.String?, /*1*/ localName: kotlin.String): kotlin.Boolean
    public final override /*1*/ /*fake_override*/ fun hasAttributes(): kotlin.Boolean
    public final override /*1*/ /*fake_override*/ fun hasChildNodes(): kotlin.Boolean
    public final override /*1*/ /*fake_override*/ fun hasPointerCapture(/*0*/ pointerId: kotlin.Int): kotlin.Boolean
    public open override /*3*/ /*fake_override*/ fun hashCode(): kotlin.Int
    public final override /*1*/ /*fake_override*/ fun insertAdjacentElement(/*0*/ where: kotlin.String, /*1*/ element: org.w3c.dom.Element): org.w3c.dom.Element?
    public final override /*1*/ /*fake_override*/ fun insertAdjacentHTML(/*0*/ position: kotlin.String, /*1*/ text: kotlin.String): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun insertAdjacentText(/*0*/ where: kotlin.String, /*1*/ data: kotlin.String): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun insertBefore(/*0*/ node: org.w3c.dom.Node, /*1*/ child: org.w3c.dom.Node?): org.w3c.dom.Node
    public final override /*1*/ /*fake_override*/ fun isDefaultNamespace(/*0*/ namespace: kotlin.String?): kotlin.Boolean
    public final override /*1*/ /*fake_override*/ fun isEqualNode(/*0*/ otherNode: org.w3c.dom.Node?): kotlin.Boolean
    public final override /*1*/ /*fake_override*/ fun isSameNode(/*0*/ otherNode: org.w3c.dom.Node?): kotlin.Boolean
    public final override /*1*/ /*fake_override*/ fun lookupNamespaceURI(/*0*/ prefix: kotlin.String?): kotlin.String?
    public final override /*1*/ /*fake_override*/ fun lookupPrefix(/*0*/ namespace: kotlin.String?): kotlin.String?
    public final override /*1*/ /*fake_override*/ fun matches(/*0*/ selectors: kotlin.String): kotlin.Boolean
    public final override /*1*/ /*fake_override*/ fun normalize(): kotlin.Unit
    public abstract override /*1*/ /*fake_override*/ fun prepend(/*0*/ vararg nodes: dynamic /*kotlin.Array<out dynamic>*/): kotlin.Unit
    public abstract override /*1*/ /*fake_override*/ fun querySelector(/*0*/ selectors: kotlin.String): org.w3c.dom.Element?
    public abstract override /*1*/ /*fake_override*/ fun querySelectorAll(/*0*/ selectors: kotlin.String): org.w3c.dom.NodeList
    public final override /*1*/ /*fake_override*/ fun releasePointerCapture(/*0*/ pointerId: kotlin.Int): kotlin.Unit
    public abstract override /*1*/ /*fake_override*/ fun remove(): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun removeAttribute(/*0*/ qualifiedName: kotlin.String): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun removeAttributeNS(/*0*/ namespace: kotlin.String?, /*1*/ localName: kotlin.String): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun removeAttributeNode(/*0*/ attr: org.w3c.dom.Attr): org.w3c.dom.Attr
    public final override /*1*/ /*fake_override*/ fun removeChild(/*0*/ child: org.w3c.dom.Node): org.w3c.dom.Node
    public final override /*1*/ /*fake_override*/ fun removeEventListener(/*0*/ type: kotlin.String, /*1*/ callback: ((org.w3c.dom.events.Event) -> kotlin.Unit)?, /*2*/ options: dynamic = ...): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun removeEventListener(/*0*/ type: kotlin.String, /*1*/ callback: org.w3c.dom.events.EventListener?, /*2*/ options: dynamic = ...): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun replaceChild(/*0*/ node: org.w3c.dom.Node, /*1*/ child: org.w3c.dom.Node): org.w3c.dom.Node
    public abstract override /*1*/ /*fake_override*/ fun replaceWith(/*0*/ vararg nodes: dynamic /*kotlin.Array<out dynamic>*/): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun requestFullscreen(): kotlin.js.Promise<kotlin.Unit>
    public final override /*1*/ /*fake_override*/ fun scroll(/*0*/ x: kotlin.Double, /*1*/ y: kotlin.Double): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun scroll(/*0*/ options: org.w3c.dom.ScrollToOptions = ...): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun scrollBy(/*0*/ x: kotlin.Double, /*1*/ y: kotlin.Double): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun scrollBy(/*0*/ options: org.w3c.dom.ScrollToOptions = ...): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun scrollIntoView(): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun scrollIntoView(/*0*/ arg: dynamic): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun scrollTo(/*0*/ x: kotlin.Double, /*1*/ y: kotlin.Double): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun scrollTo(/*0*/ options: org.w3c.dom.ScrollToOptions = ...): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun setAttribute(/*0*/ qualifiedName: kotlin.String, /*1*/ value: kotlin.String): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun setAttributeNS(/*0*/ namespace: kotlin.String?, /*1*/ qualifiedName: kotlin.String, /*2*/ value: kotlin.String): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun setAttributeNode(/*0*/ attr: org.w3c.dom.Attr): org.w3c.dom.Attr?
    public final override /*1*/ /*fake_override*/ fun setAttributeNodeNS(/*0*/ attr: org.w3c.dom.Attr): org.w3c.dom.Attr?
    public final override /*1*/ /*fake_override*/ fun setPointerCapture(/*0*/ pointerId: kotlin.Int): kotlin.Unit
    public open override /*3*/ /*fake_override*/ fun toString(): kotlin.String
    public final override /*1*/ /*fake_override*/ fun webkitMatchesSelector(/*0*/ selectors: kotlin.String): kotlin.Boolean

    public companion object Companion {
        /*primary*/ private constructor Companion()
        public final val ATTRIBUTE_NODE: kotlin.Short
            public final fun <get-ATTRIBUTE_NODE>(): kotlin.Short
        public final val CDATA_SECTION_NODE: kotlin.Short
            public final fun <get-CDATA_SECTION_NODE>(): kotlin.Short
        public final val COMMENT_NODE: kotlin.Short
            public final fun <get-COMMENT_NODE>(): kotlin.Short
        public final val DOCUMENT_FRAGMENT_NODE: kotlin.Short
            public final fun <get-DOCUMENT_FRAGMENT_NODE>(): kotlin.Short
        public final val DOCUMENT_NODE: kotlin.Short
            public final fun <get-DOCUMENT_NODE>(): kotlin.Short
        public final val DOCUMENT_POSITION_CONTAINED_BY: kotlin.Short
            public final fun <get-DOCUMENT_POSITION_CONTAINED_BY>(): kotlin.Short
        public final val DOCUMENT_POSITION_CONTAINS: kotlin.Short
            public final fun <get-DOCUMENT_POSITION_CONTAINS>(): kotlin.Short
        public final val DOCUMENT_POSITION_DISCONNECTED: kotlin.Short
            public final fun <get-DOCUMENT_POSITION_DISCONNECTED>(): kotlin.Short
        public final val DOCUMENT_POSITION_FOLLOWING: kotlin.Short
            public final fun <get-DOCUMENT_POSITION_FOLLOWING>(): kotlin.Short
        public final val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: kotlin.Short
            public final fun <get-DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC>(): kotlin.Short
        public final val DOCUMENT_POSITION_PRECEDING: kotlin.Short
            public final fun <get-DOCUMENT_POSITION_PRECEDING>(): kotlin.Short
        public final val DOCUMENT_TYPE_NODE: kotlin.Short
            public final fun <get-DOCUMENT_TYPE_NODE>(): kotlin.Short
        public final val ELEMENT_NODE: kotlin.Short
            public final fun <get-ELEMENT_NODE>(): kotlin.Short
        public final val ENTITY_NODE: kotlin.Short
            public final fun <get-ENTITY_NODE>(): kotlin.Short
        public final val ENTITY_REFERENCE_NODE: kotlin.Short
            public final fun <get-ENTITY_REFERENCE_NODE>(): kotlin.Short
        public final val NOTATION_NODE: kotlin.Short
            public final fun <get-NOTATION_NODE>(): kotlin.Short
        public final val PROCESSING_INSTRUCTION_NODE: kotlin.Short
            public final fun <get-PROCESSING_INSTRUCTION_NODE>(): kotlin.Short
        public final val TEXT_NODE: kotlin.Short
            public final fun <get-TEXT_NODE>(): kotlin.Short
        public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
        public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
        public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
    }
}

public abstract external class SVGLength {
    /*primary*/ public constructor SVGLength()
    public open val unitType: kotlin.Short
        public open fun <get-unitType>(): kotlin.Short
    public open var value: kotlin.Float
        public open fun <get-value>(): kotlin.Float
        public open fun <set-value>(/*0*/ <set-?>: kotlin.Float): kotlin.Unit
    public open var valueAsString: kotlin.String
        public open fun <get-valueAsString>(): kotlin.String
        public open fun <set-valueAsString>(/*0*/ <set-?>: kotlin.String): kotlin.Unit
    public open var valueInSpecifiedUnits: kotlin.Float
        public open fun <get-valueInSpecifiedUnits>(): kotlin.Float
        public open fun <set-valueInSpecifiedUnits>(/*0*/ <set-?>: kotlin.Float): kotlin.Unit
    public final fun convertToSpecifiedUnits(/*0*/ unitType: kotlin.Short): kotlin.Unit
    public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
    public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
    public final fun newValueSpecifiedUnits(/*0*/ unitType: kotlin.Short, /*1*/ valueInSpecifiedUnits: kotlin.Float): kotlin.Unit
    public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String

    public companion object Companion {
        /*primary*/ private constructor Companion()
        public final val SVG_LENGTHTYPE_CM: kotlin.Short
            public final fun <get-SVG_LENGTHTYPE_CM>(): kotlin.Short
        public final val SVG_LENGTHTYPE_EMS: kotlin.Short
            public final fun <get-SVG_LENGTHTYPE_EMS>(): kotlin.Short
        public final val SVG_LENGTHTYPE_EXS: kotlin.Short
            public final fun <get-SVG_LENGTHTYPE_EXS>(): kotlin.Short
        public final val SVG_LENGTHTYPE_IN: kotlin.Short
            public final fun <get-SVG_LENGTHTYPE_IN>(): kotlin.Short
        public final val SVG_LENGTHTYPE_MM: kotlin.Short
            public final fun <get-SVG_LENGTHTYPE_MM>(): kotlin.Short
        public final val SVG_LENGTHTYPE_NUMBER: kotlin.Short
            public final fun <get-SVG_LENGTHTYPE_NUMBER>(): kotlin.Short
        public final val SVG_LENGTHTYPE_PC: kotlin.Short
            public final fun <get-SVG_LENGTHTYPE_PC>(): kotlin.Short
        public final val SVG_LENGTHTYPE_PERCENTAGE: kotlin.Short
            public final fun <get-SVG_LENGTHTYPE_PERCENTAGE>(): kotlin.Short
        public final val SVG_LENGTHTYPE_PT: kotlin.Short
            public final fun <get-SVG_LENGTHTYPE_PT>(): kotlin.Short
        public final val SVG_LENGTHTYPE_PX: kotlin.Short
            public final fun <get-SVG_LENGTHTYPE_PX>(): kotlin.Short
        public final val SVG_LENGTHTYPE_UNKNOWN: kotlin.Short
            public final fun <get-SVG_LENGTHTYPE_UNKNOWN>(): kotlin.Short
        public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
        public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
        public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
    }
}

public abstract external class SVGLengthList {
    /*primary*/ public constructor SVGLengthList()
    public open val length: kotlin.Int
        public open fun <get-length>(): kotlin.Int
    public open val numberOfItems: kotlin.Int
        public open fun <get-numberOfItems>(): kotlin.Int
    public final fun appendItem(/*0*/ newItem: org.w3c.dom.svg.SVGLength): org.w3c.dom.svg.SVGLength
    public final fun clear(): kotlin.Unit
    public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
    public final fun getItem(/*0*/ index: kotlin.Int): org.w3c.dom.svg.SVGLength
    public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
    public final fun initialize(/*0*/ newItem: org.w3c.dom.svg.SVGLength): org.w3c.dom.svg.SVGLength
    public final fun insertItemBefore(/*0*/ newItem: org.w3c.dom.svg.SVGLength, /*1*/ index: kotlin.Int): org.w3c.dom.svg.SVGLength
    public final fun removeItem(/*0*/ index: kotlin.Int): org.w3c.dom.svg.SVGLength
    public final fun replaceItem(/*0*/ newItem: org.w3c.dom.svg.SVGLength, /*1*/ index: kotlin.Int): org.w3c.dom.svg.SVGLength
    public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
}

public abstract external class SVGLineElement : org.w3c.dom.svg.SVGGeometryElement {
    /*primary*/ public constructor SVGLineElement()
    public open override /*1*/ /*fake_override*/ val assignedSlot: org.w3c.dom.HTMLSlotElement?
        public open override /*1*/ /*fake_override*/ fun <get-assignedSlot>(): org.w3c.dom.HTMLSlotElement?
    public open override /*1*/ /*fake_override*/ val attributes: org.w3c.dom.NamedNodeMap
        public open override /*1*/ /*fake_override*/ fun <get-attributes>(): org.w3c.dom.NamedNodeMap
    public open override /*1*/ /*fake_override*/ val baseURI: kotlin.String
        public open override /*1*/ /*fake_override*/ fun <get-baseURI>(): kotlin.String
    public abstract override /*1*/ /*fake_override*/ val childElementCount: kotlin.Int
        public abstract override /*1*/ /*fake_override*/ fun <get-childElementCount>(): kotlin.Int
    public open override /*1*/ /*fake_override*/ val childNodes: org.w3c.dom.NodeList
        public open override /*1*/ /*fake_override*/ fun <get-childNodes>(): org.w3c.dom.NodeList
    public abstract override /*1*/ /*fake_override*/ val children: org.w3c.dom.HTMLCollection
        public abstract override /*1*/ /*fake_override*/ fun <get-children>(): org.w3c.dom.HTMLCollection
    public open override /*1*/ /*fake_override*/ val classList: org.w3c.dom.DOMTokenList
        public open override /*1*/ /*fake_override*/ fun <get-classList>(): org.w3c.dom.DOMTokenList
    public open override /*1*/ /*fake_override*/ var className: kotlin.String
        public open override /*1*/ /*fake_override*/ fun <get-className>(): kotlin.String
        public open override /*1*/ /*fake_override*/ fun <set-className>(/*0*/ <set-?>: kotlin.String): kotlin.Unit
    public open override /*1*/ /*fake_override*/ val clientHeight: kotlin.Int
        public open override /*1*/ /*fake_override*/ fun <get-clientHeight>(): kotlin.Int
    public open override /*1*/ /*fake_override*/ val clientLeft: kotlin.Int
        public open override /*1*/ /*fake_override*/ fun <get-clientLeft>(): kotlin.Int
    public open override /*1*/ /*fake_override*/ val clientTop: kotlin.Int
        public open override /*1*/ /*fake_override*/ fun <get-clientTop>(): kotlin.Int
    public open override /*1*/ /*fake_override*/ val clientWidth: kotlin.Int
        public open override /*1*/ /*fake_override*/ fun <get-clientWidth>(): kotlin.Int
    public open override /*1*/ /*fake_override*/ val correspondingElement: org.w3c.dom.svg.SVGElement?
        public open override /*1*/ /*fake_override*/ fun <get-correspondingElement>(): org.w3c.dom.svg.SVGElement?
    public open override /*1*/ /*fake_override*/ val correspondingUseElement: org.w3c.dom.svg.SVGUseElement?
        public open override /*1*/ /*fake_override*/ fun <get-correspondingUseElement>(): org.w3c.dom.svg.SVGUseElement?
    public open override /*1*/ /*fake_override*/ val dataset: org.w3c.dom.DOMStringMap
        public open override /*1*/ /*fake_override*/ fun <get-dataset>(): org.w3c.dom.DOMStringMap
    public open override /*1*/ /*fake_override*/ val firstChild: org.w3c.dom.Node?
        public open override /*1*/ /*fake_override*/ fun <get-firstChild>(): org.w3c.dom.Node?
    public open override /*1*/ /*fake_override*/ val firstElementChild: org.w3c.dom.Element?
        public open override /*1*/ /*fake_override*/ fun <get-firstElementChild>(): org.w3c.dom.Element?
    public open override /*1*/ /*fake_override*/ var id: kotlin.String
        public open override /*1*/ /*fake_override*/ fun <get-id>(): kotlin.String
        public open override /*1*/ /*fake_override*/ fun <set-id>(/*0*/ <set-?>: kotlin.String): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var innerHTML: kotlin.String
        public open override /*1*/ /*fake_override*/ fun <get-innerHTML>(): kotlin.String
        public open override /*1*/ /*fake_override*/ fun <set-innerHTML>(/*0*/ <set-?>: kotlin.String): kotlin.Unit
    public open override /*1*/ /*fake_override*/ val isConnected: kotlin.Boolean
        public open override /*1*/ /*fake_override*/ fun <get-isConnected>(): kotlin.Boolean
    public open override /*1*/ /*fake_override*/ val lastChild: org.w3c.dom.Node?
        public open override /*1*/ /*fake_override*/ fun <get-lastChild>(): org.w3c.dom.Node?
    public open override /*1*/ /*fake_override*/ val lastElementChild: org.w3c.dom.Element?
        public open override /*1*/ /*fake_override*/ fun <get-lastElementChild>(): org.w3c.dom.Element?
    public open override /*1*/ /*fake_override*/ val localName: kotlin.String
        public open override /*1*/ /*fake_override*/ fun <get-localName>(): kotlin.String
    public open override /*1*/ /*fake_override*/ val namespaceURI: kotlin.String?
        public open override /*1*/ /*fake_override*/ fun <get-namespaceURI>(): kotlin.String?
    public open override /*1*/ /*fake_override*/ val nextElementSibling: org.w3c.dom.Element?
        public open override /*1*/ /*fake_override*/ fun <get-nextElementSibling>(): org.w3c.dom.Element?
    public open override /*1*/ /*fake_override*/ val nextSibling: org.w3c.dom.Node?
        public open override /*1*/ /*fake_override*/ fun <get-nextSibling>(): org.w3c.dom.Node?
    public open override /*1*/ /*fake_override*/ val nodeName: kotlin.String
        public open override /*1*/ /*fake_override*/ fun <get-nodeName>(): kotlin.String
    public open override /*1*/ /*fake_override*/ val nodeType: kotlin.Short
        public open override /*1*/ /*fake_override*/ fun <get-nodeType>(): kotlin.Short
    public open override /*1*/ /*fake_override*/ var nodeValue: kotlin.String?
        public open override /*1*/ /*fake_override*/ fun <get-nodeValue>(): kotlin.String?
        public open override /*1*/ /*fake_override*/ fun <set-nodeValue>(/*0*/ <set-?>: kotlin.String?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onabort: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onabort>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onabort>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onblur: ((org.w3c.dom.events.FocusEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onblur>(): ((org.w3c.dom.events.FocusEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onblur>(/*0*/ value: ((org.w3c.dom.events.FocusEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var oncancel: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-oncancel>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-oncancel>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var oncanplay: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-oncanplay>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-oncanplay>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var oncanplaythrough: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-oncanplaythrough>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-oncanplaythrough>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onchange: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onchange>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onchange>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onclick: ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onclick>(): ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onclick>(/*0*/ value: ((org.w3c.dom.events.MouseEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onclose: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onclose>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onclose>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var oncontextmenu: ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-oncontextmenu>(): ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-oncontextmenu>(/*0*/ value: ((org.w3c.dom.events.MouseEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var oncuechange: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-oncuechange>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-oncuechange>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ondblclick: ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ondblclick>(): ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ondblclick>(/*0*/ value: ((org.w3c.dom.events.MouseEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ondrag: ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ondrag>(): ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ondrag>(/*0*/ value: ((org.w3c.dom.DragEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ondragend: ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ondragend>(): ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ondragend>(/*0*/ value: ((org.w3c.dom.DragEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ondragenter: ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ondragenter>(): ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ondragenter>(/*0*/ value: ((org.w3c.dom.DragEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ondragexit: ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ondragexit>(): ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ondragexit>(/*0*/ value: ((org.w3c.dom.DragEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ondragleave: ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ondragleave>(): ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ondragleave>(/*0*/ value: ((org.w3c.dom.DragEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ondragover: ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ondragover>(): ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ondragover>(/*0*/ value: ((org.w3c.dom.DragEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ondragstart: ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ondragstart>(): ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ondragstart>(/*0*/ value: ((org.w3c.dom.DragEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ondrop: ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ondrop>(): ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ondrop>(/*0*/ value: ((org.w3c.dom.DragEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ondurationchange: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ondurationchange>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ondurationchange>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onemptied: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onemptied>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onemptied>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onended: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onended>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onended>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onerror: ((dynamic, kotlin.String, kotlin.Int, kotlin.Int, kotlin.Any?) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onerror>(): ((dynamic, kotlin.String, kotlin.Int, kotlin.Int, kotlin.Any?) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onerror>(/*0*/ value: ((dynamic, kotlin.String, kotlin.Int, kotlin.Int, kotlin.Any?) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onfocus: ((org.w3c.dom.events.FocusEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onfocus>(): ((org.w3c.dom.events.FocusEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onfocus>(/*0*/ value: ((org.w3c.dom.events.FocusEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ongotpointercapture: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ongotpointercapture>(): ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ongotpointercapture>(/*0*/ value: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var oninput: ((org.w3c.dom.events.InputEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-oninput>(): ((org.w3c.dom.events.InputEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-oninput>(/*0*/ value: ((org.w3c.dom.events.InputEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var oninvalid: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-oninvalid>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-oninvalid>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onkeydown: ((org.w3c.dom.events.KeyboardEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onkeydown>(): ((org.w3c.dom.events.KeyboardEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onkeydown>(/*0*/ value: ((org.w3c.dom.events.KeyboardEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onkeypress: ((org.w3c.dom.events.KeyboardEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onkeypress>(): ((org.w3c.dom.events.KeyboardEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onkeypress>(/*0*/ value: ((org.w3c.dom.events.KeyboardEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onkeyup: ((org.w3c.dom.events.KeyboardEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onkeyup>(): ((org.w3c.dom.events.KeyboardEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onkeyup>(/*0*/ value: ((org.w3c.dom.events.KeyboardEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onload: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onload>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onload>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onloadeddata: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onloadeddata>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onloadeddata>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onloadedmetadata: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onloadedmetadata>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onloadedmetadata>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onloadend: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onloadend>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onloadend>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onloadstart: ((org.w3c.xhr.ProgressEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onloadstart>(): ((org.w3c.xhr.ProgressEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onloadstart>(/*0*/ value: ((org.w3c.xhr.ProgressEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onlostpointercapture: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onlostpointercapture>(): ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onlostpointercapture>(/*0*/ value: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onmousedown: ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onmousedown>(): ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onmousedown>(/*0*/ value: ((org.w3c.dom.events.MouseEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onmouseenter: ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onmouseenter>(): ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onmouseenter>(/*0*/ value: ((org.w3c.dom.events.MouseEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onmouseleave: ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onmouseleave>(): ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onmouseleave>(/*0*/ value: ((org.w3c.dom.events.MouseEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onmousemove: ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onmousemove>(): ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onmousemove>(/*0*/ value: ((org.w3c.dom.events.MouseEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onmouseout: ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onmouseout>(): ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onmouseout>(/*0*/ value: ((org.w3c.dom.events.MouseEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onmouseover: ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onmouseover>(): ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onmouseover>(/*0*/ value: ((org.w3c.dom.events.MouseEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onmouseup: ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onmouseup>(): ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onmouseup>(/*0*/ value: ((org.w3c.dom.events.MouseEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onpause: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onpause>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onpause>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onplay: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onplay>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onplay>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onplaying: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onplaying>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onplaying>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onpointercancel: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onpointercancel>(): ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onpointercancel>(/*0*/ value: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onpointerdown: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onpointerdown>(): ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onpointerdown>(/*0*/ value: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onpointerenter: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onpointerenter>(): ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onpointerenter>(/*0*/ value: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onpointerleave: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onpointerleave>(): ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onpointerleave>(/*0*/ value: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onpointermove: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onpointermove>(): ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onpointermove>(/*0*/ value: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onpointerout: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onpointerout>(): ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onpointerout>(/*0*/ value: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onpointerover: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onpointerover>(): ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onpointerover>(/*0*/ value: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onpointerup: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onpointerup>(): ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onpointerup>(/*0*/ value: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onprogress: ((org.w3c.xhr.ProgressEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onprogress>(): ((org.w3c.xhr.ProgressEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onprogress>(/*0*/ value: ((org.w3c.xhr.ProgressEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onratechange: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onratechange>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onratechange>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onreset: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onreset>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onreset>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onresize: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onresize>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onresize>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onscroll: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onscroll>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onscroll>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onseeked: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onseeked>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onseeked>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onseeking: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onseeking>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onseeking>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onselect: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onselect>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onselect>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onshow: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onshow>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onshow>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onstalled: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onstalled>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onstalled>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onsubmit: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onsubmit>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onsubmit>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onsuspend: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onsuspend>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onsuspend>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ontimeupdate: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ontimeupdate>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ontimeupdate>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ontoggle: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ontoggle>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ontoggle>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onvolumechange: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onvolumechange>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onvolumechange>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onwaiting: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onwaiting>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onwaiting>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onwheel: ((org.w3c.dom.events.WheelEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onwheel>(): ((org.w3c.dom.events.WheelEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onwheel>(/*0*/ value: ((org.w3c.dom.events.WheelEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var outerHTML: kotlin.String
        public open override /*1*/ /*fake_override*/ fun <get-outerHTML>(): kotlin.String
        public open override /*1*/ /*fake_override*/ fun <set-outerHTML>(/*0*/ <set-?>: kotlin.String): kotlin.Unit
    public open override /*1*/ /*fake_override*/ val ownerDocument: org.w3c.dom.Document?
        public open override /*1*/ /*fake_override*/ fun <get-ownerDocument>(): org.w3c.dom.Document?
    public open override /*1*/ /*fake_override*/ val ownerSVGElement: org.w3c.dom.svg.SVGSVGElement?
        public open override /*1*/ /*fake_override*/ fun <get-ownerSVGElement>(): org.w3c.dom.svg.SVGSVGElement?
    public open override /*1*/ /*fake_override*/ val parentElement: org.w3c.dom.Element?
        public open override /*1*/ /*fake_override*/ fun <get-parentElement>(): org.w3c.dom.Element?
    public open override /*1*/ /*fake_override*/ val parentNode: org.w3c.dom.Node?
        public open override /*1*/ /*fake_override*/ fun <get-parentNode>(): org.w3c.dom.Node?
    public open override /*1*/ /*fake_override*/ val pathLength: org.w3c.dom.svg.SVGAnimatedNumber
        public open override /*1*/ /*fake_override*/ fun <get-pathLength>(): org.w3c.dom.svg.SVGAnimatedNumber
    public open override /*1*/ /*fake_override*/ val prefix: kotlin.String?
        public open override /*1*/ /*fake_override*/ fun <get-prefix>(): kotlin.String?
    public open override /*1*/ /*fake_override*/ val previousElementSibling: org.w3c.dom.Element?
        public open override /*1*/ /*fake_override*/ fun <get-previousElementSibling>(): org.w3c.dom.Element?
    public open override /*1*/ /*fake_override*/ val previousSibling: org.w3c.dom.Node?
        public open override /*1*/ /*fake_override*/ fun <get-previousSibling>(): org.w3c.dom.Node?
    public abstract override /*1*/ /*fake_override*/ val requiredExtensions: org.w3c.dom.svg.SVGStringList
        public abstract override /*1*/ /*fake_override*/ fun <get-requiredExtensions>(): org.w3c.dom.svg.SVGStringList
    public open override /*1*/ /*fake_override*/ val scrollHeight: kotlin.Int
        public open override /*1*/ /*fake_override*/ fun <get-scrollHeight>(): kotlin.Int
    public open override /*1*/ /*fake_override*/ var scrollLeft: kotlin.Double
        public open override /*1*/ /*fake_override*/ fun <get-scrollLeft>(): kotlin.Double
        public open override /*1*/ /*fake_override*/ fun <set-scrollLeft>(/*0*/ <set-?>: kotlin.Double): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var scrollTop: kotlin.Double
        public open override /*1*/ /*fake_override*/ fun <get-scrollTop>(): kotlin.Double
        public open override /*1*/ /*fake_override*/ fun <set-scrollTop>(/*0*/ <set-?>: kotlin.Double): kotlin.Unit
    public open override /*1*/ /*fake_override*/ val scrollWidth: kotlin.Int
        public open override /*1*/ /*fake_override*/ fun <get-scrollWidth>(): kotlin.Int
    public open override /*1*/ /*fake_override*/ val shadowRoot: org.w3c.dom.ShadowRoot?
        public open override /*1*/ /*fake_override*/ fun <get-shadowRoot>(): org.w3c.dom.ShadowRoot?
    public open override /*1*/ /*fake_override*/ var slot: kotlin.String
        public open override /*1*/ /*fake_override*/ fun <get-slot>(): kotlin.String
        public open override /*1*/ /*fake_override*/ fun <set-slot>(/*0*/ <set-?>: kotlin.String): kotlin.Unit
    public abstract override /*1*/ /*fake_override*/ val style: org.w3c.dom.css.CSSStyleDeclaration
        public abstract override /*1*/ /*fake_override*/ fun <get-style>(): org.w3c.dom.css.CSSStyleDeclaration
    public abstract override /*1*/ /*fake_override*/ val systemLanguage: org.w3c.dom.svg.SVGStringList
        public abstract override /*1*/ /*fake_override*/ fun <get-systemLanguage>(): org.w3c.dom.svg.SVGStringList
    public open override /*1*/ /*fake_override*/ var tabIndex: kotlin.Int
        public open override /*1*/ /*fake_override*/ fun <get-tabIndex>(): kotlin.Int
        public open override /*1*/ /*fake_override*/ fun <set-tabIndex>(/*0*/ <set-?>: kotlin.Int): kotlin.Unit
    public open override /*1*/ /*fake_override*/ val tagName: kotlin.String
        public open override /*1*/ /*fake_override*/ fun <get-tagName>(): kotlin.String
    public open override /*1*/ /*fake_override*/ var textContent: kotlin.String?
        public open override /*1*/ /*fake_override*/ fun <get-textContent>(): kotlin.String?
        public open override /*1*/ /*fake_override*/ fun <set-textContent>(/*0*/ <set-?>: kotlin.String?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ val transform: org.w3c.dom.svg.SVGAnimatedTransformList
        public open override /*1*/ /*fake_override*/ fun <get-transform>(): org.w3c.dom.svg.SVGAnimatedTransformList
    public open override /*1*/ /*fake_override*/ val viewportElement: org.w3c.dom.svg.SVGElement?
        public open override /*1*/ /*fake_override*/ fun <get-viewportElement>(): org.w3c.dom.svg.SVGElement?
    public open val x1: org.w3c.dom.svg.SVGAnimatedLength
        public open fun <get-x1>(): org.w3c.dom.svg.SVGAnimatedLength
    public open val x2: org.w3c.dom.svg.SVGAnimatedLength
        public open fun <get-x2>(): org.w3c.dom.svg.SVGAnimatedLength
    public open val y1: org.w3c.dom.svg.SVGAnimatedLength
        public open fun <get-y1>(): org.w3c.dom.svg.SVGAnimatedLength
    public open val y2: org.w3c.dom.svg.SVGAnimatedLength
        public open fun <get-y2>(): org.w3c.dom.svg.SVGAnimatedLength
    public final override /*1*/ /*fake_override*/ fun addEventListener(/*0*/ type: kotlin.String, /*1*/ callback: ((org.w3c.dom.events.Event) -> kotlin.Unit)?, /*2*/ options: dynamic = ...): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun addEventListener(/*0*/ type: kotlin.String, /*1*/ callback: org.w3c.dom.events.EventListener?, /*2*/ options: dynamic = ...): kotlin.Unit
    public abstract override /*1*/ /*fake_override*/ fun after(/*0*/ vararg nodes: dynamic /*kotlin.Array<out dynamic>*/): kotlin.Unit
    public abstract override /*1*/ /*fake_override*/ fun append(/*0*/ vararg nodes: dynamic /*kotlin.Array<out dynamic>*/): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun appendChild(/*0*/ node: org.w3c.dom.Node): org.w3c.dom.Node
    public final override /*1*/ /*fake_override*/ fun attachShadow(/*0*/ init: org.w3c.dom.ShadowRootInit): org.w3c.dom.ShadowRoot
    public abstract override /*1*/ /*fake_override*/ fun before(/*0*/ vararg nodes: dynamic /*kotlin.Array<out dynamic>*/): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun blur(): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun cloneNode(/*0*/ deep: kotlin.Boolean = ...): org.w3c.dom.Node
    public final override /*1*/ /*fake_override*/ fun closest(/*0*/ selectors: kotlin.String): org.w3c.dom.Element?
    public final override /*1*/ /*fake_override*/ fun compareDocumentPosition(/*0*/ other: org.w3c.dom.Node): kotlin.Short
    public final override /*1*/ /*fake_override*/ fun contains(/*0*/ other: org.w3c.dom.Node?): kotlin.Boolean
    public abstract override /*1*/ /*fake_override*/ fun convertPointFromNode(/*0*/ point: org.w3c.dom.DOMPointInit, /*1*/ from: dynamic, /*2*/ options: org.w3c.dom.ConvertCoordinateOptions = ...): org.w3c.dom.DOMPoint
    public abstract override /*1*/ /*fake_override*/ fun convertQuadFromNode(/*0*/ quad: dynamic, /*1*/ from: dynamic, /*2*/ options: org.w3c.dom.ConvertCoordinateOptions = ...): org.w3c.dom.DOMQuad
    public abstract override /*1*/ /*fake_override*/ fun convertRectFromNode(/*0*/ rect: org.w3c.dom.DOMRectReadOnly, /*1*/ from: dynamic, /*2*/ options: org.w3c.dom.ConvertCoordinateOptions = ...): org.w3c.dom.DOMQuad
    public final override /*1*/ /*fake_override*/ fun dispatchEvent(/*0*/ event: org.w3c.dom.events.Event): kotlin.Boolean
    public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
    public final override /*1*/ /*fake_override*/ fun focus(): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun getAttribute(/*0*/ qualifiedName: kotlin.String): kotlin.String?
    public final override /*1*/ /*fake_override*/ fun getAttributeNS(/*0*/ namespace: kotlin.String?, /*1*/ localName: kotlin.String): kotlin.String?
    public final override /*1*/ /*fake_override*/ fun getAttributeNames(): kotlin.Array<kotlin.String>
    public final override /*1*/ /*fake_override*/ fun getAttributeNode(/*0*/ qualifiedName: kotlin.String): org.w3c.dom.Attr?
    public final override /*1*/ /*fake_override*/ fun getAttributeNodeNS(/*0*/ namespace: kotlin.String?, /*1*/ localName: kotlin.String): org.w3c.dom.Attr?
    public final override /*1*/ /*fake_override*/ fun getBBox(/*0*/ options: org.w3c.dom.svg.SVGBoundingBoxOptions = ...): org.w3c.dom.DOMRect
    public final override /*1*/ /*fake_override*/ fun getBoundingClientRect(): org.w3c.dom.DOMRect
    public abstract override /*1*/ /*fake_override*/ fun getBoxQuads(/*0*/ options: org.w3c.dom.BoxQuadOptions = ...): kotlin.Array<org.w3c.dom.DOMQuad>
    public final override /*1*/ /*fake_override*/ fun getCTM(): org.w3c.dom.DOMMatrix?
    public final override /*1*/ /*fake_override*/ fun getClientRects(): kotlin.Array<org.w3c.dom.DOMRect>
    public final override /*1*/ /*fake_override*/ fun getElementsByClassName(/*0*/ classNames: kotlin.String): org.w3c.dom.HTMLCollection
    public final override /*1*/ /*fake_override*/ fun getElementsByTagName(/*0*/ qualifiedName: kotlin.String): org.w3c.dom.HTMLCollection
    public final override /*1*/ /*fake_override*/ fun getElementsByTagNameNS(/*0*/ namespace: kotlin.String?, /*1*/ localName: kotlin.String): org.w3c.dom.HTMLCollection
    public final override /*1*/ /*fake_override*/ fun getPointAtLength(/*0*/ distance: kotlin.Float): org.w3c.dom.DOMPoint
    public final override /*1*/ /*fake_override*/ fun getRootNode(/*0*/ options: org.w3c.dom.GetRootNodeOptions = ...): org.w3c.dom.Node
    public final override /*1*/ /*fake_override*/ fun getScreenCTM(): org.w3c.dom.DOMMatrix?
    public final override /*1*/ /*fake_override*/ fun getTotalLength(): kotlin.Float
    public final override /*1*/ /*fake_override*/ fun hasAttribute(/*0*/ qualifiedName: kotlin.String): kotlin.Boolean
    public final override /*1*/ /*fake_override*/ fun hasAttributeNS(/*0*/ namespace: kotlin.String?, /*1*/ localName: kotlin.String): kotlin.Boolean
    public final override /*1*/ /*fake_override*/ fun hasAttributes(): kotlin.Boolean
    public final override /*1*/ /*fake_override*/ fun hasChildNodes(): kotlin.Boolean
    public final override /*1*/ /*fake_override*/ fun hasPointerCapture(/*0*/ pointerId: kotlin.Int): kotlin.Boolean
    public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
    public final override /*1*/ /*fake_override*/ fun insertAdjacentElement(/*0*/ where: kotlin.String, /*1*/ element: org.w3c.dom.Element): org.w3c.dom.Element?
    public final override /*1*/ /*fake_override*/ fun insertAdjacentHTML(/*0*/ position: kotlin.String, /*1*/ text: kotlin.String): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun insertAdjacentText(/*0*/ where: kotlin.String, /*1*/ data: kotlin.String): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun insertBefore(/*0*/ node: org.w3c.dom.Node, /*1*/ child: org.w3c.dom.Node?): org.w3c.dom.Node
    public final override /*1*/ /*fake_override*/ fun isDefaultNamespace(/*0*/ namespace: kotlin.String?): kotlin.Boolean
    public final override /*1*/ /*fake_override*/ fun isEqualNode(/*0*/ otherNode: org.w3c.dom.Node?): kotlin.Boolean
    public final override /*1*/ /*fake_override*/ fun isPointInFill(/*0*/ point: org.w3c.dom.DOMPoint): kotlin.Boolean
    public final override /*1*/ /*fake_override*/ fun isPointInStroke(/*0*/ point: org.w3c.dom.DOMPoint): kotlin.Boolean
    public final override /*1*/ /*fake_override*/ fun isSameNode(/*0*/ otherNode: org.w3c.dom.Node?): kotlin.Boolean
    public final override /*1*/ /*fake_override*/ fun lookupNamespaceURI(/*0*/ prefix: kotlin.String?): kotlin.String?
    public final override /*1*/ /*fake_override*/ fun lookupPrefix(/*0*/ namespace: kotlin.String?): kotlin.String?
    public final override /*1*/ /*fake_override*/ fun matches(/*0*/ selectors: kotlin.String): kotlin.Boolean
    public final override /*1*/ /*fake_override*/ fun normalize(): kotlin.Unit
    public abstract override /*1*/ /*fake_override*/ fun prepend(/*0*/ vararg nodes: dynamic /*kotlin.Array<out dynamic>*/): kotlin.Unit
    public abstract override /*1*/ /*fake_override*/ fun querySelector(/*0*/ selectors: kotlin.String): org.w3c.dom.Element?
    public abstract override /*1*/ /*fake_override*/ fun querySelectorAll(/*0*/ selectors: kotlin.String): org.w3c.dom.NodeList
    public final override /*1*/ /*fake_override*/ fun releasePointerCapture(/*0*/ pointerId: kotlin.Int): kotlin.Unit
    public abstract override /*1*/ /*fake_override*/ fun remove(): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun removeAttribute(/*0*/ qualifiedName: kotlin.String): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun removeAttributeNS(/*0*/ namespace: kotlin.String?, /*1*/ localName: kotlin.String): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun removeAttributeNode(/*0*/ attr: org.w3c.dom.Attr): org.w3c.dom.Attr
    public final override /*1*/ /*fake_override*/ fun removeChild(/*0*/ child: org.w3c.dom.Node): org.w3c.dom.Node
    public final override /*1*/ /*fake_override*/ fun removeEventListener(/*0*/ type: kotlin.String, /*1*/ callback: ((org.w3c.dom.events.Event) -> kotlin.Unit)?, /*2*/ options: dynamic = ...): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun removeEventListener(/*0*/ type: kotlin.String, /*1*/ callback: org.w3c.dom.events.EventListener?, /*2*/ options: dynamic = ...): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun replaceChild(/*0*/ node: org.w3c.dom.Node, /*1*/ child: org.w3c.dom.Node): org.w3c.dom.Node
    public abstract override /*1*/ /*fake_override*/ fun replaceWith(/*0*/ vararg nodes: dynamic /*kotlin.Array<out dynamic>*/): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun requestFullscreen(): kotlin.js.Promise<kotlin.Unit>
    public final override /*1*/ /*fake_override*/ fun scroll(/*0*/ x: kotlin.Double, /*1*/ y: kotlin.Double): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun scroll(/*0*/ options: org.w3c.dom.ScrollToOptions = ...): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun scrollBy(/*0*/ x: kotlin.Double, /*1*/ y: kotlin.Double): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun scrollBy(/*0*/ options: org.w3c.dom.ScrollToOptions = ...): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun scrollIntoView(): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun scrollIntoView(/*0*/ arg: dynamic): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun scrollTo(/*0*/ x: kotlin.Double, /*1*/ y: kotlin.Double): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun scrollTo(/*0*/ options: org.w3c.dom.ScrollToOptions = ...): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun setAttribute(/*0*/ qualifiedName: kotlin.String, /*1*/ value: kotlin.String): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun setAttributeNS(/*0*/ namespace: kotlin.String?, /*1*/ qualifiedName: kotlin.String, /*2*/ value: kotlin.String): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun setAttributeNode(/*0*/ attr: org.w3c.dom.Attr): org.w3c.dom.Attr?
    public final override /*1*/ /*fake_override*/ fun setAttributeNodeNS(/*0*/ attr: org.w3c.dom.Attr): org.w3c.dom.Attr?
    public final override /*1*/ /*fake_override*/ fun setPointerCapture(/*0*/ pointerId: kotlin.Int): kotlin.Unit
    public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
    public final override /*1*/ /*fake_override*/ fun webkitMatchesSelector(/*0*/ selectors: kotlin.String): kotlin.Boolean

    public companion object Companion {
        /*primary*/ private constructor Companion()
        public final val ATTRIBUTE_NODE: kotlin.Short
            public final fun <get-ATTRIBUTE_NODE>(): kotlin.Short
        public final val CDATA_SECTION_NODE: kotlin.Short
            public final fun <get-CDATA_SECTION_NODE>(): kotlin.Short
        public final val COMMENT_NODE: kotlin.Short
            public final fun <get-COMMENT_NODE>(): kotlin.Short
        public final val DOCUMENT_FRAGMENT_NODE: kotlin.Short
            public final fun <get-DOCUMENT_FRAGMENT_NODE>(): kotlin.Short
        public final val DOCUMENT_NODE: kotlin.Short
            public final fun <get-DOCUMENT_NODE>(): kotlin.Short
        public final val DOCUMENT_POSITION_CONTAINED_BY: kotlin.Short
            public final fun <get-DOCUMENT_POSITION_CONTAINED_BY>(): kotlin.Short
        public final val DOCUMENT_POSITION_CONTAINS: kotlin.Short
            public final fun <get-DOCUMENT_POSITION_CONTAINS>(): kotlin.Short
        public final val DOCUMENT_POSITION_DISCONNECTED: kotlin.Short
            public final fun <get-DOCUMENT_POSITION_DISCONNECTED>(): kotlin.Short
        public final val DOCUMENT_POSITION_FOLLOWING: kotlin.Short
            public final fun <get-DOCUMENT_POSITION_FOLLOWING>(): kotlin.Short
        public final val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: kotlin.Short
            public final fun <get-DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC>(): kotlin.Short
        public final val DOCUMENT_POSITION_PRECEDING: kotlin.Short
            public final fun <get-DOCUMENT_POSITION_PRECEDING>(): kotlin.Short
        public final val DOCUMENT_TYPE_NODE: kotlin.Short
            public final fun <get-DOCUMENT_TYPE_NODE>(): kotlin.Short
        public final val ELEMENT_NODE: kotlin.Short
            public final fun <get-ELEMENT_NODE>(): kotlin.Short
        public final val ENTITY_NODE: kotlin.Short
            public final fun <get-ENTITY_NODE>(): kotlin.Short
        public final val ENTITY_REFERENCE_NODE: kotlin.Short
            public final fun <get-ENTITY_REFERENCE_NODE>(): kotlin.Short
        public final val NOTATION_NODE: kotlin.Short
            public final fun <get-NOTATION_NODE>(): kotlin.Short
        public final val PROCESSING_INSTRUCTION_NODE: kotlin.Short
            public final fun <get-PROCESSING_INSTRUCTION_NODE>(): kotlin.Short
        public final val TEXT_NODE: kotlin.Short
            public final fun <get-TEXT_NODE>(): kotlin.Short
        public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
        public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
        public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
    }
}

public abstract external class SVGLinearGradientElement : org.w3c.dom.svg.SVGGradientElement {
    /*primary*/ public constructor SVGLinearGradientElement()
    public open override /*1*/ /*fake_override*/ val assignedSlot: org.w3c.dom.HTMLSlotElement?
        public open override /*1*/ /*fake_override*/ fun <get-assignedSlot>(): org.w3c.dom.HTMLSlotElement?
    public open override /*1*/ /*fake_override*/ val attributes: org.w3c.dom.NamedNodeMap
        public open override /*1*/ /*fake_override*/ fun <get-attributes>(): org.w3c.dom.NamedNodeMap
    public open override /*1*/ /*fake_override*/ val baseURI: kotlin.String
        public open override /*1*/ /*fake_override*/ fun <get-baseURI>(): kotlin.String
    public abstract override /*1*/ /*fake_override*/ val childElementCount: kotlin.Int
        public abstract override /*1*/ /*fake_override*/ fun <get-childElementCount>(): kotlin.Int
    public open override /*1*/ /*fake_override*/ val childNodes: org.w3c.dom.NodeList
        public open override /*1*/ /*fake_override*/ fun <get-childNodes>(): org.w3c.dom.NodeList
    public abstract override /*1*/ /*fake_override*/ val children: org.w3c.dom.HTMLCollection
        public abstract override /*1*/ /*fake_override*/ fun <get-children>(): org.w3c.dom.HTMLCollection
    public open override /*1*/ /*fake_override*/ val classList: org.w3c.dom.DOMTokenList
        public open override /*1*/ /*fake_override*/ fun <get-classList>(): org.w3c.dom.DOMTokenList
    public open override /*1*/ /*fake_override*/ var className: kotlin.String
        public open override /*1*/ /*fake_override*/ fun <get-className>(): kotlin.String
        public open override /*1*/ /*fake_override*/ fun <set-className>(/*0*/ <set-?>: kotlin.String): kotlin.Unit
    public open override /*1*/ /*fake_override*/ val clientHeight: kotlin.Int
        public open override /*1*/ /*fake_override*/ fun <get-clientHeight>(): kotlin.Int
    public open override /*1*/ /*fake_override*/ val clientLeft: kotlin.Int
        public open override /*1*/ /*fake_override*/ fun <get-clientLeft>(): kotlin.Int
    public open override /*1*/ /*fake_override*/ val clientTop: kotlin.Int
        public open override /*1*/ /*fake_override*/ fun <get-clientTop>(): kotlin.Int
    public open override /*1*/ /*fake_override*/ val clientWidth: kotlin.Int
        public open override /*1*/ /*fake_override*/ fun <get-clientWidth>(): kotlin.Int
    public open override /*1*/ /*fake_override*/ val correspondingElement: org.w3c.dom.svg.SVGElement?
        public open override /*1*/ /*fake_override*/ fun <get-correspondingElement>(): org.w3c.dom.svg.SVGElement?
    public open override /*1*/ /*fake_override*/ val correspondingUseElement: org.w3c.dom.svg.SVGUseElement?
        public open override /*1*/ /*fake_override*/ fun <get-correspondingUseElement>(): org.w3c.dom.svg.SVGUseElement?
    public open override /*1*/ /*fake_override*/ val dataset: org.w3c.dom.DOMStringMap
        public open override /*1*/ /*fake_override*/ fun <get-dataset>(): org.w3c.dom.DOMStringMap
    public open override /*1*/ /*fake_override*/ val firstChild: org.w3c.dom.Node?
        public open override /*1*/ /*fake_override*/ fun <get-firstChild>(): org.w3c.dom.Node?
    public open override /*1*/ /*fake_override*/ val firstElementChild: org.w3c.dom.Element?
        public open override /*1*/ /*fake_override*/ fun <get-firstElementChild>(): org.w3c.dom.Element?
    public open override /*1*/ /*fake_override*/ val gradientTransform: org.w3c.dom.svg.SVGAnimatedTransformList
        public open override /*1*/ /*fake_override*/ fun <get-gradientTransform>(): org.w3c.dom.svg.SVGAnimatedTransformList
    public open override /*1*/ /*fake_override*/ val gradientUnits: org.w3c.dom.svg.SVGAnimatedEnumeration
        public open override /*1*/ /*fake_override*/ fun <get-gradientUnits>(): org.w3c.dom.svg.SVGAnimatedEnumeration
    public abstract override /*1*/ /*fake_override*/ val href: org.w3c.dom.svg.SVGAnimatedString
        public abstract override /*1*/ /*fake_override*/ fun <get-href>(): org.w3c.dom.svg.SVGAnimatedString
    public open override /*1*/ /*fake_override*/ var id: kotlin.String
        public open override /*1*/ /*fake_override*/ fun <get-id>(): kotlin.String
        public open override /*1*/ /*fake_override*/ fun <set-id>(/*0*/ <set-?>: kotlin.String): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var innerHTML: kotlin.String
        public open override /*1*/ /*fake_override*/ fun <get-innerHTML>(): kotlin.String
        public open override /*1*/ /*fake_override*/ fun <set-innerHTML>(/*0*/ <set-?>: kotlin.String): kotlin.Unit
    public open override /*1*/ /*fake_override*/ val isConnected: kotlin.Boolean
        public open override /*1*/ /*fake_override*/ fun <get-isConnected>(): kotlin.Boolean
    public open override /*1*/ /*fake_override*/ val lastChild: org.w3c.dom.Node?
        public open override /*1*/ /*fake_override*/ fun <get-lastChild>(): org.w3c.dom.Node?
    public open override /*1*/ /*fake_override*/ val lastElementChild: org.w3c.dom.Element?
        public open override /*1*/ /*fake_override*/ fun <get-lastElementChild>(): org.w3c.dom.Element?
    public open override /*1*/ /*fake_override*/ val localName: kotlin.String
        public open override /*1*/ /*fake_override*/ fun <get-localName>(): kotlin.String
    public open override /*1*/ /*fake_override*/ val namespaceURI: kotlin.String?
        public open override /*1*/ /*fake_override*/ fun <get-namespaceURI>(): kotlin.String?
    public open override /*1*/ /*fake_override*/ val nextElementSibling: org.w3c.dom.Element?
        public open override /*1*/ /*fake_override*/ fun <get-nextElementSibling>(): org.w3c.dom.Element?
    public open override /*1*/ /*fake_override*/ val nextSibling: org.w3c.dom.Node?
        public open override /*1*/ /*fake_override*/ fun <get-nextSibling>(): org.w3c.dom.Node?
    public open override /*1*/ /*fake_override*/ val nodeName: kotlin.String
        public open override /*1*/ /*fake_override*/ fun <get-nodeName>(): kotlin.String
    public open override /*1*/ /*fake_override*/ val nodeType: kotlin.Short
        public open override /*1*/ /*fake_override*/ fun <get-nodeType>(): kotlin.Short
    public open override /*1*/ /*fake_override*/ var nodeValue: kotlin.String?
        public open override /*1*/ /*fake_override*/ fun <get-nodeValue>(): kotlin.String?
        public open override /*1*/ /*fake_override*/ fun <set-nodeValue>(/*0*/ <set-?>: kotlin.String?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onabort: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onabort>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onabort>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onblur: ((org.w3c.dom.events.FocusEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onblur>(): ((org.w3c.dom.events.FocusEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onblur>(/*0*/ value: ((org.w3c.dom.events.FocusEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var oncancel: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-oncancel>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-oncancel>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var oncanplay: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-oncanplay>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-oncanplay>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var oncanplaythrough: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-oncanplaythrough>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-oncanplaythrough>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onchange: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onchange>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onchange>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onclick: ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onclick>(): ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onclick>(/*0*/ value: ((org.w3c.dom.events.MouseEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onclose: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onclose>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onclose>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var oncontextmenu: ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-oncontextmenu>(): ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-oncontextmenu>(/*0*/ value: ((org.w3c.dom.events.MouseEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var oncuechange: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-oncuechange>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-oncuechange>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ondblclick: ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ondblclick>(): ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ondblclick>(/*0*/ value: ((org.w3c.dom.events.MouseEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ondrag: ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ondrag>(): ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ondrag>(/*0*/ value: ((org.w3c.dom.DragEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ondragend: ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ondragend>(): ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ondragend>(/*0*/ value: ((org.w3c.dom.DragEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ondragenter: ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ondragenter>(): ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ondragenter>(/*0*/ value: ((org.w3c.dom.DragEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ondragexit: ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ondragexit>(): ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ondragexit>(/*0*/ value: ((org.w3c.dom.DragEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ondragleave: ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ondragleave>(): ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ondragleave>(/*0*/ value: ((org.w3c.dom.DragEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ondragover: ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ondragover>(): ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ondragover>(/*0*/ value: ((org.w3c.dom.DragEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ondragstart: ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ondragstart>(): ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ondragstart>(/*0*/ value: ((org.w3c.dom.DragEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ondrop: ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ondrop>(): ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ondrop>(/*0*/ value: ((org.w3c.dom.DragEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ondurationchange: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ondurationchange>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ondurationchange>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onemptied: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onemptied>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onemptied>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onended: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onended>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onended>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onerror: ((dynamic, kotlin.String, kotlin.Int, kotlin.Int, kotlin.Any?) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onerror>(): ((dynamic, kotlin.String, kotlin.Int, kotlin.Int, kotlin.Any?) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onerror>(/*0*/ value: ((dynamic, kotlin.String, kotlin.Int, kotlin.Int, kotlin.Any?) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onfocus: ((org.w3c.dom.events.FocusEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onfocus>(): ((org.w3c.dom.events.FocusEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onfocus>(/*0*/ value: ((org.w3c.dom.events.FocusEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ongotpointercapture: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ongotpointercapture>(): ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ongotpointercapture>(/*0*/ value: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var oninput: ((org.w3c.dom.events.InputEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-oninput>(): ((org.w3c.dom.events.InputEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-oninput>(/*0*/ value: ((org.w3c.dom.events.InputEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var oninvalid: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-oninvalid>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-oninvalid>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onkeydown: ((org.w3c.dom.events.KeyboardEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onkeydown>(): ((org.w3c.dom.events.KeyboardEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onkeydown>(/*0*/ value: ((org.w3c.dom.events.KeyboardEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onkeypress: ((org.w3c.dom.events.KeyboardEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onkeypress>(): ((org.w3c.dom.events.KeyboardEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onkeypress>(/*0*/ value: ((org.w3c.dom.events.KeyboardEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onkeyup: ((org.w3c.dom.events.KeyboardEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onkeyup>(): ((org.w3c.dom.events.KeyboardEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onkeyup>(/*0*/ value: ((org.w3c.dom.events.KeyboardEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onload: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onload>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onload>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onloadeddata: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onloadeddata>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onloadeddata>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onloadedmetadata: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onloadedmetadata>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onloadedmetadata>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onloadend: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onloadend>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onloadend>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onloadstart: ((org.w3c.xhr.ProgressEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onloadstart>(): ((org.w3c.xhr.ProgressEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onloadstart>(/*0*/ value: ((org.w3c.xhr.ProgressEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onlostpointercapture: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onlostpointercapture>(): ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onlostpointercapture>(/*0*/ value: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onmousedown: ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onmousedown>(): ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onmousedown>(/*0*/ value: ((org.w3c.dom.events.MouseEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onmouseenter: ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onmouseenter>(): ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onmouseenter>(/*0*/ value: ((org.w3c.dom.events.MouseEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onmouseleave: ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onmouseleave>(): ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onmouseleave>(/*0*/ value: ((org.w3c.dom.events.MouseEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onmousemove: ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onmousemove>(): ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onmousemove>(/*0*/ value: ((org.w3c.dom.events.MouseEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onmouseout: ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onmouseout>(): ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onmouseout>(/*0*/ value: ((org.w3c.dom.events.MouseEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onmouseover: ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onmouseover>(): ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onmouseover>(/*0*/ value: ((org.w3c.dom.events.MouseEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onmouseup: ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onmouseup>(): ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onmouseup>(/*0*/ value: ((org.w3c.dom.events.MouseEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onpause: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onpause>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onpause>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onplay: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onplay>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onplay>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onplaying: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onplaying>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onplaying>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onpointercancel: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onpointercancel>(): ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onpointercancel>(/*0*/ value: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onpointerdown: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onpointerdown>(): ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onpointerdown>(/*0*/ value: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onpointerenter: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onpointerenter>(): ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onpointerenter>(/*0*/ value: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onpointerleave: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onpointerleave>(): ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onpointerleave>(/*0*/ value: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onpointermove: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onpointermove>(): ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onpointermove>(/*0*/ value: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onpointerout: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onpointerout>(): ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onpointerout>(/*0*/ value: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onpointerover: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onpointerover>(): ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onpointerover>(/*0*/ value: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onpointerup: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onpointerup>(): ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onpointerup>(/*0*/ value: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onprogress: ((org.w3c.xhr.ProgressEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onprogress>(): ((org.w3c.xhr.ProgressEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onprogress>(/*0*/ value: ((org.w3c.xhr.ProgressEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onratechange: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onratechange>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onratechange>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onreset: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onreset>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onreset>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onresize: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onresize>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onresize>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onscroll: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onscroll>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onscroll>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onseeked: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onseeked>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onseeked>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onseeking: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onseeking>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onseeking>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onselect: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onselect>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onselect>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onshow: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onshow>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onshow>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onstalled: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onstalled>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onstalled>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onsubmit: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onsubmit>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onsubmit>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onsuspend: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onsuspend>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onsuspend>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ontimeupdate: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ontimeupdate>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ontimeupdate>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ontoggle: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ontoggle>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ontoggle>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onvolumechange: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onvolumechange>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onvolumechange>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onwaiting: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onwaiting>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onwaiting>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onwheel: ((org.w3c.dom.events.WheelEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onwheel>(): ((org.w3c.dom.events.WheelEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onwheel>(/*0*/ value: ((org.w3c.dom.events.WheelEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var outerHTML: kotlin.String
        public open override /*1*/ /*fake_override*/ fun <get-outerHTML>(): kotlin.String
        public open override /*1*/ /*fake_override*/ fun <set-outerHTML>(/*0*/ <set-?>: kotlin.String): kotlin.Unit
    public open override /*1*/ /*fake_override*/ val ownerDocument: org.w3c.dom.Document?
        public open override /*1*/ /*fake_override*/ fun <get-ownerDocument>(): org.w3c.dom.Document?
    public open override /*1*/ /*fake_override*/ val ownerSVGElement: org.w3c.dom.svg.SVGSVGElement?
        public open override /*1*/ /*fake_override*/ fun <get-ownerSVGElement>(): org.w3c.dom.svg.SVGSVGElement?
    public open override /*1*/ /*fake_override*/ val parentElement: org.w3c.dom.Element?
        public open override /*1*/ /*fake_override*/ fun <get-parentElement>(): org.w3c.dom.Element?
    public open override /*1*/ /*fake_override*/ val parentNode: org.w3c.dom.Node?
        public open override /*1*/ /*fake_override*/ fun <get-parentNode>(): org.w3c.dom.Node?
    public open override /*1*/ /*fake_override*/ val prefix: kotlin.String?
        public open override /*1*/ /*fake_override*/ fun <get-prefix>(): kotlin.String?
    public open override /*1*/ /*fake_override*/ val previousElementSibling: org.w3c.dom.Element?
        public open override /*1*/ /*fake_override*/ fun <get-previousElementSibling>(): org.w3c.dom.Element?
    public open override /*1*/ /*fake_override*/ val previousSibling: org.w3c.dom.Node?
        public open override /*1*/ /*fake_override*/ fun <get-previousSibling>(): org.w3c.dom.Node?
    public open override /*1*/ /*fake_override*/ val scrollHeight: kotlin.Int
        public open override /*1*/ /*fake_override*/ fun <get-scrollHeight>(): kotlin.Int
    public open override /*1*/ /*fake_override*/ var scrollLeft: kotlin.Double
        public open override /*1*/ /*fake_override*/ fun <get-scrollLeft>(): kotlin.Double
        public open override /*1*/ /*fake_override*/ fun <set-scrollLeft>(/*0*/ <set-?>: kotlin.Double): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var scrollTop: kotlin.Double
        public open override /*1*/ /*fake_override*/ fun <get-scrollTop>(): kotlin.Double
        public open override /*1*/ /*fake_override*/ fun <set-scrollTop>(/*0*/ <set-?>: kotlin.Double): kotlin.Unit
    public open override /*1*/ /*fake_override*/ val scrollWidth: kotlin.Int
        public open override /*1*/ /*fake_override*/ fun <get-scrollWidth>(): kotlin.Int
    public open override /*1*/ /*fake_override*/ val shadowRoot: org.w3c.dom.ShadowRoot?
        public open override /*1*/ /*fake_override*/ fun <get-shadowRoot>(): org.w3c.dom.ShadowRoot?
    public open override /*1*/ /*fake_override*/ var slot: kotlin.String
        public open override /*1*/ /*fake_override*/ fun <get-slot>(): kotlin.String
        public open override /*1*/ /*fake_override*/ fun <set-slot>(/*0*/ <set-?>: kotlin.String): kotlin.Unit
    public open override /*1*/ /*fake_override*/ val spreadMethod: org.w3c.dom.svg.SVGAnimatedEnumeration
        public open override /*1*/ /*fake_override*/ fun <get-spreadMethod>(): org.w3c.dom.svg.SVGAnimatedEnumeration
    public abstract override /*1*/ /*fake_override*/ val style: org.w3c.dom.css.CSSStyleDeclaration
        public abstract override /*1*/ /*fake_override*/ fun <get-style>(): org.w3c.dom.css.CSSStyleDeclaration
    public open override /*1*/ /*fake_override*/ var tabIndex: kotlin.Int
        public open override /*1*/ /*fake_override*/ fun <get-tabIndex>(): kotlin.Int
        public open override /*1*/ /*fake_override*/ fun <set-tabIndex>(/*0*/ <set-?>: kotlin.Int): kotlin.Unit
    public open override /*1*/ /*fake_override*/ val tagName: kotlin.String
        public open override /*1*/ /*fake_override*/ fun <get-tagName>(): kotlin.String
    public open override /*1*/ /*fake_override*/ var textContent: kotlin.String?
        public open override /*1*/ /*fake_override*/ fun <get-textContent>(): kotlin.String?
        public open override /*1*/ /*fake_override*/ fun <set-textContent>(/*0*/ <set-?>: kotlin.String?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ val viewportElement: org.w3c.dom.svg.SVGElement?
        public open override /*1*/ /*fake_override*/ fun <get-viewportElement>(): org.w3c.dom.svg.SVGElement?
    public open val x1: org.w3c.dom.svg.SVGAnimatedLength
        public open fun <get-x1>(): org.w3c.dom.svg.SVGAnimatedLength
    public open val x2: org.w3c.dom.svg.SVGAnimatedLength
        public open fun <get-x2>(): org.w3c.dom.svg.SVGAnimatedLength
    public open val y1: org.w3c.dom.svg.SVGAnimatedLength
        public open fun <get-y1>(): org.w3c.dom.svg.SVGAnimatedLength
    public open val y2: org.w3c.dom.svg.SVGAnimatedLength
        public open fun <get-y2>(): org.w3c.dom.svg.SVGAnimatedLength
    public final override /*1*/ /*fake_override*/ fun addEventListener(/*0*/ type: kotlin.String, /*1*/ callback: ((org.w3c.dom.events.Event) -> kotlin.Unit)?, /*2*/ options: dynamic = ...): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun addEventListener(/*0*/ type: kotlin.String, /*1*/ callback: org.w3c.dom.events.EventListener?, /*2*/ options: dynamic = ...): kotlin.Unit
    public abstract override /*1*/ /*fake_override*/ fun after(/*0*/ vararg nodes: dynamic /*kotlin.Array<out dynamic>*/): kotlin.Unit
    public abstract override /*1*/ /*fake_override*/ fun append(/*0*/ vararg nodes: dynamic /*kotlin.Array<out dynamic>*/): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun appendChild(/*0*/ node: org.w3c.dom.Node): org.w3c.dom.Node
    public final override /*1*/ /*fake_override*/ fun attachShadow(/*0*/ init: org.w3c.dom.ShadowRootInit): org.w3c.dom.ShadowRoot
    public abstract override /*1*/ /*fake_override*/ fun before(/*0*/ vararg nodes: dynamic /*kotlin.Array<out dynamic>*/): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun blur(): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun cloneNode(/*0*/ deep: kotlin.Boolean = ...): org.w3c.dom.Node
    public final override /*1*/ /*fake_override*/ fun closest(/*0*/ selectors: kotlin.String): org.w3c.dom.Element?
    public final override /*1*/ /*fake_override*/ fun compareDocumentPosition(/*0*/ other: org.w3c.dom.Node): kotlin.Short
    public final override /*1*/ /*fake_override*/ fun contains(/*0*/ other: org.w3c.dom.Node?): kotlin.Boolean
    public abstract override /*1*/ /*fake_override*/ fun convertPointFromNode(/*0*/ point: org.w3c.dom.DOMPointInit, /*1*/ from: dynamic, /*2*/ options: org.w3c.dom.ConvertCoordinateOptions = ...): org.w3c.dom.DOMPoint
    public abstract override /*1*/ /*fake_override*/ fun convertQuadFromNode(/*0*/ quad: dynamic, /*1*/ from: dynamic, /*2*/ options: org.w3c.dom.ConvertCoordinateOptions = ...): org.w3c.dom.DOMQuad
    public abstract override /*1*/ /*fake_override*/ fun convertRectFromNode(/*0*/ rect: org.w3c.dom.DOMRectReadOnly, /*1*/ from: dynamic, /*2*/ options: org.w3c.dom.ConvertCoordinateOptions = ...): org.w3c.dom.DOMQuad
    public final override /*1*/ /*fake_override*/ fun dispatchEvent(/*0*/ event: org.w3c.dom.events.Event): kotlin.Boolean
    public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
    public final override /*1*/ /*fake_override*/ fun focus(): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun getAttribute(/*0*/ qualifiedName: kotlin.String): kotlin.String?
    public final override /*1*/ /*fake_override*/ fun getAttributeNS(/*0*/ namespace: kotlin.String?, /*1*/ localName: kotlin.String): kotlin.String?
    public final override /*1*/ /*fake_override*/ fun getAttributeNames(): kotlin.Array<kotlin.String>
    public final override /*1*/ /*fake_override*/ fun getAttributeNode(/*0*/ qualifiedName: kotlin.String): org.w3c.dom.Attr?
    public final override /*1*/ /*fake_override*/ fun getAttributeNodeNS(/*0*/ namespace: kotlin.String?, /*1*/ localName: kotlin.String): org.w3c.dom.Attr?
    public final override /*1*/ /*fake_override*/ fun getBoundingClientRect(): org.w3c.dom.DOMRect
    public abstract override /*1*/ /*fake_override*/ fun getBoxQuads(/*0*/ options: org.w3c.dom.BoxQuadOptions = ...): kotlin.Array<org.w3c.dom.DOMQuad>
    public final override /*1*/ /*fake_override*/ fun getClientRects(): kotlin.Array<org.w3c.dom.DOMRect>
    public final override /*1*/ /*fake_override*/ fun getElementsByClassName(/*0*/ classNames: kotlin.String): org.w3c.dom.HTMLCollection
    public final override /*1*/ /*fake_override*/ fun getElementsByTagName(/*0*/ qualifiedName: kotlin.String): org.w3c.dom.HTMLCollection
    public final override /*1*/ /*fake_override*/ fun getElementsByTagNameNS(/*0*/ namespace: kotlin.String?, /*1*/ localName: kotlin.String): org.w3c.dom.HTMLCollection
    public final override /*1*/ /*fake_override*/ fun getRootNode(/*0*/ options: org.w3c.dom.GetRootNodeOptions = ...): org.w3c.dom.Node
    public final override /*1*/ /*fake_override*/ fun hasAttribute(/*0*/ qualifiedName: kotlin.String): kotlin.Boolean
    public final override /*1*/ /*fake_override*/ fun hasAttributeNS(/*0*/ namespace: kotlin.String?, /*1*/ localName: kotlin.String): kotlin.Boolean
    public final override /*1*/ /*fake_override*/ fun hasAttributes(): kotlin.Boolean
    public final override /*1*/ /*fake_override*/ fun hasChildNodes(): kotlin.Boolean
    public final override /*1*/ /*fake_override*/ fun hasPointerCapture(/*0*/ pointerId: kotlin.Int): kotlin.Boolean
    public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
    public final override /*1*/ /*fake_override*/ fun insertAdjacentElement(/*0*/ where: kotlin.String, /*1*/ element: org.w3c.dom.Element): org.w3c.dom.Element?
    public final override /*1*/ /*fake_override*/ fun insertAdjacentHTML(/*0*/ position: kotlin.String, /*1*/ text: kotlin.String): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun insertAdjacentText(/*0*/ where: kotlin.String, /*1*/ data: kotlin.String): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun insertBefore(/*0*/ node: org.w3c.dom.Node, /*1*/ child: org.w3c.dom.Node?): org.w3c.dom.Node
    public final override /*1*/ /*fake_override*/ fun isDefaultNamespace(/*0*/ namespace: kotlin.String?): kotlin.Boolean
    public final override /*1*/ /*fake_override*/ fun isEqualNode(/*0*/ otherNode: org.w3c.dom.Node?): kotlin.Boolean
    public final override /*1*/ /*fake_override*/ fun isSameNode(/*0*/ otherNode: org.w3c.dom.Node?): kotlin.Boolean
    public final override /*1*/ /*fake_override*/ fun lookupNamespaceURI(/*0*/ prefix: kotlin.String?): kotlin.String?
    public final override /*1*/ /*fake_override*/ fun lookupPrefix(/*0*/ namespace: kotlin.String?): kotlin.String?
    public final override /*1*/ /*fake_override*/ fun matches(/*0*/ selectors: kotlin.String): kotlin.Boolean
    public final override /*1*/ /*fake_override*/ fun normalize(): kotlin.Unit
    public abstract override /*1*/ /*fake_override*/ fun prepend(/*0*/ vararg nodes: dynamic /*kotlin.Array<out dynamic>*/): kotlin.Unit
    public abstract override /*1*/ /*fake_override*/ fun querySelector(/*0*/ selectors: kotlin.String): org.w3c.dom.Element?
    public abstract override /*1*/ /*fake_override*/ fun querySelectorAll(/*0*/ selectors: kotlin.String): org.w3c.dom.NodeList
    public final override /*1*/ /*fake_override*/ fun releasePointerCapture(/*0*/ pointerId: kotlin.Int): kotlin.Unit
    public abstract override /*1*/ /*fake_override*/ fun remove(): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun removeAttribute(/*0*/ qualifiedName: kotlin.String): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun removeAttributeNS(/*0*/ namespace: kotlin.String?, /*1*/ localName: kotlin.String): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun removeAttributeNode(/*0*/ attr: org.w3c.dom.Attr): org.w3c.dom.Attr
    public final override /*1*/ /*fake_override*/ fun removeChild(/*0*/ child: org.w3c.dom.Node): org.w3c.dom.Node
    public final override /*1*/ /*fake_override*/ fun removeEventListener(/*0*/ type: kotlin.String, /*1*/ callback: ((org.w3c.dom.events.Event) -> kotlin.Unit)?, /*2*/ options: dynamic = ...): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun removeEventListener(/*0*/ type: kotlin.String, /*1*/ callback: org.w3c.dom.events.EventListener?, /*2*/ options: dynamic = ...): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun replaceChild(/*0*/ node: org.w3c.dom.Node, /*1*/ child: org.w3c.dom.Node): org.w3c.dom.Node
    public abstract override /*1*/ /*fake_override*/ fun replaceWith(/*0*/ vararg nodes: dynamic /*kotlin.Array<out dynamic>*/): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun requestFullscreen(): kotlin.js.Promise<kotlin.Unit>
    public final override /*1*/ /*fake_override*/ fun scroll(/*0*/ x: kotlin.Double, /*1*/ y: kotlin.Double): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun scroll(/*0*/ options: org.w3c.dom.ScrollToOptions = ...): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun scrollBy(/*0*/ x: kotlin.Double, /*1*/ y: kotlin.Double): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun scrollBy(/*0*/ options: org.w3c.dom.ScrollToOptions = ...): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun scrollIntoView(): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun scrollIntoView(/*0*/ arg: dynamic): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun scrollTo(/*0*/ x: kotlin.Double, /*1*/ y: kotlin.Double): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun scrollTo(/*0*/ options: org.w3c.dom.ScrollToOptions = ...): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun setAttribute(/*0*/ qualifiedName: kotlin.String, /*1*/ value: kotlin.String): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun setAttributeNS(/*0*/ namespace: kotlin.String?, /*1*/ qualifiedName: kotlin.String, /*2*/ value: kotlin.String): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun setAttributeNode(/*0*/ attr: org.w3c.dom.Attr): org.w3c.dom.Attr?
    public final override /*1*/ /*fake_override*/ fun setAttributeNodeNS(/*0*/ attr: org.w3c.dom.Attr): org.w3c.dom.Attr?
    public final override /*1*/ /*fake_override*/ fun setPointerCapture(/*0*/ pointerId: kotlin.Int): kotlin.Unit
    public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
    public final override /*1*/ /*fake_override*/ fun webkitMatchesSelector(/*0*/ selectors: kotlin.String): kotlin.Boolean

    public companion object Companion {
        /*primary*/ private constructor Companion()
        public final val ATTRIBUTE_NODE: kotlin.Short
            public final fun <get-ATTRIBUTE_NODE>(): kotlin.Short
        public final val CDATA_SECTION_NODE: kotlin.Short
            public final fun <get-CDATA_SECTION_NODE>(): kotlin.Short
        public final val COMMENT_NODE: kotlin.Short
            public final fun <get-COMMENT_NODE>(): kotlin.Short
        public final val DOCUMENT_FRAGMENT_NODE: kotlin.Short
            public final fun <get-DOCUMENT_FRAGMENT_NODE>(): kotlin.Short
        public final val DOCUMENT_NODE: kotlin.Short
            public final fun <get-DOCUMENT_NODE>(): kotlin.Short
        public final val DOCUMENT_POSITION_CONTAINED_BY: kotlin.Short
            public final fun <get-DOCUMENT_POSITION_CONTAINED_BY>(): kotlin.Short
        public final val DOCUMENT_POSITION_CONTAINS: kotlin.Short
            public final fun <get-DOCUMENT_POSITION_CONTAINS>(): kotlin.Short
        public final val DOCUMENT_POSITION_DISCONNECTED: kotlin.Short
            public final fun <get-DOCUMENT_POSITION_DISCONNECTED>(): kotlin.Short
        public final val DOCUMENT_POSITION_FOLLOWING: kotlin.Short
            public final fun <get-DOCUMENT_POSITION_FOLLOWING>(): kotlin.Short
        public final val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: kotlin.Short
            public final fun <get-DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC>(): kotlin.Short
        public final val DOCUMENT_POSITION_PRECEDING: kotlin.Short
            public final fun <get-DOCUMENT_POSITION_PRECEDING>(): kotlin.Short
        public final val DOCUMENT_TYPE_NODE: kotlin.Short
            public final fun <get-DOCUMENT_TYPE_NODE>(): kotlin.Short
        public final val ELEMENT_NODE: kotlin.Short
            public final fun <get-ELEMENT_NODE>(): kotlin.Short
        public final val ENTITY_NODE: kotlin.Short
            public final fun <get-ENTITY_NODE>(): kotlin.Short
        public final val ENTITY_REFERENCE_NODE: kotlin.Short
            public final fun <get-ENTITY_REFERENCE_NODE>(): kotlin.Short
        public final val NOTATION_NODE: kotlin.Short
            public final fun <get-NOTATION_NODE>(): kotlin.Short
        public final val PROCESSING_INSTRUCTION_NODE: kotlin.Short
            public final fun <get-PROCESSING_INSTRUCTION_NODE>(): kotlin.Short
        public final val SVG_SPREADMETHOD_PAD: kotlin.Short
            public final fun <get-SVG_SPREADMETHOD_PAD>(): kotlin.Short
        public final val SVG_SPREADMETHOD_REFLECT: kotlin.Short
            public final fun <get-SVG_SPREADMETHOD_REFLECT>(): kotlin.Short
        public final val SVG_SPREADMETHOD_REPEAT: kotlin.Short
            public final fun <get-SVG_SPREADMETHOD_REPEAT>(): kotlin.Short
        public final val SVG_SPREADMETHOD_UNKNOWN: kotlin.Short
            public final fun <get-SVG_SPREADMETHOD_UNKNOWN>(): kotlin.Short
        public final val SVG_UNIT_TYPE_OBJECTBOUNDINGBOX: kotlin.Short
            public final fun <get-SVG_UNIT_TYPE_OBJECTBOUNDINGBOX>(): kotlin.Short
        public final val SVG_UNIT_TYPE_UNKNOWN: kotlin.Short
            public final fun <get-SVG_UNIT_TYPE_UNKNOWN>(): kotlin.Short
        public final val SVG_UNIT_TYPE_USERSPACEONUSE: kotlin.Short
            public final fun <get-SVG_UNIT_TYPE_USERSPACEONUSE>(): kotlin.Short
        public final val TEXT_NODE: kotlin.Short
            public final fun <get-TEXT_NODE>(): kotlin.Short
        public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
        public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
        public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
    }
}

public abstract external class SVGMarkerElement : org.w3c.dom.svg.SVGElement, org.w3c.dom.svg.SVGFitToViewBox {
    /*primary*/ public constructor SVGMarkerElement()
    public open override /*1*/ /*fake_override*/ val assignedSlot: org.w3c.dom.HTMLSlotElement?
        public open override /*1*/ /*fake_override*/ fun <get-assignedSlot>(): org.w3c.dom.HTMLSlotElement?
    public open override /*1*/ /*fake_override*/ val attributes: org.w3c.dom.NamedNodeMap
        public open override /*1*/ /*fake_override*/ fun <get-attributes>(): org.w3c.dom.NamedNodeMap
    public open override /*1*/ /*fake_override*/ val baseURI: kotlin.String
        public open override /*1*/ /*fake_override*/ fun <get-baseURI>(): kotlin.String
    public abstract override /*1*/ /*fake_override*/ val childElementCount: kotlin.Int
        public abstract override /*1*/ /*fake_override*/ fun <get-childElementCount>(): kotlin.Int
    public open override /*1*/ /*fake_override*/ val childNodes: org.w3c.dom.NodeList
        public open override /*1*/ /*fake_override*/ fun <get-childNodes>(): org.w3c.dom.NodeList
    public abstract override /*1*/ /*fake_override*/ val children: org.w3c.dom.HTMLCollection
        public abstract override /*1*/ /*fake_override*/ fun <get-children>(): org.w3c.dom.HTMLCollection
    public open override /*1*/ /*fake_override*/ val classList: org.w3c.dom.DOMTokenList
        public open override /*1*/ /*fake_override*/ fun <get-classList>(): org.w3c.dom.DOMTokenList
    public open override /*1*/ /*fake_override*/ var className: kotlin.String
        public open override /*1*/ /*fake_override*/ fun <get-className>(): kotlin.String
        public open override /*1*/ /*fake_override*/ fun <set-className>(/*0*/ <set-?>: kotlin.String): kotlin.Unit
    public open override /*1*/ /*fake_override*/ val clientHeight: kotlin.Int
        public open override /*1*/ /*fake_override*/ fun <get-clientHeight>(): kotlin.Int
    public open override /*1*/ /*fake_override*/ val clientLeft: kotlin.Int
        public open override /*1*/ /*fake_override*/ fun <get-clientLeft>(): kotlin.Int
    public open override /*1*/ /*fake_override*/ val clientTop: kotlin.Int
        public open override /*1*/ /*fake_override*/ fun <get-clientTop>(): kotlin.Int
    public open override /*1*/ /*fake_override*/ val clientWidth: kotlin.Int
        public open override /*1*/ /*fake_override*/ fun <get-clientWidth>(): kotlin.Int
    public open override /*1*/ /*fake_override*/ val correspondingElement: org.w3c.dom.svg.SVGElement?
        public open override /*1*/ /*fake_override*/ fun <get-correspondingElement>(): org.w3c.dom.svg.SVGElement?
    public open override /*1*/ /*fake_override*/ val correspondingUseElement: org.w3c.dom.svg.SVGUseElement?
        public open override /*1*/ /*fake_override*/ fun <get-correspondingUseElement>(): org.w3c.dom.svg.SVGUseElement?
    public open override /*1*/ /*fake_override*/ val dataset: org.w3c.dom.DOMStringMap
        public open override /*1*/ /*fake_override*/ fun <get-dataset>(): org.w3c.dom.DOMStringMap
    public open override /*1*/ /*fake_override*/ val firstChild: org.w3c.dom.Node?
        public open override /*1*/ /*fake_override*/ fun <get-firstChild>(): org.w3c.dom.Node?
    public open override /*1*/ /*fake_override*/ val firstElementChild: org.w3c.dom.Element?
        public open override /*1*/ /*fake_override*/ fun <get-firstElementChild>(): org.w3c.dom.Element?
    public open override /*1*/ /*fake_override*/ var id: kotlin.String
        public open override /*1*/ /*fake_override*/ fun <get-id>(): kotlin.String
        public open override /*1*/ /*fake_override*/ fun <set-id>(/*0*/ <set-?>: kotlin.String): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var innerHTML: kotlin.String
        public open override /*1*/ /*fake_override*/ fun <get-innerHTML>(): kotlin.String
        public open override /*1*/ /*fake_override*/ fun <set-innerHTML>(/*0*/ <set-?>: kotlin.String): kotlin.Unit
    public open override /*1*/ /*fake_override*/ val isConnected: kotlin.Boolean
        public open override /*1*/ /*fake_override*/ fun <get-isConnected>(): kotlin.Boolean
    public open override /*1*/ /*fake_override*/ val lastChild: org.w3c.dom.Node?
        public open override /*1*/ /*fake_override*/ fun <get-lastChild>(): org.w3c.dom.Node?
    public open override /*1*/ /*fake_override*/ val lastElementChild: org.w3c.dom.Element?
        public open override /*1*/ /*fake_override*/ fun <get-lastElementChild>(): org.w3c.dom.Element?
    public open override /*1*/ /*fake_override*/ val localName: kotlin.String
        public open override /*1*/ /*fake_override*/ fun <get-localName>(): kotlin.String
    public open val markerHeight: org.w3c.dom.svg.SVGAnimatedLength
        public open fun <get-markerHeight>(): org.w3c.dom.svg.SVGAnimatedLength
    public open val markerUnits: org.w3c.dom.svg.SVGAnimatedEnumeration
        public open fun <get-markerUnits>(): org.w3c.dom.svg.SVGAnimatedEnumeration
    public open val markerWidth: org.w3c.dom.svg.SVGAnimatedLength
        public open fun <get-markerWidth>(): org.w3c.dom.svg.SVGAnimatedLength
    public open override /*1*/ /*fake_override*/ val namespaceURI: kotlin.String?
        public open override /*1*/ /*fake_override*/ fun <get-namespaceURI>(): kotlin.String?
    public open override /*1*/ /*fake_override*/ val nextElementSibling: org.w3c.dom.Element?
        public open override /*1*/ /*fake_override*/ fun <get-nextElementSibling>(): org.w3c.dom.Element?
    public open override /*1*/ /*fake_override*/ val nextSibling: org.w3c.dom.Node?
        public open override /*1*/ /*fake_override*/ fun <get-nextSibling>(): org.w3c.dom.Node?
    public open override /*1*/ /*fake_override*/ val nodeName: kotlin.String
        public open override /*1*/ /*fake_override*/ fun <get-nodeName>(): kotlin.String
    public open override /*1*/ /*fake_override*/ val nodeType: kotlin.Short
        public open override /*1*/ /*fake_override*/ fun <get-nodeType>(): kotlin.Short
    public open override /*1*/ /*fake_override*/ var nodeValue: kotlin.String?
        public open override /*1*/ /*fake_override*/ fun <get-nodeValue>(): kotlin.String?
        public open override /*1*/ /*fake_override*/ fun <set-nodeValue>(/*0*/ <set-?>: kotlin.String?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onabort: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onabort>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onabort>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onblur: ((org.w3c.dom.events.FocusEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onblur>(): ((org.w3c.dom.events.FocusEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onblur>(/*0*/ value: ((org.w3c.dom.events.FocusEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var oncancel: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-oncancel>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-oncancel>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var oncanplay: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-oncanplay>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-oncanplay>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var oncanplaythrough: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-oncanplaythrough>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-oncanplaythrough>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onchange: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onchange>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onchange>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onclick: ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onclick>(): ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onclick>(/*0*/ value: ((org.w3c.dom.events.MouseEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onclose: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onclose>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onclose>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var oncontextmenu: ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-oncontextmenu>(): ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-oncontextmenu>(/*0*/ value: ((org.w3c.dom.events.MouseEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var oncuechange: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-oncuechange>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-oncuechange>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ondblclick: ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ondblclick>(): ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ondblclick>(/*0*/ value: ((org.w3c.dom.events.MouseEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ondrag: ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ondrag>(): ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ondrag>(/*0*/ value: ((org.w3c.dom.DragEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ondragend: ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ondragend>(): ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ondragend>(/*0*/ value: ((org.w3c.dom.DragEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ondragenter: ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ondragenter>(): ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ondragenter>(/*0*/ value: ((org.w3c.dom.DragEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ondragexit: ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ondragexit>(): ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ondragexit>(/*0*/ value: ((org.w3c.dom.DragEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ondragleave: ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ondragleave>(): ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ondragleave>(/*0*/ value: ((org.w3c.dom.DragEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ondragover: ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ondragover>(): ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ondragover>(/*0*/ value: ((org.w3c.dom.DragEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ondragstart: ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ondragstart>(): ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ondragstart>(/*0*/ value: ((org.w3c.dom.DragEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ondrop: ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ondrop>(): ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ondrop>(/*0*/ value: ((org.w3c.dom.DragEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ondurationchange: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ondurationchange>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ondurationchange>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onemptied: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onemptied>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onemptied>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onended: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onended>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onended>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onerror: ((dynamic, kotlin.String, kotlin.Int, kotlin.Int, kotlin.Any?) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onerror>(): ((dynamic, kotlin.String, kotlin.Int, kotlin.Int, kotlin.Any?) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onerror>(/*0*/ value: ((dynamic, kotlin.String, kotlin.Int, kotlin.Int, kotlin.Any?) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onfocus: ((org.w3c.dom.events.FocusEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onfocus>(): ((org.w3c.dom.events.FocusEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onfocus>(/*0*/ value: ((org.w3c.dom.events.FocusEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ongotpointercapture: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ongotpointercapture>(): ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ongotpointercapture>(/*0*/ value: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var oninput: ((org.w3c.dom.events.InputEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-oninput>(): ((org.w3c.dom.events.InputEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-oninput>(/*0*/ value: ((org.w3c.dom.events.InputEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var oninvalid: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-oninvalid>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-oninvalid>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onkeydown: ((org.w3c.dom.events.KeyboardEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onkeydown>(): ((org.w3c.dom.events.KeyboardEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onkeydown>(/*0*/ value: ((org.w3c.dom.events.KeyboardEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onkeypress: ((org.w3c.dom.events.KeyboardEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onkeypress>(): ((org.w3c.dom.events.KeyboardEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onkeypress>(/*0*/ value: ((org.w3c.dom.events.KeyboardEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onkeyup: ((org.w3c.dom.events.KeyboardEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onkeyup>(): ((org.w3c.dom.events.KeyboardEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onkeyup>(/*0*/ value: ((org.w3c.dom.events.KeyboardEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onload: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onload>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onload>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onloadeddata: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onloadeddata>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onloadeddata>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onloadedmetadata: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onloadedmetadata>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onloadedmetadata>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onloadend: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onloadend>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onloadend>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onloadstart: ((org.w3c.xhr.ProgressEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onloadstart>(): ((org.w3c.xhr.ProgressEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onloadstart>(/*0*/ value: ((org.w3c.xhr.ProgressEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onlostpointercapture: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onlostpointercapture>(): ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onlostpointercapture>(/*0*/ value: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onmousedown: ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onmousedown>(): ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onmousedown>(/*0*/ value: ((org.w3c.dom.events.MouseEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onmouseenter: ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onmouseenter>(): ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onmouseenter>(/*0*/ value: ((org.w3c.dom.events.MouseEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onmouseleave: ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onmouseleave>(): ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onmouseleave>(/*0*/ value: ((org.w3c.dom.events.MouseEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onmousemove: ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onmousemove>(): ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onmousemove>(/*0*/ value: ((org.w3c.dom.events.MouseEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onmouseout: ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onmouseout>(): ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onmouseout>(/*0*/ value: ((org.w3c.dom.events.MouseEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onmouseover: ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onmouseover>(): ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onmouseover>(/*0*/ value: ((org.w3c.dom.events.MouseEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onmouseup: ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onmouseup>(): ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onmouseup>(/*0*/ value: ((org.w3c.dom.events.MouseEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onpause: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onpause>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onpause>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onplay: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onplay>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onplay>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onplaying: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onplaying>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onplaying>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onpointercancel: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onpointercancel>(): ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onpointercancel>(/*0*/ value: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onpointerdown: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onpointerdown>(): ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onpointerdown>(/*0*/ value: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onpointerenter: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onpointerenter>(): ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onpointerenter>(/*0*/ value: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onpointerleave: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onpointerleave>(): ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onpointerleave>(/*0*/ value: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onpointermove: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onpointermove>(): ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onpointermove>(/*0*/ value: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onpointerout: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onpointerout>(): ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onpointerout>(/*0*/ value: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onpointerover: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onpointerover>(): ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onpointerover>(/*0*/ value: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onpointerup: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onpointerup>(): ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onpointerup>(/*0*/ value: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onprogress: ((org.w3c.xhr.ProgressEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onprogress>(): ((org.w3c.xhr.ProgressEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onprogress>(/*0*/ value: ((org.w3c.xhr.ProgressEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onratechange: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onratechange>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onratechange>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onreset: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onreset>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onreset>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onresize: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onresize>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onresize>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onscroll: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onscroll>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onscroll>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onseeked: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onseeked>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onseeked>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onseeking: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onseeking>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onseeking>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onselect: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onselect>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onselect>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onshow: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onshow>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onshow>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onstalled: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onstalled>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onstalled>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onsubmit: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onsubmit>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onsubmit>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onsuspend: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onsuspend>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onsuspend>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ontimeupdate: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ontimeupdate>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ontimeupdate>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ontoggle: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ontoggle>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ontoggle>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onvolumechange: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onvolumechange>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onvolumechange>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onwaiting: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onwaiting>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onwaiting>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onwheel: ((org.w3c.dom.events.WheelEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onwheel>(): ((org.w3c.dom.events.WheelEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onwheel>(/*0*/ value: ((org.w3c.dom.events.WheelEvent) -> dynamic)?): kotlin.Unit
    public open var orient: kotlin.String
        public open fun <get-orient>(): kotlin.String
        public open fun <set-orient>(/*0*/ <set-?>: kotlin.String): kotlin.Unit
    public open val orientAngle: org.w3c.dom.svg.SVGAnimatedAngle
        public open fun <get-orientAngle>(): org.w3c.dom.svg.SVGAnimatedAngle
    public open val orientType: org.w3c.dom.svg.SVGAnimatedEnumeration
        public open fun <get-orientType>(): org.w3c.dom.svg.SVGAnimatedEnumeration
    public open override /*1*/ /*fake_override*/ var outerHTML: kotlin.String
        public open override /*1*/ /*fake_override*/ fun <get-outerHTML>(): kotlin.String
        public open override /*1*/ /*fake_override*/ fun <set-outerHTML>(/*0*/ <set-?>: kotlin.String): kotlin.Unit
    public open override /*1*/ /*fake_override*/ val ownerDocument: org.w3c.dom.Document?
        public open override /*1*/ /*fake_override*/ fun <get-ownerDocument>(): org.w3c.dom.Document?
    public open override /*1*/ /*fake_override*/ val ownerSVGElement: org.w3c.dom.svg.SVGSVGElement?
        public open override /*1*/ /*fake_override*/ fun <get-ownerSVGElement>(): org.w3c.dom.svg.SVGSVGElement?
    public open override /*1*/ /*fake_override*/ val parentElement: org.w3c.dom.Element?
        public open override /*1*/ /*fake_override*/ fun <get-parentElement>(): org.w3c.dom.Element?
    public open override /*1*/ /*fake_override*/ val parentNode: org.w3c.dom.Node?
        public open override /*1*/ /*fake_override*/ fun <get-parentNode>(): org.w3c.dom.Node?
    public open override /*1*/ /*fake_override*/ val prefix: kotlin.String?
        public open override /*1*/ /*fake_override*/ fun <get-prefix>(): kotlin.String?
    public abstract override /*1*/ /*fake_override*/ val preserveAspectRatio: org.w3c.dom.svg.SVGAnimatedPreserveAspectRatio
        public abstract override /*1*/ /*fake_override*/ fun <get-preserveAspectRatio>(): org.w3c.dom.svg.SVGAnimatedPreserveAspectRatio
    public open override /*1*/ /*fake_override*/ val previousElementSibling: org.w3c.dom.Element?
        public open override /*1*/ /*fake_override*/ fun <get-previousElementSibling>(): org.w3c.dom.Element?
    public open override /*1*/ /*fake_override*/ val previousSibling: org.w3c.dom.Node?
        public open override /*1*/ /*fake_override*/ fun <get-previousSibling>(): org.w3c.dom.Node?
    public open val refX: org.w3c.dom.svg.SVGAnimatedLength
        public open fun <get-refX>(): org.w3c.dom.svg.SVGAnimatedLength
    public open val refY: org.w3c.dom.svg.SVGAnimatedLength
        public open fun <get-refY>(): org.w3c.dom.svg.SVGAnimatedLength
    public open override /*1*/ /*fake_override*/ val scrollHeight: kotlin.Int
        public open override /*1*/ /*fake_override*/ fun <get-scrollHeight>(): kotlin.Int
    public open override /*1*/ /*fake_override*/ var scrollLeft: kotlin.Double
        public open override /*1*/ /*fake_override*/ fun <get-scrollLeft>(): kotlin.Double
        public open override /*1*/ /*fake_override*/ fun <set-scrollLeft>(/*0*/ <set-?>: kotlin.Double): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var scrollTop: kotlin.Double
        public open override /*1*/ /*fake_override*/ fun <get-scrollTop>(): kotlin.Double
        public open override /*1*/ /*fake_override*/ fun <set-scrollTop>(/*0*/ <set-?>: kotlin.Double): kotlin.Unit
    public open override /*1*/ /*fake_override*/ val scrollWidth: kotlin.Int
        public open override /*1*/ /*fake_override*/ fun <get-scrollWidth>(): kotlin.Int
    public open override /*1*/ /*fake_override*/ val shadowRoot: org.w3c.dom.ShadowRoot?
        public open override /*1*/ /*fake_override*/ fun <get-shadowRoot>(): org.w3c.dom.ShadowRoot?
    public open override /*1*/ /*fake_override*/ var slot: kotlin.String
        public open override /*1*/ /*fake_override*/ fun <get-slot>(): kotlin.String
        public open override /*1*/ /*fake_override*/ fun <set-slot>(/*0*/ <set-?>: kotlin.String): kotlin.Unit
    public abstract override /*1*/ /*fake_override*/ val style: org.w3c.dom.css.CSSStyleDeclaration
        public abstract override /*1*/ /*fake_override*/ fun <get-style>(): org.w3c.dom.css.CSSStyleDeclaration
    public open override /*1*/ /*fake_override*/ var tabIndex: kotlin.Int
        public open override /*1*/ /*fake_override*/ fun <get-tabIndex>(): kotlin.Int
        public open override /*1*/ /*fake_override*/ fun <set-tabIndex>(/*0*/ <set-?>: kotlin.Int): kotlin.Unit
    public open override /*1*/ /*fake_override*/ val tagName: kotlin.String
        public open override /*1*/ /*fake_override*/ fun <get-tagName>(): kotlin.String
    public open override /*1*/ /*fake_override*/ var textContent: kotlin.String?
        public open override /*1*/ /*fake_override*/ fun <get-textContent>(): kotlin.String?
        public open override /*1*/ /*fake_override*/ fun <set-textContent>(/*0*/ <set-?>: kotlin.String?): kotlin.Unit
    public abstract override /*1*/ /*fake_override*/ val viewBox: org.w3c.dom.svg.SVGAnimatedRect
        public abstract override /*1*/ /*fake_override*/ fun <get-viewBox>(): org.w3c.dom.svg.SVGAnimatedRect
    public open override /*1*/ /*fake_override*/ val viewportElement: org.w3c.dom.svg.SVGElement?
        public open override /*1*/ /*fake_override*/ fun <get-viewportElement>(): org.w3c.dom.svg.SVGElement?
    public final override /*1*/ /*fake_override*/ fun addEventListener(/*0*/ type: kotlin.String, /*1*/ callback: ((org.w3c.dom.events.Event) -> kotlin.Unit)?, /*2*/ options: dynamic = ...): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun addEventListener(/*0*/ type: kotlin.String, /*1*/ callback: org.w3c.dom.events.EventListener?, /*2*/ options: dynamic = ...): kotlin.Unit
    public abstract override /*1*/ /*fake_override*/ fun after(/*0*/ vararg nodes: dynamic /*kotlin.Array<out dynamic>*/): kotlin.Unit
    public abstract override /*1*/ /*fake_override*/ fun append(/*0*/ vararg nodes: dynamic /*kotlin.Array<out dynamic>*/): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun appendChild(/*0*/ node: org.w3c.dom.Node): org.w3c.dom.Node
    public final override /*1*/ /*fake_override*/ fun attachShadow(/*0*/ init: org.w3c.dom.ShadowRootInit): org.w3c.dom.ShadowRoot
    public abstract override /*1*/ /*fake_override*/ fun before(/*0*/ vararg nodes: dynamic /*kotlin.Array<out dynamic>*/): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun blur(): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun cloneNode(/*0*/ deep: kotlin.Boolean = ...): org.w3c.dom.Node
    public final override /*1*/ /*fake_override*/ fun closest(/*0*/ selectors: kotlin.String): org.w3c.dom.Element?
    public final override /*1*/ /*fake_override*/ fun compareDocumentPosition(/*0*/ other: org.w3c.dom.Node): kotlin.Short
    public final override /*1*/ /*fake_override*/ fun contains(/*0*/ other: org.w3c.dom.Node?): kotlin.Boolean
    public abstract override /*1*/ /*fake_override*/ fun convertPointFromNode(/*0*/ point: org.w3c.dom.DOMPointInit, /*1*/ from: dynamic, /*2*/ options: org.w3c.dom.ConvertCoordinateOptions = ...): org.w3c.dom.DOMPoint
    public abstract override /*1*/ /*fake_override*/ fun convertQuadFromNode(/*0*/ quad: dynamic, /*1*/ from: dynamic, /*2*/ options: org.w3c.dom.ConvertCoordinateOptions = ...): org.w3c.dom.DOMQuad
    public abstract override /*1*/ /*fake_override*/ fun convertRectFromNode(/*0*/ rect: org.w3c.dom.DOMRectReadOnly, /*1*/ from: dynamic, /*2*/ options: org.w3c.dom.ConvertCoordinateOptions = ...): org.w3c.dom.DOMQuad
    public final override /*1*/ /*fake_override*/ fun dispatchEvent(/*0*/ event: org.w3c.dom.events.Event): kotlin.Boolean
    public open override /*2*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
    public final override /*1*/ /*fake_override*/ fun focus(): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun getAttribute(/*0*/ qualifiedName: kotlin.String): kotlin.String?
    public final override /*1*/ /*fake_override*/ fun getAttributeNS(/*0*/ namespace: kotlin.String?, /*1*/ localName: kotlin.String): kotlin.String?
    public final override /*1*/ /*fake_override*/ fun getAttributeNames(): kotlin.Array<kotlin.String>
    public final override /*1*/ /*fake_override*/ fun getAttributeNode(/*0*/ qualifiedName: kotlin.String): org.w3c.dom.Attr?
    public final override /*1*/ /*fake_override*/ fun getAttributeNodeNS(/*0*/ namespace: kotlin.String?, /*1*/ localName: kotlin.String): org.w3c.dom.Attr?
    public final override /*1*/ /*fake_override*/ fun getBoundingClientRect(): org.w3c.dom.DOMRect
    public abstract override /*1*/ /*fake_override*/ fun getBoxQuads(/*0*/ options: org.w3c.dom.BoxQuadOptions = ...): kotlin.Array<org.w3c.dom.DOMQuad>
    public final override /*1*/ /*fake_override*/ fun getClientRects(): kotlin.Array<org.w3c.dom.DOMRect>
    public final override /*1*/ /*fake_override*/ fun getElementsByClassName(/*0*/ classNames: kotlin.String): org.w3c.dom.HTMLCollection
    public final override /*1*/ /*fake_override*/ fun getElementsByTagName(/*0*/ qualifiedName: kotlin.String): org.w3c.dom.HTMLCollection
    public final override /*1*/ /*fake_override*/ fun getElementsByTagNameNS(/*0*/ namespace: kotlin.String?, /*1*/ localName: kotlin.String): org.w3c.dom.HTMLCollection
    public final override /*1*/ /*fake_override*/ fun getRootNode(/*0*/ options: org.w3c.dom.GetRootNodeOptions = ...): org.w3c.dom.Node
    public final override /*1*/ /*fake_override*/ fun hasAttribute(/*0*/ qualifiedName: kotlin.String): kotlin.Boolean
    public final override /*1*/ /*fake_override*/ fun hasAttributeNS(/*0*/ namespace: kotlin.String?, /*1*/ localName: kotlin.String): kotlin.Boolean
    public final override /*1*/ /*fake_override*/ fun hasAttributes(): kotlin.Boolean
    public final override /*1*/ /*fake_override*/ fun hasChildNodes(): kotlin.Boolean
    public final override /*1*/ /*fake_override*/ fun hasPointerCapture(/*0*/ pointerId: kotlin.Int): kotlin.Boolean
    public open override /*2*/ /*fake_override*/ fun hashCode(): kotlin.Int
    public final override /*1*/ /*fake_override*/ fun insertAdjacentElement(/*0*/ where: kotlin.String, /*1*/ element: org.w3c.dom.Element): org.w3c.dom.Element?
    public final override /*1*/ /*fake_override*/ fun insertAdjacentHTML(/*0*/ position: kotlin.String, /*1*/ text: kotlin.String): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun insertAdjacentText(/*0*/ where: kotlin.String, /*1*/ data: kotlin.String): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun insertBefore(/*0*/ node: org.w3c.dom.Node, /*1*/ child: org.w3c.dom.Node?): org.w3c.dom.Node
    public final override /*1*/ /*fake_override*/ fun isDefaultNamespace(/*0*/ namespace: kotlin.String?): kotlin.Boolean
    public final override /*1*/ /*fake_override*/ fun isEqualNode(/*0*/ otherNode: org.w3c.dom.Node?): kotlin.Boolean
    public final override /*1*/ /*fake_override*/ fun isSameNode(/*0*/ otherNode: org.w3c.dom.Node?): kotlin.Boolean
    public final override /*1*/ /*fake_override*/ fun lookupNamespaceURI(/*0*/ prefix: kotlin.String?): kotlin.String?
    public final override /*1*/ /*fake_override*/ fun lookupPrefix(/*0*/ namespace: kotlin.String?): kotlin.String?
    public final override /*1*/ /*fake_override*/ fun matches(/*0*/ selectors: kotlin.String): kotlin.Boolean
    public final override /*1*/ /*fake_override*/ fun normalize(): kotlin.Unit
    public abstract override /*1*/ /*fake_override*/ fun prepend(/*0*/ vararg nodes: dynamic /*kotlin.Array<out dynamic>*/): kotlin.Unit
    public abstract override /*1*/ /*fake_override*/ fun querySelector(/*0*/ selectors: kotlin.String): org.w3c.dom.Element?
    public abstract override /*1*/ /*fake_override*/ fun querySelectorAll(/*0*/ selectors: kotlin.String): org.w3c.dom.NodeList
    public final override /*1*/ /*fake_override*/ fun releasePointerCapture(/*0*/ pointerId: kotlin.Int): kotlin.Unit
    public abstract override /*1*/ /*fake_override*/ fun remove(): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun removeAttribute(/*0*/ qualifiedName: kotlin.String): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun removeAttributeNS(/*0*/ namespace: kotlin.String?, /*1*/ localName: kotlin.String): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun removeAttributeNode(/*0*/ attr: org.w3c.dom.Attr): org.w3c.dom.Attr
    public final override /*1*/ /*fake_override*/ fun removeChild(/*0*/ child: org.w3c.dom.Node): org.w3c.dom.Node
    public final override /*1*/ /*fake_override*/ fun removeEventListener(/*0*/ type: kotlin.String, /*1*/ callback: ((org.w3c.dom.events.Event) -> kotlin.Unit)?, /*2*/ options: dynamic = ...): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun removeEventListener(/*0*/ type: kotlin.String, /*1*/ callback: org.w3c.dom.events.EventListener?, /*2*/ options: dynamic = ...): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun replaceChild(/*0*/ node: org.w3c.dom.Node, /*1*/ child: org.w3c.dom.Node): org.w3c.dom.Node
    public abstract override /*1*/ /*fake_override*/ fun replaceWith(/*0*/ vararg nodes: dynamic /*kotlin.Array<out dynamic>*/): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun requestFullscreen(): kotlin.js.Promise<kotlin.Unit>
    public final override /*1*/ /*fake_override*/ fun scroll(/*0*/ x: kotlin.Double, /*1*/ y: kotlin.Double): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun scroll(/*0*/ options: org.w3c.dom.ScrollToOptions = ...): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun scrollBy(/*0*/ x: kotlin.Double, /*1*/ y: kotlin.Double): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun scrollBy(/*0*/ options: org.w3c.dom.ScrollToOptions = ...): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun scrollIntoView(): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun scrollIntoView(/*0*/ arg: dynamic): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun scrollTo(/*0*/ x: kotlin.Double, /*1*/ y: kotlin.Double): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun scrollTo(/*0*/ options: org.w3c.dom.ScrollToOptions = ...): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun setAttribute(/*0*/ qualifiedName: kotlin.String, /*1*/ value: kotlin.String): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun setAttributeNS(/*0*/ namespace: kotlin.String?, /*1*/ qualifiedName: kotlin.String, /*2*/ value: kotlin.String): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun setAttributeNode(/*0*/ attr: org.w3c.dom.Attr): org.w3c.dom.Attr?
    public final override /*1*/ /*fake_override*/ fun setAttributeNodeNS(/*0*/ attr: org.w3c.dom.Attr): org.w3c.dom.Attr?
    public final fun setOrientToAngle(/*0*/ angle: org.w3c.dom.svg.SVGAngle): kotlin.Unit
    public final fun setOrientToAuto(): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun setPointerCapture(/*0*/ pointerId: kotlin.Int): kotlin.Unit
    public open override /*2*/ /*fake_override*/ fun toString(): kotlin.String
    public final override /*1*/ /*fake_override*/ fun webkitMatchesSelector(/*0*/ selectors: kotlin.String): kotlin.Boolean

    public companion object Companion {
        /*primary*/ private constructor Companion()
        public final val ATTRIBUTE_NODE: kotlin.Short
            public final fun <get-ATTRIBUTE_NODE>(): kotlin.Short
        public final val CDATA_SECTION_NODE: kotlin.Short
            public final fun <get-CDATA_SECTION_NODE>(): kotlin.Short
        public final val COMMENT_NODE: kotlin.Short
            public final fun <get-COMMENT_NODE>(): kotlin.Short
        public final val DOCUMENT_FRAGMENT_NODE: kotlin.Short
            public final fun <get-DOCUMENT_FRAGMENT_NODE>(): kotlin.Short
        public final val DOCUMENT_NODE: kotlin.Short
            public final fun <get-DOCUMENT_NODE>(): kotlin.Short
        public final val DOCUMENT_POSITION_CONTAINED_BY: kotlin.Short
            public final fun <get-DOCUMENT_POSITION_CONTAINED_BY>(): kotlin.Short
        public final val DOCUMENT_POSITION_CONTAINS: kotlin.Short
            public final fun <get-DOCUMENT_POSITION_CONTAINS>(): kotlin.Short
        public final val DOCUMENT_POSITION_DISCONNECTED: kotlin.Short
            public final fun <get-DOCUMENT_POSITION_DISCONNECTED>(): kotlin.Short
        public final val DOCUMENT_POSITION_FOLLOWING: kotlin.Short
            public final fun <get-DOCUMENT_POSITION_FOLLOWING>(): kotlin.Short
        public final val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: kotlin.Short
            public final fun <get-DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC>(): kotlin.Short
        public final val DOCUMENT_POSITION_PRECEDING: kotlin.Short
            public final fun <get-DOCUMENT_POSITION_PRECEDING>(): kotlin.Short
        public final val DOCUMENT_TYPE_NODE: kotlin.Short
            public final fun <get-DOCUMENT_TYPE_NODE>(): kotlin.Short
        public final val ELEMENT_NODE: kotlin.Short
            public final fun <get-ELEMENT_NODE>(): kotlin.Short
        public final val ENTITY_NODE: kotlin.Short
            public final fun <get-ENTITY_NODE>(): kotlin.Short
        public final val ENTITY_REFERENCE_NODE: kotlin.Short
            public final fun <get-ENTITY_REFERENCE_NODE>(): kotlin.Short
        public final val NOTATION_NODE: kotlin.Short
            public final fun <get-NOTATION_NODE>(): kotlin.Short
        public final val PROCESSING_INSTRUCTION_NODE: kotlin.Short
            public final fun <get-PROCESSING_INSTRUCTION_NODE>(): kotlin.Short
        public final val SVG_MARKERUNITS_STROKEWIDTH: kotlin.Short
            public final fun <get-SVG_MARKERUNITS_STROKEWIDTH>(): kotlin.Short
        public final val SVG_MARKERUNITS_UNKNOWN: kotlin.Short
            public final fun <get-SVG_MARKERUNITS_UNKNOWN>(): kotlin.Short
        public final val SVG_MARKERUNITS_USERSPACEONUSE: kotlin.Short
            public final fun <get-SVG_MARKERUNITS_USERSPACEONUSE>(): kotlin.Short
        public final val SVG_MARKER_ORIENT_ANGLE: kotlin.Short
            public final fun <get-SVG_MARKER_ORIENT_ANGLE>(): kotlin.Short
        public final val SVG_MARKER_ORIENT_AUTO: kotlin.Short
            public final fun <get-SVG_MARKER_ORIENT_AUTO>(): kotlin.Short
        public final val SVG_MARKER_ORIENT_UNKNOWN: kotlin.Short
            public final fun <get-SVG_MARKER_ORIENT_UNKNOWN>(): kotlin.Short
        public final val TEXT_NODE: kotlin.Short
            public final fun <get-TEXT_NODE>(): kotlin.Short
        public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
        public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
        public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
    }
}

public abstract external class SVGMeshElement : org.w3c.dom.svg.SVGGeometryElement, org.w3c.dom.svg.SVGURIReference {
    /*primary*/ public constructor SVGMeshElement()
    public open override /*1*/ /*fake_override*/ val assignedSlot: org.w3c.dom.HTMLSlotElement?
        public open override /*1*/ /*fake_override*/ fun <get-assignedSlot>(): org.w3c.dom.HTMLSlotElement?
    public open override /*1*/ /*fake_override*/ val attributes: org.w3c.dom.NamedNodeMap
        public open override /*1*/ /*fake_override*/ fun <get-attributes>(): org.w3c.dom.NamedNodeMap
    public open override /*1*/ /*fake_override*/ val baseURI: kotlin.String
        public open override /*1*/ /*fake_override*/ fun <get-baseURI>(): kotlin.String
    public abstract override /*1*/ /*fake_override*/ val childElementCount: kotlin.Int
        public abstract override /*1*/ /*fake_override*/ fun <get-childElementCount>(): kotlin.Int
    public open override /*1*/ /*fake_override*/ val childNodes: org.w3c.dom.NodeList
        public open override /*1*/ /*fake_override*/ fun <get-childNodes>(): org.w3c.dom.NodeList
    public abstract override /*1*/ /*fake_override*/ val children: org.w3c.dom.HTMLCollection
        public abstract override /*1*/ /*fake_override*/ fun <get-children>(): org.w3c.dom.HTMLCollection
    public open override /*1*/ /*fake_override*/ val classList: org.w3c.dom.DOMTokenList
        public open override /*1*/ /*fake_override*/ fun <get-classList>(): org.w3c.dom.DOMTokenList
    public open override /*1*/ /*fake_override*/ var className: kotlin.String
        public open override /*1*/ /*fake_override*/ fun <get-className>(): kotlin.String
        public open override /*1*/ /*fake_override*/ fun <set-className>(/*0*/ <set-?>: kotlin.String): kotlin.Unit
    public open override /*1*/ /*fake_override*/ val clientHeight: kotlin.Int
        public open override /*1*/ /*fake_override*/ fun <get-clientHeight>(): kotlin.Int
    public open override /*1*/ /*fake_override*/ val clientLeft: kotlin.Int
        public open override /*1*/ /*fake_override*/ fun <get-clientLeft>(): kotlin.Int
    public open override /*1*/ /*fake_override*/ val clientTop: kotlin.Int
        public open override /*1*/ /*fake_override*/ fun <get-clientTop>(): kotlin.Int
    public open override /*1*/ /*fake_override*/ val clientWidth: kotlin.Int
        public open override /*1*/ /*fake_override*/ fun <get-clientWidth>(): kotlin.Int
    public open override /*1*/ /*fake_override*/ val correspondingElement: org.w3c.dom.svg.SVGElement?
        public open override /*1*/ /*fake_override*/ fun <get-correspondingElement>(): org.w3c.dom.svg.SVGElement?
    public open override /*1*/ /*fake_override*/ val correspondingUseElement: org.w3c.dom.svg.SVGUseElement?
        public open override /*1*/ /*fake_override*/ fun <get-correspondingUseElement>(): org.w3c.dom.svg.SVGUseElement?
    public open override /*1*/ /*fake_override*/ val dataset: org.w3c.dom.DOMStringMap
        public open override /*1*/ /*fake_override*/ fun <get-dataset>(): org.w3c.dom.DOMStringMap
    public open override /*1*/ /*fake_override*/ val firstChild: org.w3c.dom.Node?
        public open override /*1*/ /*fake_override*/ fun <get-firstChild>(): org.w3c.dom.Node?
    public open override /*1*/ /*fake_override*/ val firstElementChild: org.w3c.dom.Element?
        public open override /*1*/ /*fake_override*/ fun <get-firstElementChild>(): org.w3c.dom.Element?
    public abstract override /*1*/ /*fake_override*/ val href: org.w3c.dom.svg.SVGAnimatedString
        public abstract override /*1*/ /*fake_override*/ fun <get-href>(): org.w3c.dom.svg.SVGAnimatedString
    public open override /*1*/ /*fake_override*/ var id: kotlin.String
        public open override /*1*/ /*fake_override*/ fun <get-id>(): kotlin.String
        public open override /*1*/ /*fake_override*/ fun <set-id>(/*0*/ <set-?>: kotlin.String): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var innerHTML: kotlin.String
        public open override /*1*/ /*fake_override*/ fun <get-innerHTML>(): kotlin.String
        public open override /*1*/ /*fake_override*/ fun <set-innerHTML>(/*0*/ <set-?>: kotlin.String): kotlin.Unit
    public open override /*1*/ /*fake_override*/ val isConnected: kotlin.Boolean
        public open override /*1*/ /*fake_override*/ fun <get-isConnected>(): kotlin.Boolean
    public open override /*1*/ /*fake_override*/ val lastChild: org.w3c.dom.Node?
        public open override /*1*/ /*fake_override*/ fun <get-lastChild>(): org.w3c.dom.Node?
    public open override /*1*/ /*fake_override*/ val lastElementChild: org.w3c.dom.Element?
        public open override /*1*/ /*fake_override*/ fun <get-lastElementChild>(): org.w3c.dom.Element?
    public open override /*1*/ /*fake_override*/ val localName: kotlin.String
        public open override /*1*/ /*fake_override*/ fun <get-localName>(): kotlin.String
    public open override /*1*/ /*fake_override*/ val namespaceURI: kotlin.String?
        public open override /*1*/ /*fake_override*/ fun <get-namespaceURI>(): kotlin.String?
    public open override /*1*/ /*fake_override*/ val nextElementSibling: org.w3c.dom.Element?
        public open override /*1*/ /*fake_override*/ fun <get-nextElementSibling>(): org.w3c.dom.Element?
    public open override /*1*/ /*fake_override*/ val nextSibling: org.w3c.dom.Node?
        public open override /*1*/ /*fake_override*/ fun <get-nextSibling>(): org.w3c.dom.Node?
    public open override /*1*/ /*fake_override*/ val nodeName: kotlin.String
        public open override /*1*/ /*fake_override*/ fun <get-nodeName>(): kotlin.String
    public open override /*1*/ /*fake_override*/ val nodeType: kotlin.Short
        public open override /*1*/ /*fake_override*/ fun <get-nodeType>(): kotlin.Short
    public open override /*1*/ /*fake_override*/ var nodeValue: kotlin.String?
        public open override /*1*/ /*fake_override*/ fun <get-nodeValue>(): kotlin.String?
        public open override /*1*/ /*fake_override*/ fun <set-nodeValue>(/*0*/ <set-?>: kotlin.String?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onabort: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onabort>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onabort>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onblur: ((org.w3c.dom.events.FocusEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onblur>(): ((org.w3c.dom.events.FocusEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onblur>(/*0*/ value: ((org.w3c.dom.events.FocusEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var oncancel: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-oncancel>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-oncancel>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var oncanplay: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-oncanplay>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-oncanplay>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var oncanplaythrough: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-oncanplaythrough>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-oncanplaythrough>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onchange: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onchange>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onchange>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onclick: ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onclick>(): ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onclick>(/*0*/ value: ((org.w3c.dom.events.MouseEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onclose: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onclose>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onclose>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var oncontextmenu: ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-oncontextmenu>(): ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-oncontextmenu>(/*0*/ value: ((org.w3c.dom.events.MouseEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var oncuechange: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-oncuechange>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-oncuechange>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ondblclick: ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ondblclick>(): ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ondblclick>(/*0*/ value: ((org.w3c.dom.events.MouseEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ondrag: ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ondrag>(): ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ondrag>(/*0*/ value: ((org.w3c.dom.DragEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ondragend: ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ondragend>(): ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ondragend>(/*0*/ value: ((org.w3c.dom.DragEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ondragenter: ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ondragenter>(): ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ondragenter>(/*0*/ value: ((org.w3c.dom.DragEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ondragexit: ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ondragexit>(): ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ondragexit>(/*0*/ value: ((org.w3c.dom.DragEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ondragleave: ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ondragleave>(): ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ondragleave>(/*0*/ value: ((org.w3c.dom.DragEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ondragover: ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ondragover>(): ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ondragover>(/*0*/ value: ((org.w3c.dom.DragEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ondragstart: ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ondragstart>(): ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ondragstart>(/*0*/ value: ((org.w3c.dom.DragEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ondrop: ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ondrop>(): ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ondrop>(/*0*/ value: ((org.w3c.dom.DragEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ondurationchange: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ondurationchange>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ondurationchange>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onemptied: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onemptied>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onemptied>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onended: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onended>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onended>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onerror: ((dynamic, kotlin.String, kotlin.Int, kotlin.Int, kotlin.Any?) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onerror>(): ((dynamic, kotlin.String, kotlin.Int, kotlin.Int, kotlin.Any?) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onerror>(/*0*/ value: ((dynamic, kotlin.String, kotlin.Int, kotlin.Int, kotlin.Any?) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onfocus: ((org.w3c.dom.events.FocusEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onfocus>(): ((org.w3c.dom.events.FocusEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onfocus>(/*0*/ value: ((org.w3c.dom.events.FocusEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ongotpointercapture: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ongotpointercapture>(): ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ongotpointercapture>(/*0*/ value: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var oninput: ((org.w3c.dom.events.InputEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-oninput>(): ((org.w3c.dom.events.InputEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-oninput>(/*0*/ value: ((org.w3c.dom.events.InputEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var oninvalid: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-oninvalid>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-oninvalid>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onkeydown: ((org.w3c.dom.events.KeyboardEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onkeydown>(): ((org.w3c.dom.events.KeyboardEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onkeydown>(/*0*/ value: ((org.w3c.dom.events.KeyboardEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onkeypress: ((org.w3c.dom.events.KeyboardEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onkeypress>(): ((org.w3c.dom.events.KeyboardEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onkeypress>(/*0*/ value: ((org.w3c.dom.events.KeyboardEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onkeyup: ((org.w3c.dom.events.KeyboardEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onkeyup>(): ((org.w3c.dom.events.KeyboardEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onkeyup>(/*0*/ value: ((org.w3c.dom.events.KeyboardEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onload: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onload>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onload>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onloadeddata: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onloadeddata>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onloadeddata>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onloadedmetadata: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onloadedmetadata>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onloadedmetadata>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onloadend: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onloadend>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onloadend>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onloadstart: ((org.w3c.xhr.ProgressEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onloadstart>(): ((org.w3c.xhr.ProgressEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onloadstart>(/*0*/ value: ((org.w3c.xhr.ProgressEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onlostpointercapture: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onlostpointercapture>(): ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onlostpointercapture>(/*0*/ value: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onmousedown: ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onmousedown>(): ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onmousedown>(/*0*/ value: ((org.w3c.dom.events.MouseEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onmouseenter: ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onmouseenter>(): ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onmouseenter>(/*0*/ value: ((org.w3c.dom.events.MouseEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onmouseleave: ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onmouseleave>(): ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onmouseleave>(/*0*/ value: ((org.w3c.dom.events.MouseEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onmousemove: ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onmousemove>(): ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onmousemove>(/*0*/ value: ((org.w3c.dom.events.MouseEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onmouseout: ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onmouseout>(): ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onmouseout>(/*0*/ value: ((org.w3c.dom.events.MouseEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onmouseover: ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onmouseover>(): ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onmouseover>(/*0*/ value: ((org.w3c.dom.events.MouseEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onmouseup: ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onmouseup>(): ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onmouseup>(/*0*/ value: ((org.w3c.dom.events.MouseEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onpause: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onpause>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onpause>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onplay: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onplay>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onplay>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onplaying: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onplaying>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onplaying>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onpointercancel: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onpointercancel>(): ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onpointercancel>(/*0*/ value: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onpointerdown: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onpointerdown>(): ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onpointerdown>(/*0*/ value: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onpointerenter: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onpointerenter>(): ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onpointerenter>(/*0*/ value: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onpointerleave: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onpointerleave>(): ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onpointerleave>(/*0*/ value: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onpointermove: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onpointermove>(): ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onpointermove>(/*0*/ value: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onpointerout: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onpointerout>(): ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onpointerout>(/*0*/ value: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onpointerover: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onpointerover>(): ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onpointerover>(/*0*/ value: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onpointerup: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onpointerup>(): ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onpointerup>(/*0*/ value: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onprogress: ((org.w3c.xhr.ProgressEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onprogress>(): ((org.w3c.xhr.ProgressEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onprogress>(/*0*/ value: ((org.w3c.xhr.ProgressEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onratechange: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onratechange>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onratechange>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onreset: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onreset>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onreset>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onresize: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onresize>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onresize>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onscroll: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onscroll>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onscroll>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onseeked: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onseeked>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onseeked>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onseeking: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onseeking>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onseeking>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onselect: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onselect>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onselect>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onshow: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onshow>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onshow>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onstalled: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onstalled>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onstalled>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onsubmit: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onsubmit>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onsubmit>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onsuspend: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onsuspend>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onsuspend>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ontimeupdate: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ontimeupdate>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ontimeupdate>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ontoggle: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ontoggle>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ontoggle>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onvolumechange: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onvolumechange>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onvolumechange>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onwaiting: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onwaiting>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onwaiting>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onwheel: ((org.w3c.dom.events.WheelEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onwheel>(): ((org.w3c.dom.events.WheelEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onwheel>(/*0*/ value: ((org.w3c.dom.events.WheelEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var outerHTML: kotlin.String
        public open override /*1*/ /*fake_override*/ fun <get-outerHTML>(): kotlin.String
        public open override /*1*/ /*fake_override*/ fun <set-outerHTML>(/*0*/ <set-?>: kotlin.String): kotlin.Unit
    public open override /*1*/ /*fake_override*/ val ownerDocument: org.w3c.dom.Document?
        public open override /*1*/ /*fake_override*/ fun <get-ownerDocument>(): org.w3c.dom.Document?
    public open override /*1*/ /*fake_override*/ val ownerSVGElement: org.w3c.dom.svg.SVGSVGElement?
        public open override /*1*/ /*fake_override*/ fun <get-ownerSVGElement>(): org.w3c.dom.svg.SVGSVGElement?
    public open override /*1*/ /*fake_override*/ val parentElement: org.w3c.dom.Element?
        public open override /*1*/ /*fake_override*/ fun <get-parentElement>(): org.w3c.dom.Element?
    public open override /*1*/ /*fake_override*/ val parentNode: org.w3c.dom.Node?
        public open override /*1*/ /*fake_override*/ fun <get-parentNode>(): org.w3c.dom.Node?
    public open override /*1*/ /*fake_override*/ val pathLength: org.w3c.dom.svg.SVGAnimatedNumber
        public open override /*1*/ /*fake_override*/ fun <get-pathLength>(): org.w3c.dom.svg.SVGAnimatedNumber
    public open override /*1*/ /*fake_override*/ val prefix: kotlin.String?
        public open override /*1*/ /*fake_override*/ fun <get-prefix>(): kotlin.String?
    public open override /*1*/ /*fake_override*/ val previousElementSibling: org.w3c.dom.Element?
        public open override /*1*/ /*fake_override*/ fun <get-previousElementSibling>(): org.w3c.dom.Element?
    public open override /*1*/ /*fake_override*/ val previousSibling: org.w3c.dom.Node?
        public open override /*1*/ /*fake_override*/ fun <get-previousSibling>(): org.w3c.dom.Node?
    public abstract override /*1*/ /*fake_override*/ val requiredExtensions: org.w3c.dom.svg.SVGStringList
        public abstract override /*1*/ /*fake_override*/ fun <get-requiredExtensions>(): org.w3c.dom.svg.SVGStringList
    public open override /*1*/ /*fake_override*/ val scrollHeight: kotlin.Int
        public open override /*1*/ /*fake_override*/ fun <get-scrollHeight>(): kotlin.Int
    public open override /*1*/ /*fake_override*/ var scrollLeft: kotlin.Double
        public open override /*1*/ /*fake_override*/ fun <get-scrollLeft>(): kotlin.Double
        public open override /*1*/ /*fake_override*/ fun <set-scrollLeft>(/*0*/ <set-?>: kotlin.Double): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var scrollTop: kotlin.Double
        public open override /*1*/ /*fake_override*/ fun <get-scrollTop>(): kotlin.Double
        public open override /*1*/ /*fake_override*/ fun <set-scrollTop>(/*0*/ <set-?>: kotlin.Double): kotlin.Unit
    public open override /*1*/ /*fake_override*/ val scrollWidth: kotlin.Int
        public open override /*1*/ /*fake_override*/ fun <get-scrollWidth>(): kotlin.Int
    public open override /*1*/ /*fake_override*/ val shadowRoot: org.w3c.dom.ShadowRoot?
        public open override /*1*/ /*fake_override*/ fun <get-shadowRoot>(): org.w3c.dom.ShadowRoot?
    public open override /*1*/ /*fake_override*/ var slot: kotlin.String
        public open override /*1*/ /*fake_override*/ fun <get-slot>(): kotlin.String
        public open override /*1*/ /*fake_override*/ fun <set-slot>(/*0*/ <set-?>: kotlin.String): kotlin.Unit
    public abstract override /*1*/ /*fake_override*/ val style: org.w3c.dom.css.CSSStyleDeclaration
        public abstract override /*1*/ /*fake_override*/ fun <get-style>(): org.w3c.dom.css.CSSStyleDeclaration
    public abstract override /*1*/ /*fake_override*/ val systemLanguage: org.w3c.dom.svg.SVGStringList
        public abstract override /*1*/ /*fake_override*/ fun <get-systemLanguage>(): org.w3c.dom.svg.SVGStringList
    public open override /*1*/ /*fake_override*/ var tabIndex: kotlin.Int
        public open override /*1*/ /*fake_override*/ fun <get-tabIndex>(): kotlin.Int
        public open override /*1*/ /*fake_override*/ fun <set-tabIndex>(/*0*/ <set-?>: kotlin.Int): kotlin.Unit
    public open override /*1*/ /*fake_override*/ val tagName: kotlin.String
        public open override /*1*/ /*fake_override*/ fun <get-tagName>(): kotlin.String
    public open override /*1*/ /*fake_override*/ var textContent: kotlin.String?
        public open override /*1*/ /*fake_override*/ fun <get-textContent>(): kotlin.String?
        public open override /*1*/ /*fake_override*/ fun <set-textContent>(/*0*/ <set-?>: kotlin.String?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ val transform: org.w3c.dom.svg.SVGAnimatedTransformList
        public open override /*1*/ /*fake_override*/ fun <get-transform>(): org.w3c.dom.svg.SVGAnimatedTransformList
    public open override /*1*/ /*fake_override*/ val viewportElement: org.w3c.dom.svg.SVGElement?
        public open override /*1*/ /*fake_override*/ fun <get-viewportElement>(): org.w3c.dom.svg.SVGElement?
    public final override /*1*/ /*fake_override*/ fun addEventListener(/*0*/ type: kotlin.String, /*1*/ callback: ((org.w3c.dom.events.Event) -> kotlin.Unit)?, /*2*/ options: dynamic = ...): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun addEventListener(/*0*/ type: kotlin.String, /*1*/ callback: org.w3c.dom.events.EventListener?, /*2*/ options: dynamic = ...): kotlin.Unit
    public abstract override /*1*/ /*fake_override*/ fun after(/*0*/ vararg nodes: dynamic /*kotlin.Array<out dynamic>*/): kotlin.Unit
    public abstract override /*1*/ /*fake_override*/ fun append(/*0*/ vararg nodes: dynamic /*kotlin.Array<out dynamic>*/): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun appendChild(/*0*/ node: org.w3c.dom.Node): org.w3c.dom.Node
    public final override /*1*/ /*fake_override*/ fun attachShadow(/*0*/ init: org.w3c.dom.ShadowRootInit): org.w3c.dom.ShadowRoot
    public abstract override /*1*/ /*fake_override*/ fun before(/*0*/ vararg nodes: dynamic /*kotlin.Array<out dynamic>*/): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun blur(): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun cloneNode(/*0*/ deep: kotlin.Boolean = ...): org.w3c.dom.Node
    public final override /*1*/ /*fake_override*/ fun closest(/*0*/ selectors: kotlin.String): org.w3c.dom.Element?
    public final override /*1*/ /*fake_override*/ fun compareDocumentPosition(/*0*/ other: org.w3c.dom.Node): kotlin.Short
    public final override /*1*/ /*fake_override*/ fun contains(/*0*/ other: org.w3c.dom.Node?): kotlin.Boolean
    public abstract override /*1*/ /*fake_override*/ fun convertPointFromNode(/*0*/ point: org.w3c.dom.DOMPointInit, /*1*/ from: dynamic, /*2*/ options: org.w3c.dom.ConvertCoordinateOptions = ...): org.w3c.dom.DOMPoint
    public abstract override /*1*/ /*fake_override*/ fun convertQuadFromNode(/*0*/ quad: dynamic, /*1*/ from: dynamic, /*2*/ options: org.w3c.dom.ConvertCoordinateOptions = ...): org.w3c.dom.DOMQuad
    public abstract override /*1*/ /*fake_override*/ fun convertRectFromNode(/*0*/ rect: org.w3c.dom.DOMRectReadOnly, /*1*/ from: dynamic, /*2*/ options: org.w3c.dom.ConvertCoordinateOptions = ...): org.w3c.dom.DOMQuad
    public final override /*1*/ /*fake_override*/ fun dispatchEvent(/*0*/ event: org.w3c.dom.events.Event): kotlin.Boolean
    public open override /*2*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
    public final override /*1*/ /*fake_override*/ fun focus(): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun getAttribute(/*0*/ qualifiedName: kotlin.String): kotlin.String?
    public final override /*1*/ /*fake_override*/ fun getAttributeNS(/*0*/ namespace: kotlin.String?, /*1*/ localName: kotlin.String): kotlin.String?
    public final override /*1*/ /*fake_override*/ fun getAttributeNames(): kotlin.Array<kotlin.String>
    public final override /*1*/ /*fake_override*/ fun getAttributeNode(/*0*/ qualifiedName: kotlin.String): org.w3c.dom.Attr?
    public final override /*1*/ /*fake_override*/ fun getAttributeNodeNS(/*0*/ namespace: kotlin.String?, /*1*/ localName: kotlin.String): org.w3c.dom.Attr?
    public final override /*1*/ /*fake_override*/ fun getBBox(/*0*/ options: org.w3c.dom.svg.SVGBoundingBoxOptions = ...): org.w3c.dom.DOMRect
    public final override /*1*/ /*fake_override*/ fun getBoundingClientRect(): org.w3c.dom.DOMRect
    public abstract override /*1*/ /*fake_override*/ fun getBoxQuads(/*0*/ options: org.w3c.dom.BoxQuadOptions = ...): kotlin.Array<org.w3c.dom.DOMQuad>
    public final override /*1*/ /*fake_override*/ fun getCTM(): org.w3c.dom.DOMMatrix?
    public final override /*1*/ /*fake_override*/ fun getClientRects(): kotlin.Array<org.w3c.dom.DOMRect>
    public final override /*1*/ /*fake_override*/ fun getElementsByClassName(/*0*/ classNames: kotlin.String): org.w3c.dom.HTMLCollection
    public final override /*1*/ /*fake_override*/ fun getElementsByTagName(/*0*/ qualifiedName: kotlin.String): org.w3c.dom.HTMLCollection
    public final override /*1*/ /*fake_override*/ fun getElementsByTagNameNS(/*0*/ namespace: kotlin.String?, /*1*/ localName: kotlin.String): org.w3c.dom.HTMLCollection
    public final override /*1*/ /*fake_override*/ fun getPointAtLength(/*0*/ distance: kotlin.Float): org.w3c.dom.DOMPoint
    public final override /*1*/ /*fake_override*/ fun getRootNode(/*0*/ options: org.w3c.dom.GetRootNodeOptions = ...): org.w3c.dom.Node
    public final override /*1*/ /*fake_override*/ fun getScreenCTM(): org.w3c.dom.DOMMatrix?
    public final override /*1*/ /*fake_override*/ fun getTotalLength(): kotlin.Float
    public final override /*1*/ /*fake_override*/ fun hasAttribute(/*0*/ qualifiedName: kotlin.String): kotlin.Boolean
    public final override /*1*/ /*fake_override*/ fun hasAttributeNS(/*0*/ namespace: kotlin.String?, /*1*/ localName: kotlin.String): kotlin.Boolean
    public final override /*1*/ /*fake_override*/ fun hasAttributes(): kotlin.Boolean
    public final override /*1*/ /*fake_override*/ fun hasChildNodes(): kotlin.Boolean
    public final override /*1*/ /*fake_override*/ fun hasPointerCapture(/*0*/ pointerId: kotlin.Int): kotlin.Boolean
    public open override /*2*/ /*fake_override*/ fun hashCode(): kotlin.Int
    public final override /*1*/ /*fake_override*/ fun insertAdjacentElement(/*0*/ where: kotlin.String, /*1*/ element: org.w3c.dom.Element): org.w3c.dom.Element?
    public final override /*1*/ /*fake_override*/ fun insertAdjacentHTML(/*0*/ position: kotlin.String, /*1*/ text: kotlin.String): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun insertAdjacentText(/*0*/ where: kotlin.String, /*1*/ data: kotlin.String): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun insertBefore(/*0*/ node: org.w3c.dom.Node, /*1*/ child: org.w3c.dom.Node?): org.w3c.dom.Node
    public final override /*1*/ /*fake_override*/ fun isDefaultNamespace(/*0*/ namespace: kotlin.String?): kotlin.Boolean
    public final override /*1*/ /*fake_override*/ fun isEqualNode(/*0*/ otherNode: org.w3c.dom.Node?): kotlin.Boolean
    public final override /*1*/ /*fake_override*/ fun isPointInFill(/*0*/ point: org.w3c.dom.DOMPoint): kotlin.Boolean
    public final override /*1*/ /*fake_override*/ fun isPointInStroke(/*0*/ point: org.w3c.dom.DOMPoint): kotlin.Boolean
    public final override /*1*/ /*fake_override*/ fun isSameNode(/*0*/ otherNode: org.w3c.dom.Node?): kotlin.Boolean
    public final override /*1*/ /*fake_override*/ fun lookupNamespaceURI(/*0*/ prefix: kotlin.String?): kotlin.String?
    public final override /*1*/ /*fake_override*/ fun lookupPrefix(/*0*/ namespace: kotlin.String?): kotlin.String?
    public final override /*1*/ /*fake_override*/ fun matches(/*0*/ selectors: kotlin.String): kotlin.Boolean
    public final override /*1*/ /*fake_override*/ fun normalize(): kotlin.Unit
    public abstract override /*1*/ /*fake_override*/ fun prepend(/*0*/ vararg nodes: dynamic /*kotlin.Array<out dynamic>*/): kotlin.Unit
    public abstract override /*1*/ /*fake_override*/ fun querySelector(/*0*/ selectors: kotlin.String): org.w3c.dom.Element?
    public abstract override /*1*/ /*fake_override*/ fun querySelectorAll(/*0*/ selectors: kotlin.String): org.w3c.dom.NodeList
    public final override /*1*/ /*fake_override*/ fun releasePointerCapture(/*0*/ pointerId: kotlin.Int): kotlin.Unit
    public abstract override /*1*/ /*fake_override*/ fun remove(): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun removeAttribute(/*0*/ qualifiedName: kotlin.String): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun removeAttributeNS(/*0*/ namespace: kotlin.String?, /*1*/ localName: kotlin.String): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun removeAttributeNode(/*0*/ attr: org.w3c.dom.Attr): org.w3c.dom.Attr
    public final override /*1*/ /*fake_override*/ fun removeChild(/*0*/ child: org.w3c.dom.Node): org.w3c.dom.Node
    public final override /*1*/ /*fake_override*/ fun removeEventListener(/*0*/ type: kotlin.String, /*1*/ callback: ((org.w3c.dom.events.Event) -> kotlin.Unit)?, /*2*/ options: dynamic = ...): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun removeEventListener(/*0*/ type: kotlin.String, /*1*/ callback: org.w3c.dom.events.EventListener?, /*2*/ options: dynamic = ...): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun replaceChild(/*0*/ node: org.w3c.dom.Node, /*1*/ child: org.w3c.dom.Node): org.w3c.dom.Node
    public abstract override /*1*/ /*fake_override*/ fun replaceWith(/*0*/ vararg nodes: dynamic /*kotlin.Array<out dynamic>*/): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun requestFullscreen(): kotlin.js.Promise<kotlin.Unit>
    public final override /*1*/ /*fake_override*/ fun scroll(/*0*/ x: kotlin.Double, /*1*/ y: kotlin.Double): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun scroll(/*0*/ options: org.w3c.dom.ScrollToOptions = ...): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun scrollBy(/*0*/ x: kotlin.Double, /*1*/ y: kotlin.Double): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun scrollBy(/*0*/ options: org.w3c.dom.ScrollToOptions = ...): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun scrollIntoView(): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun scrollIntoView(/*0*/ arg: dynamic): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun scrollTo(/*0*/ x: kotlin.Double, /*1*/ y: kotlin.Double): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun scrollTo(/*0*/ options: org.w3c.dom.ScrollToOptions = ...): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun setAttribute(/*0*/ qualifiedName: kotlin.String, /*1*/ value: kotlin.String): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun setAttributeNS(/*0*/ namespace: kotlin.String?, /*1*/ qualifiedName: kotlin.String, /*2*/ value: kotlin.String): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun setAttributeNode(/*0*/ attr: org.w3c.dom.Attr): org.w3c.dom.Attr?
    public final override /*1*/ /*fake_override*/ fun setAttributeNodeNS(/*0*/ attr: org.w3c.dom.Attr): org.w3c.dom.Attr?
    public final override /*1*/ /*fake_override*/ fun setPointerCapture(/*0*/ pointerId: kotlin.Int): kotlin.Unit
    public open override /*2*/ /*fake_override*/ fun toString(): kotlin.String
    public final override /*1*/ /*fake_override*/ fun webkitMatchesSelector(/*0*/ selectors: kotlin.String): kotlin.Boolean

    public companion object Companion {
        /*primary*/ private constructor Companion()
        public final val ATTRIBUTE_NODE: kotlin.Short
            public final fun <get-ATTRIBUTE_NODE>(): kotlin.Short
        public final val CDATA_SECTION_NODE: kotlin.Short
            public final fun <get-CDATA_SECTION_NODE>(): kotlin.Short
        public final val COMMENT_NODE: kotlin.Short
            public final fun <get-COMMENT_NODE>(): kotlin.Short
        public final val DOCUMENT_FRAGMENT_NODE: kotlin.Short
            public final fun <get-DOCUMENT_FRAGMENT_NODE>(): kotlin.Short
        public final val DOCUMENT_NODE: kotlin.Short
            public final fun <get-DOCUMENT_NODE>(): kotlin.Short
        public final val DOCUMENT_POSITION_CONTAINED_BY: kotlin.Short
            public final fun <get-DOCUMENT_POSITION_CONTAINED_BY>(): kotlin.Short
        public final val DOCUMENT_POSITION_CONTAINS: kotlin.Short
            public final fun <get-DOCUMENT_POSITION_CONTAINS>(): kotlin.Short
        public final val DOCUMENT_POSITION_DISCONNECTED: kotlin.Short
            public final fun <get-DOCUMENT_POSITION_DISCONNECTED>(): kotlin.Short
        public final val DOCUMENT_POSITION_FOLLOWING: kotlin.Short
            public final fun <get-DOCUMENT_POSITION_FOLLOWING>(): kotlin.Short
        public final val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: kotlin.Short
            public final fun <get-DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC>(): kotlin.Short
        public final val DOCUMENT_POSITION_PRECEDING: kotlin.Short
            public final fun <get-DOCUMENT_POSITION_PRECEDING>(): kotlin.Short
        public final val DOCUMENT_TYPE_NODE: kotlin.Short
            public final fun <get-DOCUMENT_TYPE_NODE>(): kotlin.Short
        public final val ELEMENT_NODE: kotlin.Short
            public final fun <get-ELEMENT_NODE>(): kotlin.Short
        public final val ENTITY_NODE: kotlin.Short
            public final fun <get-ENTITY_NODE>(): kotlin.Short
        public final val ENTITY_REFERENCE_NODE: kotlin.Short
            public final fun <get-ENTITY_REFERENCE_NODE>(): kotlin.Short
        public final val NOTATION_NODE: kotlin.Short
            public final fun <get-NOTATION_NODE>(): kotlin.Short
        public final val PROCESSING_INSTRUCTION_NODE: kotlin.Short
            public final fun <get-PROCESSING_INSTRUCTION_NODE>(): kotlin.Short
        public final val TEXT_NODE: kotlin.Short
            public final fun <get-TEXT_NODE>(): kotlin.Short
        public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
        public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
        public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
    }
}

public abstract external class SVGMeshGradientElement : org.w3c.dom.svg.SVGGradientElement {
    /*primary*/ public constructor SVGMeshGradientElement()
    public open override /*1*/ /*fake_override*/ val assignedSlot: org.w3c.dom.HTMLSlotElement?
        public open override /*1*/ /*fake_override*/ fun <get-assignedSlot>(): org.w3c.dom.HTMLSlotElement?
    public open override /*1*/ /*fake_override*/ val attributes: org.w3c.dom.NamedNodeMap
        public open override /*1*/ /*fake_override*/ fun <get-attributes>(): org.w3c.dom.NamedNodeMap
    public open override /*1*/ /*fake_override*/ val baseURI: kotlin.String
        public open override /*1*/ /*fake_override*/ fun <get-baseURI>(): kotlin.String
    public abstract override /*1*/ /*fake_override*/ val childElementCount: kotlin.Int
        public abstract override /*1*/ /*fake_override*/ fun <get-childElementCount>(): kotlin.Int
    public open override /*1*/ /*fake_override*/ val childNodes: org.w3c.dom.NodeList
        public open override /*1*/ /*fake_override*/ fun <get-childNodes>(): org.w3c.dom.NodeList
    public abstract override /*1*/ /*fake_override*/ val children: org.w3c.dom.HTMLCollection
        public abstract override /*1*/ /*fake_override*/ fun <get-children>(): org.w3c.dom.HTMLCollection
    public open override /*1*/ /*fake_override*/ val classList: org.w3c.dom.DOMTokenList
        public open override /*1*/ /*fake_override*/ fun <get-classList>(): org.w3c.dom.DOMTokenList
    public open override /*1*/ /*fake_override*/ var className: kotlin.String
        public open override /*1*/ /*fake_override*/ fun <get-className>(): kotlin.String
        public open override /*1*/ /*fake_override*/ fun <set-className>(/*0*/ <set-?>: kotlin.String): kotlin.Unit
    public open override /*1*/ /*fake_override*/ val clientHeight: kotlin.Int
        public open override /*1*/ /*fake_override*/ fun <get-clientHeight>(): kotlin.Int
    public open override /*1*/ /*fake_override*/ val clientLeft: kotlin.Int
        public open override /*1*/ /*fake_override*/ fun <get-clientLeft>(): kotlin.Int
    public open override /*1*/ /*fake_override*/ val clientTop: kotlin.Int
        public open override /*1*/ /*fake_override*/ fun <get-clientTop>(): kotlin.Int
    public open override /*1*/ /*fake_override*/ val clientWidth: kotlin.Int
        public open override /*1*/ /*fake_override*/ fun <get-clientWidth>(): kotlin.Int
    public open override /*1*/ /*fake_override*/ val correspondingElement: org.w3c.dom.svg.SVGElement?
        public open override /*1*/ /*fake_override*/ fun <get-correspondingElement>(): org.w3c.dom.svg.SVGElement?
    public open override /*1*/ /*fake_override*/ val correspondingUseElement: org.w3c.dom.svg.SVGUseElement?
        public open override /*1*/ /*fake_override*/ fun <get-correspondingUseElement>(): org.w3c.dom.svg.SVGUseElement?
    public open override /*1*/ /*fake_override*/ val dataset: org.w3c.dom.DOMStringMap
        public open override /*1*/ /*fake_override*/ fun <get-dataset>(): org.w3c.dom.DOMStringMap
    public open override /*1*/ /*fake_override*/ val firstChild: org.w3c.dom.Node?
        public open override /*1*/ /*fake_override*/ fun <get-firstChild>(): org.w3c.dom.Node?
    public open override /*1*/ /*fake_override*/ val firstElementChild: org.w3c.dom.Element?
        public open override /*1*/ /*fake_override*/ fun <get-firstElementChild>(): org.w3c.dom.Element?
    public open override /*1*/ /*fake_override*/ val gradientTransform: org.w3c.dom.svg.SVGAnimatedTransformList
        public open override /*1*/ /*fake_override*/ fun <get-gradientTransform>(): org.w3c.dom.svg.SVGAnimatedTransformList
    public open override /*1*/ /*fake_override*/ val gradientUnits: org.w3c.dom.svg.SVGAnimatedEnumeration
        public open override /*1*/ /*fake_override*/ fun <get-gradientUnits>(): org.w3c.dom.svg.SVGAnimatedEnumeration
    public abstract override /*1*/ /*fake_override*/ val href: org.w3c.dom.svg.SVGAnimatedString
        public abstract override /*1*/ /*fake_override*/ fun <get-href>(): org.w3c.dom.svg.SVGAnimatedString
    public open override /*1*/ /*fake_override*/ var id: kotlin.String
        public open override /*1*/ /*fake_override*/ fun <get-id>(): kotlin.String
        public open override /*1*/ /*fake_override*/ fun <set-id>(/*0*/ <set-?>: kotlin.String): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var innerHTML: kotlin.String
        public open override /*1*/ /*fake_override*/ fun <get-innerHTML>(): kotlin.String
        public open override /*1*/ /*fake_override*/ fun <set-innerHTML>(/*0*/ <set-?>: kotlin.String): kotlin.Unit
    public open override /*1*/ /*fake_override*/ val isConnected: kotlin.Boolean
        public open override /*1*/ /*fake_override*/ fun <get-isConnected>(): kotlin.Boolean
    public open override /*1*/ /*fake_override*/ val lastChild: org.w3c.dom.Node?
        public open override /*1*/ /*fake_override*/ fun <get-lastChild>(): org.w3c.dom.Node?
    public open override /*1*/ /*fake_override*/ val lastElementChild: org.w3c.dom.Element?
        public open override /*1*/ /*fake_override*/ fun <get-lastElementChild>(): org.w3c.dom.Element?
    public open override /*1*/ /*fake_override*/ val localName: kotlin.String
        public open override /*1*/ /*fake_override*/ fun <get-localName>(): kotlin.String
    public open override /*1*/ /*fake_override*/ val namespaceURI: kotlin.String?
        public open override /*1*/ /*fake_override*/ fun <get-namespaceURI>(): kotlin.String?
    public open override /*1*/ /*fake_override*/ val nextElementSibling: org.w3c.dom.Element?
        public open override /*1*/ /*fake_override*/ fun <get-nextElementSibling>(): org.w3c.dom.Element?
    public open override /*1*/ /*fake_override*/ val nextSibling: org.w3c.dom.Node?
        public open override /*1*/ /*fake_override*/ fun <get-nextSibling>(): org.w3c.dom.Node?
    public open override /*1*/ /*fake_override*/ val nodeName: kotlin.String
        public open override /*1*/ /*fake_override*/ fun <get-nodeName>(): kotlin.String
    public open override /*1*/ /*fake_override*/ val nodeType: kotlin.Short
        public open override /*1*/ /*fake_override*/ fun <get-nodeType>(): kotlin.Short
    public open override /*1*/ /*fake_override*/ var nodeValue: kotlin.String?
        public open override /*1*/ /*fake_override*/ fun <get-nodeValue>(): kotlin.String?
        public open override /*1*/ /*fake_override*/ fun <set-nodeValue>(/*0*/ <set-?>: kotlin.String?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onabort: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onabort>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onabort>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onblur: ((org.w3c.dom.events.FocusEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onblur>(): ((org.w3c.dom.events.FocusEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onblur>(/*0*/ value: ((org.w3c.dom.events.FocusEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var oncancel: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-oncancel>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-oncancel>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var oncanplay: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-oncanplay>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-oncanplay>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var oncanplaythrough: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-oncanplaythrough>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-oncanplaythrough>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onchange: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onchange>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onchange>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onclick: ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onclick>(): ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onclick>(/*0*/ value: ((org.w3c.dom.events.MouseEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onclose: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onclose>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onclose>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var oncontextmenu: ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-oncontextmenu>(): ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-oncontextmenu>(/*0*/ value: ((org.w3c.dom.events.MouseEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var oncuechange: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-oncuechange>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-oncuechange>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ondblclick: ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ondblclick>(): ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ondblclick>(/*0*/ value: ((org.w3c.dom.events.MouseEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ondrag: ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ondrag>(): ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ondrag>(/*0*/ value: ((org.w3c.dom.DragEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ondragend: ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ondragend>(): ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ondragend>(/*0*/ value: ((org.w3c.dom.DragEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ondragenter: ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ondragenter>(): ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ondragenter>(/*0*/ value: ((org.w3c.dom.DragEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ondragexit: ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ondragexit>(): ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ondragexit>(/*0*/ value: ((org.w3c.dom.DragEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ondragleave: ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ondragleave>(): ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ondragleave>(/*0*/ value: ((org.w3c.dom.DragEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ondragover: ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ondragover>(): ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ondragover>(/*0*/ value: ((org.w3c.dom.DragEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ondragstart: ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ondragstart>(): ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ondragstart>(/*0*/ value: ((org.w3c.dom.DragEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ondrop: ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ondrop>(): ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ondrop>(/*0*/ value: ((org.w3c.dom.DragEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ondurationchange: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ondurationchange>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ondurationchange>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onemptied: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onemptied>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onemptied>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onended: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onended>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onended>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onerror: ((dynamic, kotlin.String, kotlin.Int, kotlin.Int, kotlin.Any?) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onerror>(): ((dynamic, kotlin.String, kotlin.Int, kotlin.Int, kotlin.Any?) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onerror>(/*0*/ value: ((dynamic, kotlin.String, kotlin.Int, kotlin.Int, kotlin.Any?) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onfocus: ((org.w3c.dom.events.FocusEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onfocus>(): ((org.w3c.dom.events.FocusEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onfocus>(/*0*/ value: ((org.w3c.dom.events.FocusEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ongotpointercapture: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ongotpointercapture>(): ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ongotpointercapture>(/*0*/ value: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var oninput: ((org.w3c.dom.events.InputEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-oninput>(): ((org.w3c.dom.events.InputEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-oninput>(/*0*/ value: ((org.w3c.dom.events.InputEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var oninvalid: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-oninvalid>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-oninvalid>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onkeydown: ((org.w3c.dom.events.KeyboardEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onkeydown>(): ((org.w3c.dom.events.KeyboardEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onkeydown>(/*0*/ value: ((org.w3c.dom.events.KeyboardEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onkeypress: ((org.w3c.dom.events.KeyboardEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onkeypress>(): ((org.w3c.dom.events.KeyboardEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onkeypress>(/*0*/ value: ((org.w3c.dom.events.KeyboardEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onkeyup: ((org.w3c.dom.events.KeyboardEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onkeyup>(): ((org.w3c.dom.events.KeyboardEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onkeyup>(/*0*/ value: ((org.w3c.dom.events.KeyboardEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onload: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onload>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onload>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onloadeddata: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onloadeddata>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onloadeddata>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onloadedmetadata: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onloadedmetadata>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onloadedmetadata>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onloadend: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onloadend>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onloadend>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onloadstart: ((org.w3c.xhr.ProgressEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onloadstart>(): ((org.w3c.xhr.ProgressEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onloadstart>(/*0*/ value: ((org.w3c.xhr.ProgressEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onlostpointercapture: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onlostpointercapture>(): ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onlostpointercapture>(/*0*/ value: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onmousedown: ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onmousedown>(): ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onmousedown>(/*0*/ value: ((org.w3c.dom.events.MouseEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onmouseenter: ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onmouseenter>(): ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onmouseenter>(/*0*/ value: ((org.w3c.dom.events.MouseEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onmouseleave: ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onmouseleave>(): ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onmouseleave>(/*0*/ value: ((org.w3c.dom.events.MouseEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onmousemove: ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onmousemove>(): ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onmousemove>(/*0*/ value: ((org.w3c.dom.events.MouseEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onmouseout: ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onmouseout>(): ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onmouseout>(/*0*/ value: ((org.w3c.dom.events.MouseEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onmouseover: ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onmouseover>(): ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onmouseover>(/*0*/ value: ((org.w3c.dom.events.MouseEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onmouseup: ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onmouseup>(): ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onmouseup>(/*0*/ value: ((org.w3c.dom.events.MouseEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onpause: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onpause>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onpause>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onplay: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onplay>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onplay>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onplaying: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onplaying>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onplaying>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onpointercancel: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onpointercancel>(): ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onpointercancel>(/*0*/ value: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onpointerdown: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onpointerdown>(): ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onpointerdown>(/*0*/ value: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onpointerenter: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onpointerenter>(): ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onpointerenter>(/*0*/ value: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onpointerleave: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onpointerleave>(): ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onpointerleave>(/*0*/ value: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onpointermove: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onpointermove>(): ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onpointermove>(/*0*/ value: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onpointerout: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onpointerout>(): ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onpointerout>(/*0*/ value: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onpointerover: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onpointerover>(): ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onpointerover>(/*0*/ value: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onpointerup: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onpointerup>(): ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onpointerup>(/*0*/ value: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onprogress: ((org.w3c.xhr.ProgressEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onprogress>(): ((org.w3c.xhr.ProgressEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onprogress>(/*0*/ value: ((org.w3c.xhr.ProgressEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onratechange: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onratechange>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onratechange>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onreset: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onreset>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onreset>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onresize: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onresize>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onresize>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onscroll: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onscroll>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onscroll>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onseeked: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onseeked>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onseeked>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onseeking: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onseeking>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onseeking>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onselect: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onselect>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onselect>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onshow: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onshow>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onshow>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onstalled: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onstalled>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onstalled>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onsubmit: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onsubmit>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onsubmit>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onsuspend: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onsuspend>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onsuspend>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ontimeupdate: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ontimeupdate>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ontimeupdate>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ontoggle: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ontoggle>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ontoggle>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onvolumechange: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onvolumechange>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onvolumechange>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onwaiting: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onwaiting>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onwaiting>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onwheel: ((org.w3c.dom.events.WheelEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onwheel>(): ((org.w3c.dom.events.WheelEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onwheel>(/*0*/ value: ((org.w3c.dom.events.WheelEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var outerHTML: kotlin.String
        public open override /*1*/ /*fake_override*/ fun <get-outerHTML>(): kotlin.String
        public open override /*1*/ /*fake_override*/ fun <set-outerHTML>(/*0*/ <set-?>: kotlin.String): kotlin.Unit
    public open override /*1*/ /*fake_override*/ val ownerDocument: org.w3c.dom.Document?
        public open override /*1*/ /*fake_override*/ fun <get-ownerDocument>(): org.w3c.dom.Document?
    public open override /*1*/ /*fake_override*/ val ownerSVGElement: org.w3c.dom.svg.SVGSVGElement?
        public open override /*1*/ /*fake_override*/ fun <get-ownerSVGElement>(): org.w3c.dom.svg.SVGSVGElement?
    public open override /*1*/ /*fake_override*/ val parentElement: org.w3c.dom.Element?
        public open override /*1*/ /*fake_override*/ fun <get-parentElement>(): org.w3c.dom.Element?
    public open override /*1*/ /*fake_override*/ val parentNode: org.w3c.dom.Node?
        public open override /*1*/ /*fake_override*/ fun <get-parentNode>(): org.w3c.dom.Node?
    public open override /*1*/ /*fake_override*/ val prefix: kotlin.String?
        public open override /*1*/ /*fake_override*/ fun <get-prefix>(): kotlin.String?
    public open override /*1*/ /*fake_override*/ val previousElementSibling: org.w3c.dom.Element?
        public open override /*1*/ /*fake_override*/ fun <get-previousElementSibling>(): org.w3c.dom.Element?
    public open override /*1*/ /*fake_override*/ val previousSibling: org.w3c.dom.Node?
        public open override /*1*/ /*fake_override*/ fun <get-previousSibling>(): org.w3c.dom.Node?
    public open override /*1*/ /*fake_override*/ val scrollHeight: kotlin.Int
        public open override /*1*/ /*fake_override*/ fun <get-scrollHeight>(): kotlin.Int
    public open override /*1*/ /*fake_override*/ var scrollLeft: kotlin.Double
        public open override /*1*/ /*fake_override*/ fun <get-scrollLeft>(): kotlin.Double
        public open override /*1*/ /*fake_override*/ fun <set-scrollLeft>(/*0*/ <set-?>: kotlin.Double): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var scrollTop: kotlin.Double
        public open override /*1*/ /*fake_override*/ fun <get-scrollTop>(): kotlin.Double
        public open override /*1*/ /*fake_override*/ fun <set-scrollTop>(/*0*/ <set-?>: kotlin.Double): kotlin.Unit
    public open override /*1*/ /*fake_override*/ val scrollWidth: kotlin.Int
        public open override /*1*/ /*fake_override*/ fun <get-scrollWidth>(): kotlin.Int
    public open override /*1*/ /*fake_override*/ val shadowRoot: org.w3c.dom.ShadowRoot?
        public open override /*1*/ /*fake_override*/ fun <get-shadowRoot>(): org.w3c.dom.ShadowRoot?
    public open override /*1*/ /*fake_override*/ var slot: kotlin.String
        public open override /*1*/ /*fake_override*/ fun <get-slot>(): kotlin.String
        public open override /*1*/ /*fake_override*/ fun <set-slot>(/*0*/ <set-?>: kotlin.String): kotlin.Unit
    public open override /*1*/ /*fake_override*/ val spreadMethod: org.w3c.dom.svg.SVGAnimatedEnumeration
        public open override /*1*/ /*fake_override*/ fun <get-spreadMethod>(): org.w3c.dom.svg.SVGAnimatedEnumeration
    public abstract override /*1*/ /*fake_override*/ val style: org.w3c.dom.css.CSSStyleDeclaration
        public abstract override /*1*/ /*fake_override*/ fun <get-style>(): org.w3c.dom.css.CSSStyleDeclaration
    public open override /*1*/ /*fake_override*/ var tabIndex: kotlin.Int
        public open override /*1*/ /*fake_override*/ fun <get-tabIndex>(): kotlin.Int
        public open override /*1*/ /*fake_override*/ fun <set-tabIndex>(/*0*/ <set-?>: kotlin.Int): kotlin.Unit
    public open override /*1*/ /*fake_override*/ val tagName: kotlin.String
        public open override /*1*/ /*fake_override*/ fun <get-tagName>(): kotlin.String
    public open override /*1*/ /*fake_override*/ var textContent: kotlin.String?
        public open override /*1*/ /*fake_override*/ fun <get-textContent>(): kotlin.String?
        public open override /*1*/ /*fake_override*/ fun <set-textContent>(/*0*/ <set-?>: kotlin.String?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ val viewportElement: org.w3c.dom.svg.SVGElement?
        public open override /*1*/ /*fake_override*/ fun <get-viewportElement>(): org.w3c.dom.svg.SVGElement?
    public final override /*1*/ /*fake_override*/ fun addEventListener(/*0*/ type: kotlin.String, /*1*/ callback: ((org.w3c.dom.events.Event) -> kotlin.Unit)?, /*2*/ options: dynamic = ...): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun addEventListener(/*0*/ type: kotlin.String, /*1*/ callback: org.w3c.dom.events.EventListener?, /*2*/ options: dynamic = ...): kotlin.Unit
    public abstract override /*1*/ /*fake_override*/ fun after(/*0*/ vararg nodes: dynamic /*kotlin.Array<out dynamic>*/): kotlin.Unit
    public abstract override /*1*/ /*fake_override*/ fun append(/*0*/ vararg nodes: dynamic /*kotlin.Array<out dynamic>*/): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun appendChild(/*0*/ node: org.w3c.dom.Node): org.w3c.dom.Node
    public final override /*1*/ /*fake_override*/ fun attachShadow(/*0*/ init: org.w3c.dom.ShadowRootInit): org.w3c.dom.ShadowRoot
    public abstract override /*1*/ /*fake_override*/ fun before(/*0*/ vararg nodes: dynamic /*kotlin.Array<out dynamic>*/): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun blur(): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun cloneNode(/*0*/ deep: kotlin.Boolean = ...): org.w3c.dom.Node
    public final override /*1*/ /*fake_override*/ fun closest(/*0*/ selectors: kotlin.String): org.w3c.dom.Element?
    public final override /*1*/ /*fake_override*/ fun compareDocumentPosition(/*0*/ other: org.w3c.dom.Node): kotlin.Short
    public final override /*1*/ /*fake_override*/ fun contains(/*0*/ other: org.w3c.dom.Node?): kotlin.Boolean
    public abstract override /*1*/ /*fake_override*/ fun convertPointFromNode(/*0*/ point: org.w3c.dom.DOMPointInit, /*1*/ from: dynamic, /*2*/ options: org.w3c.dom.ConvertCoordinateOptions = ...): org.w3c.dom.DOMPoint
    public abstract override /*1*/ /*fake_override*/ fun convertQuadFromNode(/*0*/ quad: dynamic, /*1*/ from: dynamic, /*2*/ options: org.w3c.dom.ConvertCoordinateOptions = ...): org.w3c.dom.DOMQuad
    public abstract override /*1*/ /*fake_override*/ fun convertRectFromNode(/*0*/ rect: org.w3c.dom.DOMRectReadOnly, /*1*/ from: dynamic, /*2*/ options: org.w3c.dom.ConvertCoordinateOptions = ...): org.w3c.dom.DOMQuad
    public final override /*1*/ /*fake_override*/ fun dispatchEvent(/*0*/ event: org.w3c.dom.events.Event): kotlin.Boolean
    public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
    public final override /*1*/ /*fake_override*/ fun focus(): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun getAttribute(/*0*/ qualifiedName: kotlin.String): kotlin.String?
    public final override /*1*/ /*fake_override*/ fun getAttributeNS(/*0*/ namespace: kotlin.String?, /*1*/ localName: kotlin.String): kotlin.String?
    public final override /*1*/ /*fake_override*/ fun getAttributeNames(): kotlin.Array<kotlin.String>
    public final override /*1*/ /*fake_override*/ fun getAttributeNode(/*0*/ qualifiedName: kotlin.String): org.w3c.dom.Attr?
    public final override /*1*/ /*fake_override*/ fun getAttributeNodeNS(/*0*/ namespace: kotlin.String?, /*1*/ localName: kotlin.String): org.w3c.dom.Attr?
    public final override /*1*/ /*fake_override*/ fun getBoundingClientRect(): org.w3c.dom.DOMRect
    public abstract override /*1*/ /*fake_override*/ fun getBoxQuads(/*0*/ options: org.w3c.dom.BoxQuadOptions = ...): kotlin.Array<org.w3c.dom.DOMQuad>
    public final override /*1*/ /*fake_override*/ fun getClientRects(): kotlin.Array<org.w3c.dom.DOMRect>
    public final override /*1*/ /*fake_override*/ fun getElementsByClassName(/*0*/ classNames: kotlin.String): org.w3c.dom.HTMLCollection
    public final override /*1*/ /*fake_override*/ fun getElementsByTagName(/*0*/ qualifiedName: kotlin.String): org.w3c.dom.HTMLCollection
    public final override /*1*/ /*fake_override*/ fun getElementsByTagNameNS(/*0*/ namespace: kotlin.String?, /*1*/ localName: kotlin.String): org.w3c.dom.HTMLCollection
    public final override /*1*/ /*fake_override*/ fun getRootNode(/*0*/ options: org.w3c.dom.GetRootNodeOptions = ...): org.w3c.dom.Node
    public final override /*1*/ /*fake_override*/ fun hasAttribute(/*0*/ qualifiedName: kotlin.String): kotlin.Boolean
    public final override /*1*/ /*fake_override*/ fun hasAttributeNS(/*0*/ namespace: kotlin.String?, /*1*/ localName: kotlin.String): kotlin.Boolean
    public final override /*1*/ /*fake_override*/ fun hasAttributes(): kotlin.Boolean
    public final override /*1*/ /*fake_override*/ fun hasChildNodes(): kotlin.Boolean
    public final override /*1*/ /*fake_override*/ fun hasPointerCapture(/*0*/ pointerId: kotlin.Int): kotlin.Boolean
    public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
    public final override /*1*/ /*fake_override*/ fun insertAdjacentElement(/*0*/ where: kotlin.String, /*1*/ element: org.w3c.dom.Element): org.w3c.dom.Element?
    public final override /*1*/ /*fake_override*/ fun insertAdjacentHTML(/*0*/ position: kotlin.String, /*1*/ text: kotlin.String): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun insertAdjacentText(/*0*/ where: kotlin.String, /*1*/ data: kotlin.String): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun insertBefore(/*0*/ node: org.w3c.dom.Node, /*1*/ child: org.w3c.dom.Node?): org.w3c.dom.Node
    public final override /*1*/ /*fake_override*/ fun isDefaultNamespace(/*0*/ namespace: kotlin.String?): kotlin.Boolean
    public final override /*1*/ /*fake_override*/ fun isEqualNode(/*0*/ otherNode: org.w3c.dom.Node?): kotlin.Boolean
    public final override /*1*/ /*fake_override*/ fun isSameNode(/*0*/ otherNode: org.w3c.dom.Node?): kotlin.Boolean
    public final override /*1*/ /*fake_override*/ fun lookupNamespaceURI(/*0*/ prefix: kotlin.String?): kotlin.String?
    public final override /*1*/ /*fake_override*/ fun lookupPrefix(/*0*/ namespace: kotlin.String?): kotlin.String?
    public final override /*1*/ /*fake_override*/ fun matches(/*0*/ selectors: kotlin.String): kotlin.Boolean
    public final override /*1*/ /*fake_override*/ fun normalize(): kotlin.Unit
    public abstract override /*1*/ /*fake_override*/ fun prepend(/*0*/ vararg nodes: dynamic /*kotlin.Array<out dynamic>*/): kotlin.Unit
    public abstract override /*1*/ /*fake_override*/ fun querySelector(/*0*/ selectors: kotlin.String): org.w3c.dom.Element?
    public abstract override /*1*/ /*fake_override*/ fun querySelectorAll(/*0*/ selectors: kotlin.String): org.w3c.dom.NodeList
    public final override /*1*/ /*fake_override*/ fun releasePointerCapture(/*0*/ pointerId: kotlin.Int): kotlin.Unit
    public abstract override /*1*/ /*fake_override*/ fun remove(): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun removeAttribute(/*0*/ qualifiedName: kotlin.String): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun removeAttributeNS(/*0*/ namespace: kotlin.String?, /*1*/ localName: kotlin.String): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun removeAttributeNode(/*0*/ attr: org.w3c.dom.Attr): org.w3c.dom.Attr
    public final override /*1*/ /*fake_override*/ fun removeChild(/*0*/ child: org.w3c.dom.Node): org.w3c.dom.Node
    public final override /*1*/ /*fake_override*/ fun removeEventListener(/*0*/ type: kotlin.String, /*1*/ callback: ((org.w3c.dom.events.Event) -> kotlin.Unit)?, /*2*/ options: dynamic = ...): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun removeEventListener(/*0*/ type: kotlin.String, /*1*/ callback: org.w3c.dom.events.EventListener?, /*2*/ options: dynamic = ...): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun replaceChild(/*0*/ node: org.w3c.dom.Node, /*1*/ child: org.w3c.dom.Node): org.w3c.dom.Node
    public abstract override /*1*/ /*fake_override*/ fun replaceWith(/*0*/ vararg nodes: dynamic /*kotlin.Array<out dynamic>*/): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun requestFullscreen(): kotlin.js.Promise<kotlin.Unit>
    public final override /*1*/ /*fake_override*/ fun scroll(/*0*/ x: kotlin.Double, /*1*/ y: kotlin.Double): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun scroll(/*0*/ options: org.w3c.dom.ScrollToOptions = ...): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun scrollBy(/*0*/ x: kotlin.Double, /*1*/ y: kotlin.Double): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun scrollBy(/*0*/ options: org.w3c.dom.ScrollToOptions = ...): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun scrollIntoView(): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun scrollIntoView(/*0*/ arg: dynamic): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun scrollTo(/*0*/ x: kotlin.Double, /*1*/ y: kotlin.Double): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun scrollTo(/*0*/ options: org.w3c.dom.ScrollToOptions = ...): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun setAttribute(/*0*/ qualifiedName: kotlin.String, /*1*/ value: kotlin.String): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun setAttributeNS(/*0*/ namespace: kotlin.String?, /*1*/ qualifiedName: kotlin.String, /*2*/ value: kotlin.String): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun setAttributeNode(/*0*/ attr: org.w3c.dom.Attr): org.w3c.dom.Attr?
    public final override /*1*/ /*fake_override*/ fun setAttributeNodeNS(/*0*/ attr: org.w3c.dom.Attr): org.w3c.dom.Attr?
    public final override /*1*/ /*fake_override*/ fun setPointerCapture(/*0*/ pointerId: kotlin.Int): kotlin.Unit
    public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
    public final override /*1*/ /*fake_override*/ fun webkitMatchesSelector(/*0*/ selectors: kotlin.String): kotlin.Boolean

    public companion object Companion {
        /*primary*/ private constructor Companion()
        public final val ATTRIBUTE_NODE: kotlin.Short
            public final fun <get-ATTRIBUTE_NODE>(): kotlin.Short
        public final val CDATA_SECTION_NODE: kotlin.Short
            public final fun <get-CDATA_SECTION_NODE>(): kotlin.Short
        public final val COMMENT_NODE: kotlin.Short
            public final fun <get-COMMENT_NODE>(): kotlin.Short
        public final val DOCUMENT_FRAGMENT_NODE: kotlin.Short
            public final fun <get-DOCUMENT_FRAGMENT_NODE>(): kotlin.Short
        public final val DOCUMENT_NODE: kotlin.Short
            public final fun <get-DOCUMENT_NODE>(): kotlin.Short
        public final val DOCUMENT_POSITION_CONTAINED_BY: kotlin.Short
            public final fun <get-DOCUMENT_POSITION_CONTAINED_BY>(): kotlin.Short
        public final val DOCUMENT_POSITION_CONTAINS: kotlin.Short
            public final fun <get-DOCUMENT_POSITION_CONTAINS>(): kotlin.Short
        public final val DOCUMENT_POSITION_DISCONNECTED: kotlin.Short
            public final fun <get-DOCUMENT_POSITION_DISCONNECTED>(): kotlin.Short
        public final val DOCUMENT_POSITION_FOLLOWING: kotlin.Short
            public final fun <get-DOCUMENT_POSITION_FOLLOWING>(): kotlin.Short
        public final val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: kotlin.Short
            public final fun <get-DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC>(): kotlin.Short
        public final val DOCUMENT_POSITION_PRECEDING: kotlin.Short
            public final fun <get-DOCUMENT_POSITION_PRECEDING>(): kotlin.Short
        public final val DOCUMENT_TYPE_NODE: kotlin.Short
            public final fun <get-DOCUMENT_TYPE_NODE>(): kotlin.Short
        public final val ELEMENT_NODE: kotlin.Short
            public final fun <get-ELEMENT_NODE>(): kotlin.Short
        public final val ENTITY_NODE: kotlin.Short
            public final fun <get-ENTITY_NODE>(): kotlin.Short
        public final val ENTITY_REFERENCE_NODE: kotlin.Short
            public final fun <get-ENTITY_REFERENCE_NODE>(): kotlin.Short
        public final val NOTATION_NODE: kotlin.Short
            public final fun <get-NOTATION_NODE>(): kotlin.Short
        public final val PROCESSING_INSTRUCTION_NODE: kotlin.Short
            public final fun <get-PROCESSING_INSTRUCTION_NODE>(): kotlin.Short
        public final val SVG_SPREADMETHOD_PAD: kotlin.Short
            public final fun <get-SVG_SPREADMETHOD_PAD>(): kotlin.Short
        public final val SVG_SPREADMETHOD_REFLECT: kotlin.Short
            public final fun <get-SVG_SPREADMETHOD_REFLECT>(): kotlin.Short
        public final val SVG_SPREADMETHOD_REPEAT: kotlin.Short
            public final fun <get-SVG_SPREADMETHOD_REPEAT>(): kotlin.Short
        public final val SVG_SPREADMETHOD_UNKNOWN: kotlin.Short
            public final fun <get-SVG_SPREADMETHOD_UNKNOWN>(): kotlin.Short
        public final val SVG_UNIT_TYPE_OBJECTBOUNDINGBOX: kotlin.Short
            public final fun <get-SVG_UNIT_TYPE_OBJECTBOUNDINGBOX>(): kotlin.Short
        public final val SVG_UNIT_TYPE_UNKNOWN: kotlin.Short
            public final fun <get-SVG_UNIT_TYPE_UNKNOWN>(): kotlin.Short
        public final val SVG_UNIT_TYPE_USERSPACEONUSE: kotlin.Short
            public final fun <get-SVG_UNIT_TYPE_USERSPACEONUSE>(): kotlin.Short
        public final val TEXT_NODE: kotlin.Short
            public final fun <get-TEXT_NODE>(): kotlin.Short
        public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
        public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
        public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
    }
}

public abstract external class SVGMeshpatchElement : org.w3c.dom.svg.SVGElement {
    /*primary*/ public constructor SVGMeshpatchElement()
    public open override /*1*/ /*fake_override*/ val assignedSlot: org.w3c.dom.HTMLSlotElement?
        public open override /*1*/ /*fake_override*/ fun <get-assignedSlot>(): org.w3c.dom.HTMLSlotElement?
    public open override /*1*/ /*fake_override*/ val attributes: org.w3c.dom.NamedNodeMap
        public open override /*1*/ /*fake_override*/ fun <get-attributes>(): org.w3c.dom.NamedNodeMap
    public open override /*1*/ /*fake_override*/ val baseURI: kotlin.String
        public open override /*1*/ /*fake_override*/ fun <get-baseURI>(): kotlin.String
    public abstract override /*1*/ /*fake_override*/ val childElementCount: kotlin.Int
        public abstract override /*1*/ /*fake_override*/ fun <get-childElementCount>(): kotlin.Int
    public open override /*1*/ /*fake_override*/ val childNodes: org.w3c.dom.NodeList
        public open override /*1*/ /*fake_override*/ fun <get-childNodes>(): org.w3c.dom.NodeList
    public abstract override /*1*/ /*fake_override*/ val children: org.w3c.dom.HTMLCollection
        public abstract override /*1*/ /*fake_override*/ fun <get-children>(): org.w3c.dom.HTMLCollection
    public open override /*1*/ /*fake_override*/ val classList: org.w3c.dom.DOMTokenList
        public open override /*1*/ /*fake_override*/ fun <get-classList>(): org.w3c.dom.DOMTokenList
    public open override /*1*/ /*fake_override*/ var className: kotlin.String
        public open override /*1*/ /*fake_override*/ fun <get-className>(): kotlin.String
        public open override /*1*/ /*fake_override*/ fun <set-className>(/*0*/ <set-?>: kotlin.String): kotlin.Unit
    public open override /*1*/ /*fake_override*/ val clientHeight: kotlin.Int
        public open override /*1*/ /*fake_override*/ fun <get-clientHeight>(): kotlin.Int
    public open override /*1*/ /*fake_override*/ val clientLeft: kotlin.Int
        public open override /*1*/ /*fake_override*/ fun <get-clientLeft>(): kotlin.Int
    public open override /*1*/ /*fake_override*/ val clientTop: kotlin.Int
        public open override /*1*/ /*fake_override*/ fun <get-clientTop>(): kotlin.Int
    public open override /*1*/ /*fake_override*/ val clientWidth: kotlin.Int
        public open override /*1*/ /*fake_override*/ fun <get-clientWidth>(): kotlin.Int
    public open override /*1*/ /*fake_override*/ val correspondingElement: org.w3c.dom.svg.SVGElement?
        public open override /*1*/ /*fake_override*/ fun <get-correspondingElement>(): org.w3c.dom.svg.SVGElement?
    public open override /*1*/ /*fake_override*/ val correspondingUseElement: org.w3c.dom.svg.SVGUseElement?
        public open override /*1*/ /*fake_override*/ fun <get-correspondingUseElement>(): org.w3c.dom.svg.SVGUseElement?
    public open override /*1*/ /*fake_override*/ val dataset: org.w3c.dom.DOMStringMap
        public open override /*1*/ /*fake_override*/ fun <get-dataset>(): org.w3c.dom.DOMStringMap
    public open override /*1*/ /*fake_override*/ val firstChild: org.w3c.dom.Node?
        public open override /*1*/ /*fake_override*/ fun <get-firstChild>(): org.w3c.dom.Node?
    public open override /*1*/ /*fake_override*/ val firstElementChild: org.w3c.dom.Element?
        public open override /*1*/ /*fake_override*/ fun <get-firstElementChild>(): org.w3c.dom.Element?
    public open override /*1*/ /*fake_override*/ var id: kotlin.String
        public open override /*1*/ /*fake_override*/ fun <get-id>(): kotlin.String
        public open override /*1*/ /*fake_override*/ fun <set-id>(/*0*/ <set-?>: kotlin.String): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var innerHTML: kotlin.String
        public open override /*1*/ /*fake_override*/ fun <get-innerHTML>(): kotlin.String
        public open override /*1*/ /*fake_override*/ fun <set-innerHTML>(/*0*/ <set-?>: kotlin.String): kotlin.Unit
    public open override /*1*/ /*fake_override*/ val isConnected: kotlin.Boolean
        public open override /*1*/ /*fake_override*/ fun <get-isConnected>(): kotlin.Boolean
    public open override /*1*/ /*fake_override*/ val lastChild: org.w3c.dom.Node?
        public open override /*1*/ /*fake_override*/ fun <get-lastChild>(): org.w3c.dom.Node?
    public open override /*1*/ /*fake_override*/ val lastElementChild: org.w3c.dom.Element?
        public open override /*1*/ /*fake_override*/ fun <get-lastElementChild>(): org.w3c.dom.Element?
    public open override /*1*/ /*fake_override*/ val localName: kotlin.String
        public open override /*1*/ /*fake_override*/ fun <get-localName>(): kotlin.String
    public open override /*1*/ /*fake_override*/ val namespaceURI: kotlin.String?
        public open override /*1*/ /*fake_override*/ fun <get-namespaceURI>(): kotlin.String?
    public open override /*1*/ /*fake_override*/ val nextElementSibling: org.w3c.dom.Element?
        public open override /*1*/ /*fake_override*/ fun <get-nextElementSibling>(): org.w3c.dom.Element?
    public open override /*1*/ /*fake_override*/ val nextSibling: org.w3c.dom.Node?
        public open override /*1*/ /*fake_override*/ fun <get-nextSibling>(): org.w3c.dom.Node?
    public open override /*1*/ /*fake_override*/ val nodeName: kotlin.String
        public open override /*1*/ /*fake_override*/ fun <get-nodeName>(): kotlin.String
    public open override /*1*/ /*fake_override*/ val nodeType: kotlin.Short
        public open override /*1*/ /*fake_override*/ fun <get-nodeType>(): kotlin.Short
    public open override /*1*/ /*fake_override*/ var nodeValue: kotlin.String?
        public open override /*1*/ /*fake_override*/ fun <get-nodeValue>(): kotlin.String?
        public open override /*1*/ /*fake_override*/ fun <set-nodeValue>(/*0*/ <set-?>: kotlin.String?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onabort: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onabort>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onabort>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onblur: ((org.w3c.dom.events.FocusEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onblur>(): ((org.w3c.dom.events.FocusEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onblur>(/*0*/ value: ((org.w3c.dom.events.FocusEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var oncancel: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-oncancel>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-oncancel>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var oncanplay: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-oncanplay>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-oncanplay>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var oncanplaythrough: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-oncanplaythrough>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-oncanplaythrough>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onchange: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onchange>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onchange>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onclick: ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onclick>(): ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onclick>(/*0*/ value: ((org.w3c.dom.events.MouseEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onclose: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onclose>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onclose>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var oncontextmenu: ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-oncontextmenu>(): ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-oncontextmenu>(/*0*/ value: ((org.w3c.dom.events.MouseEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var oncuechange: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-oncuechange>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-oncuechange>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ondblclick: ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ondblclick>(): ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ondblclick>(/*0*/ value: ((org.w3c.dom.events.MouseEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ondrag: ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ondrag>(): ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ondrag>(/*0*/ value: ((org.w3c.dom.DragEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ondragend: ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ondragend>(): ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ondragend>(/*0*/ value: ((org.w3c.dom.DragEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ondragenter: ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ondragenter>(): ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ondragenter>(/*0*/ value: ((org.w3c.dom.DragEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ondragexit: ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ondragexit>(): ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ondragexit>(/*0*/ value: ((org.w3c.dom.DragEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ondragleave: ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ondragleave>(): ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ondragleave>(/*0*/ value: ((org.w3c.dom.DragEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ondragover: ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ondragover>(): ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ondragover>(/*0*/ value: ((org.w3c.dom.DragEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ondragstart: ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ondragstart>(): ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ondragstart>(/*0*/ value: ((org.w3c.dom.DragEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ondrop: ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ondrop>(): ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ondrop>(/*0*/ value: ((org.w3c.dom.DragEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ondurationchange: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ondurationchange>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ondurationchange>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onemptied: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onemptied>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onemptied>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onended: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onended>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onended>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onerror: ((dynamic, kotlin.String, kotlin.Int, kotlin.Int, kotlin.Any?) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onerror>(): ((dynamic, kotlin.String, kotlin.Int, kotlin.Int, kotlin.Any?) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onerror>(/*0*/ value: ((dynamic, kotlin.String, kotlin.Int, kotlin.Int, kotlin.Any?) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onfocus: ((org.w3c.dom.events.FocusEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onfocus>(): ((org.w3c.dom.events.FocusEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onfocus>(/*0*/ value: ((org.w3c.dom.events.FocusEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ongotpointercapture: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ongotpointercapture>(): ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ongotpointercapture>(/*0*/ value: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var oninput: ((org.w3c.dom.events.InputEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-oninput>(): ((org.w3c.dom.events.InputEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-oninput>(/*0*/ value: ((org.w3c.dom.events.InputEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var oninvalid: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-oninvalid>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-oninvalid>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onkeydown: ((org.w3c.dom.events.KeyboardEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onkeydown>(): ((org.w3c.dom.events.KeyboardEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onkeydown>(/*0*/ value: ((org.w3c.dom.events.KeyboardEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onkeypress: ((org.w3c.dom.events.KeyboardEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onkeypress>(): ((org.w3c.dom.events.KeyboardEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onkeypress>(/*0*/ value: ((org.w3c.dom.events.KeyboardEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onkeyup: ((org.w3c.dom.events.KeyboardEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onkeyup>(): ((org.w3c.dom.events.KeyboardEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onkeyup>(/*0*/ value: ((org.w3c.dom.events.KeyboardEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onload: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onload>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onload>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onloadeddata: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onloadeddata>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onloadeddata>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onloadedmetadata: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onloadedmetadata>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onloadedmetadata>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onloadend: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onloadend>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onloadend>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onloadstart: ((org.w3c.xhr.ProgressEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onloadstart>(): ((org.w3c.xhr.ProgressEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onloadstart>(/*0*/ value: ((org.w3c.xhr.ProgressEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onlostpointercapture: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onlostpointercapture>(): ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onlostpointercapture>(/*0*/ value: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onmousedown: ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onmousedown>(): ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onmousedown>(/*0*/ value: ((org.w3c.dom.events.MouseEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onmouseenter: ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onmouseenter>(): ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onmouseenter>(/*0*/ value: ((org.w3c.dom.events.MouseEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onmouseleave: ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onmouseleave>(): ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onmouseleave>(/*0*/ value: ((org.w3c.dom.events.MouseEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onmousemove: ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onmousemove>(): ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onmousemove>(/*0*/ value: ((org.w3c.dom.events.MouseEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onmouseout: ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onmouseout>(): ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onmouseout>(/*0*/ value: ((org.w3c.dom.events.MouseEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onmouseover: ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onmouseover>(): ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onmouseover>(/*0*/ value: ((org.w3c.dom.events.MouseEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onmouseup: ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onmouseup>(): ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onmouseup>(/*0*/ value: ((org.w3c.dom.events.MouseEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onpause: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onpause>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onpause>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onplay: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onplay>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onplay>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onplaying: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onplaying>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onplaying>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onpointercancel: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onpointercancel>(): ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onpointercancel>(/*0*/ value: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onpointerdown: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onpointerdown>(): ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onpointerdown>(/*0*/ value: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onpointerenter: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onpointerenter>(): ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onpointerenter>(/*0*/ value: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onpointerleave: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onpointerleave>(): ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onpointerleave>(/*0*/ value: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onpointermove: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onpointermove>(): ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onpointermove>(/*0*/ value: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onpointerout: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onpointerout>(): ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onpointerout>(/*0*/ value: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onpointerover: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onpointerover>(): ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onpointerover>(/*0*/ value: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onpointerup: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onpointerup>(): ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onpointerup>(/*0*/ value: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onprogress: ((org.w3c.xhr.ProgressEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onprogress>(): ((org.w3c.xhr.ProgressEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onprogress>(/*0*/ value: ((org.w3c.xhr.ProgressEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onratechange: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onratechange>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onratechange>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onreset: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onreset>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onreset>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onresize: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onresize>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onresize>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onscroll: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onscroll>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onscroll>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onseeked: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onseeked>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onseeked>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onseeking: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onseeking>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onseeking>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onselect: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onselect>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onselect>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onshow: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onshow>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onshow>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onstalled: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onstalled>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onstalled>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onsubmit: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onsubmit>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onsubmit>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onsuspend: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onsuspend>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onsuspend>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ontimeupdate: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ontimeupdate>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ontimeupdate>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ontoggle: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ontoggle>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ontoggle>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onvolumechange: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onvolumechange>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onvolumechange>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onwaiting: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onwaiting>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onwaiting>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onwheel: ((org.w3c.dom.events.WheelEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onwheel>(): ((org.w3c.dom.events.WheelEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onwheel>(/*0*/ value: ((org.w3c.dom.events.WheelEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var outerHTML: kotlin.String
        public open override /*1*/ /*fake_override*/ fun <get-outerHTML>(): kotlin.String
        public open override /*1*/ /*fake_override*/ fun <set-outerHTML>(/*0*/ <set-?>: kotlin.String): kotlin.Unit
    public open override /*1*/ /*fake_override*/ val ownerDocument: org.w3c.dom.Document?
        public open override /*1*/ /*fake_override*/ fun <get-ownerDocument>(): org.w3c.dom.Document?
    public open override /*1*/ /*fake_override*/ val ownerSVGElement: org.w3c.dom.svg.SVGSVGElement?
        public open override /*1*/ /*fake_override*/ fun <get-ownerSVGElement>(): org.w3c.dom.svg.SVGSVGElement?
    public open override /*1*/ /*fake_override*/ val parentElement: org.w3c.dom.Element?
        public open override /*1*/ /*fake_override*/ fun <get-parentElement>(): org.w3c.dom.Element?
    public open override /*1*/ /*fake_override*/ val parentNode: org.w3c.dom.Node?
        public open override /*1*/ /*fake_override*/ fun <get-parentNode>(): org.w3c.dom.Node?
    public open override /*1*/ /*fake_override*/ val prefix: kotlin.String?
        public open override /*1*/ /*fake_override*/ fun <get-prefix>(): kotlin.String?
    public open override /*1*/ /*fake_override*/ val previousElementSibling: org.w3c.dom.Element?
        public open override /*1*/ /*fake_override*/ fun <get-previousElementSibling>(): org.w3c.dom.Element?
    public open override /*1*/ /*fake_override*/ val previousSibling: org.w3c.dom.Node?
        public open override /*1*/ /*fake_override*/ fun <get-previousSibling>(): org.w3c.dom.Node?
    public open override /*1*/ /*fake_override*/ val scrollHeight: kotlin.Int
        public open override /*1*/ /*fake_override*/ fun <get-scrollHeight>(): kotlin.Int
    public open override /*1*/ /*fake_override*/ var scrollLeft: kotlin.Double
        public open override /*1*/ /*fake_override*/ fun <get-scrollLeft>(): kotlin.Double
        public open override /*1*/ /*fake_override*/ fun <set-scrollLeft>(/*0*/ <set-?>: kotlin.Double): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var scrollTop: kotlin.Double
        public open override /*1*/ /*fake_override*/ fun <get-scrollTop>(): kotlin.Double
        public open override /*1*/ /*fake_override*/ fun <set-scrollTop>(/*0*/ <set-?>: kotlin.Double): kotlin.Unit
    public open override /*1*/ /*fake_override*/ val scrollWidth: kotlin.Int
        public open override /*1*/ /*fake_override*/ fun <get-scrollWidth>(): kotlin.Int
    public open override /*1*/ /*fake_override*/ val shadowRoot: org.w3c.dom.ShadowRoot?
        public open override /*1*/ /*fake_override*/ fun <get-shadowRoot>(): org.w3c.dom.ShadowRoot?
    public open override /*1*/ /*fake_override*/ var slot: kotlin.String
        public open override /*1*/ /*fake_override*/ fun <get-slot>(): kotlin.String
        public open override /*1*/ /*fake_override*/ fun <set-slot>(/*0*/ <set-?>: kotlin.String): kotlin.Unit
    public abstract override /*1*/ /*fake_override*/ val style: org.w3c.dom.css.CSSStyleDeclaration
        public abstract override /*1*/ /*fake_override*/ fun <get-style>(): org.w3c.dom.css.CSSStyleDeclaration
    public open override /*1*/ /*fake_override*/ var tabIndex: kotlin.Int
        public open override /*1*/ /*fake_override*/ fun <get-tabIndex>(): kotlin.Int
        public open override /*1*/ /*fake_override*/ fun <set-tabIndex>(/*0*/ <set-?>: kotlin.Int): kotlin.Unit
    public open override /*1*/ /*fake_override*/ val tagName: kotlin.String
        public open override /*1*/ /*fake_override*/ fun <get-tagName>(): kotlin.String
    public open override /*1*/ /*fake_override*/ var textContent: kotlin.String?
        public open override /*1*/ /*fake_override*/ fun <get-textContent>(): kotlin.String?
        public open override /*1*/ /*fake_override*/ fun <set-textContent>(/*0*/ <set-?>: kotlin.String?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ val viewportElement: org.w3c.dom.svg.SVGElement?
        public open override /*1*/ /*fake_override*/ fun <get-viewportElement>(): org.w3c.dom.svg.SVGElement?
    public final override /*1*/ /*fake_override*/ fun addEventListener(/*0*/ type: kotlin.String, /*1*/ callback: ((org.w3c.dom.events.Event) -> kotlin.Unit)?, /*2*/ options: dynamic = ...): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun addEventListener(/*0*/ type: kotlin.String, /*1*/ callback: org.w3c.dom.events.EventListener?, /*2*/ options: dynamic = ...): kotlin.Unit
    public abstract override /*1*/ /*fake_override*/ fun after(/*0*/ vararg nodes: dynamic /*kotlin.Array<out dynamic>*/): kotlin.Unit
    public abstract override /*1*/ /*fake_override*/ fun append(/*0*/ vararg nodes: dynamic /*kotlin.Array<out dynamic>*/): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun appendChild(/*0*/ node: org.w3c.dom.Node): org.w3c.dom.Node
    public final override /*1*/ /*fake_override*/ fun attachShadow(/*0*/ init: org.w3c.dom.ShadowRootInit): org.w3c.dom.ShadowRoot
    public abstract override /*1*/ /*fake_override*/ fun before(/*0*/ vararg nodes: dynamic /*kotlin.Array<out dynamic>*/): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun blur(): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun cloneNode(/*0*/ deep: kotlin.Boolean = ...): org.w3c.dom.Node
    public final override /*1*/ /*fake_override*/ fun closest(/*0*/ selectors: kotlin.String): org.w3c.dom.Element?
    public final override /*1*/ /*fake_override*/ fun compareDocumentPosition(/*0*/ other: org.w3c.dom.Node): kotlin.Short
    public final override /*1*/ /*fake_override*/ fun contains(/*0*/ other: org.w3c.dom.Node?): kotlin.Boolean
    public abstract override /*1*/ /*fake_override*/ fun convertPointFromNode(/*0*/ point: org.w3c.dom.DOMPointInit, /*1*/ from: dynamic, /*2*/ options: org.w3c.dom.ConvertCoordinateOptions = ...): org.w3c.dom.DOMPoint
    public abstract override /*1*/ /*fake_override*/ fun convertQuadFromNode(/*0*/ quad: dynamic, /*1*/ from: dynamic, /*2*/ options: org.w3c.dom.ConvertCoordinateOptions = ...): org.w3c.dom.DOMQuad
    public abstract override /*1*/ /*fake_override*/ fun convertRectFromNode(/*0*/ rect: org.w3c.dom.DOMRectReadOnly, /*1*/ from: dynamic, /*2*/ options: org.w3c.dom.ConvertCoordinateOptions = ...): org.w3c.dom.DOMQuad
    public final override /*1*/ /*fake_override*/ fun dispatchEvent(/*0*/ event: org.w3c.dom.events.Event): kotlin.Boolean
    public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
    public final override /*1*/ /*fake_override*/ fun focus(): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun getAttribute(/*0*/ qualifiedName: kotlin.String): kotlin.String?
    public final override /*1*/ /*fake_override*/ fun getAttributeNS(/*0*/ namespace: kotlin.String?, /*1*/ localName: kotlin.String): kotlin.String?
    public final override /*1*/ /*fake_override*/ fun getAttributeNames(): kotlin.Array<kotlin.String>
    public final override /*1*/ /*fake_override*/ fun getAttributeNode(/*0*/ qualifiedName: kotlin.String): org.w3c.dom.Attr?
    public final override /*1*/ /*fake_override*/ fun getAttributeNodeNS(/*0*/ namespace: kotlin.String?, /*1*/ localName: kotlin.String): org.w3c.dom.Attr?
    public final override /*1*/ /*fake_override*/ fun getBoundingClientRect(): org.w3c.dom.DOMRect
    public abstract override /*1*/ /*fake_override*/ fun getBoxQuads(/*0*/ options: org.w3c.dom.BoxQuadOptions = ...): kotlin.Array<org.w3c.dom.DOMQuad>
    public final override /*1*/ /*fake_override*/ fun getClientRects(): kotlin.Array<org.w3c.dom.DOMRect>
    public final override /*1*/ /*fake_override*/ fun getElementsByClassName(/*0*/ classNames: kotlin.String): org.w3c.dom.HTMLCollection
    public final override /*1*/ /*fake_override*/ fun getElementsByTagName(/*0*/ qualifiedName: kotlin.String): org.w3c.dom.HTMLCollection
    public final override /*1*/ /*fake_override*/ fun getElementsByTagNameNS(/*0*/ namespace: kotlin.String?, /*1*/ localName: kotlin.String): org.w3c.dom.HTMLCollection
    public final override /*1*/ /*fake_override*/ fun getRootNode(/*0*/ options: org.w3c.dom.GetRootNodeOptions = ...): org.w3c.dom.Node
    public final override /*1*/ /*fake_override*/ fun hasAttribute(/*0*/ qualifiedName: kotlin.String): kotlin.Boolean
    public final override /*1*/ /*fake_override*/ fun hasAttributeNS(/*0*/ namespace: kotlin.String?, /*1*/ localName: kotlin.String): kotlin.Boolean
    public final override /*1*/ /*fake_override*/ fun hasAttributes(): kotlin.Boolean
    public final override /*1*/ /*fake_override*/ fun hasChildNodes(): kotlin.Boolean
    public final override /*1*/ /*fake_override*/ fun hasPointerCapture(/*0*/ pointerId: kotlin.Int): kotlin.Boolean
    public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
    public final override /*1*/ /*fake_override*/ fun insertAdjacentElement(/*0*/ where: kotlin.String, /*1*/ element: org.w3c.dom.Element): org.w3c.dom.Element?
    public final override /*1*/ /*fake_override*/ fun insertAdjacentHTML(/*0*/ position: kotlin.String, /*1*/ text: kotlin.String): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun insertAdjacentText(/*0*/ where: kotlin.String, /*1*/ data: kotlin.String): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun insertBefore(/*0*/ node: org.w3c.dom.Node, /*1*/ child: org.w3c.dom.Node?): org.w3c.dom.Node
    public final override /*1*/ /*fake_override*/ fun isDefaultNamespace(/*0*/ namespace: kotlin.String?): kotlin.Boolean
    public final override /*1*/ /*fake_override*/ fun isEqualNode(/*0*/ otherNode: org.w3c.dom.Node?): kotlin.Boolean
    public final override /*1*/ /*fake_override*/ fun isSameNode(/*0*/ otherNode: org.w3c.dom.Node?): kotlin.Boolean
    public final override /*1*/ /*fake_override*/ fun lookupNamespaceURI(/*0*/ prefix: kotlin.String?): kotlin.String?
    public final override /*1*/ /*fake_override*/ fun lookupPrefix(/*0*/ namespace: kotlin.String?): kotlin.String?
    public final override /*1*/ /*fake_override*/ fun matches(/*0*/ selectors: kotlin.String): kotlin.Boolean
    public final override /*1*/ /*fake_override*/ fun normalize(): kotlin.Unit
    public abstract override /*1*/ /*fake_override*/ fun prepend(/*0*/ vararg nodes: dynamic /*kotlin.Array<out dynamic>*/): kotlin.Unit
    public abstract override /*1*/ /*fake_override*/ fun querySelector(/*0*/ selectors: kotlin.String): org.w3c.dom.Element?
    public abstract override /*1*/ /*fake_override*/ fun querySelectorAll(/*0*/ selectors: kotlin.String): org.w3c.dom.NodeList
    public final override /*1*/ /*fake_override*/ fun releasePointerCapture(/*0*/ pointerId: kotlin.Int): kotlin.Unit
    public abstract override /*1*/ /*fake_override*/ fun remove(): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun removeAttribute(/*0*/ qualifiedName: kotlin.String): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun removeAttributeNS(/*0*/ namespace: kotlin.String?, /*1*/ localName: kotlin.String): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun removeAttributeNode(/*0*/ attr: org.w3c.dom.Attr): org.w3c.dom.Attr
    public final override /*1*/ /*fake_override*/ fun removeChild(/*0*/ child: org.w3c.dom.Node): org.w3c.dom.Node
    public final override /*1*/ /*fake_override*/ fun removeEventListener(/*0*/ type: kotlin.String, /*1*/ callback: ((org.w3c.dom.events.Event) -> kotlin.Unit)?, /*2*/ options: dynamic = ...): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun removeEventListener(/*0*/ type: kotlin.String, /*1*/ callback: org.w3c.dom.events.EventListener?, /*2*/ options: dynamic = ...): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun replaceChild(/*0*/ node: org.w3c.dom.Node, /*1*/ child: org.w3c.dom.Node): org.w3c.dom.Node
    public abstract override /*1*/ /*fake_override*/ fun replaceWith(/*0*/ vararg nodes: dynamic /*kotlin.Array<out dynamic>*/): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun requestFullscreen(): kotlin.js.Promise<kotlin.Unit>
    public final override /*1*/ /*fake_override*/ fun scroll(/*0*/ x: kotlin.Double, /*1*/ y: kotlin.Double): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun scroll(/*0*/ options: org.w3c.dom.ScrollToOptions = ...): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun scrollBy(/*0*/ x: kotlin.Double, /*1*/ y: kotlin.Double): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun scrollBy(/*0*/ options: org.w3c.dom.ScrollToOptions = ...): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun scrollIntoView(): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun scrollIntoView(/*0*/ arg: dynamic): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun scrollTo(/*0*/ x: kotlin.Double, /*1*/ y: kotlin.Double): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun scrollTo(/*0*/ options: org.w3c.dom.ScrollToOptions = ...): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun setAttribute(/*0*/ qualifiedName: kotlin.String, /*1*/ value: kotlin.String): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun setAttributeNS(/*0*/ namespace: kotlin.String?, /*1*/ qualifiedName: kotlin.String, /*2*/ value: kotlin.String): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun setAttributeNode(/*0*/ attr: org.w3c.dom.Attr): org.w3c.dom.Attr?
    public final override /*1*/ /*fake_override*/ fun setAttributeNodeNS(/*0*/ attr: org.w3c.dom.Attr): org.w3c.dom.Attr?
    public final override /*1*/ /*fake_override*/ fun setPointerCapture(/*0*/ pointerId: kotlin.Int): kotlin.Unit
    public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
    public final override /*1*/ /*fake_override*/ fun webkitMatchesSelector(/*0*/ selectors: kotlin.String): kotlin.Boolean

    public companion object Companion {
        /*primary*/ private constructor Companion()
        public final val ATTRIBUTE_NODE: kotlin.Short
            public final fun <get-ATTRIBUTE_NODE>(): kotlin.Short
        public final val CDATA_SECTION_NODE: kotlin.Short
            public final fun <get-CDATA_SECTION_NODE>(): kotlin.Short
        public final val COMMENT_NODE: kotlin.Short
            public final fun <get-COMMENT_NODE>(): kotlin.Short
        public final val DOCUMENT_FRAGMENT_NODE: kotlin.Short
            public final fun <get-DOCUMENT_FRAGMENT_NODE>(): kotlin.Short
        public final val DOCUMENT_NODE: kotlin.Short
            public final fun <get-DOCUMENT_NODE>(): kotlin.Short
        public final val DOCUMENT_POSITION_CONTAINED_BY: kotlin.Short
            public final fun <get-DOCUMENT_POSITION_CONTAINED_BY>(): kotlin.Short
        public final val DOCUMENT_POSITION_CONTAINS: kotlin.Short
            public final fun <get-DOCUMENT_POSITION_CONTAINS>(): kotlin.Short
        public final val DOCUMENT_POSITION_DISCONNECTED: kotlin.Short
            public final fun <get-DOCUMENT_POSITION_DISCONNECTED>(): kotlin.Short
        public final val DOCUMENT_POSITION_FOLLOWING: kotlin.Short
            public final fun <get-DOCUMENT_POSITION_FOLLOWING>(): kotlin.Short
        public final val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: kotlin.Short
            public final fun <get-DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC>(): kotlin.Short
        public final val DOCUMENT_POSITION_PRECEDING: kotlin.Short
            public final fun <get-DOCUMENT_POSITION_PRECEDING>(): kotlin.Short
        public final val DOCUMENT_TYPE_NODE: kotlin.Short
            public final fun <get-DOCUMENT_TYPE_NODE>(): kotlin.Short
        public final val ELEMENT_NODE: kotlin.Short
            public final fun <get-ELEMENT_NODE>(): kotlin.Short
        public final val ENTITY_NODE: kotlin.Short
            public final fun <get-ENTITY_NODE>(): kotlin.Short
        public final val ENTITY_REFERENCE_NODE: kotlin.Short
            public final fun <get-ENTITY_REFERENCE_NODE>(): kotlin.Short
        public final val NOTATION_NODE: kotlin.Short
            public final fun <get-NOTATION_NODE>(): kotlin.Short
        public final val PROCESSING_INSTRUCTION_NODE: kotlin.Short
            public final fun <get-PROCESSING_INSTRUCTION_NODE>(): kotlin.Short
        public final val TEXT_NODE: kotlin.Short
            public final fun <get-TEXT_NODE>(): kotlin.Short
        public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
        public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
        public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
    }
}

public abstract external class SVGMeshrowElement : org.w3c.dom.svg.SVGElement {
    /*primary*/ public constructor SVGMeshrowElement()
    public open override /*1*/ /*fake_override*/ val assignedSlot: org.w3c.dom.HTMLSlotElement?
        public open override /*1*/ /*fake_override*/ fun <get-assignedSlot>(): org.w3c.dom.HTMLSlotElement?
    public open override /*1*/ /*fake_override*/ val attributes: org.w3c.dom.NamedNodeMap
        public open override /*1*/ /*fake_override*/ fun <get-attributes>(): org.w3c.dom.NamedNodeMap
    public open override /*1*/ /*fake_override*/ val baseURI: kotlin.String
        public open override /*1*/ /*fake_override*/ fun <get-baseURI>(): kotlin.String
    public abstract override /*1*/ /*fake_override*/ val childElementCount: kotlin.Int
        public abstract override /*1*/ /*fake_override*/ fun <get-childElementCount>(): kotlin.Int
    public open override /*1*/ /*fake_override*/ val childNodes: org.w3c.dom.NodeList
        public open override /*1*/ /*fake_override*/ fun <get-childNodes>(): org.w3c.dom.NodeList
    public abstract override /*1*/ /*fake_override*/ val children: org.w3c.dom.HTMLCollection
        public abstract override /*1*/ /*fake_override*/ fun <get-children>(): org.w3c.dom.HTMLCollection
    public open override /*1*/ /*fake_override*/ val classList: org.w3c.dom.DOMTokenList
        public open override /*1*/ /*fake_override*/ fun <get-classList>(): org.w3c.dom.DOMTokenList
    public open override /*1*/ /*fake_override*/ var className: kotlin.String
        public open override /*1*/ /*fake_override*/ fun <get-className>(): kotlin.String
        public open override /*1*/ /*fake_override*/ fun <set-className>(/*0*/ <set-?>: kotlin.String): kotlin.Unit
    public open override /*1*/ /*fake_override*/ val clientHeight: kotlin.Int
        public open override /*1*/ /*fake_override*/ fun <get-clientHeight>(): kotlin.Int
    public open override /*1*/ /*fake_override*/ val clientLeft: kotlin.Int
        public open override /*1*/ /*fake_override*/ fun <get-clientLeft>(): kotlin.Int
    public open override /*1*/ /*fake_override*/ val clientTop: kotlin.Int
        public open override /*1*/ /*fake_override*/ fun <get-clientTop>(): kotlin.Int
    public open override /*1*/ /*fake_override*/ val clientWidth: kotlin.Int
        public open override /*1*/ /*fake_override*/ fun <get-clientWidth>(): kotlin.Int
    public open override /*1*/ /*fake_override*/ val correspondingElement: org.w3c.dom.svg.SVGElement?
        public open override /*1*/ /*fake_override*/ fun <get-correspondingElement>(): org.w3c.dom.svg.SVGElement?
    public open override /*1*/ /*fake_override*/ val correspondingUseElement: org.w3c.dom.svg.SVGUseElement?
        public open override /*1*/ /*fake_override*/ fun <get-correspondingUseElement>(): org.w3c.dom.svg.SVGUseElement?
    public open override /*1*/ /*fake_override*/ val dataset: org.w3c.dom.DOMStringMap
        public open override /*1*/ /*fake_override*/ fun <get-dataset>(): org.w3c.dom.DOMStringMap
    public open override /*1*/ /*fake_override*/ val firstChild: org.w3c.dom.Node?
        public open override /*1*/ /*fake_override*/ fun <get-firstChild>(): org.w3c.dom.Node?
    public open override /*1*/ /*fake_override*/ val firstElementChild: org.w3c.dom.Element?
        public open override /*1*/ /*fake_override*/ fun <get-firstElementChild>(): org.w3c.dom.Element?
    public open override /*1*/ /*fake_override*/ var id: kotlin.String
        public open override /*1*/ /*fake_override*/ fun <get-id>(): kotlin.String
        public open override /*1*/ /*fake_override*/ fun <set-id>(/*0*/ <set-?>: kotlin.String): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var innerHTML: kotlin.String
        public open override /*1*/ /*fake_override*/ fun <get-innerHTML>(): kotlin.String
        public open override /*1*/ /*fake_override*/ fun <set-innerHTML>(/*0*/ <set-?>: kotlin.String): kotlin.Unit
    public open override /*1*/ /*fake_override*/ val isConnected: kotlin.Boolean
        public open override /*1*/ /*fake_override*/ fun <get-isConnected>(): kotlin.Boolean
    public open override /*1*/ /*fake_override*/ val lastChild: org.w3c.dom.Node?
        public open override /*1*/ /*fake_override*/ fun <get-lastChild>(): org.w3c.dom.Node?
    public open override /*1*/ /*fake_override*/ val lastElementChild: org.w3c.dom.Element?
        public open override /*1*/ /*fake_override*/ fun <get-lastElementChild>(): org.w3c.dom.Element?
    public open override /*1*/ /*fake_override*/ val localName: kotlin.String
        public open override /*1*/ /*fake_override*/ fun <get-localName>(): kotlin.String
    public open override /*1*/ /*fake_override*/ val namespaceURI: kotlin.String?
        public open override /*1*/ /*fake_override*/ fun <get-namespaceURI>(): kotlin.String?
    public open override /*1*/ /*fake_override*/ val nextElementSibling: org.w3c.dom.Element?
        public open override /*1*/ /*fake_override*/ fun <get-nextElementSibling>(): org.w3c.dom.Element?
    public open override /*1*/ /*fake_override*/ val nextSibling: org.w3c.dom.Node?
        public open override /*1*/ /*fake_override*/ fun <get-nextSibling>(): org.w3c.dom.Node?
    public open override /*1*/ /*fake_override*/ val nodeName: kotlin.String
        public open override /*1*/ /*fake_override*/ fun <get-nodeName>(): kotlin.String
    public open override /*1*/ /*fake_override*/ val nodeType: kotlin.Short
        public open override /*1*/ /*fake_override*/ fun <get-nodeType>(): kotlin.Short
    public open override /*1*/ /*fake_override*/ var nodeValue: kotlin.String?
        public open override /*1*/ /*fake_override*/ fun <get-nodeValue>(): kotlin.String?
        public open override /*1*/ /*fake_override*/ fun <set-nodeValue>(/*0*/ <set-?>: kotlin.String?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onabort: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onabort>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onabort>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onblur: ((org.w3c.dom.events.FocusEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onblur>(): ((org.w3c.dom.events.FocusEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onblur>(/*0*/ value: ((org.w3c.dom.events.FocusEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var oncancel: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-oncancel>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-oncancel>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var oncanplay: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-oncanplay>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-oncanplay>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var oncanplaythrough: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-oncanplaythrough>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-oncanplaythrough>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onchange: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onchange>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onchange>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onclick: ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onclick>(): ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onclick>(/*0*/ value: ((org.w3c.dom.events.MouseEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onclose: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onclose>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onclose>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var oncontextmenu: ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-oncontextmenu>(): ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-oncontextmenu>(/*0*/ value: ((org.w3c.dom.events.MouseEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var oncuechange: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-oncuechange>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-oncuechange>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ondblclick: ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ondblclick>(): ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ondblclick>(/*0*/ value: ((org.w3c.dom.events.MouseEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ondrag: ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ondrag>(): ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ondrag>(/*0*/ value: ((org.w3c.dom.DragEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ondragend: ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ondragend>(): ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ondragend>(/*0*/ value: ((org.w3c.dom.DragEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ondragenter: ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ondragenter>(): ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ondragenter>(/*0*/ value: ((org.w3c.dom.DragEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ondragexit: ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ondragexit>(): ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ondragexit>(/*0*/ value: ((org.w3c.dom.DragEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ondragleave: ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ondragleave>(): ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ondragleave>(/*0*/ value: ((org.w3c.dom.DragEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ondragover: ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ondragover>(): ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ondragover>(/*0*/ value: ((org.w3c.dom.DragEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ondragstart: ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ondragstart>(): ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ondragstart>(/*0*/ value: ((org.w3c.dom.DragEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ondrop: ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ondrop>(): ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ondrop>(/*0*/ value: ((org.w3c.dom.DragEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ondurationchange: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ondurationchange>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ondurationchange>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onemptied: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onemptied>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onemptied>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onended: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onended>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onended>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onerror: ((dynamic, kotlin.String, kotlin.Int, kotlin.Int, kotlin.Any?) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onerror>(): ((dynamic, kotlin.String, kotlin.Int, kotlin.Int, kotlin.Any?) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onerror>(/*0*/ value: ((dynamic, kotlin.String, kotlin.Int, kotlin.Int, kotlin.Any?) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onfocus: ((org.w3c.dom.events.FocusEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onfocus>(): ((org.w3c.dom.events.FocusEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onfocus>(/*0*/ value: ((org.w3c.dom.events.FocusEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ongotpointercapture: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ongotpointercapture>(): ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ongotpointercapture>(/*0*/ value: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var oninput: ((org.w3c.dom.events.InputEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-oninput>(): ((org.w3c.dom.events.InputEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-oninput>(/*0*/ value: ((org.w3c.dom.events.InputEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var oninvalid: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-oninvalid>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-oninvalid>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onkeydown: ((org.w3c.dom.events.KeyboardEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onkeydown>(): ((org.w3c.dom.events.KeyboardEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onkeydown>(/*0*/ value: ((org.w3c.dom.events.KeyboardEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onkeypress: ((org.w3c.dom.events.KeyboardEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onkeypress>(): ((org.w3c.dom.events.KeyboardEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onkeypress>(/*0*/ value: ((org.w3c.dom.events.KeyboardEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onkeyup: ((org.w3c.dom.events.KeyboardEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onkeyup>(): ((org.w3c.dom.events.KeyboardEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onkeyup>(/*0*/ value: ((org.w3c.dom.events.KeyboardEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onload: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onload>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onload>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onloadeddata: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onloadeddata>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onloadeddata>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onloadedmetadata: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onloadedmetadata>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onloadedmetadata>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onloadend: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onloadend>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onloadend>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onloadstart: ((org.w3c.xhr.ProgressEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onloadstart>(): ((org.w3c.xhr.ProgressEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onloadstart>(/*0*/ value: ((org.w3c.xhr.ProgressEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onlostpointercapture: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onlostpointercapture>(): ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onlostpointercapture>(/*0*/ value: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onmousedown: ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onmousedown>(): ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onmousedown>(/*0*/ value: ((org.w3c.dom.events.MouseEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onmouseenter: ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onmouseenter>(): ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onmouseenter>(/*0*/ value: ((org.w3c.dom.events.MouseEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onmouseleave: ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onmouseleave>(): ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onmouseleave>(/*0*/ value: ((org.w3c.dom.events.MouseEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onmousemove: ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onmousemove>(): ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onmousemove>(/*0*/ value: ((org.w3c.dom.events.MouseEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onmouseout: ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onmouseout>(): ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onmouseout>(/*0*/ value: ((org.w3c.dom.events.MouseEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onmouseover: ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onmouseover>(): ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onmouseover>(/*0*/ value: ((org.w3c.dom.events.MouseEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onmouseup: ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onmouseup>(): ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onmouseup>(/*0*/ value: ((org.w3c.dom.events.MouseEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onpause: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onpause>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onpause>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onplay: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onplay>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onplay>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onplaying: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onplaying>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onplaying>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onpointercancel: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onpointercancel>(): ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onpointercancel>(/*0*/ value: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onpointerdown: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onpointerdown>(): ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onpointerdown>(/*0*/ value: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onpointerenter: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onpointerenter>(): ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onpointerenter>(/*0*/ value: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onpointerleave: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onpointerleave>(): ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onpointerleave>(/*0*/ value: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onpointermove: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onpointermove>(): ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onpointermove>(/*0*/ value: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onpointerout: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onpointerout>(): ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onpointerout>(/*0*/ value: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onpointerover: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onpointerover>(): ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onpointerover>(/*0*/ value: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onpointerup: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onpointerup>(): ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onpointerup>(/*0*/ value: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onprogress: ((org.w3c.xhr.ProgressEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onprogress>(): ((org.w3c.xhr.ProgressEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onprogress>(/*0*/ value: ((org.w3c.xhr.ProgressEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onratechange: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onratechange>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onratechange>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onreset: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onreset>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onreset>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onresize: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onresize>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onresize>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onscroll: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onscroll>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onscroll>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onseeked: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onseeked>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onseeked>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onseeking: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onseeking>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onseeking>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onselect: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onselect>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onselect>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onshow: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onshow>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onshow>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onstalled: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onstalled>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onstalled>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onsubmit: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onsubmit>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onsubmit>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onsuspend: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onsuspend>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onsuspend>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ontimeupdate: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ontimeupdate>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ontimeupdate>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ontoggle: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ontoggle>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ontoggle>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onvolumechange: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onvolumechange>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onvolumechange>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onwaiting: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onwaiting>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onwaiting>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onwheel: ((org.w3c.dom.events.WheelEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onwheel>(): ((org.w3c.dom.events.WheelEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onwheel>(/*0*/ value: ((org.w3c.dom.events.WheelEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var outerHTML: kotlin.String
        public open override /*1*/ /*fake_override*/ fun <get-outerHTML>(): kotlin.String
        public open override /*1*/ /*fake_override*/ fun <set-outerHTML>(/*0*/ <set-?>: kotlin.String): kotlin.Unit
    public open override /*1*/ /*fake_override*/ val ownerDocument: org.w3c.dom.Document?
        public open override /*1*/ /*fake_override*/ fun <get-ownerDocument>(): org.w3c.dom.Document?
    public open override /*1*/ /*fake_override*/ val ownerSVGElement: org.w3c.dom.svg.SVGSVGElement?
        public open override /*1*/ /*fake_override*/ fun <get-ownerSVGElement>(): org.w3c.dom.svg.SVGSVGElement?
    public open override /*1*/ /*fake_override*/ val parentElement: org.w3c.dom.Element?
        public open override /*1*/ /*fake_override*/ fun <get-parentElement>(): org.w3c.dom.Element?
    public open override /*1*/ /*fake_override*/ val parentNode: org.w3c.dom.Node?
        public open override /*1*/ /*fake_override*/ fun <get-parentNode>(): org.w3c.dom.Node?
    public open override /*1*/ /*fake_override*/ val prefix: kotlin.String?
        public open override /*1*/ /*fake_override*/ fun <get-prefix>(): kotlin.String?
    public open override /*1*/ /*fake_override*/ val previousElementSibling: org.w3c.dom.Element?
        public open override /*1*/ /*fake_override*/ fun <get-previousElementSibling>(): org.w3c.dom.Element?
    public open override /*1*/ /*fake_override*/ val previousSibling: org.w3c.dom.Node?
        public open override /*1*/ /*fake_override*/ fun <get-previousSibling>(): org.w3c.dom.Node?
    public open override /*1*/ /*fake_override*/ val scrollHeight: kotlin.Int
        public open override /*1*/ /*fake_override*/ fun <get-scrollHeight>(): kotlin.Int
    public open override /*1*/ /*fake_override*/ var scrollLeft: kotlin.Double
        public open override /*1*/ /*fake_override*/ fun <get-scrollLeft>(): kotlin.Double
        public open override /*1*/ /*fake_override*/ fun <set-scrollLeft>(/*0*/ <set-?>: kotlin.Double): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var scrollTop: kotlin.Double
        public open override /*1*/ /*fake_override*/ fun <get-scrollTop>(): kotlin.Double
        public open override /*1*/ /*fake_override*/ fun <set-scrollTop>(/*0*/ <set-?>: kotlin.Double): kotlin.Unit
    public open override /*1*/ /*fake_override*/ val scrollWidth: kotlin.Int
        public open override /*1*/ /*fake_override*/ fun <get-scrollWidth>(): kotlin.Int
    public open override /*1*/ /*fake_override*/ val shadowRoot: org.w3c.dom.ShadowRoot?
        public open override /*1*/ /*fake_override*/ fun <get-shadowRoot>(): org.w3c.dom.ShadowRoot?
    public open override /*1*/ /*fake_override*/ var slot: kotlin.String
        public open override /*1*/ /*fake_override*/ fun <get-slot>(): kotlin.String
        public open override /*1*/ /*fake_override*/ fun <set-slot>(/*0*/ <set-?>: kotlin.String): kotlin.Unit
    public abstract override /*1*/ /*fake_override*/ val style: org.w3c.dom.css.CSSStyleDeclaration
        public abstract override /*1*/ /*fake_override*/ fun <get-style>(): org.w3c.dom.css.CSSStyleDeclaration
    public open override /*1*/ /*fake_override*/ var tabIndex: kotlin.Int
        public open override /*1*/ /*fake_override*/ fun <get-tabIndex>(): kotlin.Int
        public open override /*1*/ /*fake_override*/ fun <set-tabIndex>(/*0*/ <set-?>: kotlin.Int): kotlin.Unit
    public open override /*1*/ /*fake_override*/ val tagName: kotlin.String
        public open override /*1*/ /*fake_override*/ fun <get-tagName>(): kotlin.String
    public open override /*1*/ /*fake_override*/ var textContent: kotlin.String?
        public open override /*1*/ /*fake_override*/ fun <get-textContent>(): kotlin.String?
        public open override /*1*/ /*fake_override*/ fun <set-textContent>(/*0*/ <set-?>: kotlin.String?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ val viewportElement: org.w3c.dom.svg.SVGElement?
        public open override /*1*/ /*fake_override*/ fun <get-viewportElement>(): org.w3c.dom.svg.SVGElement?
    public final override /*1*/ /*fake_override*/ fun addEventListener(/*0*/ type: kotlin.String, /*1*/ callback: ((org.w3c.dom.events.Event) -> kotlin.Unit)?, /*2*/ options: dynamic = ...): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun addEventListener(/*0*/ type: kotlin.String, /*1*/ callback: org.w3c.dom.events.EventListener?, /*2*/ options: dynamic = ...): kotlin.Unit
    public abstract override /*1*/ /*fake_override*/ fun after(/*0*/ vararg nodes: dynamic /*kotlin.Array<out dynamic>*/): kotlin.Unit
    public abstract override /*1*/ /*fake_override*/ fun append(/*0*/ vararg nodes: dynamic /*kotlin.Array<out dynamic>*/): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun appendChild(/*0*/ node: org.w3c.dom.Node): org.w3c.dom.Node
    public final override /*1*/ /*fake_override*/ fun attachShadow(/*0*/ init: org.w3c.dom.ShadowRootInit): org.w3c.dom.ShadowRoot
    public abstract override /*1*/ /*fake_override*/ fun before(/*0*/ vararg nodes: dynamic /*kotlin.Array<out dynamic>*/): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun blur(): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun cloneNode(/*0*/ deep: kotlin.Boolean = ...): org.w3c.dom.Node
    public final override /*1*/ /*fake_override*/ fun closest(/*0*/ selectors: kotlin.String): org.w3c.dom.Element?
    public final override /*1*/ /*fake_override*/ fun compareDocumentPosition(/*0*/ other: org.w3c.dom.Node): kotlin.Short
    public final override /*1*/ /*fake_override*/ fun contains(/*0*/ other: org.w3c.dom.Node?): kotlin.Boolean
    public abstract override /*1*/ /*fake_override*/ fun convertPointFromNode(/*0*/ point: org.w3c.dom.DOMPointInit, /*1*/ from: dynamic, /*2*/ options: org.w3c.dom.ConvertCoordinateOptions = ...): org.w3c.dom.DOMPoint
    public abstract override /*1*/ /*fake_override*/ fun convertQuadFromNode(/*0*/ quad: dynamic, /*1*/ from: dynamic, /*2*/ options: org.w3c.dom.ConvertCoordinateOptions = ...): org.w3c.dom.DOMQuad
    public abstract override /*1*/ /*fake_override*/ fun convertRectFromNode(/*0*/ rect: org.w3c.dom.DOMRectReadOnly, /*1*/ from: dynamic, /*2*/ options: org.w3c.dom.ConvertCoordinateOptions = ...): org.w3c.dom.DOMQuad
    public final override /*1*/ /*fake_override*/ fun dispatchEvent(/*0*/ event: org.w3c.dom.events.Event): kotlin.Boolean
    public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
    public final override /*1*/ /*fake_override*/ fun focus(): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun getAttribute(/*0*/ qualifiedName: kotlin.String): kotlin.String?
    public final override /*1*/ /*fake_override*/ fun getAttributeNS(/*0*/ namespace: kotlin.String?, /*1*/ localName: kotlin.String): kotlin.String?
    public final override /*1*/ /*fake_override*/ fun getAttributeNames(): kotlin.Array<kotlin.String>
    public final override /*1*/ /*fake_override*/ fun getAttributeNode(/*0*/ qualifiedName: kotlin.String): org.w3c.dom.Attr?
    public final override /*1*/ /*fake_override*/ fun getAttributeNodeNS(/*0*/ namespace: kotlin.String?, /*1*/ localName: kotlin.String): org.w3c.dom.Attr?
    public final override /*1*/ /*fake_override*/ fun getBoundingClientRect(): org.w3c.dom.DOMRect
    public abstract override /*1*/ /*fake_override*/ fun getBoxQuads(/*0*/ options: org.w3c.dom.BoxQuadOptions = ...): kotlin.Array<org.w3c.dom.DOMQuad>
    public final override /*1*/ /*fake_override*/ fun getClientRects(): kotlin.Array<org.w3c.dom.DOMRect>
    public final override /*1*/ /*fake_override*/ fun getElementsByClassName(/*0*/ classNames: kotlin.String): org.w3c.dom.HTMLCollection
    public final override /*1*/ /*fake_override*/ fun getElementsByTagName(/*0*/ qualifiedName: kotlin.String): org.w3c.dom.HTMLCollection
    public final override /*1*/ /*fake_override*/ fun getElementsByTagNameNS(/*0*/ namespace: kotlin.String?, /*1*/ localName: kotlin.String): org.w3c.dom.HTMLCollection
    public final override /*1*/ /*fake_override*/ fun getRootNode(/*0*/ options: org.w3c.dom.GetRootNodeOptions = ...): org.w3c.dom.Node
    public final override /*1*/ /*fake_override*/ fun hasAttribute(/*0*/ qualifiedName: kotlin.String): kotlin.Boolean
    public final override /*1*/ /*fake_override*/ fun hasAttributeNS(/*0*/ namespace: kotlin.String?, /*1*/ localName: kotlin.String): kotlin.Boolean
    public final override /*1*/ /*fake_override*/ fun hasAttributes(): kotlin.Boolean
    public final override /*1*/ /*fake_override*/ fun hasChildNodes(): kotlin.Boolean
    public final override /*1*/ /*fake_override*/ fun hasPointerCapture(/*0*/ pointerId: kotlin.Int): kotlin.Boolean
    public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
    public final override /*1*/ /*fake_override*/ fun insertAdjacentElement(/*0*/ where: kotlin.String, /*1*/ element: org.w3c.dom.Element): org.w3c.dom.Element?
    public final override /*1*/ /*fake_override*/ fun insertAdjacentHTML(/*0*/ position: kotlin.String, /*1*/ text: kotlin.String): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun insertAdjacentText(/*0*/ where: kotlin.String, /*1*/ data: kotlin.String): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun insertBefore(/*0*/ node: org.w3c.dom.Node, /*1*/ child: org.w3c.dom.Node?): org.w3c.dom.Node
    public final override /*1*/ /*fake_override*/ fun isDefaultNamespace(/*0*/ namespace: kotlin.String?): kotlin.Boolean
    public final override /*1*/ /*fake_override*/ fun isEqualNode(/*0*/ otherNode: org.w3c.dom.Node?): kotlin.Boolean
    public final override /*1*/ /*fake_override*/ fun isSameNode(/*0*/ otherNode: org.w3c.dom.Node?): kotlin.Boolean
    public final override /*1*/ /*fake_override*/ fun lookupNamespaceURI(/*0*/ prefix: kotlin.String?): kotlin.String?
    public final override /*1*/ /*fake_override*/ fun lookupPrefix(/*0*/ namespace: kotlin.String?): kotlin.String?
    public final override /*1*/ /*fake_override*/ fun matches(/*0*/ selectors: kotlin.String): kotlin.Boolean
    public final override /*1*/ /*fake_override*/ fun normalize(): kotlin.Unit
    public abstract override /*1*/ /*fake_override*/ fun prepend(/*0*/ vararg nodes: dynamic /*kotlin.Array<out dynamic>*/): kotlin.Unit
    public abstract override /*1*/ /*fake_override*/ fun querySelector(/*0*/ selectors: kotlin.String): org.w3c.dom.Element?
    public abstract override /*1*/ /*fake_override*/ fun querySelectorAll(/*0*/ selectors: kotlin.String): org.w3c.dom.NodeList
    public final override /*1*/ /*fake_override*/ fun releasePointerCapture(/*0*/ pointerId: kotlin.Int): kotlin.Unit
    public abstract override /*1*/ /*fake_override*/ fun remove(): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun removeAttribute(/*0*/ qualifiedName: kotlin.String): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun removeAttributeNS(/*0*/ namespace: kotlin.String?, /*1*/ localName: kotlin.String): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun removeAttributeNode(/*0*/ attr: org.w3c.dom.Attr): org.w3c.dom.Attr
    public final override /*1*/ /*fake_override*/ fun removeChild(/*0*/ child: org.w3c.dom.Node): org.w3c.dom.Node
    public final override /*1*/ /*fake_override*/ fun removeEventListener(/*0*/ type: kotlin.String, /*1*/ callback: ((org.w3c.dom.events.Event) -> kotlin.Unit)?, /*2*/ options: dynamic = ...): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun removeEventListener(/*0*/ type: kotlin.String, /*1*/ callback: org.w3c.dom.events.EventListener?, /*2*/ options: dynamic = ...): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun replaceChild(/*0*/ node: org.w3c.dom.Node, /*1*/ child: org.w3c.dom.Node): org.w3c.dom.Node
    public abstract override /*1*/ /*fake_override*/ fun replaceWith(/*0*/ vararg nodes: dynamic /*kotlin.Array<out dynamic>*/): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun requestFullscreen(): kotlin.js.Promise<kotlin.Unit>
    public final override /*1*/ /*fake_override*/ fun scroll(/*0*/ x: kotlin.Double, /*1*/ y: kotlin.Double): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun scroll(/*0*/ options: org.w3c.dom.ScrollToOptions = ...): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun scrollBy(/*0*/ x: kotlin.Double, /*1*/ y: kotlin.Double): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun scrollBy(/*0*/ options: org.w3c.dom.ScrollToOptions = ...): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun scrollIntoView(): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun scrollIntoView(/*0*/ arg: dynamic): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun scrollTo(/*0*/ x: kotlin.Double, /*1*/ y: kotlin.Double): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun scrollTo(/*0*/ options: org.w3c.dom.ScrollToOptions = ...): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun setAttribute(/*0*/ qualifiedName: kotlin.String, /*1*/ value: kotlin.String): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun setAttributeNS(/*0*/ namespace: kotlin.String?, /*1*/ qualifiedName: kotlin.String, /*2*/ value: kotlin.String): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun setAttributeNode(/*0*/ attr: org.w3c.dom.Attr): org.w3c.dom.Attr?
    public final override /*1*/ /*fake_override*/ fun setAttributeNodeNS(/*0*/ attr: org.w3c.dom.Attr): org.w3c.dom.Attr?
    public final override /*1*/ /*fake_override*/ fun setPointerCapture(/*0*/ pointerId: kotlin.Int): kotlin.Unit
    public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
    public final override /*1*/ /*fake_override*/ fun webkitMatchesSelector(/*0*/ selectors: kotlin.String): kotlin.Boolean

    public companion object Companion {
        /*primary*/ private constructor Companion()
        public final val ATTRIBUTE_NODE: kotlin.Short
            public final fun <get-ATTRIBUTE_NODE>(): kotlin.Short
        public final val CDATA_SECTION_NODE: kotlin.Short
            public final fun <get-CDATA_SECTION_NODE>(): kotlin.Short
        public final val COMMENT_NODE: kotlin.Short
            public final fun <get-COMMENT_NODE>(): kotlin.Short
        public final val DOCUMENT_FRAGMENT_NODE: kotlin.Short
            public final fun <get-DOCUMENT_FRAGMENT_NODE>(): kotlin.Short
        public final val DOCUMENT_NODE: kotlin.Short
            public final fun <get-DOCUMENT_NODE>(): kotlin.Short
        public final val DOCUMENT_POSITION_CONTAINED_BY: kotlin.Short
            public final fun <get-DOCUMENT_POSITION_CONTAINED_BY>(): kotlin.Short
        public final val DOCUMENT_POSITION_CONTAINS: kotlin.Short
            public final fun <get-DOCUMENT_POSITION_CONTAINS>(): kotlin.Short
        public final val DOCUMENT_POSITION_DISCONNECTED: kotlin.Short
            public final fun <get-DOCUMENT_POSITION_DISCONNECTED>(): kotlin.Short
        public final val DOCUMENT_POSITION_FOLLOWING: kotlin.Short
            public final fun <get-DOCUMENT_POSITION_FOLLOWING>(): kotlin.Short
        public final val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: kotlin.Short
            public final fun <get-DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC>(): kotlin.Short
        public final val DOCUMENT_POSITION_PRECEDING: kotlin.Short
            public final fun <get-DOCUMENT_POSITION_PRECEDING>(): kotlin.Short
        public final val DOCUMENT_TYPE_NODE: kotlin.Short
            public final fun <get-DOCUMENT_TYPE_NODE>(): kotlin.Short
        public final val ELEMENT_NODE: kotlin.Short
            public final fun <get-ELEMENT_NODE>(): kotlin.Short
        public final val ENTITY_NODE: kotlin.Short
            public final fun <get-ENTITY_NODE>(): kotlin.Short
        public final val ENTITY_REFERENCE_NODE: kotlin.Short
            public final fun <get-ENTITY_REFERENCE_NODE>(): kotlin.Short
        public final val NOTATION_NODE: kotlin.Short
            public final fun <get-NOTATION_NODE>(): kotlin.Short
        public final val PROCESSING_INSTRUCTION_NODE: kotlin.Short
            public final fun <get-PROCESSING_INSTRUCTION_NODE>(): kotlin.Short
        public final val TEXT_NODE: kotlin.Short
            public final fun <get-TEXT_NODE>(): kotlin.Short
        public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
        public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
        public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
    }
}

public abstract external class SVGMetadataElement : org.w3c.dom.svg.SVGElement {
    /*primary*/ public constructor SVGMetadataElement()
    public open override /*1*/ /*fake_override*/ val assignedSlot: org.w3c.dom.HTMLSlotElement?
        public open override /*1*/ /*fake_override*/ fun <get-assignedSlot>(): org.w3c.dom.HTMLSlotElement?
    public open override /*1*/ /*fake_override*/ val attributes: org.w3c.dom.NamedNodeMap
        public open override /*1*/ /*fake_override*/ fun <get-attributes>(): org.w3c.dom.NamedNodeMap
    public open override /*1*/ /*fake_override*/ val baseURI: kotlin.String
        public open override /*1*/ /*fake_override*/ fun <get-baseURI>(): kotlin.String
    public abstract override /*1*/ /*fake_override*/ val childElementCount: kotlin.Int
        public abstract override /*1*/ /*fake_override*/ fun <get-childElementCount>(): kotlin.Int
    public open override /*1*/ /*fake_override*/ val childNodes: org.w3c.dom.NodeList
        public open override /*1*/ /*fake_override*/ fun <get-childNodes>(): org.w3c.dom.NodeList
    public abstract override /*1*/ /*fake_override*/ val children: org.w3c.dom.HTMLCollection
        public abstract override /*1*/ /*fake_override*/ fun <get-children>(): org.w3c.dom.HTMLCollection
    public open override /*1*/ /*fake_override*/ val classList: org.w3c.dom.DOMTokenList
        public open override /*1*/ /*fake_override*/ fun <get-classList>(): org.w3c.dom.DOMTokenList
    public open override /*1*/ /*fake_override*/ var className: kotlin.String
        public open override /*1*/ /*fake_override*/ fun <get-className>(): kotlin.String
        public open override /*1*/ /*fake_override*/ fun <set-className>(/*0*/ <set-?>: kotlin.String): kotlin.Unit
    public open override /*1*/ /*fake_override*/ val clientHeight: kotlin.Int
        public open override /*1*/ /*fake_override*/ fun <get-clientHeight>(): kotlin.Int
    public open override /*1*/ /*fake_override*/ val clientLeft: kotlin.Int
        public open override /*1*/ /*fake_override*/ fun <get-clientLeft>(): kotlin.Int
    public open override /*1*/ /*fake_override*/ val clientTop: kotlin.Int
        public open override /*1*/ /*fake_override*/ fun <get-clientTop>(): kotlin.Int
    public open override /*1*/ /*fake_override*/ val clientWidth: kotlin.Int
        public open override /*1*/ /*fake_override*/ fun <get-clientWidth>(): kotlin.Int
    public open override /*1*/ /*fake_override*/ val correspondingElement: org.w3c.dom.svg.SVGElement?
        public open override /*1*/ /*fake_override*/ fun <get-correspondingElement>(): org.w3c.dom.svg.SVGElement?
    public open override /*1*/ /*fake_override*/ val correspondingUseElement: org.w3c.dom.svg.SVGUseElement?
        public open override /*1*/ /*fake_override*/ fun <get-correspondingUseElement>(): org.w3c.dom.svg.SVGUseElement?
    public open override /*1*/ /*fake_override*/ val dataset: org.w3c.dom.DOMStringMap
        public open override /*1*/ /*fake_override*/ fun <get-dataset>(): org.w3c.dom.DOMStringMap
    public open override /*1*/ /*fake_override*/ val firstChild: org.w3c.dom.Node?
        public open override /*1*/ /*fake_override*/ fun <get-firstChild>(): org.w3c.dom.Node?
    public open override /*1*/ /*fake_override*/ val firstElementChild: org.w3c.dom.Element?
        public open override /*1*/ /*fake_override*/ fun <get-firstElementChild>(): org.w3c.dom.Element?
    public open override /*1*/ /*fake_override*/ var id: kotlin.String
        public open override /*1*/ /*fake_override*/ fun <get-id>(): kotlin.String
        public open override /*1*/ /*fake_override*/ fun <set-id>(/*0*/ <set-?>: kotlin.String): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var innerHTML: kotlin.String
        public open override /*1*/ /*fake_override*/ fun <get-innerHTML>(): kotlin.String
        public open override /*1*/ /*fake_override*/ fun <set-innerHTML>(/*0*/ <set-?>: kotlin.String): kotlin.Unit
    public open override /*1*/ /*fake_override*/ val isConnected: kotlin.Boolean
        public open override /*1*/ /*fake_override*/ fun <get-isConnected>(): kotlin.Boolean
    public open override /*1*/ /*fake_override*/ val lastChild: org.w3c.dom.Node?
        public open override /*1*/ /*fake_override*/ fun <get-lastChild>(): org.w3c.dom.Node?
    public open override /*1*/ /*fake_override*/ val lastElementChild: org.w3c.dom.Element?
        public open override /*1*/ /*fake_override*/ fun <get-lastElementChild>(): org.w3c.dom.Element?
    public open override /*1*/ /*fake_override*/ val localName: kotlin.String
        public open override /*1*/ /*fake_override*/ fun <get-localName>(): kotlin.String
    public open override /*1*/ /*fake_override*/ val namespaceURI: kotlin.String?
        public open override /*1*/ /*fake_override*/ fun <get-namespaceURI>(): kotlin.String?
    public open override /*1*/ /*fake_override*/ val nextElementSibling: org.w3c.dom.Element?
        public open override /*1*/ /*fake_override*/ fun <get-nextElementSibling>(): org.w3c.dom.Element?
    public open override /*1*/ /*fake_override*/ val nextSibling: org.w3c.dom.Node?
        public open override /*1*/ /*fake_override*/ fun <get-nextSibling>(): org.w3c.dom.Node?
    public open override /*1*/ /*fake_override*/ val nodeName: kotlin.String
        public open override /*1*/ /*fake_override*/ fun <get-nodeName>(): kotlin.String
    public open override /*1*/ /*fake_override*/ val nodeType: kotlin.Short
        public open override /*1*/ /*fake_override*/ fun <get-nodeType>(): kotlin.Short
    public open override /*1*/ /*fake_override*/ var nodeValue: kotlin.String?
        public open override /*1*/ /*fake_override*/ fun <get-nodeValue>(): kotlin.String?
        public open override /*1*/ /*fake_override*/ fun <set-nodeValue>(/*0*/ <set-?>: kotlin.String?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onabort: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onabort>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onabort>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onblur: ((org.w3c.dom.events.FocusEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onblur>(): ((org.w3c.dom.events.FocusEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onblur>(/*0*/ value: ((org.w3c.dom.events.FocusEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var oncancel: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-oncancel>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-oncancel>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var oncanplay: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-oncanplay>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-oncanplay>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var oncanplaythrough: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-oncanplaythrough>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-oncanplaythrough>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onchange: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onchange>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onchange>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onclick: ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onclick>(): ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onclick>(/*0*/ value: ((org.w3c.dom.events.MouseEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onclose: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onclose>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onclose>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var oncontextmenu: ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-oncontextmenu>(): ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-oncontextmenu>(/*0*/ value: ((org.w3c.dom.events.MouseEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var oncuechange: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-oncuechange>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-oncuechange>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ondblclick: ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ondblclick>(): ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ondblclick>(/*0*/ value: ((org.w3c.dom.events.MouseEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ondrag: ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ondrag>(): ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ondrag>(/*0*/ value: ((org.w3c.dom.DragEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ondragend: ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ondragend>(): ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ondragend>(/*0*/ value: ((org.w3c.dom.DragEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ondragenter: ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ondragenter>(): ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ondragenter>(/*0*/ value: ((org.w3c.dom.DragEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ondragexit: ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ondragexit>(): ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ondragexit>(/*0*/ value: ((org.w3c.dom.DragEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ondragleave: ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ondragleave>(): ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ondragleave>(/*0*/ value: ((org.w3c.dom.DragEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ondragover: ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ondragover>(): ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ondragover>(/*0*/ value: ((org.w3c.dom.DragEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ondragstart: ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ondragstart>(): ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ondragstart>(/*0*/ value: ((org.w3c.dom.DragEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ondrop: ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ondrop>(): ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ondrop>(/*0*/ value: ((org.w3c.dom.DragEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ondurationchange: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ondurationchange>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ondurationchange>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onemptied: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onemptied>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onemptied>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onended: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onended>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onended>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onerror: ((dynamic, kotlin.String, kotlin.Int, kotlin.Int, kotlin.Any?) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onerror>(): ((dynamic, kotlin.String, kotlin.Int, kotlin.Int, kotlin.Any?) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onerror>(/*0*/ value: ((dynamic, kotlin.String, kotlin.Int, kotlin.Int, kotlin.Any?) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onfocus: ((org.w3c.dom.events.FocusEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onfocus>(): ((org.w3c.dom.events.FocusEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onfocus>(/*0*/ value: ((org.w3c.dom.events.FocusEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ongotpointercapture: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ongotpointercapture>(): ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ongotpointercapture>(/*0*/ value: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var oninput: ((org.w3c.dom.events.InputEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-oninput>(): ((org.w3c.dom.events.InputEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-oninput>(/*0*/ value: ((org.w3c.dom.events.InputEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var oninvalid: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-oninvalid>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-oninvalid>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onkeydown: ((org.w3c.dom.events.KeyboardEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onkeydown>(): ((org.w3c.dom.events.KeyboardEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onkeydown>(/*0*/ value: ((org.w3c.dom.events.KeyboardEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onkeypress: ((org.w3c.dom.events.KeyboardEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onkeypress>(): ((org.w3c.dom.events.KeyboardEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onkeypress>(/*0*/ value: ((org.w3c.dom.events.KeyboardEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onkeyup: ((org.w3c.dom.events.KeyboardEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onkeyup>(): ((org.w3c.dom.events.KeyboardEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onkeyup>(/*0*/ value: ((org.w3c.dom.events.KeyboardEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onload: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onload>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onload>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onloadeddata: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onloadeddata>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onloadeddata>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onloadedmetadata: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onloadedmetadata>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onloadedmetadata>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onloadend: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onloadend>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onloadend>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onloadstart: ((org.w3c.xhr.ProgressEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onloadstart>(): ((org.w3c.xhr.ProgressEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onloadstart>(/*0*/ value: ((org.w3c.xhr.ProgressEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onlostpointercapture: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onlostpointercapture>(): ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onlostpointercapture>(/*0*/ value: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onmousedown: ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onmousedown>(): ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onmousedown>(/*0*/ value: ((org.w3c.dom.events.MouseEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onmouseenter: ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onmouseenter>(): ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onmouseenter>(/*0*/ value: ((org.w3c.dom.events.MouseEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onmouseleave: ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onmouseleave>(): ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onmouseleave>(/*0*/ value: ((org.w3c.dom.events.MouseEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onmousemove: ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onmousemove>(): ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onmousemove>(/*0*/ value: ((org.w3c.dom.events.MouseEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onmouseout: ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onmouseout>(): ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onmouseout>(/*0*/ value: ((org.w3c.dom.events.MouseEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onmouseover: ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onmouseover>(): ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onmouseover>(/*0*/ value: ((org.w3c.dom.events.MouseEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onmouseup: ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onmouseup>(): ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onmouseup>(/*0*/ value: ((org.w3c.dom.events.MouseEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onpause: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onpause>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onpause>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onplay: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onplay>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onplay>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onplaying: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onplaying>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onplaying>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onpointercancel: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onpointercancel>(): ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onpointercancel>(/*0*/ value: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onpointerdown: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onpointerdown>(): ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onpointerdown>(/*0*/ value: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onpointerenter: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onpointerenter>(): ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onpointerenter>(/*0*/ value: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onpointerleave: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onpointerleave>(): ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onpointerleave>(/*0*/ value: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onpointermove: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onpointermove>(): ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onpointermove>(/*0*/ value: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onpointerout: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onpointerout>(): ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onpointerout>(/*0*/ value: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onpointerover: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onpointerover>(): ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onpointerover>(/*0*/ value: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onpointerup: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onpointerup>(): ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onpointerup>(/*0*/ value: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onprogress: ((org.w3c.xhr.ProgressEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onprogress>(): ((org.w3c.xhr.ProgressEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onprogress>(/*0*/ value: ((org.w3c.xhr.ProgressEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onratechange: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onratechange>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onratechange>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onreset: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onreset>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onreset>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onresize: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onresize>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onresize>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onscroll: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onscroll>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onscroll>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onseeked: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onseeked>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onseeked>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onseeking: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onseeking>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onseeking>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onselect: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onselect>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onselect>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onshow: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onshow>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onshow>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onstalled: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onstalled>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onstalled>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onsubmit: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onsubmit>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onsubmit>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onsuspend: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onsuspend>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onsuspend>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ontimeupdate: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ontimeupdate>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ontimeupdate>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ontoggle: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ontoggle>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ontoggle>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onvolumechange: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onvolumechange>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onvolumechange>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onwaiting: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onwaiting>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onwaiting>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onwheel: ((org.w3c.dom.events.WheelEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onwheel>(): ((org.w3c.dom.events.WheelEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onwheel>(/*0*/ value: ((org.w3c.dom.events.WheelEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var outerHTML: kotlin.String
        public open override /*1*/ /*fake_override*/ fun <get-outerHTML>(): kotlin.String
        public open override /*1*/ /*fake_override*/ fun <set-outerHTML>(/*0*/ <set-?>: kotlin.String): kotlin.Unit
    public open override /*1*/ /*fake_override*/ val ownerDocument: org.w3c.dom.Document?
        public open override /*1*/ /*fake_override*/ fun <get-ownerDocument>(): org.w3c.dom.Document?
    public open override /*1*/ /*fake_override*/ val ownerSVGElement: org.w3c.dom.svg.SVGSVGElement?
        public open override /*1*/ /*fake_override*/ fun <get-ownerSVGElement>(): org.w3c.dom.svg.SVGSVGElement?
    public open override /*1*/ /*fake_override*/ val parentElement: org.w3c.dom.Element?
        public open override /*1*/ /*fake_override*/ fun <get-parentElement>(): org.w3c.dom.Element?
    public open override /*1*/ /*fake_override*/ val parentNode: org.w3c.dom.Node?
        public open override /*1*/ /*fake_override*/ fun <get-parentNode>(): org.w3c.dom.Node?
    public open override /*1*/ /*fake_override*/ val prefix: kotlin.String?
        public open override /*1*/ /*fake_override*/ fun <get-prefix>(): kotlin.String?
    public open override /*1*/ /*fake_override*/ val previousElementSibling: org.w3c.dom.Element?
        public open override /*1*/ /*fake_override*/ fun <get-previousElementSibling>(): org.w3c.dom.Element?
    public open override /*1*/ /*fake_override*/ val previousSibling: org.w3c.dom.Node?
        public open override /*1*/ /*fake_override*/ fun <get-previousSibling>(): org.w3c.dom.Node?
    public open override /*1*/ /*fake_override*/ val scrollHeight: kotlin.Int
        public open override /*1*/ /*fake_override*/ fun <get-scrollHeight>(): kotlin.Int
    public open override /*1*/ /*fake_override*/ var scrollLeft: kotlin.Double
        public open override /*1*/ /*fake_override*/ fun <get-scrollLeft>(): kotlin.Double
        public open override /*1*/ /*fake_override*/ fun <set-scrollLeft>(/*0*/ <set-?>: kotlin.Double): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var scrollTop: kotlin.Double
        public open override /*1*/ /*fake_override*/ fun <get-scrollTop>(): kotlin.Double
        public open override /*1*/ /*fake_override*/ fun <set-scrollTop>(/*0*/ <set-?>: kotlin.Double): kotlin.Unit
    public open override /*1*/ /*fake_override*/ val scrollWidth: kotlin.Int
        public open override /*1*/ /*fake_override*/ fun <get-scrollWidth>(): kotlin.Int
    public open override /*1*/ /*fake_override*/ val shadowRoot: org.w3c.dom.ShadowRoot?
        public open override /*1*/ /*fake_override*/ fun <get-shadowRoot>(): org.w3c.dom.ShadowRoot?
    public open override /*1*/ /*fake_override*/ var slot: kotlin.String
        public open override /*1*/ /*fake_override*/ fun <get-slot>(): kotlin.String
        public open override /*1*/ /*fake_override*/ fun <set-slot>(/*0*/ <set-?>: kotlin.String): kotlin.Unit
    public abstract override /*1*/ /*fake_override*/ val style: org.w3c.dom.css.CSSStyleDeclaration
        public abstract override /*1*/ /*fake_override*/ fun <get-style>(): org.w3c.dom.css.CSSStyleDeclaration
    public open override /*1*/ /*fake_override*/ var tabIndex: kotlin.Int
        public open override /*1*/ /*fake_override*/ fun <get-tabIndex>(): kotlin.Int
        public open override /*1*/ /*fake_override*/ fun <set-tabIndex>(/*0*/ <set-?>: kotlin.Int): kotlin.Unit
    public open override /*1*/ /*fake_override*/ val tagName: kotlin.String
        public open override /*1*/ /*fake_override*/ fun <get-tagName>(): kotlin.String
    public open override /*1*/ /*fake_override*/ var textContent: kotlin.String?
        public open override /*1*/ /*fake_override*/ fun <get-textContent>(): kotlin.String?
        public open override /*1*/ /*fake_override*/ fun <set-textContent>(/*0*/ <set-?>: kotlin.String?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ val viewportElement: org.w3c.dom.svg.SVGElement?
        public open override /*1*/ /*fake_override*/ fun <get-viewportElement>(): org.w3c.dom.svg.SVGElement?
    public final override /*1*/ /*fake_override*/ fun addEventListener(/*0*/ type: kotlin.String, /*1*/ callback: ((org.w3c.dom.events.Event) -> kotlin.Unit)?, /*2*/ options: dynamic = ...): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun addEventListener(/*0*/ type: kotlin.String, /*1*/ callback: org.w3c.dom.events.EventListener?, /*2*/ options: dynamic = ...): kotlin.Unit
    public abstract override /*1*/ /*fake_override*/ fun after(/*0*/ vararg nodes: dynamic /*kotlin.Array<out dynamic>*/): kotlin.Unit
    public abstract override /*1*/ /*fake_override*/ fun append(/*0*/ vararg nodes: dynamic /*kotlin.Array<out dynamic>*/): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun appendChild(/*0*/ node: org.w3c.dom.Node): org.w3c.dom.Node
    public final override /*1*/ /*fake_override*/ fun attachShadow(/*0*/ init: org.w3c.dom.ShadowRootInit): org.w3c.dom.ShadowRoot
    public abstract override /*1*/ /*fake_override*/ fun before(/*0*/ vararg nodes: dynamic /*kotlin.Array<out dynamic>*/): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun blur(): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun cloneNode(/*0*/ deep: kotlin.Boolean = ...): org.w3c.dom.Node
    public final override /*1*/ /*fake_override*/ fun closest(/*0*/ selectors: kotlin.String): org.w3c.dom.Element?
    public final override /*1*/ /*fake_override*/ fun compareDocumentPosition(/*0*/ other: org.w3c.dom.Node): kotlin.Short
    public final override /*1*/ /*fake_override*/ fun contains(/*0*/ other: org.w3c.dom.Node?): kotlin.Boolean
    public abstract override /*1*/ /*fake_override*/ fun convertPointFromNode(/*0*/ point: org.w3c.dom.DOMPointInit, /*1*/ from: dynamic, /*2*/ options: org.w3c.dom.ConvertCoordinateOptions = ...): org.w3c.dom.DOMPoint
    public abstract override /*1*/ /*fake_override*/ fun convertQuadFromNode(/*0*/ quad: dynamic, /*1*/ from: dynamic, /*2*/ options: org.w3c.dom.ConvertCoordinateOptions = ...): org.w3c.dom.DOMQuad
    public abstract override /*1*/ /*fake_override*/ fun convertRectFromNode(/*0*/ rect: org.w3c.dom.DOMRectReadOnly, /*1*/ from: dynamic, /*2*/ options: org.w3c.dom.ConvertCoordinateOptions = ...): org.w3c.dom.DOMQuad
    public final override /*1*/ /*fake_override*/ fun dispatchEvent(/*0*/ event: org.w3c.dom.events.Event): kotlin.Boolean
    public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
    public final override /*1*/ /*fake_override*/ fun focus(): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun getAttribute(/*0*/ qualifiedName: kotlin.String): kotlin.String?
    public final override /*1*/ /*fake_override*/ fun getAttributeNS(/*0*/ namespace: kotlin.String?, /*1*/ localName: kotlin.String): kotlin.String?
    public final override /*1*/ /*fake_override*/ fun getAttributeNames(): kotlin.Array<kotlin.String>
    public final override /*1*/ /*fake_override*/ fun getAttributeNode(/*0*/ qualifiedName: kotlin.String): org.w3c.dom.Attr?
    public final override /*1*/ /*fake_override*/ fun getAttributeNodeNS(/*0*/ namespace: kotlin.String?, /*1*/ localName: kotlin.String): org.w3c.dom.Attr?
    public final override /*1*/ /*fake_override*/ fun getBoundingClientRect(): org.w3c.dom.DOMRect
    public abstract override /*1*/ /*fake_override*/ fun getBoxQuads(/*0*/ options: org.w3c.dom.BoxQuadOptions = ...): kotlin.Array<org.w3c.dom.DOMQuad>
    public final override /*1*/ /*fake_override*/ fun getClientRects(): kotlin.Array<org.w3c.dom.DOMRect>
    public final override /*1*/ /*fake_override*/ fun getElementsByClassName(/*0*/ classNames: kotlin.String): org.w3c.dom.HTMLCollection
    public final override /*1*/ /*fake_override*/ fun getElementsByTagName(/*0*/ qualifiedName: kotlin.String): org.w3c.dom.HTMLCollection
    public final override /*1*/ /*fake_override*/ fun getElementsByTagNameNS(/*0*/ namespace: kotlin.String?, /*1*/ localName: kotlin.String): org.w3c.dom.HTMLCollection
    public final override /*1*/ /*fake_override*/ fun getRootNode(/*0*/ options: org.w3c.dom.GetRootNodeOptions = ...): org.w3c.dom.Node
    public final override /*1*/ /*fake_override*/ fun hasAttribute(/*0*/ qualifiedName: kotlin.String): kotlin.Boolean
    public final override /*1*/ /*fake_override*/ fun hasAttributeNS(/*0*/ namespace: kotlin.String?, /*1*/ localName: kotlin.String): kotlin.Boolean
    public final override /*1*/ /*fake_override*/ fun hasAttributes(): kotlin.Boolean
    public final override /*1*/ /*fake_override*/ fun hasChildNodes(): kotlin.Boolean
    public final override /*1*/ /*fake_override*/ fun hasPointerCapture(/*0*/ pointerId: kotlin.Int): kotlin.Boolean
    public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
    public final override /*1*/ /*fake_override*/ fun insertAdjacentElement(/*0*/ where: kotlin.String, /*1*/ element: org.w3c.dom.Element): org.w3c.dom.Element?
    public final override /*1*/ /*fake_override*/ fun insertAdjacentHTML(/*0*/ position: kotlin.String, /*1*/ text: kotlin.String): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun insertAdjacentText(/*0*/ where: kotlin.String, /*1*/ data: kotlin.String): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun insertBefore(/*0*/ node: org.w3c.dom.Node, /*1*/ child: org.w3c.dom.Node?): org.w3c.dom.Node
    public final override /*1*/ /*fake_override*/ fun isDefaultNamespace(/*0*/ namespace: kotlin.String?): kotlin.Boolean
    public final override /*1*/ /*fake_override*/ fun isEqualNode(/*0*/ otherNode: org.w3c.dom.Node?): kotlin.Boolean
    public final override /*1*/ /*fake_override*/ fun isSameNode(/*0*/ otherNode: org.w3c.dom.Node?): kotlin.Boolean
    public final override /*1*/ /*fake_override*/ fun lookupNamespaceURI(/*0*/ prefix: kotlin.String?): kotlin.String?
    public final override /*1*/ /*fake_override*/ fun lookupPrefix(/*0*/ namespace: kotlin.String?): kotlin.String?
    public final override /*1*/ /*fake_override*/ fun matches(/*0*/ selectors: kotlin.String): kotlin.Boolean
    public final override /*1*/ /*fake_override*/ fun normalize(): kotlin.Unit
    public abstract override /*1*/ /*fake_override*/ fun prepend(/*0*/ vararg nodes: dynamic /*kotlin.Array<out dynamic>*/): kotlin.Unit
    public abstract override /*1*/ /*fake_override*/ fun querySelector(/*0*/ selectors: kotlin.String): org.w3c.dom.Element?
    public abstract override /*1*/ /*fake_override*/ fun querySelectorAll(/*0*/ selectors: kotlin.String): org.w3c.dom.NodeList
    public final override /*1*/ /*fake_override*/ fun releasePointerCapture(/*0*/ pointerId: kotlin.Int): kotlin.Unit
    public abstract override /*1*/ /*fake_override*/ fun remove(): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun removeAttribute(/*0*/ qualifiedName: kotlin.String): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun removeAttributeNS(/*0*/ namespace: kotlin.String?, /*1*/ localName: kotlin.String): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun removeAttributeNode(/*0*/ attr: org.w3c.dom.Attr): org.w3c.dom.Attr
    public final override /*1*/ /*fake_override*/ fun removeChild(/*0*/ child: org.w3c.dom.Node): org.w3c.dom.Node
    public final override /*1*/ /*fake_override*/ fun removeEventListener(/*0*/ type: kotlin.String, /*1*/ callback: ((org.w3c.dom.events.Event) -> kotlin.Unit)?, /*2*/ options: dynamic = ...): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun removeEventListener(/*0*/ type: kotlin.String, /*1*/ callback: org.w3c.dom.events.EventListener?, /*2*/ options: dynamic = ...): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun replaceChild(/*0*/ node: org.w3c.dom.Node, /*1*/ child: org.w3c.dom.Node): org.w3c.dom.Node
    public abstract override /*1*/ /*fake_override*/ fun replaceWith(/*0*/ vararg nodes: dynamic /*kotlin.Array<out dynamic>*/): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun requestFullscreen(): kotlin.js.Promise<kotlin.Unit>
    public final override /*1*/ /*fake_override*/ fun scroll(/*0*/ x: kotlin.Double, /*1*/ y: kotlin.Double): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun scroll(/*0*/ options: org.w3c.dom.ScrollToOptions = ...): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun scrollBy(/*0*/ x: kotlin.Double, /*1*/ y: kotlin.Double): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun scrollBy(/*0*/ options: org.w3c.dom.ScrollToOptions = ...): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun scrollIntoView(): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun scrollIntoView(/*0*/ arg: dynamic): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun scrollTo(/*0*/ x: kotlin.Double, /*1*/ y: kotlin.Double): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun scrollTo(/*0*/ options: org.w3c.dom.ScrollToOptions = ...): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun setAttribute(/*0*/ qualifiedName: kotlin.String, /*1*/ value: kotlin.String): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun setAttributeNS(/*0*/ namespace: kotlin.String?, /*1*/ qualifiedName: kotlin.String, /*2*/ value: kotlin.String): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun setAttributeNode(/*0*/ attr: org.w3c.dom.Attr): org.w3c.dom.Attr?
    public final override /*1*/ /*fake_override*/ fun setAttributeNodeNS(/*0*/ attr: org.w3c.dom.Attr): org.w3c.dom.Attr?
    public final override /*1*/ /*fake_override*/ fun setPointerCapture(/*0*/ pointerId: kotlin.Int): kotlin.Unit
    public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
    public final override /*1*/ /*fake_override*/ fun webkitMatchesSelector(/*0*/ selectors: kotlin.String): kotlin.Boolean

    public companion object Companion {
        /*primary*/ private constructor Companion()
        public final val ATTRIBUTE_NODE: kotlin.Short
            public final fun <get-ATTRIBUTE_NODE>(): kotlin.Short
        public final val CDATA_SECTION_NODE: kotlin.Short
            public final fun <get-CDATA_SECTION_NODE>(): kotlin.Short
        public final val COMMENT_NODE: kotlin.Short
            public final fun <get-COMMENT_NODE>(): kotlin.Short
        public final val DOCUMENT_FRAGMENT_NODE: kotlin.Short
            public final fun <get-DOCUMENT_FRAGMENT_NODE>(): kotlin.Short
        public final val DOCUMENT_NODE: kotlin.Short
            public final fun <get-DOCUMENT_NODE>(): kotlin.Short
        public final val DOCUMENT_POSITION_CONTAINED_BY: kotlin.Short
            public final fun <get-DOCUMENT_POSITION_CONTAINED_BY>(): kotlin.Short
        public final val DOCUMENT_POSITION_CONTAINS: kotlin.Short
            public final fun <get-DOCUMENT_POSITION_CONTAINS>(): kotlin.Short
        public final val DOCUMENT_POSITION_DISCONNECTED: kotlin.Short
            public final fun <get-DOCUMENT_POSITION_DISCONNECTED>(): kotlin.Short
        public final val DOCUMENT_POSITION_FOLLOWING: kotlin.Short
            public final fun <get-DOCUMENT_POSITION_FOLLOWING>(): kotlin.Short
        public final val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: kotlin.Short
            public final fun <get-DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC>(): kotlin.Short
        public final val DOCUMENT_POSITION_PRECEDING: kotlin.Short
            public final fun <get-DOCUMENT_POSITION_PRECEDING>(): kotlin.Short
        public final val DOCUMENT_TYPE_NODE: kotlin.Short
            public final fun <get-DOCUMENT_TYPE_NODE>(): kotlin.Short
        public final val ELEMENT_NODE: kotlin.Short
            public final fun <get-ELEMENT_NODE>(): kotlin.Short
        public final val ENTITY_NODE: kotlin.Short
            public final fun <get-ENTITY_NODE>(): kotlin.Short
        public final val ENTITY_REFERENCE_NODE: kotlin.Short
            public final fun <get-ENTITY_REFERENCE_NODE>(): kotlin.Short
        public final val NOTATION_NODE: kotlin.Short
            public final fun <get-NOTATION_NODE>(): kotlin.Short
        public final val PROCESSING_INSTRUCTION_NODE: kotlin.Short
            public final fun <get-PROCESSING_INSTRUCTION_NODE>(): kotlin.Short
        public final val TEXT_NODE: kotlin.Short
            public final fun <get-TEXT_NODE>(): kotlin.Short
        public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
        public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
        public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
    }
}

public abstract external class SVGNameList {
    /*primary*/ public constructor SVGNameList()
    public open val length: kotlin.Int
        public open fun <get-length>(): kotlin.Int
    public open val numberOfItems: kotlin.Int
        public open fun <get-numberOfItems>(): kotlin.Int
    public final fun appendItem(/*0*/ newItem: dynamic): dynamic
    public final fun clear(): kotlin.Unit
    public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
    public final fun getItem(/*0*/ index: kotlin.Int): dynamic
    public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
    public final fun initialize(/*0*/ newItem: dynamic): dynamic
    public final fun insertItemBefore(/*0*/ newItem: dynamic, /*1*/ index: kotlin.Int): dynamic
    public final fun removeItem(/*0*/ index: kotlin.Int): dynamic
    public final fun replaceItem(/*0*/ newItem: dynamic, /*1*/ index: kotlin.Int): dynamic
    public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
}

public abstract external class SVGNumber {
    /*primary*/ public constructor SVGNumber()
    public open var value: kotlin.Float
        public open fun <get-value>(): kotlin.Float
        public open fun <set-value>(/*0*/ <set-?>: kotlin.Float): kotlin.Unit
    public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
    public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
    public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
}

public abstract external class SVGNumberList {
    /*primary*/ public constructor SVGNumberList()
    public open val length: kotlin.Int
        public open fun <get-length>(): kotlin.Int
    public open val numberOfItems: kotlin.Int
        public open fun <get-numberOfItems>(): kotlin.Int
    public final fun appendItem(/*0*/ newItem: org.w3c.dom.svg.SVGNumber): org.w3c.dom.svg.SVGNumber
    public final fun clear(): kotlin.Unit
    public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
    public final fun getItem(/*0*/ index: kotlin.Int): org.w3c.dom.svg.SVGNumber
    public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
    public final fun initialize(/*0*/ newItem: org.w3c.dom.svg.SVGNumber): org.w3c.dom.svg.SVGNumber
    public final fun insertItemBefore(/*0*/ newItem: org.w3c.dom.svg.SVGNumber, /*1*/ index: kotlin.Int): org.w3c.dom.svg.SVGNumber
    public final fun removeItem(/*0*/ index: kotlin.Int): org.w3c.dom.svg.SVGNumber
    public final fun replaceItem(/*0*/ newItem: org.w3c.dom.svg.SVGNumber, /*1*/ index: kotlin.Int): org.w3c.dom.svg.SVGNumber
    public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
}

public abstract external class SVGPathElement : org.w3c.dom.svg.SVGGeometryElement {
    /*primary*/ public constructor SVGPathElement()
    public open override /*1*/ /*fake_override*/ val assignedSlot: org.w3c.dom.HTMLSlotElement?
        public open override /*1*/ /*fake_override*/ fun <get-assignedSlot>(): org.w3c.dom.HTMLSlotElement?
    public open override /*1*/ /*fake_override*/ val attributes: org.w3c.dom.NamedNodeMap
        public open override /*1*/ /*fake_override*/ fun <get-attributes>(): org.w3c.dom.NamedNodeMap
    public open override /*1*/ /*fake_override*/ val baseURI: kotlin.String
        public open override /*1*/ /*fake_override*/ fun <get-baseURI>(): kotlin.String
    public abstract override /*1*/ /*fake_override*/ val childElementCount: kotlin.Int
        public abstract override /*1*/ /*fake_override*/ fun <get-childElementCount>(): kotlin.Int
    public open override /*1*/ /*fake_override*/ val childNodes: org.w3c.dom.NodeList
        public open override /*1*/ /*fake_override*/ fun <get-childNodes>(): org.w3c.dom.NodeList
    public abstract override /*1*/ /*fake_override*/ val children: org.w3c.dom.HTMLCollection
        public abstract override /*1*/ /*fake_override*/ fun <get-children>(): org.w3c.dom.HTMLCollection
    public open override /*1*/ /*fake_override*/ val classList: org.w3c.dom.DOMTokenList
        public open override /*1*/ /*fake_override*/ fun <get-classList>(): org.w3c.dom.DOMTokenList
    public open override /*1*/ /*fake_override*/ var className: kotlin.String
        public open override /*1*/ /*fake_override*/ fun <get-className>(): kotlin.String
        public open override /*1*/ /*fake_override*/ fun <set-className>(/*0*/ <set-?>: kotlin.String): kotlin.Unit
    public open override /*1*/ /*fake_override*/ val clientHeight: kotlin.Int
        public open override /*1*/ /*fake_override*/ fun <get-clientHeight>(): kotlin.Int
    public open override /*1*/ /*fake_override*/ val clientLeft: kotlin.Int
        public open override /*1*/ /*fake_override*/ fun <get-clientLeft>(): kotlin.Int
    public open override /*1*/ /*fake_override*/ val clientTop: kotlin.Int
        public open override /*1*/ /*fake_override*/ fun <get-clientTop>(): kotlin.Int
    public open override /*1*/ /*fake_override*/ val clientWidth: kotlin.Int
        public open override /*1*/ /*fake_override*/ fun <get-clientWidth>(): kotlin.Int
    public open override /*1*/ /*fake_override*/ val correspondingElement: org.w3c.dom.svg.SVGElement?
        public open override /*1*/ /*fake_override*/ fun <get-correspondingElement>(): org.w3c.dom.svg.SVGElement?
    public open override /*1*/ /*fake_override*/ val correspondingUseElement: org.w3c.dom.svg.SVGUseElement?
        public open override /*1*/ /*fake_override*/ fun <get-correspondingUseElement>(): org.w3c.dom.svg.SVGUseElement?
    public open override /*1*/ /*fake_override*/ val dataset: org.w3c.dom.DOMStringMap
        public open override /*1*/ /*fake_override*/ fun <get-dataset>(): org.w3c.dom.DOMStringMap
    public open override /*1*/ /*fake_override*/ val firstChild: org.w3c.dom.Node?
        public open override /*1*/ /*fake_override*/ fun <get-firstChild>(): org.w3c.dom.Node?
    public open override /*1*/ /*fake_override*/ val firstElementChild: org.w3c.dom.Element?
        public open override /*1*/ /*fake_override*/ fun <get-firstElementChild>(): org.w3c.dom.Element?
    public open override /*1*/ /*fake_override*/ var id: kotlin.String
        public open override /*1*/ /*fake_override*/ fun <get-id>(): kotlin.String
        public open override /*1*/ /*fake_override*/ fun <set-id>(/*0*/ <set-?>: kotlin.String): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var innerHTML: kotlin.String
        public open override /*1*/ /*fake_override*/ fun <get-innerHTML>(): kotlin.String
        public open override /*1*/ /*fake_override*/ fun <set-innerHTML>(/*0*/ <set-?>: kotlin.String): kotlin.Unit
    public open override /*1*/ /*fake_override*/ val isConnected: kotlin.Boolean
        public open override /*1*/ /*fake_override*/ fun <get-isConnected>(): kotlin.Boolean
    public open override /*1*/ /*fake_override*/ val lastChild: org.w3c.dom.Node?
        public open override /*1*/ /*fake_override*/ fun <get-lastChild>(): org.w3c.dom.Node?
    public open override /*1*/ /*fake_override*/ val lastElementChild: org.w3c.dom.Element?
        public open override /*1*/ /*fake_override*/ fun <get-lastElementChild>(): org.w3c.dom.Element?
    public open override /*1*/ /*fake_override*/ val localName: kotlin.String
        public open override /*1*/ /*fake_override*/ fun <get-localName>(): kotlin.String
    public open override /*1*/ /*fake_override*/ val namespaceURI: kotlin.String?
        public open override /*1*/ /*fake_override*/ fun <get-namespaceURI>(): kotlin.String?
    public open override /*1*/ /*fake_override*/ val nextElementSibling: org.w3c.dom.Element?
        public open override /*1*/ /*fake_override*/ fun <get-nextElementSibling>(): org.w3c.dom.Element?
    public open override /*1*/ /*fake_override*/ val nextSibling: org.w3c.dom.Node?
        public open override /*1*/ /*fake_override*/ fun <get-nextSibling>(): org.w3c.dom.Node?
    public open override /*1*/ /*fake_override*/ val nodeName: kotlin.String
        public open override /*1*/ /*fake_override*/ fun <get-nodeName>(): kotlin.String
    public open override /*1*/ /*fake_override*/ val nodeType: kotlin.Short
        public open override /*1*/ /*fake_override*/ fun <get-nodeType>(): kotlin.Short
    public open override /*1*/ /*fake_override*/ var nodeValue: kotlin.String?
        public open override /*1*/ /*fake_override*/ fun <get-nodeValue>(): kotlin.String?
        public open override /*1*/ /*fake_override*/ fun <set-nodeValue>(/*0*/ <set-?>: kotlin.String?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onabort: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onabort>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onabort>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onblur: ((org.w3c.dom.events.FocusEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onblur>(): ((org.w3c.dom.events.FocusEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onblur>(/*0*/ value: ((org.w3c.dom.events.FocusEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var oncancel: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-oncancel>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-oncancel>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var oncanplay: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-oncanplay>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-oncanplay>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var oncanplaythrough: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-oncanplaythrough>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-oncanplaythrough>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onchange: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onchange>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onchange>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onclick: ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onclick>(): ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onclick>(/*0*/ value: ((org.w3c.dom.events.MouseEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onclose: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onclose>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onclose>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var oncontextmenu: ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-oncontextmenu>(): ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-oncontextmenu>(/*0*/ value: ((org.w3c.dom.events.MouseEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var oncuechange: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-oncuechange>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-oncuechange>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ondblclick: ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ondblclick>(): ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ondblclick>(/*0*/ value: ((org.w3c.dom.events.MouseEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ondrag: ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ondrag>(): ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ondrag>(/*0*/ value: ((org.w3c.dom.DragEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ondragend: ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ondragend>(): ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ondragend>(/*0*/ value: ((org.w3c.dom.DragEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ondragenter: ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ondragenter>(): ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ondragenter>(/*0*/ value: ((org.w3c.dom.DragEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ondragexit: ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ondragexit>(): ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ondragexit>(/*0*/ value: ((org.w3c.dom.DragEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ondragleave: ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ondragleave>(): ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ondragleave>(/*0*/ value: ((org.w3c.dom.DragEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ondragover: ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ondragover>(): ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ondragover>(/*0*/ value: ((org.w3c.dom.DragEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ondragstart: ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ondragstart>(): ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ondragstart>(/*0*/ value: ((org.w3c.dom.DragEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ondrop: ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ondrop>(): ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ondrop>(/*0*/ value: ((org.w3c.dom.DragEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ondurationchange: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ondurationchange>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ondurationchange>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onemptied: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onemptied>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onemptied>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onended: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onended>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onended>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onerror: ((dynamic, kotlin.String, kotlin.Int, kotlin.Int, kotlin.Any?) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onerror>(): ((dynamic, kotlin.String, kotlin.Int, kotlin.Int, kotlin.Any?) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onerror>(/*0*/ value: ((dynamic, kotlin.String, kotlin.Int, kotlin.Int, kotlin.Any?) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onfocus: ((org.w3c.dom.events.FocusEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onfocus>(): ((org.w3c.dom.events.FocusEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onfocus>(/*0*/ value: ((org.w3c.dom.events.FocusEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ongotpointercapture: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ongotpointercapture>(): ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ongotpointercapture>(/*0*/ value: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var oninput: ((org.w3c.dom.events.InputEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-oninput>(): ((org.w3c.dom.events.InputEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-oninput>(/*0*/ value: ((org.w3c.dom.events.InputEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var oninvalid: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-oninvalid>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-oninvalid>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onkeydown: ((org.w3c.dom.events.KeyboardEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onkeydown>(): ((org.w3c.dom.events.KeyboardEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onkeydown>(/*0*/ value: ((org.w3c.dom.events.KeyboardEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onkeypress: ((org.w3c.dom.events.KeyboardEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onkeypress>(): ((org.w3c.dom.events.KeyboardEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onkeypress>(/*0*/ value: ((org.w3c.dom.events.KeyboardEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onkeyup: ((org.w3c.dom.events.KeyboardEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onkeyup>(): ((org.w3c.dom.events.KeyboardEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onkeyup>(/*0*/ value: ((org.w3c.dom.events.KeyboardEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onload: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onload>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onload>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onloadeddata: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onloadeddata>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onloadeddata>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onloadedmetadata: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onloadedmetadata>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onloadedmetadata>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onloadend: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onloadend>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onloadend>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onloadstart: ((org.w3c.xhr.ProgressEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onloadstart>(): ((org.w3c.xhr.ProgressEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onloadstart>(/*0*/ value: ((org.w3c.xhr.ProgressEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onlostpointercapture: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onlostpointercapture>(): ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onlostpointercapture>(/*0*/ value: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onmousedown: ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onmousedown>(): ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onmousedown>(/*0*/ value: ((org.w3c.dom.events.MouseEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onmouseenter: ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onmouseenter>(): ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onmouseenter>(/*0*/ value: ((org.w3c.dom.events.MouseEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onmouseleave: ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onmouseleave>(): ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onmouseleave>(/*0*/ value: ((org.w3c.dom.events.MouseEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onmousemove: ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onmousemove>(): ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onmousemove>(/*0*/ value: ((org.w3c.dom.events.MouseEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onmouseout: ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onmouseout>(): ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onmouseout>(/*0*/ value: ((org.w3c.dom.events.MouseEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onmouseover: ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onmouseover>(): ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onmouseover>(/*0*/ value: ((org.w3c.dom.events.MouseEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onmouseup: ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onmouseup>(): ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onmouseup>(/*0*/ value: ((org.w3c.dom.events.MouseEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onpause: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onpause>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onpause>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onplay: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onplay>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onplay>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onplaying: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onplaying>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onplaying>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onpointercancel: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onpointercancel>(): ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onpointercancel>(/*0*/ value: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onpointerdown: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onpointerdown>(): ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onpointerdown>(/*0*/ value: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onpointerenter: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onpointerenter>(): ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onpointerenter>(/*0*/ value: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onpointerleave: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onpointerleave>(): ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onpointerleave>(/*0*/ value: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onpointermove: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onpointermove>(): ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onpointermove>(/*0*/ value: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onpointerout: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onpointerout>(): ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onpointerout>(/*0*/ value: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onpointerover: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onpointerover>(): ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onpointerover>(/*0*/ value: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onpointerup: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onpointerup>(): ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onpointerup>(/*0*/ value: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onprogress: ((org.w3c.xhr.ProgressEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onprogress>(): ((org.w3c.xhr.ProgressEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onprogress>(/*0*/ value: ((org.w3c.xhr.ProgressEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onratechange: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onratechange>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onratechange>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onreset: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onreset>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onreset>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onresize: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onresize>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onresize>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onscroll: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onscroll>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onscroll>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onseeked: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onseeked>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onseeked>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onseeking: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onseeking>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onseeking>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onselect: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onselect>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onselect>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onshow: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onshow>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onshow>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onstalled: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onstalled>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onstalled>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onsubmit: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onsubmit>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onsubmit>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onsuspend: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onsuspend>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onsuspend>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ontimeupdate: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ontimeupdate>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ontimeupdate>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ontoggle: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ontoggle>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ontoggle>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onvolumechange: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onvolumechange>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onvolumechange>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onwaiting: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onwaiting>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onwaiting>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onwheel: ((org.w3c.dom.events.WheelEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onwheel>(): ((org.w3c.dom.events.WheelEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onwheel>(/*0*/ value: ((org.w3c.dom.events.WheelEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var outerHTML: kotlin.String
        public open override /*1*/ /*fake_override*/ fun <get-outerHTML>(): kotlin.String
        public open override /*1*/ /*fake_override*/ fun <set-outerHTML>(/*0*/ <set-?>: kotlin.String): kotlin.Unit
    public open override /*1*/ /*fake_override*/ val ownerDocument: org.w3c.dom.Document?
        public open override /*1*/ /*fake_override*/ fun <get-ownerDocument>(): org.w3c.dom.Document?
    public open override /*1*/ /*fake_override*/ val ownerSVGElement: org.w3c.dom.svg.SVGSVGElement?
        public open override /*1*/ /*fake_override*/ fun <get-ownerSVGElement>(): org.w3c.dom.svg.SVGSVGElement?
    public open override /*1*/ /*fake_override*/ val parentElement: org.w3c.dom.Element?
        public open override /*1*/ /*fake_override*/ fun <get-parentElement>(): org.w3c.dom.Element?
    public open override /*1*/ /*fake_override*/ val parentNode: org.w3c.dom.Node?
        public open override /*1*/ /*fake_override*/ fun <get-parentNode>(): org.w3c.dom.Node?
    public open override /*1*/ /*fake_override*/ val pathLength: org.w3c.dom.svg.SVGAnimatedNumber
        public open override /*1*/ /*fake_override*/ fun <get-pathLength>(): org.w3c.dom.svg.SVGAnimatedNumber
    public open override /*1*/ /*fake_override*/ val prefix: kotlin.String?
        public open override /*1*/ /*fake_override*/ fun <get-prefix>(): kotlin.String?
    public open override /*1*/ /*fake_override*/ val previousElementSibling: org.w3c.dom.Element?
        public open override /*1*/ /*fake_override*/ fun <get-previousElementSibling>(): org.w3c.dom.Element?
    public open override /*1*/ /*fake_override*/ val previousSibling: org.w3c.dom.Node?
        public open override /*1*/ /*fake_override*/ fun <get-previousSibling>(): org.w3c.dom.Node?
    public abstract override /*1*/ /*fake_override*/ val requiredExtensions: org.w3c.dom.svg.SVGStringList
        public abstract override /*1*/ /*fake_override*/ fun <get-requiredExtensions>(): org.w3c.dom.svg.SVGStringList
    public open override /*1*/ /*fake_override*/ val scrollHeight: kotlin.Int
        public open override /*1*/ /*fake_override*/ fun <get-scrollHeight>(): kotlin.Int
    public open override /*1*/ /*fake_override*/ var scrollLeft: kotlin.Double
        public open override /*1*/ /*fake_override*/ fun <get-scrollLeft>(): kotlin.Double
        public open override /*1*/ /*fake_override*/ fun <set-scrollLeft>(/*0*/ <set-?>: kotlin.Double): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var scrollTop: kotlin.Double
        public open override /*1*/ /*fake_override*/ fun <get-scrollTop>(): kotlin.Double
        public open override /*1*/ /*fake_override*/ fun <set-scrollTop>(/*0*/ <set-?>: kotlin.Double): kotlin.Unit
    public open override /*1*/ /*fake_override*/ val scrollWidth: kotlin.Int
        public open override /*1*/ /*fake_override*/ fun <get-scrollWidth>(): kotlin.Int
    public open override /*1*/ /*fake_override*/ val shadowRoot: org.w3c.dom.ShadowRoot?
        public open override /*1*/ /*fake_override*/ fun <get-shadowRoot>(): org.w3c.dom.ShadowRoot?
    public open override /*1*/ /*fake_override*/ var slot: kotlin.String
        public open override /*1*/ /*fake_override*/ fun <get-slot>(): kotlin.String
        public open override /*1*/ /*fake_override*/ fun <set-slot>(/*0*/ <set-?>: kotlin.String): kotlin.Unit
    public abstract override /*1*/ /*fake_override*/ val style: org.w3c.dom.css.CSSStyleDeclaration
        public abstract override /*1*/ /*fake_override*/ fun <get-style>(): org.w3c.dom.css.CSSStyleDeclaration
    public abstract override /*1*/ /*fake_override*/ val systemLanguage: org.w3c.dom.svg.SVGStringList
        public abstract override /*1*/ /*fake_override*/ fun <get-systemLanguage>(): org.w3c.dom.svg.SVGStringList
    public open override /*1*/ /*fake_override*/ var tabIndex: kotlin.Int
        public open override /*1*/ /*fake_override*/ fun <get-tabIndex>(): kotlin.Int
        public open override /*1*/ /*fake_override*/ fun <set-tabIndex>(/*0*/ <set-?>: kotlin.Int): kotlin.Unit
    public open override /*1*/ /*fake_override*/ val tagName: kotlin.String
        public open override /*1*/ /*fake_override*/ fun <get-tagName>(): kotlin.String
    public open override /*1*/ /*fake_override*/ var textContent: kotlin.String?
        public open override /*1*/ /*fake_override*/ fun <get-textContent>(): kotlin.String?
        public open override /*1*/ /*fake_override*/ fun <set-textContent>(/*0*/ <set-?>: kotlin.String?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ val transform: org.w3c.dom.svg.SVGAnimatedTransformList
        public open override /*1*/ /*fake_override*/ fun <get-transform>(): org.w3c.dom.svg.SVGAnimatedTransformList
    public open override /*1*/ /*fake_override*/ val viewportElement: org.w3c.dom.svg.SVGElement?
        public open override /*1*/ /*fake_override*/ fun <get-viewportElement>(): org.w3c.dom.svg.SVGElement?
    public final override /*1*/ /*fake_override*/ fun addEventListener(/*0*/ type: kotlin.String, /*1*/ callback: ((org.w3c.dom.events.Event) -> kotlin.Unit)?, /*2*/ options: dynamic = ...): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun addEventListener(/*0*/ type: kotlin.String, /*1*/ callback: org.w3c.dom.events.EventListener?, /*2*/ options: dynamic = ...): kotlin.Unit
    public abstract override /*1*/ /*fake_override*/ fun after(/*0*/ vararg nodes: dynamic /*kotlin.Array<out dynamic>*/): kotlin.Unit
    public abstract override /*1*/ /*fake_override*/ fun append(/*0*/ vararg nodes: dynamic /*kotlin.Array<out dynamic>*/): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun appendChild(/*0*/ node: org.w3c.dom.Node): org.w3c.dom.Node
    public final override /*1*/ /*fake_override*/ fun attachShadow(/*0*/ init: org.w3c.dom.ShadowRootInit): org.w3c.dom.ShadowRoot
    public abstract override /*1*/ /*fake_override*/ fun before(/*0*/ vararg nodes: dynamic /*kotlin.Array<out dynamic>*/): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun blur(): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun cloneNode(/*0*/ deep: kotlin.Boolean = ...): org.w3c.dom.Node
    public final override /*1*/ /*fake_override*/ fun closest(/*0*/ selectors: kotlin.String): org.w3c.dom.Element?
    public final override /*1*/ /*fake_override*/ fun compareDocumentPosition(/*0*/ other: org.w3c.dom.Node): kotlin.Short
    public final override /*1*/ /*fake_override*/ fun contains(/*0*/ other: org.w3c.dom.Node?): kotlin.Boolean
    public abstract override /*1*/ /*fake_override*/ fun convertPointFromNode(/*0*/ point: org.w3c.dom.DOMPointInit, /*1*/ from: dynamic, /*2*/ options: org.w3c.dom.ConvertCoordinateOptions = ...): org.w3c.dom.DOMPoint
    public abstract override /*1*/ /*fake_override*/ fun convertQuadFromNode(/*0*/ quad: dynamic, /*1*/ from: dynamic, /*2*/ options: org.w3c.dom.ConvertCoordinateOptions = ...): org.w3c.dom.DOMQuad
    public abstract override /*1*/ /*fake_override*/ fun convertRectFromNode(/*0*/ rect: org.w3c.dom.DOMRectReadOnly, /*1*/ from: dynamic, /*2*/ options: org.w3c.dom.ConvertCoordinateOptions = ...): org.w3c.dom.DOMQuad
    public final override /*1*/ /*fake_override*/ fun dispatchEvent(/*0*/ event: org.w3c.dom.events.Event): kotlin.Boolean
    public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
    public final override /*1*/ /*fake_override*/ fun focus(): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun getAttribute(/*0*/ qualifiedName: kotlin.String): kotlin.String?
    public final override /*1*/ /*fake_override*/ fun getAttributeNS(/*0*/ namespace: kotlin.String?, /*1*/ localName: kotlin.String): kotlin.String?
    public final override /*1*/ /*fake_override*/ fun getAttributeNames(): kotlin.Array<kotlin.String>
    public final override /*1*/ /*fake_override*/ fun getAttributeNode(/*0*/ qualifiedName: kotlin.String): org.w3c.dom.Attr?
    public final override /*1*/ /*fake_override*/ fun getAttributeNodeNS(/*0*/ namespace: kotlin.String?, /*1*/ localName: kotlin.String): org.w3c.dom.Attr?
    public final override /*1*/ /*fake_override*/ fun getBBox(/*0*/ options: org.w3c.dom.svg.SVGBoundingBoxOptions = ...): org.w3c.dom.DOMRect
    public final override /*1*/ /*fake_override*/ fun getBoundingClientRect(): org.w3c.dom.DOMRect
    public abstract override /*1*/ /*fake_override*/ fun getBoxQuads(/*0*/ options: org.w3c.dom.BoxQuadOptions = ...): kotlin.Array<org.w3c.dom.DOMQuad>
    public final override /*1*/ /*fake_override*/ fun getCTM(): org.w3c.dom.DOMMatrix?
    public final override /*1*/ /*fake_override*/ fun getClientRects(): kotlin.Array<org.w3c.dom.DOMRect>
    public final override /*1*/ /*fake_override*/ fun getElementsByClassName(/*0*/ classNames: kotlin.String): org.w3c.dom.HTMLCollection
    public final override /*1*/ /*fake_override*/ fun getElementsByTagName(/*0*/ qualifiedName: kotlin.String): org.w3c.dom.HTMLCollection
    public final override /*1*/ /*fake_override*/ fun getElementsByTagNameNS(/*0*/ namespace: kotlin.String?, /*1*/ localName: kotlin.String): org.w3c.dom.HTMLCollection
    public final override /*1*/ /*fake_override*/ fun getPointAtLength(/*0*/ distance: kotlin.Float): org.w3c.dom.DOMPoint
    public final override /*1*/ /*fake_override*/ fun getRootNode(/*0*/ options: org.w3c.dom.GetRootNodeOptions = ...): org.w3c.dom.Node
    public final override /*1*/ /*fake_override*/ fun getScreenCTM(): org.w3c.dom.DOMMatrix?
    public final override /*1*/ /*fake_override*/ fun getTotalLength(): kotlin.Float
    public final override /*1*/ /*fake_override*/ fun hasAttribute(/*0*/ qualifiedName: kotlin.String): kotlin.Boolean
    public final override /*1*/ /*fake_override*/ fun hasAttributeNS(/*0*/ namespace: kotlin.String?, /*1*/ localName: kotlin.String): kotlin.Boolean
    public final override /*1*/ /*fake_override*/ fun hasAttributes(): kotlin.Boolean
    public final override /*1*/ /*fake_override*/ fun hasChildNodes(): kotlin.Boolean
    public final override /*1*/ /*fake_override*/ fun hasPointerCapture(/*0*/ pointerId: kotlin.Int): kotlin.Boolean
    public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
    public final override /*1*/ /*fake_override*/ fun insertAdjacentElement(/*0*/ where: kotlin.String, /*1*/ element: org.w3c.dom.Element): org.w3c.dom.Element?
    public final override /*1*/ /*fake_override*/ fun insertAdjacentHTML(/*0*/ position: kotlin.String, /*1*/ text: kotlin.String): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun insertAdjacentText(/*0*/ where: kotlin.String, /*1*/ data: kotlin.String): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun insertBefore(/*0*/ node: org.w3c.dom.Node, /*1*/ child: org.w3c.dom.Node?): org.w3c.dom.Node
    public final override /*1*/ /*fake_override*/ fun isDefaultNamespace(/*0*/ namespace: kotlin.String?): kotlin.Boolean
    public final override /*1*/ /*fake_override*/ fun isEqualNode(/*0*/ otherNode: org.w3c.dom.Node?): kotlin.Boolean
    public final override /*1*/ /*fake_override*/ fun isPointInFill(/*0*/ point: org.w3c.dom.DOMPoint): kotlin.Boolean
    public final override /*1*/ /*fake_override*/ fun isPointInStroke(/*0*/ point: org.w3c.dom.DOMPoint): kotlin.Boolean
    public final override /*1*/ /*fake_override*/ fun isSameNode(/*0*/ otherNode: org.w3c.dom.Node?): kotlin.Boolean
    public final override /*1*/ /*fake_override*/ fun lookupNamespaceURI(/*0*/ prefix: kotlin.String?): kotlin.String?
    public final override /*1*/ /*fake_override*/ fun lookupPrefix(/*0*/ namespace: kotlin.String?): kotlin.String?
    public final override /*1*/ /*fake_override*/ fun matches(/*0*/ selectors: kotlin.String): kotlin.Boolean
    public final override /*1*/ /*fake_override*/ fun normalize(): kotlin.Unit
    public abstract override /*1*/ /*fake_override*/ fun prepend(/*0*/ vararg nodes: dynamic /*kotlin.Array<out dynamic>*/): kotlin.Unit
    public abstract override /*1*/ /*fake_override*/ fun querySelector(/*0*/ selectors: kotlin.String): org.w3c.dom.Element?
    public abstract override /*1*/ /*fake_override*/ fun querySelectorAll(/*0*/ selectors: kotlin.String): org.w3c.dom.NodeList
    public final override /*1*/ /*fake_override*/ fun releasePointerCapture(/*0*/ pointerId: kotlin.Int): kotlin.Unit
    public abstract override /*1*/ /*fake_override*/ fun remove(): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun removeAttribute(/*0*/ qualifiedName: kotlin.String): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun removeAttributeNS(/*0*/ namespace: kotlin.String?, /*1*/ localName: kotlin.String): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun removeAttributeNode(/*0*/ attr: org.w3c.dom.Attr): org.w3c.dom.Attr
    public final override /*1*/ /*fake_override*/ fun removeChild(/*0*/ child: org.w3c.dom.Node): org.w3c.dom.Node
    public final override /*1*/ /*fake_override*/ fun removeEventListener(/*0*/ type: kotlin.String, /*1*/ callback: ((org.w3c.dom.events.Event) -> kotlin.Unit)?, /*2*/ options: dynamic = ...): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun removeEventListener(/*0*/ type: kotlin.String, /*1*/ callback: org.w3c.dom.events.EventListener?, /*2*/ options: dynamic = ...): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun replaceChild(/*0*/ node: org.w3c.dom.Node, /*1*/ child: org.w3c.dom.Node): org.w3c.dom.Node
    public abstract override /*1*/ /*fake_override*/ fun replaceWith(/*0*/ vararg nodes: dynamic /*kotlin.Array<out dynamic>*/): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun requestFullscreen(): kotlin.js.Promise<kotlin.Unit>
    public final override /*1*/ /*fake_override*/ fun scroll(/*0*/ x: kotlin.Double, /*1*/ y: kotlin.Double): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun scroll(/*0*/ options: org.w3c.dom.ScrollToOptions = ...): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun scrollBy(/*0*/ x: kotlin.Double, /*1*/ y: kotlin.Double): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun scrollBy(/*0*/ options: org.w3c.dom.ScrollToOptions = ...): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun scrollIntoView(): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun scrollIntoView(/*0*/ arg: dynamic): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun scrollTo(/*0*/ x: kotlin.Double, /*1*/ y: kotlin.Double): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun scrollTo(/*0*/ options: org.w3c.dom.ScrollToOptions = ...): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun setAttribute(/*0*/ qualifiedName: kotlin.String, /*1*/ value: kotlin.String): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun setAttributeNS(/*0*/ namespace: kotlin.String?, /*1*/ qualifiedName: kotlin.String, /*2*/ value: kotlin.String): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun setAttributeNode(/*0*/ attr: org.w3c.dom.Attr): org.w3c.dom.Attr?
    public final override /*1*/ /*fake_override*/ fun setAttributeNodeNS(/*0*/ attr: org.w3c.dom.Attr): org.w3c.dom.Attr?
    public final override /*1*/ /*fake_override*/ fun setPointerCapture(/*0*/ pointerId: kotlin.Int): kotlin.Unit
    public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
    public final override /*1*/ /*fake_override*/ fun webkitMatchesSelector(/*0*/ selectors: kotlin.String): kotlin.Boolean

    public companion object Companion {
        /*primary*/ private constructor Companion()
        public final val ATTRIBUTE_NODE: kotlin.Short
            public final fun <get-ATTRIBUTE_NODE>(): kotlin.Short
        public final val CDATA_SECTION_NODE: kotlin.Short
            public final fun <get-CDATA_SECTION_NODE>(): kotlin.Short
        public final val COMMENT_NODE: kotlin.Short
            public final fun <get-COMMENT_NODE>(): kotlin.Short
        public final val DOCUMENT_FRAGMENT_NODE: kotlin.Short
            public final fun <get-DOCUMENT_FRAGMENT_NODE>(): kotlin.Short
        public final val DOCUMENT_NODE: kotlin.Short
            public final fun <get-DOCUMENT_NODE>(): kotlin.Short
        public final val DOCUMENT_POSITION_CONTAINED_BY: kotlin.Short
            public final fun <get-DOCUMENT_POSITION_CONTAINED_BY>(): kotlin.Short
        public final val DOCUMENT_POSITION_CONTAINS: kotlin.Short
            public final fun <get-DOCUMENT_POSITION_CONTAINS>(): kotlin.Short
        public final val DOCUMENT_POSITION_DISCONNECTED: kotlin.Short
            public final fun <get-DOCUMENT_POSITION_DISCONNECTED>(): kotlin.Short
        public final val DOCUMENT_POSITION_FOLLOWING: kotlin.Short
            public final fun <get-DOCUMENT_POSITION_FOLLOWING>(): kotlin.Short
        public final val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: kotlin.Short
            public final fun <get-DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC>(): kotlin.Short
        public final val DOCUMENT_POSITION_PRECEDING: kotlin.Short
            public final fun <get-DOCUMENT_POSITION_PRECEDING>(): kotlin.Short
        public final val DOCUMENT_TYPE_NODE: kotlin.Short
            public final fun <get-DOCUMENT_TYPE_NODE>(): kotlin.Short
        public final val ELEMENT_NODE: kotlin.Short
            public final fun <get-ELEMENT_NODE>(): kotlin.Short
        public final val ENTITY_NODE: kotlin.Short
            public final fun <get-ENTITY_NODE>(): kotlin.Short
        public final val ENTITY_REFERENCE_NODE: kotlin.Short
            public final fun <get-ENTITY_REFERENCE_NODE>(): kotlin.Short
        public final val NOTATION_NODE: kotlin.Short
            public final fun <get-NOTATION_NODE>(): kotlin.Short
        public final val PROCESSING_INSTRUCTION_NODE: kotlin.Short
            public final fun <get-PROCESSING_INSTRUCTION_NODE>(): kotlin.Short
        public final val TEXT_NODE: kotlin.Short
            public final fun <get-TEXT_NODE>(): kotlin.Short
        public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
        public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
        public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
    }
}

public abstract external class SVGPatternElement : org.w3c.dom.svg.SVGElement, org.w3c.dom.svg.SVGFitToViewBox, org.w3c.dom.svg.SVGURIReference, org.w3c.dom.svg.SVGUnitTypes {
    /*primary*/ public constructor SVGPatternElement()
    public open override /*1*/ /*fake_override*/ val assignedSlot: org.w3c.dom.HTMLSlotElement?
        public open override /*1*/ /*fake_override*/ fun <get-assignedSlot>(): org.w3c.dom.HTMLSlotElement?
    public open override /*1*/ /*fake_override*/ val attributes: org.w3c.dom.NamedNodeMap
        public open override /*1*/ /*fake_override*/ fun <get-attributes>(): org.w3c.dom.NamedNodeMap
    public open override /*1*/ /*fake_override*/ val baseURI: kotlin.String
        public open override /*1*/ /*fake_override*/ fun <get-baseURI>(): kotlin.String
    public abstract override /*1*/ /*fake_override*/ val childElementCount: kotlin.Int
        public abstract override /*1*/ /*fake_override*/ fun <get-childElementCount>(): kotlin.Int
    public open override /*1*/ /*fake_override*/ val childNodes: org.w3c.dom.NodeList
        public open override /*1*/ /*fake_override*/ fun <get-childNodes>(): org.w3c.dom.NodeList
    public abstract override /*1*/ /*fake_override*/ val children: org.w3c.dom.HTMLCollection
        public abstract override /*1*/ /*fake_override*/ fun <get-children>(): org.w3c.dom.HTMLCollection
    public open override /*1*/ /*fake_override*/ val classList: org.w3c.dom.DOMTokenList
        public open override /*1*/ /*fake_override*/ fun <get-classList>(): org.w3c.dom.DOMTokenList
    public open override /*1*/ /*fake_override*/ var className: kotlin.String
        public open override /*1*/ /*fake_override*/ fun <get-className>(): kotlin.String
        public open override /*1*/ /*fake_override*/ fun <set-className>(/*0*/ <set-?>: kotlin.String): kotlin.Unit
    public open override /*1*/ /*fake_override*/ val clientHeight: kotlin.Int
        public open override /*1*/ /*fake_override*/ fun <get-clientHeight>(): kotlin.Int
    public open override /*1*/ /*fake_override*/ val clientLeft: kotlin.Int
        public open override /*1*/ /*fake_override*/ fun <get-clientLeft>(): kotlin.Int
    public open override /*1*/ /*fake_override*/ val clientTop: kotlin.Int
        public open override /*1*/ /*fake_override*/ fun <get-clientTop>(): kotlin.Int
    public open override /*1*/ /*fake_override*/ val clientWidth: kotlin.Int
        public open override /*1*/ /*fake_override*/ fun <get-clientWidth>(): kotlin.Int
    public open override /*1*/ /*fake_override*/ val correspondingElement: org.w3c.dom.svg.SVGElement?
        public open override /*1*/ /*fake_override*/ fun <get-correspondingElement>(): org.w3c.dom.svg.SVGElement?
    public open override /*1*/ /*fake_override*/ val correspondingUseElement: org.w3c.dom.svg.SVGUseElement?
        public open override /*1*/ /*fake_override*/ fun <get-correspondingUseElement>(): org.w3c.dom.svg.SVGUseElement?
    public open override /*1*/ /*fake_override*/ val dataset: org.w3c.dom.DOMStringMap
        public open override /*1*/ /*fake_override*/ fun <get-dataset>(): org.w3c.dom.DOMStringMap
    public open override /*1*/ /*fake_override*/ val firstChild: org.w3c.dom.Node?
        public open override /*1*/ /*fake_override*/ fun <get-firstChild>(): org.w3c.dom.Node?
    public open override /*1*/ /*fake_override*/ val firstElementChild: org.w3c.dom.Element?
        public open override /*1*/ /*fake_override*/ fun <get-firstElementChild>(): org.w3c.dom.Element?
    public open val height: org.w3c.dom.svg.SVGAnimatedLength
        public open fun <get-height>(): org.w3c.dom.svg.SVGAnimatedLength
    public abstract override /*1*/ /*fake_override*/ val href: org.w3c.dom.svg.SVGAnimatedString
        public abstract override /*1*/ /*fake_override*/ fun <get-href>(): org.w3c.dom.svg.SVGAnimatedString
    public open override /*1*/ /*fake_override*/ var id: kotlin.String
        public open override /*1*/ /*fake_override*/ fun <get-id>(): kotlin.String
        public open override /*1*/ /*fake_override*/ fun <set-id>(/*0*/ <set-?>: kotlin.String): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var innerHTML: kotlin.String
        public open override /*1*/ /*fake_override*/ fun <get-innerHTML>(): kotlin.String
        public open override /*1*/ /*fake_override*/ fun <set-innerHTML>(/*0*/ <set-?>: kotlin.String): kotlin.Unit
    public open override /*1*/ /*fake_override*/ val isConnected: kotlin.Boolean
        public open override /*1*/ /*fake_override*/ fun <get-isConnected>(): kotlin.Boolean
    public open override /*1*/ /*fake_override*/ val lastChild: org.w3c.dom.Node?
        public open override /*1*/ /*fake_override*/ fun <get-lastChild>(): org.w3c.dom.Node?
    public open override /*1*/ /*fake_override*/ val lastElementChild: org.w3c.dom.Element?
        public open override /*1*/ /*fake_override*/ fun <get-lastElementChild>(): org.w3c.dom.Element?
    public open override /*1*/ /*fake_override*/ val localName: kotlin.String
        public open override /*1*/ /*fake_override*/ fun <get-localName>(): kotlin.String
    public open override /*1*/ /*fake_override*/ val namespaceURI: kotlin.String?
        public open override /*1*/ /*fake_override*/ fun <get-namespaceURI>(): kotlin.String?
    public open override /*1*/ /*fake_override*/ val nextElementSibling: org.w3c.dom.Element?
        public open override /*1*/ /*fake_override*/ fun <get-nextElementSibling>(): org.w3c.dom.Element?
    public open override /*1*/ /*fake_override*/ val nextSibling: org.w3c.dom.Node?
        public open override /*1*/ /*fake_override*/ fun <get-nextSibling>(): org.w3c.dom.Node?
    public open override /*1*/ /*fake_override*/ val nodeName: kotlin.String
        public open override /*1*/ /*fake_override*/ fun <get-nodeName>(): kotlin.String
    public open override /*1*/ /*fake_override*/ val nodeType: kotlin.Short
        public open override /*1*/ /*fake_override*/ fun <get-nodeType>(): kotlin.Short
    public open override /*1*/ /*fake_override*/ var nodeValue: kotlin.String?
        public open override /*1*/ /*fake_override*/ fun <get-nodeValue>(): kotlin.String?
        public open override /*1*/ /*fake_override*/ fun <set-nodeValue>(/*0*/ <set-?>: kotlin.String?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onabort: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onabort>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onabort>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onblur: ((org.w3c.dom.events.FocusEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onblur>(): ((org.w3c.dom.events.FocusEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onblur>(/*0*/ value: ((org.w3c.dom.events.FocusEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var oncancel: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-oncancel>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-oncancel>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var oncanplay: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-oncanplay>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-oncanplay>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var oncanplaythrough: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-oncanplaythrough>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-oncanplaythrough>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onchange: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onchange>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onchange>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onclick: ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onclick>(): ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onclick>(/*0*/ value: ((org.w3c.dom.events.MouseEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onclose: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onclose>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onclose>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var oncontextmenu: ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-oncontextmenu>(): ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-oncontextmenu>(/*0*/ value: ((org.w3c.dom.events.MouseEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var oncuechange: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-oncuechange>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-oncuechange>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ondblclick: ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ondblclick>(): ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ondblclick>(/*0*/ value: ((org.w3c.dom.events.MouseEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ondrag: ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ondrag>(): ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ondrag>(/*0*/ value: ((org.w3c.dom.DragEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ondragend: ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ondragend>(): ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ondragend>(/*0*/ value: ((org.w3c.dom.DragEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ondragenter: ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ondragenter>(): ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ondragenter>(/*0*/ value: ((org.w3c.dom.DragEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ondragexit: ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ondragexit>(): ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ondragexit>(/*0*/ value: ((org.w3c.dom.DragEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ondragleave: ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ondragleave>(): ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ondragleave>(/*0*/ value: ((org.w3c.dom.DragEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ondragover: ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ondragover>(): ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ondragover>(/*0*/ value: ((org.w3c.dom.DragEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ondragstart: ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ondragstart>(): ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ondragstart>(/*0*/ value: ((org.w3c.dom.DragEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ondrop: ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ondrop>(): ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ondrop>(/*0*/ value: ((org.w3c.dom.DragEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ondurationchange: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ondurationchange>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ondurationchange>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onemptied: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onemptied>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onemptied>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onended: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onended>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onended>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onerror: ((dynamic, kotlin.String, kotlin.Int, kotlin.Int, kotlin.Any?) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onerror>(): ((dynamic, kotlin.String, kotlin.Int, kotlin.Int, kotlin.Any?) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onerror>(/*0*/ value: ((dynamic, kotlin.String, kotlin.Int, kotlin.Int, kotlin.Any?) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onfocus: ((org.w3c.dom.events.FocusEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onfocus>(): ((org.w3c.dom.events.FocusEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onfocus>(/*0*/ value: ((org.w3c.dom.events.FocusEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ongotpointercapture: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ongotpointercapture>(): ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ongotpointercapture>(/*0*/ value: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var oninput: ((org.w3c.dom.events.InputEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-oninput>(): ((org.w3c.dom.events.InputEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-oninput>(/*0*/ value: ((org.w3c.dom.events.InputEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var oninvalid: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-oninvalid>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-oninvalid>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onkeydown: ((org.w3c.dom.events.KeyboardEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onkeydown>(): ((org.w3c.dom.events.KeyboardEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onkeydown>(/*0*/ value: ((org.w3c.dom.events.KeyboardEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onkeypress: ((org.w3c.dom.events.KeyboardEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onkeypress>(): ((org.w3c.dom.events.KeyboardEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onkeypress>(/*0*/ value: ((org.w3c.dom.events.KeyboardEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onkeyup: ((org.w3c.dom.events.KeyboardEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onkeyup>(): ((org.w3c.dom.events.KeyboardEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onkeyup>(/*0*/ value: ((org.w3c.dom.events.KeyboardEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onload: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onload>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onload>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onloadeddata: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onloadeddata>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onloadeddata>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onloadedmetadata: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onloadedmetadata>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onloadedmetadata>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onloadend: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onloadend>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onloadend>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onloadstart: ((org.w3c.xhr.ProgressEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onloadstart>(): ((org.w3c.xhr.ProgressEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onloadstart>(/*0*/ value: ((org.w3c.xhr.ProgressEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onlostpointercapture: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onlostpointercapture>(): ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onlostpointercapture>(/*0*/ value: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onmousedown: ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onmousedown>(): ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onmousedown>(/*0*/ value: ((org.w3c.dom.events.MouseEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onmouseenter: ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onmouseenter>(): ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onmouseenter>(/*0*/ value: ((org.w3c.dom.events.MouseEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onmouseleave: ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onmouseleave>(): ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onmouseleave>(/*0*/ value: ((org.w3c.dom.events.MouseEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onmousemove: ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onmousemove>(): ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onmousemove>(/*0*/ value: ((org.w3c.dom.events.MouseEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onmouseout: ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onmouseout>(): ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onmouseout>(/*0*/ value: ((org.w3c.dom.events.MouseEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onmouseover: ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onmouseover>(): ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onmouseover>(/*0*/ value: ((org.w3c.dom.events.MouseEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onmouseup: ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onmouseup>(): ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onmouseup>(/*0*/ value: ((org.w3c.dom.events.MouseEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onpause: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onpause>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onpause>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onplay: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onplay>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onplay>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onplaying: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onplaying>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onplaying>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onpointercancel: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onpointercancel>(): ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onpointercancel>(/*0*/ value: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onpointerdown: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onpointerdown>(): ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onpointerdown>(/*0*/ value: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onpointerenter: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onpointerenter>(): ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onpointerenter>(/*0*/ value: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onpointerleave: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onpointerleave>(): ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onpointerleave>(/*0*/ value: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onpointermove: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onpointermove>(): ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onpointermove>(/*0*/ value: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onpointerout: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onpointerout>(): ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onpointerout>(/*0*/ value: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onpointerover: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onpointerover>(): ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onpointerover>(/*0*/ value: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onpointerup: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onpointerup>(): ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onpointerup>(/*0*/ value: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onprogress: ((org.w3c.xhr.ProgressEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onprogress>(): ((org.w3c.xhr.ProgressEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onprogress>(/*0*/ value: ((org.w3c.xhr.ProgressEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onratechange: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onratechange>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onratechange>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onreset: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onreset>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onreset>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onresize: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onresize>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onresize>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onscroll: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onscroll>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onscroll>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onseeked: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onseeked>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onseeked>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onseeking: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onseeking>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onseeking>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onselect: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onselect>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onselect>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onshow: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onshow>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onshow>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onstalled: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onstalled>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onstalled>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onsubmit: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onsubmit>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onsubmit>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onsuspend: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onsuspend>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onsuspend>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ontimeupdate: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ontimeupdate>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ontimeupdate>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ontoggle: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ontoggle>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ontoggle>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onvolumechange: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onvolumechange>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onvolumechange>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onwaiting: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onwaiting>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onwaiting>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onwheel: ((org.w3c.dom.events.WheelEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onwheel>(): ((org.w3c.dom.events.WheelEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onwheel>(/*0*/ value: ((org.w3c.dom.events.WheelEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var outerHTML: kotlin.String
        public open override /*1*/ /*fake_override*/ fun <get-outerHTML>(): kotlin.String
        public open override /*1*/ /*fake_override*/ fun <set-outerHTML>(/*0*/ <set-?>: kotlin.String): kotlin.Unit
    public open override /*1*/ /*fake_override*/ val ownerDocument: org.w3c.dom.Document?
        public open override /*1*/ /*fake_override*/ fun <get-ownerDocument>(): org.w3c.dom.Document?
    public open override /*1*/ /*fake_override*/ val ownerSVGElement: org.w3c.dom.svg.SVGSVGElement?
        public open override /*1*/ /*fake_override*/ fun <get-ownerSVGElement>(): org.w3c.dom.svg.SVGSVGElement?
    public open override /*1*/ /*fake_override*/ val parentElement: org.w3c.dom.Element?
        public open override /*1*/ /*fake_override*/ fun <get-parentElement>(): org.w3c.dom.Element?
    public open override /*1*/ /*fake_override*/ val parentNode: org.w3c.dom.Node?
        public open override /*1*/ /*fake_override*/ fun <get-parentNode>(): org.w3c.dom.Node?
    public open val patternContentUnits: org.w3c.dom.svg.SVGAnimatedEnumeration
        public open fun <get-patternContentUnits>(): org.w3c.dom.svg.SVGAnimatedEnumeration
    public open val patternTransform: org.w3c.dom.svg.SVGAnimatedTransformList
        public open fun <get-patternTransform>(): org.w3c.dom.svg.SVGAnimatedTransformList
    public open val patternUnits: org.w3c.dom.svg.SVGAnimatedEnumeration
        public open fun <get-patternUnits>(): org.w3c.dom.svg.SVGAnimatedEnumeration
    public open override /*1*/ /*fake_override*/ val prefix: kotlin.String?
        public open override /*1*/ /*fake_override*/ fun <get-prefix>(): kotlin.String?
    public abstract override /*1*/ /*fake_override*/ val preserveAspectRatio: org.w3c.dom.svg.SVGAnimatedPreserveAspectRatio
        public abstract override /*1*/ /*fake_override*/ fun <get-preserveAspectRatio>(): org.w3c.dom.svg.SVGAnimatedPreserveAspectRatio
    public open override /*1*/ /*fake_override*/ val previousElementSibling: org.w3c.dom.Element?
        public open override /*1*/ /*fake_override*/ fun <get-previousElementSibling>(): org.w3c.dom.Element?
    public open override /*1*/ /*fake_override*/ val previousSibling: org.w3c.dom.Node?
        public open override /*1*/ /*fake_override*/ fun <get-previousSibling>(): org.w3c.dom.Node?
    public open override /*1*/ /*fake_override*/ val scrollHeight: kotlin.Int
        public open override /*1*/ /*fake_override*/ fun <get-scrollHeight>(): kotlin.Int
    public open override /*1*/ /*fake_override*/ var scrollLeft: kotlin.Double
        public open override /*1*/ /*fake_override*/ fun <get-scrollLeft>(): kotlin.Double
        public open override /*1*/ /*fake_override*/ fun <set-scrollLeft>(/*0*/ <set-?>: kotlin.Double): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var scrollTop: kotlin.Double
        public open override /*1*/ /*fake_override*/ fun <get-scrollTop>(): kotlin.Double
        public open override /*1*/ /*fake_override*/ fun <set-scrollTop>(/*0*/ <set-?>: kotlin.Double): kotlin.Unit
    public open override /*1*/ /*fake_override*/ val scrollWidth: kotlin.Int
        public open override /*1*/ /*fake_override*/ fun <get-scrollWidth>(): kotlin.Int
    public open override /*1*/ /*fake_override*/ val shadowRoot: org.w3c.dom.ShadowRoot?
        public open override /*1*/ /*fake_override*/ fun <get-shadowRoot>(): org.w3c.dom.ShadowRoot?
    public open override /*1*/ /*fake_override*/ var slot: kotlin.String
        public open override /*1*/ /*fake_override*/ fun <get-slot>(): kotlin.String
        public open override /*1*/ /*fake_override*/ fun <set-slot>(/*0*/ <set-?>: kotlin.String): kotlin.Unit
    public abstract override /*1*/ /*fake_override*/ val style: org.w3c.dom.css.CSSStyleDeclaration
        public abstract override /*1*/ /*fake_override*/ fun <get-style>(): org.w3c.dom.css.CSSStyleDeclaration
    public open override /*1*/ /*fake_override*/ var tabIndex: kotlin.Int
        public open override /*1*/ /*fake_override*/ fun <get-tabIndex>(): kotlin.Int
        public open override /*1*/ /*fake_override*/ fun <set-tabIndex>(/*0*/ <set-?>: kotlin.Int): kotlin.Unit
    public open override /*1*/ /*fake_override*/ val tagName: kotlin.String
        public open override /*1*/ /*fake_override*/ fun <get-tagName>(): kotlin.String
    public open override /*1*/ /*fake_override*/ var textContent: kotlin.String?
        public open override /*1*/ /*fake_override*/ fun <get-textContent>(): kotlin.String?
        public open override /*1*/ /*fake_override*/ fun <set-textContent>(/*0*/ <set-?>: kotlin.String?): kotlin.Unit
    public abstract override /*1*/ /*fake_override*/ val viewBox: org.w3c.dom.svg.SVGAnimatedRect
        public abstract override /*1*/ /*fake_override*/ fun <get-viewBox>(): org.w3c.dom.svg.SVGAnimatedRect
    public open override /*1*/ /*fake_override*/ val viewportElement: org.w3c.dom.svg.SVGElement?
        public open override /*1*/ /*fake_override*/ fun <get-viewportElement>(): org.w3c.dom.svg.SVGElement?
    public open val width: org.w3c.dom.svg.SVGAnimatedLength
        public open fun <get-width>(): org.w3c.dom.svg.SVGAnimatedLength
    public open val x: org.w3c.dom.svg.SVGAnimatedLength
        public open fun <get-x>(): org.w3c.dom.svg.SVGAnimatedLength
    public open val y: org.w3c.dom.svg.SVGAnimatedLength
        public open fun <get-y>(): org.w3c.dom.svg.SVGAnimatedLength
    public final override /*1*/ /*fake_override*/ fun addEventListener(/*0*/ type: kotlin.String, /*1*/ callback: ((org.w3c.dom.events.Event) -> kotlin.Unit)?, /*2*/ options: dynamic = ...): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun addEventListener(/*0*/ type: kotlin.String, /*1*/ callback: org.w3c.dom.events.EventListener?, /*2*/ options: dynamic = ...): kotlin.Unit
    public abstract override /*1*/ /*fake_override*/ fun after(/*0*/ vararg nodes: dynamic /*kotlin.Array<out dynamic>*/): kotlin.Unit
    public abstract override /*1*/ /*fake_override*/ fun append(/*0*/ vararg nodes: dynamic /*kotlin.Array<out dynamic>*/): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun appendChild(/*0*/ node: org.w3c.dom.Node): org.w3c.dom.Node
    public final override /*1*/ /*fake_override*/ fun attachShadow(/*0*/ init: org.w3c.dom.ShadowRootInit): org.w3c.dom.ShadowRoot
    public abstract override /*1*/ /*fake_override*/ fun before(/*0*/ vararg nodes: dynamic /*kotlin.Array<out dynamic>*/): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun blur(): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun cloneNode(/*0*/ deep: kotlin.Boolean = ...): org.w3c.dom.Node
    public final override /*1*/ /*fake_override*/ fun closest(/*0*/ selectors: kotlin.String): org.w3c.dom.Element?
    public final override /*1*/ /*fake_override*/ fun compareDocumentPosition(/*0*/ other: org.w3c.dom.Node): kotlin.Short
    public final override /*1*/ /*fake_override*/ fun contains(/*0*/ other: org.w3c.dom.Node?): kotlin.Boolean
    public abstract override /*1*/ /*fake_override*/ fun convertPointFromNode(/*0*/ point: org.w3c.dom.DOMPointInit, /*1*/ from: dynamic, /*2*/ options: org.w3c.dom.ConvertCoordinateOptions = ...): org.w3c.dom.DOMPoint
    public abstract override /*1*/ /*fake_override*/ fun convertQuadFromNode(/*0*/ quad: dynamic, /*1*/ from: dynamic, /*2*/ options: org.w3c.dom.ConvertCoordinateOptions = ...): org.w3c.dom.DOMQuad
    public abstract override /*1*/ /*fake_override*/ fun convertRectFromNode(/*0*/ rect: org.w3c.dom.DOMRectReadOnly, /*1*/ from: dynamic, /*2*/ options: org.w3c.dom.ConvertCoordinateOptions = ...): org.w3c.dom.DOMQuad
    public final override /*1*/ /*fake_override*/ fun dispatchEvent(/*0*/ event: org.w3c.dom.events.Event): kotlin.Boolean
    public open override /*4*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
    public final override /*1*/ /*fake_override*/ fun focus(): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun getAttribute(/*0*/ qualifiedName: kotlin.String): kotlin.String?
    public final override /*1*/ /*fake_override*/ fun getAttributeNS(/*0*/ namespace: kotlin.String?, /*1*/ localName: kotlin.String): kotlin.String?
    public final override /*1*/ /*fake_override*/ fun getAttributeNames(): kotlin.Array<kotlin.String>
    public final override /*1*/ /*fake_override*/ fun getAttributeNode(/*0*/ qualifiedName: kotlin.String): org.w3c.dom.Attr?
    public final override /*1*/ /*fake_override*/ fun getAttributeNodeNS(/*0*/ namespace: kotlin.String?, /*1*/ localName: kotlin.String): org.w3c.dom.Attr?
    public final override /*1*/ /*fake_override*/ fun getBoundingClientRect(): org.w3c.dom.DOMRect
    public abstract override /*1*/ /*fake_override*/ fun getBoxQuads(/*0*/ options: org.w3c.dom.BoxQuadOptions = ...): kotlin.Array<org.w3c.dom.DOMQuad>
    public final override /*1*/ /*fake_override*/ fun getClientRects(): kotlin.Array<org.w3c.dom.DOMRect>
    public final override /*1*/ /*fake_override*/ fun getElementsByClassName(/*0*/ classNames: kotlin.String): org.w3c.dom.HTMLCollection
    public final override /*1*/ /*fake_override*/ fun getElementsByTagName(/*0*/ qualifiedName: kotlin.String): org.w3c.dom.HTMLCollection
    public final override /*1*/ /*fake_override*/ fun getElementsByTagNameNS(/*0*/ namespace: kotlin.String?, /*1*/ localName: kotlin.String): org.w3c.dom.HTMLCollection
    public final override /*1*/ /*fake_override*/ fun getRootNode(/*0*/ options: org.w3c.dom.GetRootNodeOptions = ...): org.w3c.dom.Node
    public final override /*1*/ /*fake_override*/ fun hasAttribute(/*0*/ qualifiedName: kotlin.String): kotlin.Boolean
    public final override /*1*/ /*fake_override*/ fun hasAttributeNS(/*0*/ namespace: kotlin.String?, /*1*/ localName: kotlin.String): kotlin.Boolean
    public final override /*1*/ /*fake_override*/ fun hasAttributes(): kotlin.Boolean
    public final override /*1*/ /*fake_override*/ fun hasChildNodes(): kotlin.Boolean
    public final override /*1*/ /*fake_override*/ fun hasPointerCapture(/*0*/ pointerId: kotlin.Int): kotlin.Boolean
    public open override /*4*/ /*fake_override*/ fun hashCode(): kotlin.Int
    public final override /*1*/ /*fake_override*/ fun insertAdjacentElement(/*0*/ where: kotlin.String, /*1*/ element: org.w3c.dom.Element): org.w3c.dom.Element?
    public final override /*1*/ /*fake_override*/ fun insertAdjacentHTML(/*0*/ position: kotlin.String, /*1*/ text: kotlin.String): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun insertAdjacentText(/*0*/ where: kotlin.String, /*1*/ data: kotlin.String): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun insertBefore(/*0*/ node: org.w3c.dom.Node, /*1*/ child: org.w3c.dom.Node?): org.w3c.dom.Node
    public final override /*1*/ /*fake_override*/ fun isDefaultNamespace(/*0*/ namespace: kotlin.String?): kotlin.Boolean
    public final override /*1*/ /*fake_override*/ fun isEqualNode(/*0*/ otherNode: org.w3c.dom.Node?): kotlin.Boolean
    public final override /*1*/ /*fake_override*/ fun isSameNode(/*0*/ otherNode: org.w3c.dom.Node?): kotlin.Boolean
    public final override /*1*/ /*fake_override*/ fun lookupNamespaceURI(/*0*/ prefix: kotlin.String?): kotlin.String?
    public final override /*1*/ /*fake_override*/ fun lookupPrefix(/*0*/ namespace: kotlin.String?): kotlin.String?
    public final override /*1*/ /*fake_override*/ fun matches(/*0*/ selectors: kotlin.String): kotlin.Boolean
    public final override /*1*/ /*fake_override*/ fun normalize(): kotlin.Unit
    public abstract override /*1*/ /*fake_override*/ fun prepend(/*0*/ vararg nodes: dynamic /*kotlin.Array<out dynamic>*/): kotlin.Unit
    public abstract override /*1*/ /*fake_override*/ fun querySelector(/*0*/ selectors: kotlin.String): org.w3c.dom.Element?
    public abstract override /*1*/ /*fake_override*/ fun querySelectorAll(/*0*/ selectors: kotlin.String): org.w3c.dom.NodeList
    public final override /*1*/ /*fake_override*/ fun releasePointerCapture(/*0*/ pointerId: kotlin.Int): kotlin.Unit
    public abstract override /*1*/ /*fake_override*/ fun remove(): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun removeAttribute(/*0*/ qualifiedName: kotlin.String): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun removeAttributeNS(/*0*/ namespace: kotlin.String?, /*1*/ localName: kotlin.String): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun removeAttributeNode(/*0*/ attr: org.w3c.dom.Attr): org.w3c.dom.Attr
    public final override /*1*/ /*fake_override*/ fun removeChild(/*0*/ child: org.w3c.dom.Node): org.w3c.dom.Node
    public final override /*1*/ /*fake_override*/ fun removeEventListener(/*0*/ type: kotlin.String, /*1*/ callback: ((org.w3c.dom.events.Event) -> kotlin.Unit)?, /*2*/ options: dynamic = ...): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun removeEventListener(/*0*/ type: kotlin.String, /*1*/ callback: org.w3c.dom.events.EventListener?, /*2*/ options: dynamic = ...): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun replaceChild(/*0*/ node: org.w3c.dom.Node, /*1*/ child: org.w3c.dom.Node): org.w3c.dom.Node
    public abstract override /*1*/ /*fake_override*/ fun replaceWith(/*0*/ vararg nodes: dynamic /*kotlin.Array<out dynamic>*/): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun requestFullscreen(): kotlin.js.Promise<kotlin.Unit>
    public final override /*1*/ /*fake_override*/ fun scroll(/*0*/ x: kotlin.Double, /*1*/ y: kotlin.Double): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun scroll(/*0*/ options: org.w3c.dom.ScrollToOptions = ...): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun scrollBy(/*0*/ x: kotlin.Double, /*1*/ y: kotlin.Double): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun scrollBy(/*0*/ options: org.w3c.dom.ScrollToOptions = ...): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun scrollIntoView(): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun scrollIntoView(/*0*/ arg: dynamic): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun scrollTo(/*0*/ x: kotlin.Double, /*1*/ y: kotlin.Double): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun scrollTo(/*0*/ options: org.w3c.dom.ScrollToOptions = ...): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun setAttribute(/*0*/ qualifiedName: kotlin.String, /*1*/ value: kotlin.String): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun setAttributeNS(/*0*/ namespace: kotlin.String?, /*1*/ qualifiedName: kotlin.String, /*2*/ value: kotlin.String): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun setAttributeNode(/*0*/ attr: org.w3c.dom.Attr): org.w3c.dom.Attr?
    public final override /*1*/ /*fake_override*/ fun setAttributeNodeNS(/*0*/ attr: org.w3c.dom.Attr): org.w3c.dom.Attr?
    public final override /*1*/ /*fake_override*/ fun setPointerCapture(/*0*/ pointerId: kotlin.Int): kotlin.Unit
    public open override /*4*/ /*fake_override*/ fun toString(): kotlin.String
    public final override /*1*/ /*fake_override*/ fun webkitMatchesSelector(/*0*/ selectors: kotlin.String): kotlin.Boolean

    public companion object Companion {
        /*primary*/ private constructor Companion()
        public final val ATTRIBUTE_NODE: kotlin.Short
            public final fun <get-ATTRIBUTE_NODE>(): kotlin.Short
        public final val CDATA_SECTION_NODE: kotlin.Short
            public final fun <get-CDATA_SECTION_NODE>(): kotlin.Short
        public final val COMMENT_NODE: kotlin.Short
            public final fun <get-COMMENT_NODE>(): kotlin.Short
        public final val DOCUMENT_FRAGMENT_NODE: kotlin.Short
            public final fun <get-DOCUMENT_FRAGMENT_NODE>(): kotlin.Short
        public final val DOCUMENT_NODE: kotlin.Short
            public final fun <get-DOCUMENT_NODE>(): kotlin.Short
        public final val DOCUMENT_POSITION_CONTAINED_BY: kotlin.Short
            public final fun <get-DOCUMENT_POSITION_CONTAINED_BY>(): kotlin.Short
        public final val DOCUMENT_POSITION_CONTAINS: kotlin.Short
            public final fun <get-DOCUMENT_POSITION_CONTAINS>(): kotlin.Short
        public final val DOCUMENT_POSITION_DISCONNECTED: kotlin.Short
            public final fun <get-DOCUMENT_POSITION_DISCONNECTED>(): kotlin.Short
        public final val DOCUMENT_POSITION_FOLLOWING: kotlin.Short
            public final fun <get-DOCUMENT_POSITION_FOLLOWING>(): kotlin.Short
        public final val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: kotlin.Short
            public final fun <get-DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC>(): kotlin.Short
        public final val DOCUMENT_POSITION_PRECEDING: kotlin.Short
            public final fun <get-DOCUMENT_POSITION_PRECEDING>(): kotlin.Short
        public final val DOCUMENT_TYPE_NODE: kotlin.Short
            public final fun <get-DOCUMENT_TYPE_NODE>(): kotlin.Short
        public final val ELEMENT_NODE: kotlin.Short
            public final fun <get-ELEMENT_NODE>(): kotlin.Short
        public final val ENTITY_NODE: kotlin.Short
            public final fun <get-ENTITY_NODE>(): kotlin.Short
        public final val ENTITY_REFERENCE_NODE: kotlin.Short
            public final fun <get-ENTITY_REFERENCE_NODE>(): kotlin.Short
        public final val NOTATION_NODE: kotlin.Short
            public final fun <get-NOTATION_NODE>(): kotlin.Short
        public final val PROCESSING_INSTRUCTION_NODE: kotlin.Short
            public final fun <get-PROCESSING_INSTRUCTION_NODE>(): kotlin.Short
        public final val SVG_UNIT_TYPE_OBJECTBOUNDINGBOX: kotlin.Short
            public final fun <get-SVG_UNIT_TYPE_OBJECTBOUNDINGBOX>(): kotlin.Short
        public final val SVG_UNIT_TYPE_UNKNOWN: kotlin.Short
            public final fun <get-SVG_UNIT_TYPE_UNKNOWN>(): kotlin.Short
        public final val SVG_UNIT_TYPE_USERSPACEONUSE: kotlin.Short
            public final fun <get-SVG_UNIT_TYPE_USERSPACEONUSE>(): kotlin.Short
        public final val TEXT_NODE: kotlin.Short
            public final fun <get-TEXT_NODE>(): kotlin.Short
        public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
        public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
        public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
    }
}

public abstract external class SVGPointList {
    /*primary*/ public constructor SVGPointList()
    public open val length: kotlin.Int
        public open fun <get-length>(): kotlin.Int
    public open val numberOfItems: kotlin.Int
        public open fun <get-numberOfItems>(): kotlin.Int
    public final fun appendItem(/*0*/ newItem: org.w3c.dom.DOMPoint): org.w3c.dom.DOMPoint
    public final fun clear(): kotlin.Unit
    public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
    public final fun getItem(/*0*/ index: kotlin.Int): org.w3c.dom.DOMPoint
    public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
    public final fun initialize(/*0*/ newItem: org.w3c.dom.DOMPoint): org.w3c.dom.DOMPoint
    public final fun insertItemBefore(/*0*/ newItem: org.w3c.dom.DOMPoint, /*1*/ index: kotlin.Int): org.w3c.dom.DOMPoint
    public final fun removeItem(/*0*/ index: kotlin.Int): org.w3c.dom.DOMPoint
    public final fun replaceItem(/*0*/ newItem: org.w3c.dom.DOMPoint, /*1*/ index: kotlin.Int): org.w3c.dom.DOMPoint
    public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
}

public abstract external class SVGPolygonElement : org.w3c.dom.svg.SVGGeometryElement, org.w3c.dom.svg.SVGAnimatedPoints {
    /*primary*/ public constructor SVGPolygonElement()
    public abstract override /*1*/ /*fake_override*/ val animatedPoints: org.w3c.dom.svg.SVGPointList
        public abstract override /*1*/ /*fake_override*/ fun <get-animatedPoints>(): org.w3c.dom.svg.SVGPointList
    public open override /*1*/ /*fake_override*/ val assignedSlot: org.w3c.dom.HTMLSlotElement?
        public open override /*1*/ /*fake_override*/ fun <get-assignedSlot>(): org.w3c.dom.HTMLSlotElement?
    public open override /*1*/ /*fake_override*/ val attributes: org.w3c.dom.NamedNodeMap
        public open override /*1*/ /*fake_override*/ fun <get-attributes>(): org.w3c.dom.NamedNodeMap
    public open override /*1*/ /*fake_override*/ val baseURI: kotlin.String
        public open override /*1*/ /*fake_override*/ fun <get-baseURI>(): kotlin.String
    public abstract override /*1*/ /*fake_override*/ val childElementCount: kotlin.Int
        public abstract override /*1*/ /*fake_override*/ fun <get-childElementCount>(): kotlin.Int
    public open override /*1*/ /*fake_override*/ val childNodes: org.w3c.dom.NodeList
        public open override /*1*/ /*fake_override*/ fun <get-childNodes>(): org.w3c.dom.NodeList
    public abstract override /*1*/ /*fake_override*/ val children: org.w3c.dom.HTMLCollection
        public abstract override /*1*/ /*fake_override*/ fun <get-children>(): org.w3c.dom.HTMLCollection
    public open override /*1*/ /*fake_override*/ val classList: org.w3c.dom.DOMTokenList
        public open override /*1*/ /*fake_override*/ fun <get-classList>(): org.w3c.dom.DOMTokenList
    public open override /*1*/ /*fake_override*/ var className: kotlin.String
        public open override /*1*/ /*fake_override*/ fun <get-className>(): kotlin.String
        public open override /*1*/ /*fake_override*/ fun <set-className>(/*0*/ <set-?>: kotlin.String): kotlin.Unit
    public open override /*1*/ /*fake_override*/ val clientHeight: kotlin.Int
        public open override /*1*/ /*fake_override*/ fun <get-clientHeight>(): kotlin.Int
    public open override /*1*/ /*fake_override*/ val clientLeft: kotlin.Int
        public open override /*1*/ /*fake_override*/ fun <get-clientLeft>(): kotlin.Int
    public open override /*1*/ /*fake_override*/ val clientTop: kotlin.Int
        public open override /*1*/ /*fake_override*/ fun <get-clientTop>(): kotlin.Int
    public open override /*1*/ /*fake_override*/ val clientWidth: kotlin.Int
        public open override /*1*/ /*fake_override*/ fun <get-clientWidth>(): kotlin.Int
    public open override /*1*/ /*fake_override*/ val correspondingElement: org.w3c.dom.svg.SVGElement?
        public open override /*1*/ /*fake_override*/ fun <get-correspondingElement>(): org.w3c.dom.svg.SVGElement?
    public open override /*1*/ /*fake_override*/ val correspondingUseElement: org.w3c.dom.svg.SVGUseElement?
        public open override /*1*/ /*fake_override*/ fun <get-correspondingUseElement>(): org.w3c.dom.svg.SVGUseElement?
    public open override /*1*/ /*fake_override*/ val dataset: org.w3c.dom.DOMStringMap
        public open override /*1*/ /*fake_override*/ fun <get-dataset>(): org.w3c.dom.DOMStringMap
    public open override /*1*/ /*fake_override*/ val firstChild: org.w3c.dom.Node?
        public open override /*1*/ /*fake_override*/ fun <get-firstChild>(): org.w3c.dom.Node?
    public open override /*1*/ /*fake_override*/ val firstElementChild: org.w3c.dom.Element?
        public open override /*1*/ /*fake_override*/ fun <get-firstElementChild>(): org.w3c.dom.Element?
    public open override /*1*/ /*fake_override*/ var id: kotlin.String
        public open override /*1*/ /*fake_override*/ fun <get-id>(): kotlin.String
        public open override /*1*/ /*fake_override*/ fun <set-id>(/*0*/ <set-?>: kotlin.String): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var innerHTML: kotlin.String
        public open override /*1*/ /*fake_override*/ fun <get-innerHTML>(): kotlin.String
        public open override /*1*/ /*fake_override*/ fun <set-innerHTML>(/*0*/ <set-?>: kotlin.String): kotlin.Unit
    public open override /*1*/ /*fake_override*/ val isConnected: kotlin.Boolean
        public open override /*1*/ /*fake_override*/ fun <get-isConnected>(): kotlin.Boolean
    public open override /*1*/ /*fake_override*/ val lastChild: org.w3c.dom.Node?
        public open override /*1*/ /*fake_override*/ fun <get-lastChild>(): org.w3c.dom.Node?
    public open override /*1*/ /*fake_override*/ val lastElementChild: org.w3c.dom.Element?
        public open override /*1*/ /*fake_override*/ fun <get-lastElementChild>(): org.w3c.dom.Element?
    public open override /*1*/ /*fake_override*/ val localName: kotlin.String
        public open override /*1*/ /*fake_override*/ fun <get-localName>(): kotlin.String
    public open override /*1*/ /*fake_override*/ val namespaceURI: kotlin.String?
        public open override /*1*/ /*fake_override*/ fun <get-namespaceURI>(): kotlin.String?
    public open override /*1*/ /*fake_override*/ val nextElementSibling: org.w3c.dom.Element?
        public open override /*1*/ /*fake_override*/ fun <get-nextElementSibling>(): org.w3c.dom.Element?
    public open override /*1*/ /*fake_override*/ val nextSibling: org.w3c.dom.Node?
        public open override /*1*/ /*fake_override*/ fun <get-nextSibling>(): org.w3c.dom.Node?
    public open override /*1*/ /*fake_override*/ val nodeName: kotlin.String
        public open override /*1*/ /*fake_override*/ fun <get-nodeName>(): kotlin.String
    public open override /*1*/ /*fake_override*/ val nodeType: kotlin.Short
        public open override /*1*/ /*fake_override*/ fun <get-nodeType>(): kotlin.Short
    public open override /*1*/ /*fake_override*/ var nodeValue: kotlin.String?
        public open override /*1*/ /*fake_override*/ fun <get-nodeValue>(): kotlin.String?
        public open override /*1*/ /*fake_override*/ fun <set-nodeValue>(/*0*/ <set-?>: kotlin.String?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onabort: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onabort>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onabort>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onblur: ((org.w3c.dom.events.FocusEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onblur>(): ((org.w3c.dom.events.FocusEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onblur>(/*0*/ value: ((org.w3c.dom.events.FocusEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var oncancel: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-oncancel>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-oncancel>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var oncanplay: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-oncanplay>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-oncanplay>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var oncanplaythrough: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-oncanplaythrough>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-oncanplaythrough>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onchange: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onchange>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onchange>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onclick: ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onclick>(): ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onclick>(/*0*/ value: ((org.w3c.dom.events.MouseEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onclose: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onclose>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onclose>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var oncontextmenu: ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-oncontextmenu>(): ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-oncontextmenu>(/*0*/ value: ((org.w3c.dom.events.MouseEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var oncuechange: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-oncuechange>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-oncuechange>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ondblclick: ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ondblclick>(): ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ondblclick>(/*0*/ value: ((org.w3c.dom.events.MouseEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ondrag: ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ondrag>(): ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ondrag>(/*0*/ value: ((org.w3c.dom.DragEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ondragend: ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ondragend>(): ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ondragend>(/*0*/ value: ((org.w3c.dom.DragEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ondragenter: ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ondragenter>(): ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ondragenter>(/*0*/ value: ((org.w3c.dom.DragEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ondragexit: ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ondragexit>(): ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ondragexit>(/*0*/ value: ((org.w3c.dom.DragEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ondragleave: ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ondragleave>(): ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ondragleave>(/*0*/ value: ((org.w3c.dom.DragEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ondragover: ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ondragover>(): ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ondragover>(/*0*/ value: ((org.w3c.dom.DragEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ondragstart: ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ondragstart>(): ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ondragstart>(/*0*/ value: ((org.w3c.dom.DragEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ondrop: ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ondrop>(): ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ondrop>(/*0*/ value: ((org.w3c.dom.DragEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ondurationchange: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ondurationchange>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ondurationchange>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onemptied: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onemptied>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onemptied>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onended: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onended>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onended>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onerror: ((dynamic, kotlin.String, kotlin.Int, kotlin.Int, kotlin.Any?) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onerror>(): ((dynamic, kotlin.String, kotlin.Int, kotlin.Int, kotlin.Any?) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onerror>(/*0*/ value: ((dynamic, kotlin.String, kotlin.Int, kotlin.Int, kotlin.Any?) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onfocus: ((org.w3c.dom.events.FocusEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onfocus>(): ((org.w3c.dom.events.FocusEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onfocus>(/*0*/ value: ((org.w3c.dom.events.FocusEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ongotpointercapture: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ongotpointercapture>(): ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ongotpointercapture>(/*0*/ value: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var oninput: ((org.w3c.dom.events.InputEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-oninput>(): ((org.w3c.dom.events.InputEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-oninput>(/*0*/ value: ((org.w3c.dom.events.InputEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var oninvalid: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-oninvalid>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-oninvalid>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onkeydown: ((org.w3c.dom.events.KeyboardEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onkeydown>(): ((org.w3c.dom.events.KeyboardEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onkeydown>(/*0*/ value: ((org.w3c.dom.events.KeyboardEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onkeypress: ((org.w3c.dom.events.KeyboardEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onkeypress>(): ((org.w3c.dom.events.KeyboardEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onkeypress>(/*0*/ value: ((org.w3c.dom.events.KeyboardEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onkeyup: ((org.w3c.dom.events.KeyboardEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onkeyup>(): ((org.w3c.dom.events.KeyboardEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onkeyup>(/*0*/ value: ((org.w3c.dom.events.KeyboardEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onload: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onload>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onload>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onloadeddata: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onloadeddata>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onloadeddata>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onloadedmetadata: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onloadedmetadata>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onloadedmetadata>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onloadend: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onloadend>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onloadend>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onloadstart: ((org.w3c.xhr.ProgressEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onloadstart>(): ((org.w3c.xhr.ProgressEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onloadstart>(/*0*/ value: ((org.w3c.xhr.ProgressEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onlostpointercapture: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onlostpointercapture>(): ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onlostpointercapture>(/*0*/ value: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onmousedown: ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onmousedown>(): ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onmousedown>(/*0*/ value: ((org.w3c.dom.events.MouseEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onmouseenter: ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onmouseenter>(): ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onmouseenter>(/*0*/ value: ((org.w3c.dom.events.MouseEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onmouseleave: ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onmouseleave>(): ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onmouseleave>(/*0*/ value: ((org.w3c.dom.events.MouseEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onmousemove: ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onmousemove>(): ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onmousemove>(/*0*/ value: ((org.w3c.dom.events.MouseEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onmouseout: ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onmouseout>(): ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onmouseout>(/*0*/ value: ((org.w3c.dom.events.MouseEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onmouseover: ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onmouseover>(): ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onmouseover>(/*0*/ value: ((org.w3c.dom.events.MouseEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onmouseup: ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onmouseup>(): ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onmouseup>(/*0*/ value: ((org.w3c.dom.events.MouseEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onpause: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onpause>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onpause>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onplay: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onplay>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onplay>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onplaying: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onplaying>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onplaying>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onpointercancel: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onpointercancel>(): ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onpointercancel>(/*0*/ value: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onpointerdown: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onpointerdown>(): ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onpointerdown>(/*0*/ value: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onpointerenter: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onpointerenter>(): ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onpointerenter>(/*0*/ value: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onpointerleave: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onpointerleave>(): ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onpointerleave>(/*0*/ value: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onpointermove: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onpointermove>(): ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onpointermove>(/*0*/ value: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onpointerout: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onpointerout>(): ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onpointerout>(/*0*/ value: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onpointerover: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onpointerover>(): ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onpointerover>(/*0*/ value: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onpointerup: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onpointerup>(): ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onpointerup>(/*0*/ value: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onprogress: ((org.w3c.xhr.ProgressEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onprogress>(): ((org.w3c.xhr.ProgressEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onprogress>(/*0*/ value: ((org.w3c.xhr.ProgressEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onratechange: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onratechange>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onratechange>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onreset: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onreset>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onreset>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onresize: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onresize>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onresize>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onscroll: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onscroll>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onscroll>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onseeked: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onseeked>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onseeked>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onseeking: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onseeking>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onseeking>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onselect: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onselect>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onselect>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onshow: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onshow>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onshow>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onstalled: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onstalled>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onstalled>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onsubmit: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onsubmit>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onsubmit>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onsuspend: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onsuspend>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onsuspend>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ontimeupdate: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ontimeupdate>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ontimeupdate>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ontoggle: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ontoggle>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ontoggle>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onvolumechange: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onvolumechange>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onvolumechange>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onwaiting: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onwaiting>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onwaiting>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onwheel: ((org.w3c.dom.events.WheelEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onwheel>(): ((org.w3c.dom.events.WheelEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onwheel>(/*0*/ value: ((org.w3c.dom.events.WheelEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var outerHTML: kotlin.String
        public open override /*1*/ /*fake_override*/ fun <get-outerHTML>(): kotlin.String
        public open override /*1*/ /*fake_override*/ fun <set-outerHTML>(/*0*/ <set-?>: kotlin.String): kotlin.Unit
    public open override /*1*/ /*fake_override*/ val ownerDocument: org.w3c.dom.Document?
        public open override /*1*/ /*fake_override*/ fun <get-ownerDocument>(): org.w3c.dom.Document?
    public open override /*1*/ /*fake_override*/ val ownerSVGElement: org.w3c.dom.svg.SVGSVGElement?
        public open override /*1*/ /*fake_override*/ fun <get-ownerSVGElement>(): org.w3c.dom.svg.SVGSVGElement?
    public open override /*1*/ /*fake_override*/ val parentElement: org.w3c.dom.Element?
        public open override /*1*/ /*fake_override*/ fun <get-parentElement>(): org.w3c.dom.Element?
    public open override /*1*/ /*fake_override*/ val parentNode: org.w3c.dom.Node?
        public open override /*1*/ /*fake_override*/ fun <get-parentNode>(): org.w3c.dom.Node?
    public open override /*1*/ /*fake_override*/ val pathLength: org.w3c.dom.svg.SVGAnimatedNumber
        public open override /*1*/ /*fake_override*/ fun <get-pathLength>(): org.w3c.dom.svg.SVGAnimatedNumber
    public abstract override /*1*/ /*fake_override*/ val points: org.w3c.dom.svg.SVGPointList
        public abstract override /*1*/ /*fake_override*/ fun <get-points>(): org.w3c.dom.svg.SVGPointList
    public open override /*1*/ /*fake_override*/ val prefix: kotlin.String?
        public open override /*1*/ /*fake_override*/ fun <get-prefix>(): kotlin.String?
    public open override /*1*/ /*fake_override*/ val previousElementSibling: org.w3c.dom.Element?
        public open override /*1*/ /*fake_override*/ fun <get-previousElementSibling>(): org.w3c.dom.Element?
    public open override /*1*/ /*fake_override*/ val previousSibling: org.w3c.dom.Node?
        public open override /*1*/ /*fake_override*/ fun <get-previousSibling>(): org.w3c.dom.Node?
    public abstract override /*1*/ /*fake_override*/ val requiredExtensions: org.w3c.dom.svg.SVGStringList
        public abstract override /*1*/ /*fake_override*/ fun <get-requiredExtensions>(): org.w3c.dom.svg.SVGStringList
    public open override /*1*/ /*fake_override*/ val scrollHeight: kotlin.Int
        public open override /*1*/ /*fake_override*/ fun <get-scrollHeight>(): kotlin.Int
    public open override /*1*/ /*fake_override*/ var scrollLeft: kotlin.Double
        public open override /*1*/ /*fake_override*/ fun <get-scrollLeft>(): kotlin.Double
        public open override /*1*/ /*fake_override*/ fun <set-scrollLeft>(/*0*/ <set-?>: kotlin.Double): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var scrollTop: kotlin.Double
        public open override /*1*/ /*fake_override*/ fun <get-scrollTop>(): kotlin.Double
        public open override /*1*/ /*fake_override*/ fun <set-scrollTop>(/*0*/ <set-?>: kotlin.Double): kotlin.Unit
    public open override /*1*/ /*fake_override*/ val scrollWidth: kotlin.Int
        public open override /*1*/ /*fake_override*/ fun <get-scrollWidth>(): kotlin.Int
    public open override /*1*/ /*fake_override*/ val shadowRoot: org.w3c.dom.ShadowRoot?
        public open override /*1*/ /*fake_override*/ fun <get-shadowRoot>(): org.w3c.dom.ShadowRoot?
    public open override /*1*/ /*fake_override*/ var slot: kotlin.String
        public open override /*1*/ /*fake_override*/ fun <get-slot>(): kotlin.String
        public open override /*1*/ /*fake_override*/ fun <set-slot>(/*0*/ <set-?>: kotlin.String): kotlin.Unit
    public abstract override /*1*/ /*fake_override*/ val style: org.w3c.dom.css.CSSStyleDeclaration
        public abstract override /*1*/ /*fake_override*/ fun <get-style>(): org.w3c.dom.css.CSSStyleDeclaration
    public abstract override /*1*/ /*fake_override*/ val systemLanguage: org.w3c.dom.svg.SVGStringList
        public abstract override /*1*/ /*fake_override*/ fun <get-systemLanguage>(): org.w3c.dom.svg.SVGStringList
    public open override /*1*/ /*fake_override*/ var tabIndex: kotlin.Int
        public open override /*1*/ /*fake_override*/ fun <get-tabIndex>(): kotlin.Int
        public open override /*1*/ /*fake_override*/ fun <set-tabIndex>(/*0*/ <set-?>: kotlin.Int): kotlin.Unit
    public open override /*1*/ /*fake_override*/ val tagName: kotlin.String
        public open override /*1*/ /*fake_override*/ fun <get-tagName>(): kotlin.String
    public open override /*1*/ /*fake_override*/ var textContent: kotlin.String?
        public open override /*1*/ /*fake_override*/ fun <get-textContent>(): kotlin.String?
        public open override /*1*/ /*fake_override*/ fun <set-textContent>(/*0*/ <set-?>: kotlin.String?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ val transform: org.w3c.dom.svg.SVGAnimatedTransformList
        public open override /*1*/ /*fake_override*/ fun <get-transform>(): org.w3c.dom.svg.SVGAnimatedTransformList
    public open override /*1*/ /*fake_override*/ val viewportElement: org.w3c.dom.svg.SVGElement?
        public open override /*1*/ /*fake_override*/ fun <get-viewportElement>(): org.w3c.dom.svg.SVGElement?
    public final override /*1*/ /*fake_override*/ fun addEventListener(/*0*/ type: kotlin.String, /*1*/ callback: ((org.w3c.dom.events.Event) -> kotlin.Unit)?, /*2*/ options: dynamic = ...): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun addEventListener(/*0*/ type: kotlin.String, /*1*/ callback: org.w3c.dom.events.EventListener?, /*2*/ options: dynamic = ...): kotlin.Unit
    public abstract override /*1*/ /*fake_override*/ fun after(/*0*/ vararg nodes: dynamic /*kotlin.Array<out dynamic>*/): kotlin.Unit
    public abstract override /*1*/ /*fake_override*/ fun append(/*0*/ vararg nodes: dynamic /*kotlin.Array<out dynamic>*/): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun appendChild(/*0*/ node: org.w3c.dom.Node): org.w3c.dom.Node
    public final override /*1*/ /*fake_override*/ fun attachShadow(/*0*/ init: org.w3c.dom.ShadowRootInit): org.w3c.dom.ShadowRoot
    public abstract override /*1*/ /*fake_override*/ fun before(/*0*/ vararg nodes: dynamic /*kotlin.Array<out dynamic>*/): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun blur(): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun cloneNode(/*0*/ deep: kotlin.Boolean = ...): org.w3c.dom.Node
    public final override /*1*/ /*fake_override*/ fun closest(/*0*/ selectors: kotlin.String): org.w3c.dom.Element?
    public final override /*1*/ /*fake_override*/ fun compareDocumentPosition(/*0*/ other: org.w3c.dom.Node): kotlin.Short
    public final override /*1*/ /*fake_override*/ fun contains(/*0*/ other: org.w3c.dom.Node?): kotlin.Boolean
    public abstract override /*1*/ /*fake_override*/ fun convertPointFromNode(/*0*/ point: org.w3c.dom.DOMPointInit, /*1*/ from: dynamic, /*2*/ options: org.w3c.dom.ConvertCoordinateOptions = ...): org.w3c.dom.DOMPoint
    public abstract override /*1*/ /*fake_override*/ fun convertQuadFromNode(/*0*/ quad: dynamic, /*1*/ from: dynamic, /*2*/ options: org.w3c.dom.ConvertCoordinateOptions = ...): org.w3c.dom.DOMQuad
    public abstract override /*1*/ /*fake_override*/ fun convertRectFromNode(/*0*/ rect: org.w3c.dom.DOMRectReadOnly, /*1*/ from: dynamic, /*2*/ options: org.w3c.dom.ConvertCoordinateOptions = ...): org.w3c.dom.DOMQuad
    public final override /*1*/ /*fake_override*/ fun dispatchEvent(/*0*/ event: org.w3c.dom.events.Event): kotlin.Boolean
    public open override /*2*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
    public final override /*1*/ /*fake_override*/ fun focus(): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun getAttribute(/*0*/ qualifiedName: kotlin.String): kotlin.String?
    public final override /*1*/ /*fake_override*/ fun getAttributeNS(/*0*/ namespace: kotlin.String?, /*1*/ localName: kotlin.String): kotlin.String?
    public final override /*1*/ /*fake_override*/ fun getAttributeNames(): kotlin.Array<kotlin.String>
    public final override /*1*/ /*fake_override*/ fun getAttributeNode(/*0*/ qualifiedName: kotlin.String): org.w3c.dom.Attr?
    public final override /*1*/ /*fake_override*/ fun getAttributeNodeNS(/*0*/ namespace: kotlin.String?, /*1*/ localName: kotlin.String): org.w3c.dom.Attr?
    public final override /*1*/ /*fake_override*/ fun getBBox(/*0*/ options: org.w3c.dom.svg.SVGBoundingBoxOptions = ...): org.w3c.dom.DOMRect
    public final override /*1*/ /*fake_override*/ fun getBoundingClientRect(): org.w3c.dom.DOMRect
    public abstract override /*1*/ /*fake_override*/ fun getBoxQuads(/*0*/ options: org.w3c.dom.BoxQuadOptions = ...): kotlin.Array<org.w3c.dom.DOMQuad>
    public final override /*1*/ /*fake_override*/ fun getCTM(): org.w3c.dom.DOMMatrix?
    public final override /*1*/ /*fake_override*/ fun getClientRects(): kotlin.Array<org.w3c.dom.DOMRect>
    public final override /*1*/ /*fake_override*/ fun getElementsByClassName(/*0*/ classNames: kotlin.String): org.w3c.dom.HTMLCollection
    public final override /*1*/ /*fake_override*/ fun getElementsByTagName(/*0*/ qualifiedName: kotlin.String): org.w3c.dom.HTMLCollection
    public final override /*1*/ /*fake_override*/ fun getElementsByTagNameNS(/*0*/ namespace: kotlin.String?, /*1*/ localName: kotlin.String): org.w3c.dom.HTMLCollection
    public final override /*1*/ /*fake_override*/ fun getPointAtLength(/*0*/ distance: kotlin.Float): org.w3c.dom.DOMPoint
    public final override /*1*/ /*fake_override*/ fun getRootNode(/*0*/ options: org.w3c.dom.GetRootNodeOptions = ...): org.w3c.dom.Node
    public final override /*1*/ /*fake_override*/ fun getScreenCTM(): org.w3c.dom.DOMMatrix?
    public final override /*1*/ /*fake_override*/ fun getTotalLength(): kotlin.Float
    public final override /*1*/ /*fake_override*/ fun hasAttribute(/*0*/ qualifiedName: kotlin.String): kotlin.Boolean
    public final override /*1*/ /*fake_override*/ fun hasAttributeNS(/*0*/ namespace: kotlin.String?, /*1*/ localName: kotlin.String): kotlin.Boolean
    public final override /*1*/ /*fake_override*/ fun hasAttributes(): kotlin.Boolean
    public final override /*1*/ /*fake_override*/ fun hasChildNodes(): kotlin.Boolean
    public final override /*1*/ /*fake_override*/ fun hasPointerCapture(/*0*/ pointerId: kotlin.Int): kotlin.Boolean
    public open override /*2*/ /*fake_override*/ fun hashCode(): kotlin.Int
    public final override /*1*/ /*fake_override*/ fun insertAdjacentElement(/*0*/ where: kotlin.String, /*1*/ element: org.w3c.dom.Element): org.w3c.dom.Element?
    public final override /*1*/ /*fake_override*/ fun insertAdjacentHTML(/*0*/ position: kotlin.String, /*1*/ text: kotlin.String): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun insertAdjacentText(/*0*/ where: kotlin.String, /*1*/ data: kotlin.String): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun insertBefore(/*0*/ node: org.w3c.dom.Node, /*1*/ child: org.w3c.dom.Node?): org.w3c.dom.Node
    public final override /*1*/ /*fake_override*/ fun isDefaultNamespace(/*0*/ namespace: kotlin.String?): kotlin.Boolean
    public final override /*1*/ /*fake_override*/ fun isEqualNode(/*0*/ otherNode: org.w3c.dom.Node?): kotlin.Boolean
    public final override /*1*/ /*fake_override*/ fun isPointInFill(/*0*/ point: org.w3c.dom.DOMPoint): kotlin.Boolean
    public final override /*1*/ /*fake_override*/ fun isPointInStroke(/*0*/ point: org.w3c.dom.DOMPoint): kotlin.Boolean
    public final override /*1*/ /*fake_override*/ fun isSameNode(/*0*/ otherNode: org.w3c.dom.Node?): kotlin.Boolean
    public final override /*1*/ /*fake_override*/ fun lookupNamespaceURI(/*0*/ prefix: kotlin.String?): kotlin.String?
    public final override /*1*/ /*fake_override*/ fun lookupPrefix(/*0*/ namespace: kotlin.String?): kotlin.String?
    public final override /*1*/ /*fake_override*/ fun matches(/*0*/ selectors: kotlin.String): kotlin.Boolean
    public final override /*1*/ /*fake_override*/ fun normalize(): kotlin.Unit
    public abstract override /*1*/ /*fake_override*/ fun prepend(/*0*/ vararg nodes: dynamic /*kotlin.Array<out dynamic>*/): kotlin.Unit
    public abstract override /*1*/ /*fake_override*/ fun querySelector(/*0*/ selectors: kotlin.String): org.w3c.dom.Element?
    public abstract override /*1*/ /*fake_override*/ fun querySelectorAll(/*0*/ selectors: kotlin.String): org.w3c.dom.NodeList
    public final override /*1*/ /*fake_override*/ fun releasePointerCapture(/*0*/ pointerId: kotlin.Int): kotlin.Unit
    public abstract override /*1*/ /*fake_override*/ fun remove(): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun removeAttribute(/*0*/ qualifiedName: kotlin.String): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun removeAttributeNS(/*0*/ namespace: kotlin.String?, /*1*/ localName: kotlin.String): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun removeAttributeNode(/*0*/ attr: org.w3c.dom.Attr): org.w3c.dom.Attr
    public final override /*1*/ /*fake_override*/ fun removeChild(/*0*/ child: org.w3c.dom.Node): org.w3c.dom.Node
    public final override /*1*/ /*fake_override*/ fun removeEventListener(/*0*/ type: kotlin.String, /*1*/ callback: ((org.w3c.dom.events.Event) -> kotlin.Unit)?, /*2*/ options: dynamic = ...): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun removeEventListener(/*0*/ type: kotlin.String, /*1*/ callback: org.w3c.dom.events.EventListener?, /*2*/ options: dynamic = ...): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun replaceChild(/*0*/ node: org.w3c.dom.Node, /*1*/ child: org.w3c.dom.Node): org.w3c.dom.Node
    public abstract override /*1*/ /*fake_override*/ fun replaceWith(/*0*/ vararg nodes: dynamic /*kotlin.Array<out dynamic>*/): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun requestFullscreen(): kotlin.js.Promise<kotlin.Unit>
    public final override /*1*/ /*fake_override*/ fun scroll(/*0*/ x: kotlin.Double, /*1*/ y: kotlin.Double): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun scroll(/*0*/ options: org.w3c.dom.ScrollToOptions = ...): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun scrollBy(/*0*/ x: kotlin.Double, /*1*/ y: kotlin.Double): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun scrollBy(/*0*/ options: org.w3c.dom.ScrollToOptions = ...): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun scrollIntoView(): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun scrollIntoView(/*0*/ arg: dynamic): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun scrollTo(/*0*/ x: kotlin.Double, /*1*/ y: kotlin.Double): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun scrollTo(/*0*/ options: org.w3c.dom.ScrollToOptions = ...): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun setAttribute(/*0*/ qualifiedName: kotlin.String, /*1*/ value: kotlin.String): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun setAttributeNS(/*0*/ namespace: kotlin.String?, /*1*/ qualifiedName: kotlin.String, /*2*/ value: kotlin.String): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun setAttributeNode(/*0*/ attr: org.w3c.dom.Attr): org.w3c.dom.Attr?
    public final override /*1*/ /*fake_override*/ fun setAttributeNodeNS(/*0*/ attr: org.w3c.dom.Attr): org.w3c.dom.Attr?
    public final override /*1*/ /*fake_override*/ fun setPointerCapture(/*0*/ pointerId: kotlin.Int): kotlin.Unit
    public open override /*2*/ /*fake_override*/ fun toString(): kotlin.String
    public final override /*1*/ /*fake_override*/ fun webkitMatchesSelector(/*0*/ selectors: kotlin.String): kotlin.Boolean

    public companion object Companion {
        /*primary*/ private constructor Companion()
        public final val ATTRIBUTE_NODE: kotlin.Short
            public final fun <get-ATTRIBUTE_NODE>(): kotlin.Short
        public final val CDATA_SECTION_NODE: kotlin.Short
            public final fun <get-CDATA_SECTION_NODE>(): kotlin.Short
        public final val COMMENT_NODE: kotlin.Short
            public final fun <get-COMMENT_NODE>(): kotlin.Short
        public final val DOCUMENT_FRAGMENT_NODE: kotlin.Short
            public final fun <get-DOCUMENT_FRAGMENT_NODE>(): kotlin.Short
        public final val DOCUMENT_NODE: kotlin.Short
            public final fun <get-DOCUMENT_NODE>(): kotlin.Short
        public final val DOCUMENT_POSITION_CONTAINED_BY: kotlin.Short
            public final fun <get-DOCUMENT_POSITION_CONTAINED_BY>(): kotlin.Short
        public final val DOCUMENT_POSITION_CONTAINS: kotlin.Short
            public final fun <get-DOCUMENT_POSITION_CONTAINS>(): kotlin.Short
        public final val DOCUMENT_POSITION_DISCONNECTED: kotlin.Short
            public final fun <get-DOCUMENT_POSITION_DISCONNECTED>(): kotlin.Short
        public final val DOCUMENT_POSITION_FOLLOWING: kotlin.Short
            public final fun <get-DOCUMENT_POSITION_FOLLOWING>(): kotlin.Short
        public final val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: kotlin.Short
            public final fun <get-DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC>(): kotlin.Short
        public final val DOCUMENT_POSITION_PRECEDING: kotlin.Short
            public final fun <get-DOCUMENT_POSITION_PRECEDING>(): kotlin.Short
        public final val DOCUMENT_TYPE_NODE: kotlin.Short
            public final fun <get-DOCUMENT_TYPE_NODE>(): kotlin.Short
        public final val ELEMENT_NODE: kotlin.Short
            public final fun <get-ELEMENT_NODE>(): kotlin.Short
        public final val ENTITY_NODE: kotlin.Short
            public final fun <get-ENTITY_NODE>(): kotlin.Short
        public final val ENTITY_REFERENCE_NODE: kotlin.Short
            public final fun <get-ENTITY_REFERENCE_NODE>(): kotlin.Short
        public final val NOTATION_NODE: kotlin.Short
            public final fun <get-NOTATION_NODE>(): kotlin.Short
        public final val PROCESSING_INSTRUCTION_NODE: kotlin.Short
            public final fun <get-PROCESSING_INSTRUCTION_NODE>(): kotlin.Short
        public final val TEXT_NODE: kotlin.Short
            public final fun <get-TEXT_NODE>(): kotlin.Short
        public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
        public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
        public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
    }
}

public abstract external class SVGPolylineElement : org.w3c.dom.svg.SVGGeometryElement, org.w3c.dom.svg.SVGAnimatedPoints {
    /*primary*/ public constructor SVGPolylineElement()
    public abstract override /*1*/ /*fake_override*/ val animatedPoints: org.w3c.dom.svg.SVGPointList
        public abstract override /*1*/ /*fake_override*/ fun <get-animatedPoints>(): org.w3c.dom.svg.SVGPointList
    public open override /*1*/ /*fake_override*/ val assignedSlot: org.w3c.dom.HTMLSlotElement?
        public open override /*1*/ /*fake_override*/ fun <get-assignedSlot>(): org.w3c.dom.HTMLSlotElement?
    public open override /*1*/ /*fake_override*/ val attributes: org.w3c.dom.NamedNodeMap
        public open override /*1*/ /*fake_override*/ fun <get-attributes>(): org.w3c.dom.NamedNodeMap
    public open override /*1*/ /*fake_override*/ val baseURI: kotlin.String
        public open override /*1*/ /*fake_override*/ fun <get-baseURI>(): kotlin.String
    public abstract override /*1*/ /*fake_override*/ val childElementCount: kotlin.Int
        public abstract override /*1*/ /*fake_override*/ fun <get-childElementCount>(): kotlin.Int
    public open override /*1*/ /*fake_override*/ val childNodes: org.w3c.dom.NodeList
        public open override /*1*/ /*fake_override*/ fun <get-childNodes>(): org.w3c.dom.NodeList
    public abstract override /*1*/ /*fake_override*/ val children: org.w3c.dom.HTMLCollection
        public abstract override /*1*/ /*fake_override*/ fun <get-children>(): org.w3c.dom.HTMLCollection
    public open override /*1*/ /*fake_override*/ val classList: org.w3c.dom.DOMTokenList
        public open override /*1*/ /*fake_override*/ fun <get-classList>(): org.w3c.dom.DOMTokenList
    public open override /*1*/ /*fake_override*/ var className: kotlin.String
        public open override /*1*/ /*fake_override*/ fun <get-className>(): kotlin.String
        public open override /*1*/ /*fake_override*/ fun <set-className>(/*0*/ <set-?>: kotlin.String): kotlin.Unit
    public open override /*1*/ /*fake_override*/ val clientHeight: kotlin.Int
        public open override /*1*/ /*fake_override*/ fun <get-clientHeight>(): kotlin.Int
    public open override /*1*/ /*fake_override*/ val clientLeft: kotlin.Int
        public open override /*1*/ /*fake_override*/ fun <get-clientLeft>(): kotlin.Int
    public open override /*1*/ /*fake_override*/ val clientTop: kotlin.Int
        public open override /*1*/ /*fake_override*/ fun <get-clientTop>(): kotlin.Int
    public open override /*1*/ /*fake_override*/ val clientWidth: kotlin.Int
        public open override /*1*/ /*fake_override*/ fun <get-clientWidth>(): kotlin.Int
    public open override /*1*/ /*fake_override*/ val correspondingElement: org.w3c.dom.svg.SVGElement?
        public open override /*1*/ /*fake_override*/ fun <get-correspondingElement>(): org.w3c.dom.svg.SVGElement?
    public open override /*1*/ /*fake_override*/ val correspondingUseElement: org.w3c.dom.svg.SVGUseElement?
        public open override /*1*/ /*fake_override*/ fun <get-correspondingUseElement>(): org.w3c.dom.svg.SVGUseElement?
    public open override /*1*/ /*fake_override*/ val dataset: org.w3c.dom.DOMStringMap
        public open override /*1*/ /*fake_override*/ fun <get-dataset>(): org.w3c.dom.DOMStringMap
    public open override /*1*/ /*fake_override*/ val firstChild: org.w3c.dom.Node?
        public open override /*1*/ /*fake_override*/ fun <get-firstChild>(): org.w3c.dom.Node?
    public open override /*1*/ /*fake_override*/ val firstElementChild: org.w3c.dom.Element?
        public open override /*1*/ /*fake_override*/ fun <get-firstElementChild>(): org.w3c.dom.Element?
    public open override /*1*/ /*fake_override*/ var id: kotlin.String
        public open override /*1*/ /*fake_override*/ fun <get-id>(): kotlin.String
        public open override /*1*/ /*fake_override*/ fun <set-id>(/*0*/ <set-?>: kotlin.String): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var innerHTML: kotlin.String
        public open override /*1*/ /*fake_override*/ fun <get-innerHTML>(): kotlin.String
        public open override /*1*/ /*fake_override*/ fun <set-innerHTML>(/*0*/ <set-?>: kotlin.String): kotlin.Unit
    public open override /*1*/ /*fake_override*/ val isConnected: kotlin.Boolean
        public open override /*1*/ /*fake_override*/ fun <get-isConnected>(): kotlin.Boolean
    public open override /*1*/ /*fake_override*/ val lastChild: org.w3c.dom.Node?
        public open override /*1*/ /*fake_override*/ fun <get-lastChild>(): org.w3c.dom.Node?
    public open override /*1*/ /*fake_override*/ val lastElementChild: org.w3c.dom.Element?
        public open override /*1*/ /*fake_override*/ fun <get-lastElementChild>(): org.w3c.dom.Element?
    public open override /*1*/ /*fake_override*/ val localName: kotlin.String
        public open override /*1*/ /*fake_override*/ fun <get-localName>(): kotlin.String
    public open override /*1*/ /*fake_override*/ val namespaceURI: kotlin.String?
        public open override /*1*/ /*fake_override*/ fun <get-namespaceURI>(): kotlin.String?
    public open override /*1*/ /*fake_override*/ val nextElementSibling: org.w3c.dom.Element?
        public open override /*1*/ /*fake_override*/ fun <get-nextElementSibling>(): org.w3c.dom.Element?
    public open override /*1*/ /*fake_override*/ val nextSibling: org.w3c.dom.Node?
        public open override /*1*/ /*fake_override*/ fun <get-nextSibling>(): org.w3c.dom.Node?
    public open override /*1*/ /*fake_override*/ val nodeName: kotlin.String
        public open override /*1*/ /*fake_override*/ fun <get-nodeName>(): kotlin.String
    public open override /*1*/ /*fake_override*/ val nodeType: kotlin.Short
        public open override /*1*/ /*fake_override*/ fun <get-nodeType>(): kotlin.Short
    public open override /*1*/ /*fake_override*/ var nodeValue: kotlin.String?
        public open override /*1*/ /*fake_override*/ fun <get-nodeValue>(): kotlin.String?
        public open override /*1*/ /*fake_override*/ fun <set-nodeValue>(/*0*/ <set-?>: kotlin.String?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onabort: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onabort>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onabort>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onblur: ((org.w3c.dom.events.FocusEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onblur>(): ((org.w3c.dom.events.FocusEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onblur>(/*0*/ value: ((org.w3c.dom.events.FocusEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var oncancel: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-oncancel>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-oncancel>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var oncanplay: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-oncanplay>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-oncanplay>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var oncanplaythrough: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-oncanplaythrough>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-oncanplaythrough>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onchange: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onchange>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onchange>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onclick: ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onclick>(): ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onclick>(/*0*/ value: ((org.w3c.dom.events.MouseEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onclose: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onclose>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onclose>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var oncontextmenu: ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-oncontextmenu>(): ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-oncontextmenu>(/*0*/ value: ((org.w3c.dom.events.MouseEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var oncuechange: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-oncuechange>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-oncuechange>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ondblclick: ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ondblclick>(): ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ondblclick>(/*0*/ value: ((org.w3c.dom.events.MouseEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ondrag: ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ondrag>(): ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ondrag>(/*0*/ value: ((org.w3c.dom.DragEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ondragend: ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ondragend>(): ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ondragend>(/*0*/ value: ((org.w3c.dom.DragEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ondragenter: ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ondragenter>(): ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ondragenter>(/*0*/ value: ((org.w3c.dom.DragEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ondragexit: ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ondragexit>(): ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ondragexit>(/*0*/ value: ((org.w3c.dom.DragEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ondragleave: ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ondragleave>(): ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ondragleave>(/*0*/ value: ((org.w3c.dom.DragEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ondragover: ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ondragover>(): ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ondragover>(/*0*/ value: ((org.w3c.dom.DragEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ondragstart: ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ondragstart>(): ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ondragstart>(/*0*/ value: ((org.w3c.dom.DragEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ondrop: ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ondrop>(): ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ondrop>(/*0*/ value: ((org.w3c.dom.DragEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ondurationchange: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ondurationchange>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ondurationchange>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onemptied: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onemptied>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onemptied>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onended: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onended>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onended>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onerror: ((dynamic, kotlin.String, kotlin.Int, kotlin.Int, kotlin.Any?) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onerror>(): ((dynamic, kotlin.String, kotlin.Int, kotlin.Int, kotlin.Any?) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onerror>(/*0*/ value: ((dynamic, kotlin.String, kotlin.Int, kotlin.Int, kotlin.Any?) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onfocus: ((org.w3c.dom.events.FocusEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onfocus>(): ((org.w3c.dom.events.FocusEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onfocus>(/*0*/ value: ((org.w3c.dom.events.FocusEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ongotpointercapture: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ongotpointercapture>(): ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ongotpointercapture>(/*0*/ value: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var oninput: ((org.w3c.dom.events.InputEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-oninput>(): ((org.w3c.dom.events.InputEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-oninput>(/*0*/ value: ((org.w3c.dom.events.InputEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var oninvalid: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-oninvalid>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-oninvalid>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onkeydown: ((org.w3c.dom.events.KeyboardEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onkeydown>(): ((org.w3c.dom.events.KeyboardEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onkeydown>(/*0*/ value: ((org.w3c.dom.events.KeyboardEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onkeypress: ((org.w3c.dom.events.KeyboardEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onkeypress>(): ((org.w3c.dom.events.KeyboardEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onkeypress>(/*0*/ value: ((org.w3c.dom.events.KeyboardEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onkeyup: ((org.w3c.dom.events.KeyboardEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onkeyup>(): ((org.w3c.dom.events.KeyboardEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onkeyup>(/*0*/ value: ((org.w3c.dom.events.KeyboardEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onload: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onload>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onload>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onloadeddata: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onloadeddata>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onloadeddata>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onloadedmetadata: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onloadedmetadata>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onloadedmetadata>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onloadend: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onloadend>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onloadend>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onloadstart: ((org.w3c.xhr.ProgressEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onloadstart>(): ((org.w3c.xhr.ProgressEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onloadstart>(/*0*/ value: ((org.w3c.xhr.ProgressEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onlostpointercapture: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onlostpointercapture>(): ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onlostpointercapture>(/*0*/ value: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onmousedown: ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onmousedown>(): ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onmousedown>(/*0*/ value: ((org.w3c.dom.events.MouseEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onmouseenter: ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onmouseenter>(): ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onmouseenter>(/*0*/ value: ((org.w3c.dom.events.MouseEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onmouseleave: ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onmouseleave>(): ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onmouseleave>(/*0*/ value: ((org.w3c.dom.events.MouseEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onmousemove: ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onmousemove>(): ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onmousemove>(/*0*/ value: ((org.w3c.dom.events.MouseEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onmouseout: ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onmouseout>(): ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onmouseout>(/*0*/ value: ((org.w3c.dom.events.MouseEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onmouseover: ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onmouseover>(): ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onmouseover>(/*0*/ value: ((org.w3c.dom.events.MouseEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onmouseup: ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onmouseup>(): ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onmouseup>(/*0*/ value: ((org.w3c.dom.events.MouseEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onpause: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onpause>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onpause>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onplay: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onplay>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onplay>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onplaying: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onplaying>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onplaying>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onpointercancel: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onpointercancel>(): ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onpointercancel>(/*0*/ value: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onpointerdown: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onpointerdown>(): ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onpointerdown>(/*0*/ value: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onpointerenter: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onpointerenter>(): ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onpointerenter>(/*0*/ value: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onpointerleave: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onpointerleave>(): ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onpointerleave>(/*0*/ value: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onpointermove: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onpointermove>(): ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onpointermove>(/*0*/ value: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onpointerout: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onpointerout>(): ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onpointerout>(/*0*/ value: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onpointerover: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onpointerover>(): ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onpointerover>(/*0*/ value: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onpointerup: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onpointerup>(): ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onpointerup>(/*0*/ value: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onprogress: ((org.w3c.xhr.ProgressEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onprogress>(): ((org.w3c.xhr.ProgressEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onprogress>(/*0*/ value: ((org.w3c.xhr.ProgressEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onratechange: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onratechange>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onratechange>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onreset: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onreset>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onreset>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onresize: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onresize>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onresize>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onscroll: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onscroll>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onscroll>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onseeked: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onseeked>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onseeked>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onseeking: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onseeking>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onseeking>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onselect: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onselect>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onselect>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onshow: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onshow>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onshow>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onstalled: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onstalled>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onstalled>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onsubmit: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onsubmit>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onsubmit>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onsuspend: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onsuspend>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onsuspend>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ontimeupdate: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ontimeupdate>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ontimeupdate>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ontoggle: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ontoggle>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ontoggle>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onvolumechange: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onvolumechange>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onvolumechange>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onwaiting: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onwaiting>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onwaiting>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onwheel: ((org.w3c.dom.events.WheelEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onwheel>(): ((org.w3c.dom.events.WheelEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onwheel>(/*0*/ value: ((org.w3c.dom.events.WheelEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var outerHTML: kotlin.String
        public open override /*1*/ /*fake_override*/ fun <get-outerHTML>(): kotlin.String
        public open override /*1*/ /*fake_override*/ fun <set-outerHTML>(/*0*/ <set-?>: kotlin.String): kotlin.Unit
    public open override /*1*/ /*fake_override*/ val ownerDocument: org.w3c.dom.Document?
        public open override /*1*/ /*fake_override*/ fun <get-ownerDocument>(): org.w3c.dom.Document?
    public open override /*1*/ /*fake_override*/ val ownerSVGElement: org.w3c.dom.svg.SVGSVGElement?
        public open override /*1*/ /*fake_override*/ fun <get-ownerSVGElement>(): org.w3c.dom.svg.SVGSVGElement?
    public open override /*1*/ /*fake_override*/ val parentElement: org.w3c.dom.Element?
        public open override /*1*/ /*fake_override*/ fun <get-parentElement>(): org.w3c.dom.Element?
    public open override /*1*/ /*fake_override*/ val parentNode: org.w3c.dom.Node?
        public open override /*1*/ /*fake_override*/ fun <get-parentNode>(): org.w3c.dom.Node?
    public open override /*1*/ /*fake_override*/ val pathLength: org.w3c.dom.svg.SVGAnimatedNumber
        public open override /*1*/ /*fake_override*/ fun <get-pathLength>(): org.w3c.dom.svg.SVGAnimatedNumber
    public abstract override /*1*/ /*fake_override*/ val points: org.w3c.dom.svg.SVGPointList
        public abstract override /*1*/ /*fake_override*/ fun <get-points>(): org.w3c.dom.svg.SVGPointList
    public open override /*1*/ /*fake_override*/ val prefix: kotlin.String?
        public open override /*1*/ /*fake_override*/ fun <get-prefix>(): kotlin.String?
    public open override /*1*/ /*fake_override*/ val previousElementSibling: org.w3c.dom.Element?
        public open override /*1*/ /*fake_override*/ fun <get-previousElementSibling>(): org.w3c.dom.Element?
    public open override /*1*/ /*fake_override*/ val previousSibling: org.w3c.dom.Node?
        public open override /*1*/ /*fake_override*/ fun <get-previousSibling>(): org.w3c.dom.Node?
    public abstract override /*1*/ /*fake_override*/ val requiredExtensions: org.w3c.dom.svg.SVGStringList
        public abstract override /*1*/ /*fake_override*/ fun <get-requiredExtensions>(): org.w3c.dom.svg.SVGStringList
    public open override /*1*/ /*fake_override*/ val scrollHeight: kotlin.Int
        public open override /*1*/ /*fake_override*/ fun <get-scrollHeight>(): kotlin.Int
    public open override /*1*/ /*fake_override*/ var scrollLeft: kotlin.Double
        public open override /*1*/ /*fake_override*/ fun <get-scrollLeft>(): kotlin.Double
        public open override /*1*/ /*fake_override*/ fun <set-scrollLeft>(/*0*/ <set-?>: kotlin.Double): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var scrollTop: kotlin.Double
        public open override /*1*/ /*fake_override*/ fun <get-scrollTop>(): kotlin.Double
        public open override /*1*/ /*fake_override*/ fun <set-scrollTop>(/*0*/ <set-?>: kotlin.Double): kotlin.Unit
    public open override /*1*/ /*fake_override*/ val scrollWidth: kotlin.Int
        public open override /*1*/ /*fake_override*/ fun <get-scrollWidth>(): kotlin.Int
    public open override /*1*/ /*fake_override*/ val shadowRoot: org.w3c.dom.ShadowRoot?
        public open override /*1*/ /*fake_override*/ fun <get-shadowRoot>(): org.w3c.dom.ShadowRoot?
    public open override /*1*/ /*fake_override*/ var slot: kotlin.String
        public open override /*1*/ /*fake_override*/ fun <get-slot>(): kotlin.String
        public open override /*1*/ /*fake_override*/ fun <set-slot>(/*0*/ <set-?>: kotlin.String): kotlin.Unit
    public abstract override /*1*/ /*fake_override*/ val style: org.w3c.dom.css.CSSStyleDeclaration
        public abstract override /*1*/ /*fake_override*/ fun <get-style>(): org.w3c.dom.css.CSSStyleDeclaration
    public abstract override /*1*/ /*fake_override*/ val systemLanguage: org.w3c.dom.svg.SVGStringList
        public abstract override /*1*/ /*fake_override*/ fun <get-systemLanguage>(): org.w3c.dom.svg.SVGStringList
    public open override /*1*/ /*fake_override*/ var tabIndex: kotlin.Int
        public open override /*1*/ /*fake_override*/ fun <get-tabIndex>(): kotlin.Int
        public open override /*1*/ /*fake_override*/ fun <set-tabIndex>(/*0*/ <set-?>: kotlin.Int): kotlin.Unit
    public open override /*1*/ /*fake_override*/ val tagName: kotlin.String
        public open override /*1*/ /*fake_override*/ fun <get-tagName>(): kotlin.String
    public open override /*1*/ /*fake_override*/ var textContent: kotlin.String?
        public open override /*1*/ /*fake_override*/ fun <get-textContent>(): kotlin.String?
        public open override /*1*/ /*fake_override*/ fun <set-textContent>(/*0*/ <set-?>: kotlin.String?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ val transform: org.w3c.dom.svg.SVGAnimatedTransformList
        public open override /*1*/ /*fake_override*/ fun <get-transform>(): org.w3c.dom.svg.SVGAnimatedTransformList
    public open override /*1*/ /*fake_override*/ val viewportElement: org.w3c.dom.svg.SVGElement?
        public open override /*1*/ /*fake_override*/ fun <get-viewportElement>(): org.w3c.dom.svg.SVGElement?
    public final override /*1*/ /*fake_override*/ fun addEventListener(/*0*/ type: kotlin.String, /*1*/ callback: ((org.w3c.dom.events.Event) -> kotlin.Unit)?, /*2*/ options: dynamic = ...): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun addEventListener(/*0*/ type: kotlin.String, /*1*/ callback: org.w3c.dom.events.EventListener?, /*2*/ options: dynamic = ...): kotlin.Unit
    public abstract override /*1*/ /*fake_override*/ fun after(/*0*/ vararg nodes: dynamic /*kotlin.Array<out dynamic>*/): kotlin.Unit
    public abstract override /*1*/ /*fake_override*/ fun append(/*0*/ vararg nodes: dynamic /*kotlin.Array<out dynamic>*/): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun appendChild(/*0*/ node: org.w3c.dom.Node): org.w3c.dom.Node
    public final override /*1*/ /*fake_override*/ fun attachShadow(/*0*/ init: org.w3c.dom.ShadowRootInit): org.w3c.dom.ShadowRoot
    public abstract override /*1*/ /*fake_override*/ fun before(/*0*/ vararg nodes: dynamic /*kotlin.Array<out dynamic>*/): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun blur(): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun cloneNode(/*0*/ deep: kotlin.Boolean = ...): org.w3c.dom.Node
    public final override /*1*/ /*fake_override*/ fun closest(/*0*/ selectors: kotlin.String): org.w3c.dom.Element?
    public final override /*1*/ /*fake_override*/ fun compareDocumentPosition(/*0*/ other: org.w3c.dom.Node): kotlin.Short
    public final override /*1*/ /*fake_override*/ fun contains(/*0*/ other: org.w3c.dom.Node?): kotlin.Boolean
    public abstract override /*1*/ /*fake_override*/ fun convertPointFromNode(/*0*/ point: org.w3c.dom.DOMPointInit, /*1*/ from: dynamic, /*2*/ options: org.w3c.dom.ConvertCoordinateOptions = ...): org.w3c.dom.DOMPoint
    public abstract override /*1*/ /*fake_override*/ fun convertQuadFromNode(/*0*/ quad: dynamic, /*1*/ from: dynamic, /*2*/ options: org.w3c.dom.ConvertCoordinateOptions = ...): org.w3c.dom.DOMQuad
    public abstract override /*1*/ /*fake_override*/ fun convertRectFromNode(/*0*/ rect: org.w3c.dom.DOMRectReadOnly, /*1*/ from: dynamic, /*2*/ options: org.w3c.dom.ConvertCoordinateOptions = ...): org.w3c.dom.DOMQuad
    public final override /*1*/ /*fake_override*/ fun dispatchEvent(/*0*/ event: org.w3c.dom.events.Event): kotlin.Boolean
    public open override /*2*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
    public final override /*1*/ /*fake_override*/ fun focus(): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun getAttribute(/*0*/ qualifiedName: kotlin.String): kotlin.String?
    public final override /*1*/ /*fake_override*/ fun getAttributeNS(/*0*/ namespace: kotlin.String?, /*1*/ localName: kotlin.String): kotlin.String?
    public final override /*1*/ /*fake_override*/ fun getAttributeNames(): kotlin.Array<kotlin.String>
    public final override /*1*/ /*fake_override*/ fun getAttributeNode(/*0*/ qualifiedName: kotlin.String): org.w3c.dom.Attr?
    public final override /*1*/ /*fake_override*/ fun getAttributeNodeNS(/*0*/ namespace: kotlin.String?, /*1*/ localName: kotlin.String): org.w3c.dom.Attr?
    public final override /*1*/ /*fake_override*/ fun getBBox(/*0*/ options: org.w3c.dom.svg.SVGBoundingBoxOptions = ...): org.w3c.dom.DOMRect
    public final override /*1*/ /*fake_override*/ fun getBoundingClientRect(): org.w3c.dom.DOMRect
    public abstract override /*1*/ /*fake_override*/ fun getBoxQuads(/*0*/ options: org.w3c.dom.BoxQuadOptions = ...): kotlin.Array<org.w3c.dom.DOMQuad>
    public final override /*1*/ /*fake_override*/ fun getCTM(): org.w3c.dom.DOMMatrix?
    public final override /*1*/ /*fake_override*/ fun getClientRects(): kotlin.Array<org.w3c.dom.DOMRect>
    public final override /*1*/ /*fake_override*/ fun getElementsByClassName(/*0*/ classNames: kotlin.String): org.w3c.dom.HTMLCollection
    public final override /*1*/ /*fake_override*/ fun getElementsByTagName(/*0*/ qualifiedName: kotlin.String): org.w3c.dom.HTMLCollection
    public final override /*1*/ /*fake_override*/ fun getElementsByTagNameNS(/*0*/ namespace: kotlin.String?, /*1*/ localName: kotlin.String): org.w3c.dom.HTMLCollection
    public final override /*1*/ /*fake_override*/ fun getPointAtLength(/*0*/ distance: kotlin.Float): org.w3c.dom.DOMPoint
    public final override /*1*/ /*fake_override*/ fun getRootNode(/*0*/ options: org.w3c.dom.GetRootNodeOptions = ...): org.w3c.dom.Node
    public final override /*1*/ /*fake_override*/ fun getScreenCTM(): org.w3c.dom.DOMMatrix?
    public final override /*1*/ /*fake_override*/ fun getTotalLength(): kotlin.Float
    public final override /*1*/ /*fake_override*/ fun hasAttribute(/*0*/ qualifiedName: kotlin.String): kotlin.Boolean
    public final override /*1*/ /*fake_override*/ fun hasAttributeNS(/*0*/ namespace: kotlin.String?, /*1*/ localName: kotlin.String): kotlin.Boolean
    public final override /*1*/ /*fake_override*/ fun hasAttributes(): kotlin.Boolean
    public final override /*1*/ /*fake_override*/ fun hasChildNodes(): kotlin.Boolean
    public final override /*1*/ /*fake_override*/ fun hasPointerCapture(/*0*/ pointerId: kotlin.Int): kotlin.Boolean
    public open override /*2*/ /*fake_override*/ fun hashCode(): kotlin.Int
    public final override /*1*/ /*fake_override*/ fun insertAdjacentElement(/*0*/ where: kotlin.String, /*1*/ element: org.w3c.dom.Element): org.w3c.dom.Element?
    public final override /*1*/ /*fake_override*/ fun insertAdjacentHTML(/*0*/ position: kotlin.String, /*1*/ text: kotlin.String): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun insertAdjacentText(/*0*/ where: kotlin.String, /*1*/ data: kotlin.String): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun insertBefore(/*0*/ node: org.w3c.dom.Node, /*1*/ child: org.w3c.dom.Node?): org.w3c.dom.Node
    public final override /*1*/ /*fake_override*/ fun isDefaultNamespace(/*0*/ namespace: kotlin.String?): kotlin.Boolean
    public final override /*1*/ /*fake_override*/ fun isEqualNode(/*0*/ otherNode: org.w3c.dom.Node?): kotlin.Boolean
    public final override /*1*/ /*fake_override*/ fun isPointInFill(/*0*/ point: org.w3c.dom.DOMPoint): kotlin.Boolean
    public final override /*1*/ /*fake_override*/ fun isPointInStroke(/*0*/ point: org.w3c.dom.DOMPoint): kotlin.Boolean
    public final override /*1*/ /*fake_override*/ fun isSameNode(/*0*/ otherNode: org.w3c.dom.Node?): kotlin.Boolean
    public final override /*1*/ /*fake_override*/ fun lookupNamespaceURI(/*0*/ prefix: kotlin.String?): kotlin.String?
    public final override /*1*/ /*fake_override*/ fun lookupPrefix(/*0*/ namespace: kotlin.String?): kotlin.String?
    public final override /*1*/ /*fake_override*/ fun matches(/*0*/ selectors: kotlin.String): kotlin.Boolean
    public final override /*1*/ /*fake_override*/ fun normalize(): kotlin.Unit
    public abstract override /*1*/ /*fake_override*/ fun prepend(/*0*/ vararg nodes: dynamic /*kotlin.Array<out dynamic>*/): kotlin.Unit
    public abstract override /*1*/ /*fake_override*/ fun querySelector(/*0*/ selectors: kotlin.String): org.w3c.dom.Element?
    public abstract override /*1*/ /*fake_override*/ fun querySelectorAll(/*0*/ selectors: kotlin.String): org.w3c.dom.NodeList
    public final override /*1*/ /*fake_override*/ fun releasePointerCapture(/*0*/ pointerId: kotlin.Int): kotlin.Unit
    public abstract override /*1*/ /*fake_override*/ fun remove(): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun removeAttribute(/*0*/ qualifiedName: kotlin.String): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun removeAttributeNS(/*0*/ namespace: kotlin.String?, /*1*/ localName: kotlin.String): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun removeAttributeNode(/*0*/ attr: org.w3c.dom.Attr): org.w3c.dom.Attr
    public final override /*1*/ /*fake_override*/ fun removeChild(/*0*/ child: org.w3c.dom.Node): org.w3c.dom.Node
    public final override /*1*/ /*fake_override*/ fun removeEventListener(/*0*/ type: kotlin.String, /*1*/ callback: ((org.w3c.dom.events.Event) -> kotlin.Unit)?, /*2*/ options: dynamic = ...): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun removeEventListener(/*0*/ type: kotlin.String, /*1*/ callback: org.w3c.dom.events.EventListener?, /*2*/ options: dynamic = ...): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun replaceChild(/*0*/ node: org.w3c.dom.Node, /*1*/ child: org.w3c.dom.Node): org.w3c.dom.Node
    public abstract override /*1*/ /*fake_override*/ fun replaceWith(/*0*/ vararg nodes: dynamic /*kotlin.Array<out dynamic>*/): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun requestFullscreen(): kotlin.js.Promise<kotlin.Unit>
    public final override /*1*/ /*fake_override*/ fun scroll(/*0*/ x: kotlin.Double, /*1*/ y: kotlin.Double): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun scroll(/*0*/ options: org.w3c.dom.ScrollToOptions = ...): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun scrollBy(/*0*/ x: kotlin.Double, /*1*/ y: kotlin.Double): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun scrollBy(/*0*/ options: org.w3c.dom.ScrollToOptions = ...): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun scrollIntoView(): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun scrollIntoView(/*0*/ arg: dynamic): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun scrollTo(/*0*/ x: kotlin.Double, /*1*/ y: kotlin.Double): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun scrollTo(/*0*/ options: org.w3c.dom.ScrollToOptions = ...): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun setAttribute(/*0*/ qualifiedName: kotlin.String, /*1*/ value: kotlin.String): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun setAttributeNS(/*0*/ namespace: kotlin.String?, /*1*/ qualifiedName: kotlin.String, /*2*/ value: kotlin.String): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun setAttributeNode(/*0*/ attr: org.w3c.dom.Attr): org.w3c.dom.Attr?
    public final override /*1*/ /*fake_override*/ fun setAttributeNodeNS(/*0*/ attr: org.w3c.dom.Attr): org.w3c.dom.Attr?
    public final override /*1*/ /*fake_override*/ fun setPointerCapture(/*0*/ pointerId: kotlin.Int): kotlin.Unit
    public open override /*2*/ /*fake_override*/ fun toString(): kotlin.String
    public final override /*1*/ /*fake_override*/ fun webkitMatchesSelector(/*0*/ selectors: kotlin.String): kotlin.Boolean

    public companion object Companion {
        /*primary*/ private constructor Companion()
        public final val ATTRIBUTE_NODE: kotlin.Short
            public final fun <get-ATTRIBUTE_NODE>(): kotlin.Short
        public final val CDATA_SECTION_NODE: kotlin.Short
            public final fun <get-CDATA_SECTION_NODE>(): kotlin.Short
        public final val COMMENT_NODE: kotlin.Short
            public final fun <get-COMMENT_NODE>(): kotlin.Short
        public final val DOCUMENT_FRAGMENT_NODE: kotlin.Short
            public final fun <get-DOCUMENT_FRAGMENT_NODE>(): kotlin.Short
        public final val DOCUMENT_NODE: kotlin.Short
            public final fun <get-DOCUMENT_NODE>(): kotlin.Short
        public final val DOCUMENT_POSITION_CONTAINED_BY: kotlin.Short
            public final fun <get-DOCUMENT_POSITION_CONTAINED_BY>(): kotlin.Short
        public final val DOCUMENT_POSITION_CONTAINS: kotlin.Short
            public final fun <get-DOCUMENT_POSITION_CONTAINS>(): kotlin.Short
        public final val DOCUMENT_POSITION_DISCONNECTED: kotlin.Short
            public final fun <get-DOCUMENT_POSITION_DISCONNECTED>(): kotlin.Short
        public final val DOCUMENT_POSITION_FOLLOWING: kotlin.Short
            public final fun <get-DOCUMENT_POSITION_FOLLOWING>(): kotlin.Short
        public final val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: kotlin.Short
            public final fun <get-DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC>(): kotlin.Short
        public final val DOCUMENT_POSITION_PRECEDING: kotlin.Short
            public final fun <get-DOCUMENT_POSITION_PRECEDING>(): kotlin.Short
        public final val DOCUMENT_TYPE_NODE: kotlin.Short
            public final fun <get-DOCUMENT_TYPE_NODE>(): kotlin.Short
        public final val ELEMENT_NODE: kotlin.Short
            public final fun <get-ELEMENT_NODE>(): kotlin.Short
        public final val ENTITY_NODE: kotlin.Short
            public final fun <get-ENTITY_NODE>(): kotlin.Short
        public final val ENTITY_REFERENCE_NODE: kotlin.Short
            public final fun <get-ENTITY_REFERENCE_NODE>(): kotlin.Short
        public final val NOTATION_NODE: kotlin.Short
            public final fun <get-NOTATION_NODE>(): kotlin.Short
        public final val PROCESSING_INSTRUCTION_NODE: kotlin.Short
            public final fun <get-PROCESSING_INSTRUCTION_NODE>(): kotlin.Short
        public final val TEXT_NODE: kotlin.Short
            public final fun <get-TEXT_NODE>(): kotlin.Short
        public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
        public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
        public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
    }
}

public abstract external class SVGPreserveAspectRatio {
    /*primary*/ public constructor SVGPreserveAspectRatio()
    public open var align: kotlin.Short
        public open fun <get-align>(): kotlin.Short
        public open fun <set-align>(/*0*/ <set-?>: kotlin.Short): kotlin.Unit
    public open var meetOrSlice: kotlin.Short
        public open fun <get-meetOrSlice>(): kotlin.Short
        public open fun <set-meetOrSlice>(/*0*/ <set-?>: kotlin.Short): kotlin.Unit
    public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
    public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
    public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String

    public companion object Companion {
        /*primary*/ private constructor Companion()
        public final val SVG_MEETORSLICE_MEET: kotlin.Short
            public final fun <get-SVG_MEETORSLICE_MEET>(): kotlin.Short
        public final val SVG_MEETORSLICE_SLICE: kotlin.Short
            public final fun <get-SVG_MEETORSLICE_SLICE>(): kotlin.Short
        public final val SVG_MEETORSLICE_UNKNOWN: kotlin.Short
            public final fun <get-SVG_MEETORSLICE_UNKNOWN>(): kotlin.Short
        public final val SVG_PRESERVEASPECTRATIO_NONE: kotlin.Short
            public final fun <get-SVG_PRESERVEASPECTRATIO_NONE>(): kotlin.Short
        public final val SVG_PRESERVEASPECTRATIO_UNKNOWN: kotlin.Short
            public final fun <get-SVG_PRESERVEASPECTRATIO_UNKNOWN>(): kotlin.Short
        public final val SVG_PRESERVEASPECTRATIO_XMAXYMAX: kotlin.Short
            public final fun <get-SVG_PRESERVEASPECTRATIO_XMAXYMAX>(): kotlin.Short
        public final val SVG_PRESERVEASPECTRATIO_XMAXYMID: kotlin.Short
            public final fun <get-SVG_PRESERVEASPECTRATIO_XMAXYMID>(): kotlin.Short
        public final val SVG_PRESERVEASPECTRATIO_XMAXYMIN: kotlin.Short
            public final fun <get-SVG_PRESERVEASPECTRATIO_XMAXYMIN>(): kotlin.Short
        public final val SVG_PRESERVEASPECTRATIO_XMIDYMAX: kotlin.Short
            public final fun <get-SVG_PRESERVEASPECTRATIO_XMIDYMAX>(): kotlin.Short
        public final val SVG_PRESERVEASPECTRATIO_XMIDYMID: kotlin.Short
            public final fun <get-SVG_PRESERVEASPECTRATIO_XMIDYMID>(): kotlin.Short
        public final val SVG_PRESERVEASPECTRATIO_XMIDYMIN: kotlin.Short
            public final fun <get-SVG_PRESERVEASPECTRATIO_XMIDYMIN>(): kotlin.Short
        public final val SVG_PRESERVEASPECTRATIO_XMINYMAX: kotlin.Short
            public final fun <get-SVG_PRESERVEASPECTRATIO_XMINYMAX>(): kotlin.Short
        public final val SVG_PRESERVEASPECTRATIO_XMINYMID: kotlin.Short
            public final fun <get-SVG_PRESERVEASPECTRATIO_XMINYMID>(): kotlin.Short
        public final val SVG_PRESERVEASPECTRATIO_XMINYMIN: kotlin.Short
            public final fun <get-SVG_PRESERVEASPECTRATIO_XMINYMIN>(): kotlin.Short
        public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
        public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
        public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
    }
}

public abstract external class SVGRadialGradientElement : org.w3c.dom.svg.SVGGradientElement {
    /*primary*/ public constructor SVGRadialGradientElement()
    public open override /*1*/ /*fake_override*/ val assignedSlot: org.w3c.dom.HTMLSlotElement?
        public open override /*1*/ /*fake_override*/ fun <get-assignedSlot>(): org.w3c.dom.HTMLSlotElement?
    public open override /*1*/ /*fake_override*/ val attributes: org.w3c.dom.NamedNodeMap
        public open override /*1*/ /*fake_override*/ fun <get-attributes>(): org.w3c.dom.NamedNodeMap
    public open override /*1*/ /*fake_override*/ val baseURI: kotlin.String
        public open override /*1*/ /*fake_override*/ fun <get-baseURI>(): kotlin.String
    public abstract override /*1*/ /*fake_override*/ val childElementCount: kotlin.Int
        public abstract override /*1*/ /*fake_override*/ fun <get-childElementCount>(): kotlin.Int
    public open override /*1*/ /*fake_override*/ val childNodes: org.w3c.dom.NodeList
        public open override /*1*/ /*fake_override*/ fun <get-childNodes>(): org.w3c.dom.NodeList
    public abstract override /*1*/ /*fake_override*/ val children: org.w3c.dom.HTMLCollection
        public abstract override /*1*/ /*fake_override*/ fun <get-children>(): org.w3c.dom.HTMLCollection
    public open override /*1*/ /*fake_override*/ val classList: org.w3c.dom.DOMTokenList
        public open override /*1*/ /*fake_override*/ fun <get-classList>(): org.w3c.dom.DOMTokenList
    public open override /*1*/ /*fake_override*/ var className: kotlin.String
        public open override /*1*/ /*fake_override*/ fun <get-className>(): kotlin.String
        public open override /*1*/ /*fake_override*/ fun <set-className>(/*0*/ <set-?>: kotlin.String): kotlin.Unit
    public open override /*1*/ /*fake_override*/ val clientHeight: kotlin.Int
        public open override /*1*/ /*fake_override*/ fun <get-clientHeight>(): kotlin.Int
    public open override /*1*/ /*fake_override*/ val clientLeft: kotlin.Int
        public open override /*1*/ /*fake_override*/ fun <get-clientLeft>(): kotlin.Int
    public open override /*1*/ /*fake_override*/ val clientTop: kotlin.Int
        public open override /*1*/ /*fake_override*/ fun <get-clientTop>(): kotlin.Int
    public open override /*1*/ /*fake_override*/ val clientWidth: kotlin.Int
        public open override /*1*/ /*fake_override*/ fun <get-clientWidth>(): kotlin.Int
    public open override /*1*/ /*fake_override*/ val correspondingElement: org.w3c.dom.svg.SVGElement?
        public open override /*1*/ /*fake_override*/ fun <get-correspondingElement>(): org.w3c.dom.svg.SVGElement?
    public open override /*1*/ /*fake_override*/ val correspondingUseElement: org.w3c.dom.svg.SVGUseElement?
        public open override /*1*/ /*fake_override*/ fun <get-correspondingUseElement>(): org.w3c.dom.svg.SVGUseElement?
    public open val cx: org.w3c.dom.svg.SVGAnimatedLength
        public open fun <get-cx>(): org.w3c.dom.svg.SVGAnimatedLength
    public open val cy: org.w3c.dom.svg.SVGAnimatedLength
        public open fun <get-cy>(): org.w3c.dom.svg.SVGAnimatedLength
    public open override /*1*/ /*fake_override*/ val dataset: org.w3c.dom.DOMStringMap
        public open override /*1*/ /*fake_override*/ fun <get-dataset>(): org.w3c.dom.DOMStringMap
    public open override /*1*/ /*fake_override*/ val firstChild: org.w3c.dom.Node?
        public open override /*1*/ /*fake_override*/ fun <get-firstChild>(): org.w3c.dom.Node?
    public open override /*1*/ /*fake_override*/ val firstElementChild: org.w3c.dom.Element?
        public open override /*1*/ /*fake_override*/ fun <get-firstElementChild>(): org.w3c.dom.Element?
    public open val fr: org.w3c.dom.svg.SVGAnimatedLength
        public open fun <get-fr>(): org.w3c.dom.svg.SVGAnimatedLength
    public open val fx: org.w3c.dom.svg.SVGAnimatedLength
        public open fun <get-fx>(): org.w3c.dom.svg.SVGAnimatedLength
    public open val fy: org.w3c.dom.svg.SVGAnimatedLength
        public open fun <get-fy>(): org.w3c.dom.svg.SVGAnimatedLength
    public open override /*1*/ /*fake_override*/ val gradientTransform: org.w3c.dom.svg.SVGAnimatedTransformList
        public open override /*1*/ /*fake_override*/ fun <get-gradientTransform>(): org.w3c.dom.svg.SVGAnimatedTransformList
    public open override /*1*/ /*fake_override*/ val gradientUnits: org.w3c.dom.svg.SVGAnimatedEnumeration
        public open override /*1*/ /*fake_override*/ fun <get-gradientUnits>(): org.w3c.dom.svg.SVGAnimatedEnumeration
    public abstract override /*1*/ /*fake_override*/ val href: org.w3c.dom.svg.SVGAnimatedString
        public abstract override /*1*/ /*fake_override*/ fun <get-href>(): org.w3c.dom.svg.SVGAnimatedString
    public open override /*1*/ /*fake_override*/ var id: kotlin.String
        public open override /*1*/ /*fake_override*/ fun <get-id>(): kotlin.String
        public open override /*1*/ /*fake_override*/ fun <set-id>(/*0*/ <set-?>: kotlin.String): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var innerHTML: kotlin.String
        public open override /*1*/ /*fake_override*/ fun <get-innerHTML>(): kotlin.String
        public open override /*1*/ /*fake_override*/ fun <set-innerHTML>(/*0*/ <set-?>: kotlin.String): kotlin.Unit
    public open override /*1*/ /*fake_override*/ val isConnected: kotlin.Boolean
        public open override /*1*/ /*fake_override*/ fun <get-isConnected>(): kotlin.Boolean
    public open override /*1*/ /*fake_override*/ val lastChild: org.w3c.dom.Node?
        public open override /*1*/ /*fake_override*/ fun <get-lastChild>(): org.w3c.dom.Node?
    public open override /*1*/ /*fake_override*/ val lastElementChild: org.w3c.dom.Element?
        public open override /*1*/ /*fake_override*/ fun <get-lastElementChild>(): org.w3c.dom.Element?
    public open override /*1*/ /*fake_override*/ val localName: kotlin.String
        public open override /*1*/ /*fake_override*/ fun <get-localName>(): kotlin.String
    public open override /*1*/ /*fake_override*/ val namespaceURI: kotlin.String?
        public open override /*1*/ /*fake_override*/ fun <get-namespaceURI>(): kotlin.String?
    public open override /*1*/ /*fake_override*/ val nextElementSibling: org.w3c.dom.Element?
        public open override /*1*/ /*fake_override*/ fun <get-nextElementSibling>(): org.w3c.dom.Element?
    public open override /*1*/ /*fake_override*/ val nextSibling: org.w3c.dom.Node?
        public open override /*1*/ /*fake_override*/ fun <get-nextSibling>(): org.w3c.dom.Node?
    public open override /*1*/ /*fake_override*/ val nodeName: kotlin.String
        public open override /*1*/ /*fake_override*/ fun <get-nodeName>(): kotlin.String
    public open override /*1*/ /*fake_override*/ val nodeType: kotlin.Short
        public open override /*1*/ /*fake_override*/ fun <get-nodeType>(): kotlin.Short
    public open override /*1*/ /*fake_override*/ var nodeValue: kotlin.String?
        public open override /*1*/ /*fake_override*/ fun <get-nodeValue>(): kotlin.String?
        public open override /*1*/ /*fake_override*/ fun <set-nodeValue>(/*0*/ <set-?>: kotlin.String?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onabort: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onabort>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onabort>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onblur: ((org.w3c.dom.events.FocusEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onblur>(): ((org.w3c.dom.events.FocusEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onblur>(/*0*/ value: ((org.w3c.dom.events.FocusEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var oncancel: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-oncancel>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-oncancel>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var oncanplay: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-oncanplay>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-oncanplay>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var oncanplaythrough: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-oncanplaythrough>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-oncanplaythrough>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onchange: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onchange>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onchange>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onclick: ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onclick>(): ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onclick>(/*0*/ value: ((org.w3c.dom.events.MouseEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onclose: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onclose>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onclose>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var oncontextmenu: ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-oncontextmenu>(): ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-oncontextmenu>(/*0*/ value: ((org.w3c.dom.events.MouseEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var oncuechange: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-oncuechange>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-oncuechange>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ondblclick: ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ondblclick>(): ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ondblclick>(/*0*/ value: ((org.w3c.dom.events.MouseEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ondrag: ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ondrag>(): ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ondrag>(/*0*/ value: ((org.w3c.dom.DragEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ondragend: ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ondragend>(): ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ondragend>(/*0*/ value: ((org.w3c.dom.DragEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ondragenter: ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ondragenter>(): ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ondragenter>(/*0*/ value: ((org.w3c.dom.DragEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ondragexit: ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ondragexit>(): ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ondragexit>(/*0*/ value: ((org.w3c.dom.DragEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ondragleave: ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ondragleave>(): ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ondragleave>(/*0*/ value: ((org.w3c.dom.DragEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ondragover: ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ondragover>(): ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ondragover>(/*0*/ value: ((org.w3c.dom.DragEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ondragstart: ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ondragstart>(): ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ondragstart>(/*0*/ value: ((org.w3c.dom.DragEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ondrop: ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ondrop>(): ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ondrop>(/*0*/ value: ((org.w3c.dom.DragEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ondurationchange: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ondurationchange>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ondurationchange>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onemptied: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onemptied>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onemptied>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onended: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onended>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onended>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onerror: ((dynamic, kotlin.String, kotlin.Int, kotlin.Int, kotlin.Any?) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onerror>(): ((dynamic, kotlin.String, kotlin.Int, kotlin.Int, kotlin.Any?) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onerror>(/*0*/ value: ((dynamic, kotlin.String, kotlin.Int, kotlin.Int, kotlin.Any?) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onfocus: ((org.w3c.dom.events.FocusEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onfocus>(): ((org.w3c.dom.events.FocusEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onfocus>(/*0*/ value: ((org.w3c.dom.events.FocusEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ongotpointercapture: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ongotpointercapture>(): ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ongotpointercapture>(/*0*/ value: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var oninput: ((org.w3c.dom.events.InputEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-oninput>(): ((org.w3c.dom.events.InputEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-oninput>(/*0*/ value: ((org.w3c.dom.events.InputEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var oninvalid: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-oninvalid>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-oninvalid>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onkeydown: ((org.w3c.dom.events.KeyboardEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onkeydown>(): ((org.w3c.dom.events.KeyboardEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onkeydown>(/*0*/ value: ((org.w3c.dom.events.KeyboardEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onkeypress: ((org.w3c.dom.events.KeyboardEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onkeypress>(): ((org.w3c.dom.events.KeyboardEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onkeypress>(/*0*/ value: ((org.w3c.dom.events.KeyboardEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onkeyup: ((org.w3c.dom.events.KeyboardEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onkeyup>(): ((org.w3c.dom.events.KeyboardEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onkeyup>(/*0*/ value: ((org.w3c.dom.events.KeyboardEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onload: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onload>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onload>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onloadeddata: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onloadeddata>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onloadeddata>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onloadedmetadata: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onloadedmetadata>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onloadedmetadata>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onloadend: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onloadend>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onloadend>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onloadstart: ((org.w3c.xhr.ProgressEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onloadstart>(): ((org.w3c.xhr.ProgressEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onloadstart>(/*0*/ value: ((org.w3c.xhr.ProgressEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onlostpointercapture: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onlostpointercapture>(): ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onlostpointercapture>(/*0*/ value: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onmousedown: ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onmousedown>(): ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onmousedown>(/*0*/ value: ((org.w3c.dom.events.MouseEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onmouseenter: ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onmouseenter>(): ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onmouseenter>(/*0*/ value: ((org.w3c.dom.events.MouseEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onmouseleave: ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onmouseleave>(): ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onmouseleave>(/*0*/ value: ((org.w3c.dom.events.MouseEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onmousemove: ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onmousemove>(): ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onmousemove>(/*0*/ value: ((org.w3c.dom.events.MouseEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onmouseout: ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onmouseout>(): ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onmouseout>(/*0*/ value: ((org.w3c.dom.events.MouseEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onmouseover: ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onmouseover>(): ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onmouseover>(/*0*/ value: ((org.w3c.dom.events.MouseEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onmouseup: ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onmouseup>(): ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onmouseup>(/*0*/ value: ((org.w3c.dom.events.MouseEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onpause: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onpause>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onpause>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onplay: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onplay>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onplay>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onplaying: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onplaying>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onplaying>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onpointercancel: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onpointercancel>(): ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onpointercancel>(/*0*/ value: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onpointerdown: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onpointerdown>(): ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onpointerdown>(/*0*/ value: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onpointerenter: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onpointerenter>(): ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onpointerenter>(/*0*/ value: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onpointerleave: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onpointerleave>(): ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onpointerleave>(/*0*/ value: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onpointermove: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onpointermove>(): ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onpointermove>(/*0*/ value: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onpointerout: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onpointerout>(): ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onpointerout>(/*0*/ value: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onpointerover: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onpointerover>(): ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onpointerover>(/*0*/ value: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onpointerup: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onpointerup>(): ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onpointerup>(/*0*/ value: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onprogress: ((org.w3c.xhr.ProgressEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onprogress>(): ((org.w3c.xhr.ProgressEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onprogress>(/*0*/ value: ((org.w3c.xhr.ProgressEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onratechange: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onratechange>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onratechange>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onreset: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onreset>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onreset>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onresize: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onresize>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onresize>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onscroll: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onscroll>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onscroll>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onseeked: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onseeked>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onseeked>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onseeking: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onseeking>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onseeking>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onselect: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onselect>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onselect>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onshow: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onshow>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onshow>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onstalled: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onstalled>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onstalled>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onsubmit: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onsubmit>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onsubmit>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onsuspend: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onsuspend>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onsuspend>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ontimeupdate: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ontimeupdate>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ontimeupdate>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ontoggle: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ontoggle>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ontoggle>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onvolumechange: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onvolumechange>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onvolumechange>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onwaiting: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onwaiting>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onwaiting>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onwheel: ((org.w3c.dom.events.WheelEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onwheel>(): ((org.w3c.dom.events.WheelEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onwheel>(/*0*/ value: ((org.w3c.dom.events.WheelEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var outerHTML: kotlin.String
        public open override /*1*/ /*fake_override*/ fun <get-outerHTML>(): kotlin.String
        public open override /*1*/ /*fake_override*/ fun <set-outerHTML>(/*0*/ <set-?>: kotlin.String): kotlin.Unit
    public open override /*1*/ /*fake_override*/ val ownerDocument: org.w3c.dom.Document?
        public open override /*1*/ /*fake_override*/ fun <get-ownerDocument>(): org.w3c.dom.Document?
    public open override /*1*/ /*fake_override*/ val ownerSVGElement: org.w3c.dom.svg.SVGSVGElement?
        public open override /*1*/ /*fake_override*/ fun <get-ownerSVGElement>(): org.w3c.dom.svg.SVGSVGElement?
    public open override /*1*/ /*fake_override*/ val parentElement: org.w3c.dom.Element?
        public open override /*1*/ /*fake_override*/ fun <get-parentElement>(): org.w3c.dom.Element?
    public open override /*1*/ /*fake_override*/ val parentNode: org.w3c.dom.Node?
        public open override /*1*/ /*fake_override*/ fun <get-parentNode>(): org.w3c.dom.Node?
    public open override /*1*/ /*fake_override*/ val prefix: kotlin.String?
        public open override /*1*/ /*fake_override*/ fun <get-prefix>(): kotlin.String?
    public open override /*1*/ /*fake_override*/ val previousElementSibling: org.w3c.dom.Element?
        public open override /*1*/ /*fake_override*/ fun <get-previousElementSibling>(): org.w3c.dom.Element?
    public open override /*1*/ /*fake_override*/ val previousSibling: org.w3c.dom.Node?
        public open override /*1*/ /*fake_override*/ fun <get-previousSibling>(): org.w3c.dom.Node?
    public open val r: org.w3c.dom.svg.SVGAnimatedLength
        public open fun <get-r>(): org.w3c.dom.svg.SVGAnimatedLength
    public open override /*1*/ /*fake_override*/ val scrollHeight: kotlin.Int
        public open override /*1*/ /*fake_override*/ fun <get-scrollHeight>(): kotlin.Int
    public open override /*1*/ /*fake_override*/ var scrollLeft: kotlin.Double
        public open override /*1*/ /*fake_override*/ fun <get-scrollLeft>(): kotlin.Double
        public open override /*1*/ /*fake_override*/ fun <set-scrollLeft>(/*0*/ <set-?>: kotlin.Double): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var scrollTop: kotlin.Double
        public open override /*1*/ /*fake_override*/ fun <get-scrollTop>(): kotlin.Double
        public open override /*1*/ /*fake_override*/ fun <set-scrollTop>(/*0*/ <set-?>: kotlin.Double): kotlin.Unit
    public open override /*1*/ /*fake_override*/ val scrollWidth: kotlin.Int
        public open override /*1*/ /*fake_override*/ fun <get-scrollWidth>(): kotlin.Int
    public open override /*1*/ /*fake_override*/ val shadowRoot: org.w3c.dom.ShadowRoot?
        public open override /*1*/ /*fake_override*/ fun <get-shadowRoot>(): org.w3c.dom.ShadowRoot?
    public open override /*1*/ /*fake_override*/ var slot: kotlin.String
        public open override /*1*/ /*fake_override*/ fun <get-slot>(): kotlin.String
        public open override /*1*/ /*fake_override*/ fun <set-slot>(/*0*/ <set-?>: kotlin.String): kotlin.Unit
    public open override /*1*/ /*fake_override*/ val spreadMethod: org.w3c.dom.svg.SVGAnimatedEnumeration
        public open override /*1*/ /*fake_override*/ fun <get-spreadMethod>(): org.w3c.dom.svg.SVGAnimatedEnumeration
    public abstract override /*1*/ /*fake_override*/ val style: org.w3c.dom.css.CSSStyleDeclaration
        public abstract override /*1*/ /*fake_override*/ fun <get-style>(): org.w3c.dom.css.CSSStyleDeclaration
    public open override /*1*/ /*fake_override*/ var tabIndex: kotlin.Int
        public open override /*1*/ /*fake_override*/ fun <get-tabIndex>(): kotlin.Int
        public open override /*1*/ /*fake_override*/ fun <set-tabIndex>(/*0*/ <set-?>: kotlin.Int): kotlin.Unit
    public open override /*1*/ /*fake_override*/ val tagName: kotlin.String
        public open override /*1*/ /*fake_override*/ fun <get-tagName>(): kotlin.String
    public open override /*1*/ /*fake_override*/ var textContent: kotlin.String?
        public open override /*1*/ /*fake_override*/ fun <get-textContent>(): kotlin.String?
        public open override /*1*/ /*fake_override*/ fun <set-textContent>(/*0*/ <set-?>: kotlin.String?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ val viewportElement: org.w3c.dom.svg.SVGElement?
        public open override /*1*/ /*fake_override*/ fun <get-viewportElement>(): org.w3c.dom.svg.SVGElement?
    public final override /*1*/ /*fake_override*/ fun addEventListener(/*0*/ type: kotlin.String, /*1*/ callback: ((org.w3c.dom.events.Event) -> kotlin.Unit)?, /*2*/ options: dynamic = ...): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun addEventListener(/*0*/ type: kotlin.String, /*1*/ callback: org.w3c.dom.events.EventListener?, /*2*/ options: dynamic = ...): kotlin.Unit
    public abstract override /*1*/ /*fake_override*/ fun after(/*0*/ vararg nodes: dynamic /*kotlin.Array<out dynamic>*/): kotlin.Unit
    public abstract override /*1*/ /*fake_override*/ fun append(/*0*/ vararg nodes: dynamic /*kotlin.Array<out dynamic>*/): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun appendChild(/*0*/ node: org.w3c.dom.Node): org.w3c.dom.Node
    public final override /*1*/ /*fake_override*/ fun attachShadow(/*0*/ init: org.w3c.dom.ShadowRootInit): org.w3c.dom.ShadowRoot
    public abstract override /*1*/ /*fake_override*/ fun before(/*0*/ vararg nodes: dynamic /*kotlin.Array<out dynamic>*/): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun blur(): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun cloneNode(/*0*/ deep: kotlin.Boolean = ...): org.w3c.dom.Node
    public final override /*1*/ /*fake_override*/ fun closest(/*0*/ selectors: kotlin.String): org.w3c.dom.Element?
    public final override /*1*/ /*fake_override*/ fun compareDocumentPosition(/*0*/ other: org.w3c.dom.Node): kotlin.Short
    public final override /*1*/ /*fake_override*/ fun contains(/*0*/ other: org.w3c.dom.Node?): kotlin.Boolean
    public abstract override /*1*/ /*fake_override*/ fun convertPointFromNode(/*0*/ point: org.w3c.dom.DOMPointInit, /*1*/ from: dynamic, /*2*/ options: org.w3c.dom.ConvertCoordinateOptions = ...): org.w3c.dom.DOMPoint
    public abstract override /*1*/ /*fake_override*/ fun convertQuadFromNode(/*0*/ quad: dynamic, /*1*/ from: dynamic, /*2*/ options: org.w3c.dom.ConvertCoordinateOptions = ...): org.w3c.dom.DOMQuad
    public abstract override /*1*/ /*fake_override*/ fun convertRectFromNode(/*0*/ rect: org.w3c.dom.DOMRectReadOnly, /*1*/ from: dynamic, /*2*/ options: org.w3c.dom.ConvertCoordinateOptions = ...): org.w3c.dom.DOMQuad
    public final override /*1*/ /*fake_override*/ fun dispatchEvent(/*0*/ event: org.w3c.dom.events.Event): kotlin.Boolean
    public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
    public final override /*1*/ /*fake_override*/ fun focus(): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun getAttribute(/*0*/ qualifiedName: kotlin.String): kotlin.String?
    public final override /*1*/ /*fake_override*/ fun getAttributeNS(/*0*/ namespace: kotlin.String?, /*1*/ localName: kotlin.String): kotlin.String?
    public final override /*1*/ /*fake_override*/ fun getAttributeNames(): kotlin.Array<kotlin.String>
    public final override /*1*/ /*fake_override*/ fun getAttributeNode(/*0*/ qualifiedName: kotlin.String): org.w3c.dom.Attr?
    public final override /*1*/ /*fake_override*/ fun getAttributeNodeNS(/*0*/ namespace: kotlin.String?, /*1*/ localName: kotlin.String): org.w3c.dom.Attr?
    public final override /*1*/ /*fake_override*/ fun getBoundingClientRect(): org.w3c.dom.DOMRect
    public abstract override /*1*/ /*fake_override*/ fun getBoxQuads(/*0*/ options: org.w3c.dom.BoxQuadOptions = ...): kotlin.Array<org.w3c.dom.DOMQuad>
    public final override /*1*/ /*fake_override*/ fun getClientRects(): kotlin.Array<org.w3c.dom.DOMRect>
    public final override /*1*/ /*fake_override*/ fun getElementsByClassName(/*0*/ classNames: kotlin.String): org.w3c.dom.HTMLCollection
    public final override /*1*/ /*fake_override*/ fun getElementsByTagName(/*0*/ qualifiedName: kotlin.String): org.w3c.dom.HTMLCollection
    public final override /*1*/ /*fake_override*/ fun getElementsByTagNameNS(/*0*/ namespace: kotlin.String?, /*1*/ localName: kotlin.String): org.w3c.dom.HTMLCollection
    public final override /*1*/ /*fake_override*/ fun getRootNode(/*0*/ options: org.w3c.dom.GetRootNodeOptions = ...): org.w3c.dom.Node
    public final override /*1*/ /*fake_override*/ fun hasAttribute(/*0*/ qualifiedName: kotlin.String): kotlin.Boolean
    public final override /*1*/ /*fake_override*/ fun hasAttributeNS(/*0*/ namespace: kotlin.String?, /*1*/ localName: kotlin.String): kotlin.Boolean
    public final override /*1*/ /*fake_override*/ fun hasAttributes(): kotlin.Boolean
    public final override /*1*/ /*fake_override*/ fun hasChildNodes(): kotlin.Boolean
    public final override /*1*/ /*fake_override*/ fun hasPointerCapture(/*0*/ pointerId: kotlin.Int): kotlin.Boolean
    public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
    public final override /*1*/ /*fake_override*/ fun insertAdjacentElement(/*0*/ where: kotlin.String, /*1*/ element: org.w3c.dom.Element): org.w3c.dom.Element?
    public final override /*1*/ /*fake_override*/ fun insertAdjacentHTML(/*0*/ position: kotlin.String, /*1*/ text: kotlin.String): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun insertAdjacentText(/*0*/ where: kotlin.String, /*1*/ data: kotlin.String): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun insertBefore(/*0*/ node: org.w3c.dom.Node, /*1*/ child: org.w3c.dom.Node?): org.w3c.dom.Node
    public final override /*1*/ /*fake_override*/ fun isDefaultNamespace(/*0*/ namespace: kotlin.String?): kotlin.Boolean
    public final override /*1*/ /*fake_override*/ fun isEqualNode(/*0*/ otherNode: org.w3c.dom.Node?): kotlin.Boolean
    public final override /*1*/ /*fake_override*/ fun isSameNode(/*0*/ otherNode: org.w3c.dom.Node?): kotlin.Boolean
    public final override /*1*/ /*fake_override*/ fun lookupNamespaceURI(/*0*/ prefix: kotlin.String?): kotlin.String?
    public final override /*1*/ /*fake_override*/ fun lookupPrefix(/*0*/ namespace: kotlin.String?): kotlin.String?
    public final override /*1*/ /*fake_override*/ fun matches(/*0*/ selectors: kotlin.String): kotlin.Boolean
    public final override /*1*/ /*fake_override*/ fun normalize(): kotlin.Unit
    public abstract override /*1*/ /*fake_override*/ fun prepend(/*0*/ vararg nodes: dynamic /*kotlin.Array<out dynamic>*/): kotlin.Unit
    public abstract override /*1*/ /*fake_override*/ fun querySelector(/*0*/ selectors: kotlin.String): org.w3c.dom.Element?
    public abstract override /*1*/ /*fake_override*/ fun querySelectorAll(/*0*/ selectors: kotlin.String): org.w3c.dom.NodeList
    public final override /*1*/ /*fake_override*/ fun releasePointerCapture(/*0*/ pointerId: kotlin.Int): kotlin.Unit
    public abstract override /*1*/ /*fake_override*/ fun remove(): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun removeAttribute(/*0*/ qualifiedName: kotlin.String): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun removeAttributeNS(/*0*/ namespace: kotlin.String?, /*1*/ localName: kotlin.String): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun removeAttributeNode(/*0*/ attr: org.w3c.dom.Attr): org.w3c.dom.Attr
    public final override /*1*/ /*fake_override*/ fun removeChild(/*0*/ child: org.w3c.dom.Node): org.w3c.dom.Node
    public final override /*1*/ /*fake_override*/ fun removeEventListener(/*0*/ type: kotlin.String, /*1*/ callback: ((org.w3c.dom.events.Event) -> kotlin.Unit)?, /*2*/ options: dynamic = ...): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun removeEventListener(/*0*/ type: kotlin.String, /*1*/ callback: org.w3c.dom.events.EventListener?, /*2*/ options: dynamic = ...): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun replaceChild(/*0*/ node: org.w3c.dom.Node, /*1*/ child: org.w3c.dom.Node): org.w3c.dom.Node
    public abstract override /*1*/ /*fake_override*/ fun replaceWith(/*0*/ vararg nodes: dynamic /*kotlin.Array<out dynamic>*/): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun requestFullscreen(): kotlin.js.Promise<kotlin.Unit>
    public final override /*1*/ /*fake_override*/ fun scroll(/*0*/ x: kotlin.Double, /*1*/ y: kotlin.Double): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun scroll(/*0*/ options: org.w3c.dom.ScrollToOptions = ...): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun scrollBy(/*0*/ x: kotlin.Double, /*1*/ y: kotlin.Double): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun scrollBy(/*0*/ options: org.w3c.dom.ScrollToOptions = ...): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun scrollIntoView(): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun scrollIntoView(/*0*/ arg: dynamic): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun scrollTo(/*0*/ x: kotlin.Double, /*1*/ y: kotlin.Double): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun scrollTo(/*0*/ options: org.w3c.dom.ScrollToOptions = ...): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun setAttribute(/*0*/ qualifiedName: kotlin.String, /*1*/ value: kotlin.String): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun setAttributeNS(/*0*/ namespace: kotlin.String?, /*1*/ qualifiedName: kotlin.String, /*2*/ value: kotlin.String): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun setAttributeNode(/*0*/ attr: org.w3c.dom.Attr): org.w3c.dom.Attr?
    public final override /*1*/ /*fake_override*/ fun setAttributeNodeNS(/*0*/ attr: org.w3c.dom.Attr): org.w3c.dom.Attr?
    public final override /*1*/ /*fake_override*/ fun setPointerCapture(/*0*/ pointerId: kotlin.Int): kotlin.Unit
    public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
    public final override /*1*/ /*fake_override*/ fun webkitMatchesSelector(/*0*/ selectors: kotlin.String): kotlin.Boolean

    public companion object Companion {
        /*primary*/ private constructor Companion()
        public final val ATTRIBUTE_NODE: kotlin.Short
            public final fun <get-ATTRIBUTE_NODE>(): kotlin.Short
        public final val CDATA_SECTION_NODE: kotlin.Short
            public final fun <get-CDATA_SECTION_NODE>(): kotlin.Short
        public final val COMMENT_NODE: kotlin.Short
            public final fun <get-COMMENT_NODE>(): kotlin.Short
        public final val DOCUMENT_FRAGMENT_NODE: kotlin.Short
            public final fun <get-DOCUMENT_FRAGMENT_NODE>(): kotlin.Short
        public final val DOCUMENT_NODE: kotlin.Short
            public final fun <get-DOCUMENT_NODE>(): kotlin.Short
        public final val DOCUMENT_POSITION_CONTAINED_BY: kotlin.Short
            public final fun <get-DOCUMENT_POSITION_CONTAINED_BY>(): kotlin.Short
        public final val DOCUMENT_POSITION_CONTAINS: kotlin.Short
            public final fun <get-DOCUMENT_POSITION_CONTAINS>(): kotlin.Short
        public final val DOCUMENT_POSITION_DISCONNECTED: kotlin.Short
            public final fun <get-DOCUMENT_POSITION_DISCONNECTED>(): kotlin.Short
        public final val DOCUMENT_POSITION_FOLLOWING: kotlin.Short
            public final fun <get-DOCUMENT_POSITION_FOLLOWING>(): kotlin.Short
        public final val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: kotlin.Short
            public final fun <get-DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC>(): kotlin.Short
        public final val DOCUMENT_POSITION_PRECEDING: kotlin.Short
            public final fun <get-DOCUMENT_POSITION_PRECEDING>(): kotlin.Short
        public final val DOCUMENT_TYPE_NODE: kotlin.Short
            public final fun <get-DOCUMENT_TYPE_NODE>(): kotlin.Short
        public final val ELEMENT_NODE: kotlin.Short
            public final fun <get-ELEMENT_NODE>(): kotlin.Short
        public final val ENTITY_NODE: kotlin.Short
            public final fun <get-ENTITY_NODE>(): kotlin.Short
        public final val ENTITY_REFERENCE_NODE: kotlin.Short
            public final fun <get-ENTITY_REFERENCE_NODE>(): kotlin.Short
        public final val NOTATION_NODE: kotlin.Short
            public final fun <get-NOTATION_NODE>(): kotlin.Short
        public final val PROCESSING_INSTRUCTION_NODE: kotlin.Short
            public final fun <get-PROCESSING_INSTRUCTION_NODE>(): kotlin.Short
        public final val SVG_SPREADMETHOD_PAD: kotlin.Short
            public final fun <get-SVG_SPREADMETHOD_PAD>(): kotlin.Short
        public final val SVG_SPREADMETHOD_REFLECT: kotlin.Short
            public final fun <get-SVG_SPREADMETHOD_REFLECT>(): kotlin.Short
        public final val SVG_SPREADMETHOD_REPEAT: kotlin.Short
            public final fun <get-SVG_SPREADMETHOD_REPEAT>(): kotlin.Short
        public final val SVG_SPREADMETHOD_UNKNOWN: kotlin.Short
            public final fun <get-SVG_SPREADMETHOD_UNKNOWN>(): kotlin.Short
        public final val SVG_UNIT_TYPE_OBJECTBOUNDINGBOX: kotlin.Short
            public final fun <get-SVG_UNIT_TYPE_OBJECTBOUNDINGBOX>(): kotlin.Short
        public final val SVG_UNIT_TYPE_UNKNOWN: kotlin.Short
            public final fun <get-SVG_UNIT_TYPE_UNKNOWN>(): kotlin.Short
        public final val SVG_UNIT_TYPE_USERSPACEONUSE: kotlin.Short
            public final fun <get-SVG_UNIT_TYPE_USERSPACEONUSE>(): kotlin.Short
        public final val TEXT_NODE: kotlin.Short
            public final fun <get-TEXT_NODE>(): kotlin.Short
        public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
        public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
        public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
    }
}

public abstract external class SVGRectElement : org.w3c.dom.svg.SVGGeometryElement {
    /*primary*/ public constructor SVGRectElement()
    public open override /*1*/ /*fake_override*/ val assignedSlot: org.w3c.dom.HTMLSlotElement?
        public open override /*1*/ /*fake_override*/ fun <get-assignedSlot>(): org.w3c.dom.HTMLSlotElement?
    public open override /*1*/ /*fake_override*/ val attributes: org.w3c.dom.NamedNodeMap
        public open override /*1*/ /*fake_override*/ fun <get-attributes>(): org.w3c.dom.NamedNodeMap
    public open override /*1*/ /*fake_override*/ val baseURI: kotlin.String
        public open override /*1*/ /*fake_override*/ fun <get-baseURI>(): kotlin.String
    public abstract override /*1*/ /*fake_override*/ val childElementCount: kotlin.Int
        public abstract override /*1*/ /*fake_override*/ fun <get-childElementCount>(): kotlin.Int
    public open override /*1*/ /*fake_override*/ val childNodes: org.w3c.dom.NodeList
        public open override /*1*/ /*fake_override*/ fun <get-childNodes>(): org.w3c.dom.NodeList
    public abstract override /*1*/ /*fake_override*/ val children: org.w3c.dom.HTMLCollection
        public abstract override /*1*/ /*fake_override*/ fun <get-children>(): org.w3c.dom.HTMLCollection
    public open override /*1*/ /*fake_override*/ val classList: org.w3c.dom.DOMTokenList
        public open override /*1*/ /*fake_override*/ fun <get-classList>(): org.w3c.dom.DOMTokenList
    public open override /*1*/ /*fake_override*/ var className: kotlin.String
        public open override /*1*/ /*fake_override*/ fun <get-className>(): kotlin.String
        public open override /*1*/ /*fake_override*/ fun <set-className>(/*0*/ <set-?>: kotlin.String): kotlin.Unit
    public open override /*1*/ /*fake_override*/ val clientHeight: kotlin.Int
        public open override /*1*/ /*fake_override*/ fun <get-clientHeight>(): kotlin.Int
    public open override /*1*/ /*fake_override*/ val clientLeft: kotlin.Int
        public open override /*1*/ /*fake_override*/ fun <get-clientLeft>(): kotlin.Int
    public open override /*1*/ /*fake_override*/ val clientTop: kotlin.Int
        public open override /*1*/ /*fake_override*/ fun <get-clientTop>(): kotlin.Int
    public open override /*1*/ /*fake_override*/ val clientWidth: kotlin.Int
        public open override /*1*/ /*fake_override*/ fun <get-clientWidth>(): kotlin.Int
    public open override /*1*/ /*fake_override*/ val correspondingElement: org.w3c.dom.svg.SVGElement?
        public open override /*1*/ /*fake_override*/ fun <get-correspondingElement>(): org.w3c.dom.svg.SVGElement?
    public open override /*1*/ /*fake_override*/ val correspondingUseElement: org.w3c.dom.svg.SVGUseElement?
        public open override /*1*/ /*fake_override*/ fun <get-correspondingUseElement>(): org.w3c.dom.svg.SVGUseElement?
    public open override /*1*/ /*fake_override*/ val dataset: org.w3c.dom.DOMStringMap
        public open override /*1*/ /*fake_override*/ fun <get-dataset>(): org.w3c.dom.DOMStringMap
    public open override /*1*/ /*fake_override*/ val firstChild: org.w3c.dom.Node?
        public open override /*1*/ /*fake_override*/ fun <get-firstChild>(): org.w3c.dom.Node?
    public open override /*1*/ /*fake_override*/ val firstElementChild: org.w3c.dom.Element?
        public open override /*1*/ /*fake_override*/ fun <get-firstElementChild>(): org.w3c.dom.Element?
    public open val height: org.w3c.dom.svg.SVGAnimatedLength
        public open fun <get-height>(): org.w3c.dom.svg.SVGAnimatedLength
    public open override /*1*/ /*fake_override*/ var id: kotlin.String
        public open override /*1*/ /*fake_override*/ fun <get-id>(): kotlin.String
        public open override /*1*/ /*fake_override*/ fun <set-id>(/*0*/ <set-?>: kotlin.String): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var innerHTML: kotlin.String
        public open override /*1*/ /*fake_override*/ fun <get-innerHTML>(): kotlin.String
        public open override /*1*/ /*fake_override*/ fun <set-innerHTML>(/*0*/ <set-?>: kotlin.String): kotlin.Unit
    public open override /*1*/ /*fake_override*/ val isConnected: kotlin.Boolean
        public open override /*1*/ /*fake_override*/ fun <get-isConnected>(): kotlin.Boolean
    public open override /*1*/ /*fake_override*/ val lastChild: org.w3c.dom.Node?
        public open override /*1*/ /*fake_override*/ fun <get-lastChild>(): org.w3c.dom.Node?
    public open override /*1*/ /*fake_override*/ val lastElementChild: org.w3c.dom.Element?
        public open override /*1*/ /*fake_override*/ fun <get-lastElementChild>(): org.w3c.dom.Element?
    public open override /*1*/ /*fake_override*/ val localName: kotlin.String
        public open override /*1*/ /*fake_override*/ fun <get-localName>(): kotlin.String
    public open override /*1*/ /*fake_override*/ val namespaceURI: kotlin.String?
        public open override /*1*/ /*fake_override*/ fun <get-namespaceURI>(): kotlin.String?
    public open override /*1*/ /*fake_override*/ val nextElementSibling: org.w3c.dom.Element?
        public open override /*1*/ /*fake_override*/ fun <get-nextElementSibling>(): org.w3c.dom.Element?
    public open override /*1*/ /*fake_override*/ val nextSibling: org.w3c.dom.Node?
        public open override /*1*/ /*fake_override*/ fun <get-nextSibling>(): org.w3c.dom.Node?
    public open override /*1*/ /*fake_override*/ val nodeName: kotlin.String
        public open override /*1*/ /*fake_override*/ fun <get-nodeName>(): kotlin.String
    public open override /*1*/ /*fake_override*/ val nodeType: kotlin.Short
        public open override /*1*/ /*fake_override*/ fun <get-nodeType>(): kotlin.Short
    public open override /*1*/ /*fake_override*/ var nodeValue: kotlin.String?
        public open override /*1*/ /*fake_override*/ fun <get-nodeValue>(): kotlin.String?
        public open override /*1*/ /*fake_override*/ fun <set-nodeValue>(/*0*/ <set-?>: kotlin.String?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onabort: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onabort>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onabort>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onblur: ((org.w3c.dom.events.FocusEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onblur>(): ((org.w3c.dom.events.FocusEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onblur>(/*0*/ value: ((org.w3c.dom.events.FocusEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var oncancel: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-oncancel>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-oncancel>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var oncanplay: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-oncanplay>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-oncanplay>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var oncanplaythrough: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-oncanplaythrough>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-oncanplaythrough>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onchange: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onchange>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onchange>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onclick: ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onclick>(): ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onclick>(/*0*/ value: ((org.w3c.dom.events.MouseEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onclose: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onclose>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onclose>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var oncontextmenu: ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-oncontextmenu>(): ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-oncontextmenu>(/*0*/ value: ((org.w3c.dom.events.MouseEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var oncuechange: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-oncuechange>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-oncuechange>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ondblclick: ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ondblclick>(): ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ondblclick>(/*0*/ value: ((org.w3c.dom.events.MouseEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ondrag: ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ondrag>(): ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ondrag>(/*0*/ value: ((org.w3c.dom.DragEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ondragend: ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ondragend>(): ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ondragend>(/*0*/ value: ((org.w3c.dom.DragEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ondragenter: ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ondragenter>(): ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ondragenter>(/*0*/ value: ((org.w3c.dom.DragEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ondragexit: ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ondragexit>(): ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ondragexit>(/*0*/ value: ((org.w3c.dom.DragEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ondragleave: ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ondragleave>(): ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ondragleave>(/*0*/ value: ((org.w3c.dom.DragEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ondragover: ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ondragover>(): ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ondragover>(/*0*/ value: ((org.w3c.dom.DragEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ondragstart: ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ondragstart>(): ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ondragstart>(/*0*/ value: ((org.w3c.dom.DragEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ondrop: ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ondrop>(): ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ondrop>(/*0*/ value: ((org.w3c.dom.DragEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ondurationchange: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ondurationchange>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ondurationchange>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onemptied: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onemptied>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onemptied>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onended: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onended>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onended>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onerror: ((dynamic, kotlin.String, kotlin.Int, kotlin.Int, kotlin.Any?) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onerror>(): ((dynamic, kotlin.String, kotlin.Int, kotlin.Int, kotlin.Any?) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onerror>(/*0*/ value: ((dynamic, kotlin.String, kotlin.Int, kotlin.Int, kotlin.Any?) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onfocus: ((org.w3c.dom.events.FocusEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onfocus>(): ((org.w3c.dom.events.FocusEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onfocus>(/*0*/ value: ((org.w3c.dom.events.FocusEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ongotpointercapture: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ongotpointercapture>(): ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ongotpointercapture>(/*0*/ value: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var oninput: ((org.w3c.dom.events.InputEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-oninput>(): ((org.w3c.dom.events.InputEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-oninput>(/*0*/ value: ((org.w3c.dom.events.InputEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var oninvalid: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-oninvalid>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-oninvalid>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onkeydown: ((org.w3c.dom.events.KeyboardEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onkeydown>(): ((org.w3c.dom.events.KeyboardEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onkeydown>(/*0*/ value: ((org.w3c.dom.events.KeyboardEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onkeypress: ((org.w3c.dom.events.KeyboardEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onkeypress>(): ((org.w3c.dom.events.KeyboardEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onkeypress>(/*0*/ value: ((org.w3c.dom.events.KeyboardEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onkeyup: ((org.w3c.dom.events.KeyboardEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onkeyup>(): ((org.w3c.dom.events.KeyboardEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onkeyup>(/*0*/ value: ((org.w3c.dom.events.KeyboardEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onload: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onload>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onload>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onloadeddata: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onloadeddata>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onloadeddata>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onloadedmetadata: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onloadedmetadata>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onloadedmetadata>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onloadend: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onloadend>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onloadend>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onloadstart: ((org.w3c.xhr.ProgressEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onloadstart>(): ((org.w3c.xhr.ProgressEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onloadstart>(/*0*/ value: ((org.w3c.xhr.ProgressEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onlostpointercapture: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onlostpointercapture>(): ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onlostpointercapture>(/*0*/ value: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onmousedown: ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onmousedown>(): ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onmousedown>(/*0*/ value: ((org.w3c.dom.events.MouseEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onmouseenter: ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onmouseenter>(): ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onmouseenter>(/*0*/ value: ((org.w3c.dom.events.MouseEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onmouseleave: ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onmouseleave>(): ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onmouseleave>(/*0*/ value: ((org.w3c.dom.events.MouseEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onmousemove: ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onmousemove>(): ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onmousemove>(/*0*/ value: ((org.w3c.dom.events.MouseEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onmouseout: ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onmouseout>(): ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onmouseout>(/*0*/ value: ((org.w3c.dom.events.MouseEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onmouseover: ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onmouseover>(): ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onmouseover>(/*0*/ value: ((org.w3c.dom.events.MouseEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onmouseup: ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onmouseup>(): ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onmouseup>(/*0*/ value: ((org.w3c.dom.events.MouseEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onpause: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onpause>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onpause>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onplay: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onplay>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onplay>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onplaying: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onplaying>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onplaying>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onpointercancel: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onpointercancel>(): ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onpointercancel>(/*0*/ value: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onpointerdown: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onpointerdown>(): ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onpointerdown>(/*0*/ value: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onpointerenter: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onpointerenter>(): ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onpointerenter>(/*0*/ value: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onpointerleave: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onpointerleave>(): ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onpointerleave>(/*0*/ value: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onpointermove: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onpointermove>(): ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onpointermove>(/*0*/ value: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onpointerout: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onpointerout>(): ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onpointerout>(/*0*/ value: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onpointerover: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onpointerover>(): ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onpointerover>(/*0*/ value: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onpointerup: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onpointerup>(): ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onpointerup>(/*0*/ value: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onprogress: ((org.w3c.xhr.ProgressEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onprogress>(): ((org.w3c.xhr.ProgressEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onprogress>(/*0*/ value: ((org.w3c.xhr.ProgressEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onratechange: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onratechange>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onratechange>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onreset: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onreset>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onreset>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onresize: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onresize>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onresize>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onscroll: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onscroll>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onscroll>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onseeked: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onseeked>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onseeked>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onseeking: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onseeking>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onseeking>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onselect: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onselect>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onselect>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onshow: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onshow>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onshow>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onstalled: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onstalled>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onstalled>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onsubmit: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onsubmit>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onsubmit>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onsuspend: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onsuspend>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onsuspend>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ontimeupdate: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ontimeupdate>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ontimeupdate>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ontoggle: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ontoggle>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ontoggle>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onvolumechange: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onvolumechange>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onvolumechange>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onwaiting: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onwaiting>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onwaiting>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onwheel: ((org.w3c.dom.events.WheelEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onwheel>(): ((org.w3c.dom.events.WheelEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onwheel>(/*0*/ value: ((org.w3c.dom.events.WheelEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var outerHTML: kotlin.String
        public open override /*1*/ /*fake_override*/ fun <get-outerHTML>(): kotlin.String
        public open override /*1*/ /*fake_override*/ fun <set-outerHTML>(/*0*/ <set-?>: kotlin.String): kotlin.Unit
    public open override /*1*/ /*fake_override*/ val ownerDocument: org.w3c.dom.Document?
        public open override /*1*/ /*fake_override*/ fun <get-ownerDocument>(): org.w3c.dom.Document?
    public open override /*1*/ /*fake_override*/ val ownerSVGElement: org.w3c.dom.svg.SVGSVGElement?
        public open override /*1*/ /*fake_override*/ fun <get-ownerSVGElement>(): org.w3c.dom.svg.SVGSVGElement?
    public open override /*1*/ /*fake_override*/ val parentElement: org.w3c.dom.Element?
        public open override /*1*/ /*fake_override*/ fun <get-parentElement>(): org.w3c.dom.Element?
    public open override /*1*/ /*fake_override*/ val parentNode: org.w3c.dom.Node?
        public open override /*1*/ /*fake_override*/ fun <get-parentNode>(): org.w3c.dom.Node?
    public open override /*1*/ /*fake_override*/ val pathLength: org.w3c.dom.svg.SVGAnimatedNumber
        public open override /*1*/ /*fake_override*/ fun <get-pathLength>(): org.w3c.dom.svg.SVGAnimatedNumber
    public open override /*1*/ /*fake_override*/ val prefix: kotlin.String?
        public open override /*1*/ /*fake_override*/ fun <get-prefix>(): kotlin.String?
    public open override /*1*/ /*fake_override*/ val previousElementSibling: org.w3c.dom.Element?
        public open override /*1*/ /*fake_override*/ fun <get-previousElementSibling>(): org.w3c.dom.Element?
    public open override /*1*/ /*fake_override*/ val previousSibling: org.w3c.dom.Node?
        public open override /*1*/ /*fake_override*/ fun <get-previousSibling>(): org.w3c.dom.Node?
    public abstract override /*1*/ /*fake_override*/ val requiredExtensions: org.w3c.dom.svg.SVGStringList
        public abstract override /*1*/ /*fake_override*/ fun <get-requiredExtensions>(): org.w3c.dom.svg.SVGStringList
    public open val rx: org.w3c.dom.svg.SVGAnimatedLength
        public open fun <get-rx>(): org.w3c.dom.svg.SVGAnimatedLength
    public open val ry: org.w3c.dom.svg.SVGAnimatedLength
        public open fun <get-ry>(): org.w3c.dom.svg.SVGAnimatedLength
    public open override /*1*/ /*fake_override*/ val scrollHeight: kotlin.Int
        public open override /*1*/ /*fake_override*/ fun <get-scrollHeight>(): kotlin.Int
    public open override /*1*/ /*fake_override*/ var scrollLeft: kotlin.Double
        public open override /*1*/ /*fake_override*/ fun <get-scrollLeft>(): kotlin.Double
        public open override /*1*/ /*fake_override*/ fun <set-scrollLeft>(/*0*/ <set-?>: kotlin.Double): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var scrollTop: kotlin.Double
        public open override /*1*/ /*fake_override*/ fun <get-scrollTop>(): kotlin.Double
        public open override /*1*/ /*fake_override*/ fun <set-scrollTop>(/*0*/ <set-?>: kotlin.Double): kotlin.Unit
    public open override /*1*/ /*fake_override*/ val scrollWidth: kotlin.Int
        public open override /*1*/ /*fake_override*/ fun <get-scrollWidth>(): kotlin.Int
    public open override /*1*/ /*fake_override*/ val shadowRoot: org.w3c.dom.ShadowRoot?
        public open override /*1*/ /*fake_override*/ fun <get-shadowRoot>(): org.w3c.dom.ShadowRoot?
    public open override /*1*/ /*fake_override*/ var slot: kotlin.String
        public open override /*1*/ /*fake_override*/ fun <get-slot>(): kotlin.String
        public open override /*1*/ /*fake_override*/ fun <set-slot>(/*0*/ <set-?>: kotlin.String): kotlin.Unit
    public abstract override /*1*/ /*fake_override*/ val style: org.w3c.dom.css.CSSStyleDeclaration
        public abstract override /*1*/ /*fake_override*/ fun <get-style>(): org.w3c.dom.css.CSSStyleDeclaration
    public abstract override /*1*/ /*fake_override*/ val systemLanguage: org.w3c.dom.svg.SVGStringList
        public abstract override /*1*/ /*fake_override*/ fun <get-systemLanguage>(): org.w3c.dom.svg.SVGStringList
    public open override /*1*/ /*fake_override*/ var tabIndex: kotlin.Int
        public open override /*1*/ /*fake_override*/ fun <get-tabIndex>(): kotlin.Int
        public open override /*1*/ /*fake_override*/ fun <set-tabIndex>(/*0*/ <set-?>: kotlin.Int): kotlin.Unit
    public open override /*1*/ /*fake_override*/ val tagName: kotlin.String
        public open override /*1*/ /*fake_override*/ fun <get-tagName>(): kotlin.String
    public open override /*1*/ /*fake_override*/ var textContent: kotlin.String?
        public open override /*1*/ /*fake_override*/ fun <get-textContent>(): kotlin.String?
        public open override /*1*/ /*fake_override*/ fun <set-textContent>(/*0*/ <set-?>: kotlin.String?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ val transform: org.w3c.dom.svg.SVGAnimatedTransformList
        public open override /*1*/ /*fake_override*/ fun <get-transform>(): org.w3c.dom.svg.SVGAnimatedTransformList
    public open override /*1*/ /*fake_override*/ val viewportElement: org.w3c.dom.svg.SVGElement?
        public open override /*1*/ /*fake_override*/ fun <get-viewportElement>(): org.w3c.dom.svg.SVGElement?
    public open val width: org.w3c.dom.svg.SVGAnimatedLength
        public open fun <get-width>(): org.w3c.dom.svg.SVGAnimatedLength
    public open val x: org.w3c.dom.svg.SVGAnimatedLength
        public open fun <get-x>(): org.w3c.dom.svg.SVGAnimatedLength
    public open val y: org.w3c.dom.svg.SVGAnimatedLength
        public open fun <get-y>(): org.w3c.dom.svg.SVGAnimatedLength
    public final override /*1*/ /*fake_override*/ fun addEventListener(/*0*/ type: kotlin.String, /*1*/ callback: ((org.w3c.dom.events.Event) -> kotlin.Unit)?, /*2*/ options: dynamic = ...): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun addEventListener(/*0*/ type: kotlin.String, /*1*/ callback: org.w3c.dom.events.EventListener?, /*2*/ options: dynamic = ...): kotlin.Unit
    public abstract override /*1*/ /*fake_override*/ fun after(/*0*/ vararg nodes: dynamic /*kotlin.Array<out dynamic>*/): kotlin.Unit
    public abstract override /*1*/ /*fake_override*/ fun append(/*0*/ vararg nodes: dynamic /*kotlin.Array<out dynamic>*/): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun appendChild(/*0*/ node: org.w3c.dom.Node): org.w3c.dom.Node
    public final override /*1*/ /*fake_override*/ fun attachShadow(/*0*/ init: org.w3c.dom.ShadowRootInit): org.w3c.dom.ShadowRoot
    public abstract override /*1*/ /*fake_override*/ fun before(/*0*/ vararg nodes: dynamic /*kotlin.Array<out dynamic>*/): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun blur(): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun cloneNode(/*0*/ deep: kotlin.Boolean = ...): org.w3c.dom.Node
    public final override /*1*/ /*fake_override*/ fun closest(/*0*/ selectors: kotlin.String): org.w3c.dom.Element?
    public final override /*1*/ /*fake_override*/ fun compareDocumentPosition(/*0*/ other: org.w3c.dom.Node): kotlin.Short
    public final override /*1*/ /*fake_override*/ fun contains(/*0*/ other: org.w3c.dom.Node?): kotlin.Boolean
    public abstract override /*1*/ /*fake_override*/ fun convertPointFromNode(/*0*/ point: org.w3c.dom.DOMPointInit, /*1*/ from: dynamic, /*2*/ options: org.w3c.dom.ConvertCoordinateOptions = ...): org.w3c.dom.DOMPoint
    public abstract override /*1*/ /*fake_override*/ fun convertQuadFromNode(/*0*/ quad: dynamic, /*1*/ from: dynamic, /*2*/ options: org.w3c.dom.ConvertCoordinateOptions = ...): org.w3c.dom.DOMQuad
    public abstract override /*1*/ /*fake_override*/ fun convertRectFromNode(/*0*/ rect: org.w3c.dom.DOMRectReadOnly, /*1*/ from: dynamic, /*2*/ options: org.w3c.dom.ConvertCoordinateOptions = ...): org.w3c.dom.DOMQuad
    public final override /*1*/ /*fake_override*/ fun dispatchEvent(/*0*/ event: org.w3c.dom.events.Event): kotlin.Boolean
    public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
    public final override /*1*/ /*fake_override*/ fun focus(): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun getAttribute(/*0*/ qualifiedName: kotlin.String): kotlin.String?
    public final override /*1*/ /*fake_override*/ fun getAttributeNS(/*0*/ namespace: kotlin.String?, /*1*/ localName: kotlin.String): kotlin.String?
    public final override /*1*/ /*fake_override*/ fun getAttributeNames(): kotlin.Array<kotlin.String>
    public final override /*1*/ /*fake_override*/ fun getAttributeNode(/*0*/ qualifiedName: kotlin.String): org.w3c.dom.Attr?
    public final override /*1*/ /*fake_override*/ fun getAttributeNodeNS(/*0*/ namespace: kotlin.String?, /*1*/ localName: kotlin.String): org.w3c.dom.Attr?
    public final override /*1*/ /*fake_override*/ fun getBBox(/*0*/ options: org.w3c.dom.svg.SVGBoundingBoxOptions = ...): org.w3c.dom.DOMRect
    public final override /*1*/ /*fake_override*/ fun getBoundingClientRect(): org.w3c.dom.DOMRect
    public abstract override /*1*/ /*fake_override*/ fun getBoxQuads(/*0*/ options: org.w3c.dom.BoxQuadOptions = ...): kotlin.Array<org.w3c.dom.DOMQuad>
    public final override /*1*/ /*fake_override*/ fun getCTM(): org.w3c.dom.DOMMatrix?
    public final override /*1*/ /*fake_override*/ fun getClientRects(): kotlin.Array<org.w3c.dom.DOMRect>
    public final override /*1*/ /*fake_override*/ fun getElementsByClassName(/*0*/ classNames: kotlin.String): org.w3c.dom.HTMLCollection
    public final override /*1*/ /*fake_override*/ fun getElementsByTagName(/*0*/ qualifiedName: kotlin.String): org.w3c.dom.HTMLCollection
    public final override /*1*/ /*fake_override*/ fun getElementsByTagNameNS(/*0*/ namespace: kotlin.String?, /*1*/ localName: kotlin.String): org.w3c.dom.HTMLCollection
    public final override /*1*/ /*fake_override*/ fun getPointAtLength(/*0*/ distance: kotlin.Float): org.w3c.dom.DOMPoint
    public final override /*1*/ /*fake_override*/ fun getRootNode(/*0*/ options: org.w3c.dom.GetRootNodeOptions = ...): org.w3c.dom.Node
    public final override /*1*/ /*fake_override*/ fun getScreenCTM(): org.w3c.dom.DOMMatrix?
    public final override /*1*/ /*fake_override*/ fun getTotalLength(): kotlin.Float
    public final override /*1*/ /*fake_override*/ fun hasAttribute(/*0*/ qualifiedName: kotlin.String): kotlin.Boolean
    public final override /*1*/ /*fake_override*/ fun hasAttributeNS(/*0*/ namespace: kotlin.String?, /*1*/ localName: kotlin.String): kotlin.Boolean
    public final override /*1*/ /*fake_override*/ fun hasAttributes(): kotlin.Boolean
    public final override /*1*/ /*fake_override*/ fun hasChildNodes(): kotlin.Boolean
    public final override /*1*/ /*fake_override*/ fun hasPointerCapture(/*0*/ pointerId: kotlin.Int): kotlin.Boolean
    public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
    public final override /*1*/ /*fake_override*/ fun insertAdjacentElement(/*0*/ where: kotlin.String, /*1*/ element: org.w3c.dom.Element): org.w3c.dom.Element?
    public final override /*1*/ /*fake_override*/ fun insertAdjacentHTML(/*0*/ position: kotlin.String, /*1*/ text: kotlin.String): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun insertAdjacentText(/*0*/ where: kotlin.String, /*1*/ data: kotlin.String): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun insertBefore(/*0*/ node: org.w3c.dom.Node, /*1*/ child: org.w3c.dom.Node?): org.w3c.dom.Node
    public final override /*1*/ /*fake_override*/ fun isDefaultNamespace(/*0*/ namespace: kotlin.String?): kotlin.Boolean
    public final override /*1*/ /*fake_override*/ fun isEqualNode(/*0*/ otherNode: org.w3c.dom.Node?): kotlin.Boolean
    public final override /*1*/ /*fake_override*/ fun isPointInFill(/*0*/ point: org.w3c.dom.DOMPoint): kotlin.Boolean
    public final override /*1*/ /*fake_override*/ fun isPointInStroke(/*0*/ point: org.w3c.dom.DOMPoint): kotlin.Boolean
    public final override /*1*/ /*fake_override*/ fun isSameNode(/*0*/ otherNode: org.w3c.dom.Node?): kotlin.Boolean
    public final override /*1*/ /*fake_override*/ fun lookupNamespaceURI(/*0*/ prefix: kotlin.String?): kotlin.String?
    public final override /*1*/ /*fake_override*/ fun lookupPrefix(/*0*/ namespace: kotlin.String?): kotlin.String?
    public final override /*1*/ /*fake_override*/ fun matches(/*0*/ selectors: kotlin.String): kotlin.Boolean
    public final override /*1*/ /*fake_override*/ fun normalize(): kotlin.Unit
    public abstract override /*1*/ /*fake_override*/ fun prepend(/*0*/ vararg nodes: dynamic /*kotlin.Array<out dynamic>*/): kotlin.Unit
    public abstract override /*1*/ /*fake_override*/ fun querySelector(/*0*/ selectors: kotlin.String): org.w3c.dom.Element?
    public abstract override /*1*/ /*fake_override*/ fun querySelectorAll(/*0*/ selectors: kotlin.String): org.w3c.dom.NodeList
    public final override /*1*/ /*fake_override*/ fun releasePointerCapture(/*0*/ pointerId: kotlin.Int): kotlin.Unit
    public abstract override /*1*/ /*fake_override*/ fun remove(): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun removeAttribute(/*0*/ qualifiedName: kotlin.String): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun removeAttributeNS(/*0*/ namespace: kotlin.String?, /*1*/ localName: kotlin.String): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun removeAttributeNode(/*0*/ attr: org.w3c.dom.Attr): org.w3c.dom.Attr
    public final override /*1*/ /*fake_override*/ fun removeChild(/*0*/ child: org.w3c.dom.Node): org.w3c.dom.Node
    public final override /*1*/ /*fake_override*/ fun removeEventListener(/*0*/ type: kotlin.String, /*1*/ callback: ((org.w3c.dom.events.Event) -> kotlin.Unit)?, /*2*/ options: dynamic = ...): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun removeEventListener(/*0*/ type: kotlin.String, /*1*/ callback: org.w3c.dom.events.EventListener?, /*2*/ options: dynamic = ...): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun replaceChild(/*0*/ node: org.w3c.dom.Node, /*1*/ child: org.w3c.dom.Node): org.w3c.dom.Node
    public abstract override /*1*/ /*fake_override*/ fun replaceWith(/*0*/ vararg nodes: dynamic /*kotlin.Array<out dynamic>*/): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun requestFullscreen(): kotlin.js.Promise<kotlin.Unit>
    public final override /*1*/ /*fake_override*/ fun scroll(/*0*/ x: kotlin.Double, /*1*/ y: kotlin.Double): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun scroll(/*0*/ options: org.w3c.dom.ScrollToOptions = ...): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun scrollBy(/*0*/ x: kotlin.Double, /*1*/ y: kotlin.Double): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun scrollBy(/*0*/ options: org.w3c.dom.ScrollToOptions = ...): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun scrollIntoView(): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun scrollIntoView(/*0*/ arg: dynamic): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun scrollTo(/*0*/ x: kotlin.Double, /*1*/ y: kotlin.Double): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun scrollTo(/*0*/ options: org.w3c.dom.ScrollToOptions = ...): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun setAttribute(/*0*/ qualifiedName: kotlin.String, /*1*/ value: kotlin.String): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun setAttributeNS(/*0*/ namespace: kotlin.String?, /*1*/ qualifiedName: kotlin.String, /*2*/ value: kotlin.String): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun setAttributeNode(/*0*/ attr: org.w3c.dom.Attr): org.w3c.dom.Attr?
    public final override /*1*/ /*fake_override*/ fun setAttributeNodeNS(/*0*/ attr: org.w3c.dom.Attr): org.w3c.dom.Attr?
    public final override /*1*/ /*fake_override*/ fun setPointerCapture(/*0*/ pointerId: kotlin.Int): kotlin.Unit
    public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
    public final override /*1*/ /*fake_override*/ fun webkitMatchesSelector(/*0*/ selectors: kotlin.String): kotlin.Boolean

    public companion object Companion {
        /*primary*/ private constructor Companion()
        public final val ATTRIBUTE_NODE: kotlin.Short
            public final fun <get-ATTRIBUTE_NODE>(): kotlin.Short
        public final val CDATA_SECTION_NODE: kotlin.Short
            public final fun <get-CDATA_SECTION_NODE>(): kotlin.Short
        public final val COMMENT_NODE: kotlin.Short
            public final fun <get-COMMENT_NODE>(): kotlin.Short
        public final val DOCUMENT_FRAGMENT_NODE: kotlin.Short
            public final fun <get-DOCUMENT_FRAGMENT_NODE>(): kotlin.Short
        public final val DOCUMENT_NODE: kotlin.Short
            public final fun <get-DOCUMENT_NODE>(): kotlin.Short
        public final val DOCUMENT_POSITION_CONTAINED_BY: kotlin.Short
            public final fun <get-DOCUMENT_POSITION_CONTAINED_BY>(): kotlin.Short
        public final val DOCUMENT_POSITION_CONTAINS: kotlin.Short
            public final fun <get-DOCUMENT_POSITION_CONTAINS>(): kotlin.Short
        public final val DOCUMENT_POSITION_DISCONNECTED: kotlin.Short
            public final fun <get-DOCUMENT_POSITION_DISCONNECTED>(): kotlin.Short
        public final val DOCUMENT_POSITION_FOLLOWING: kotlin.Short
            public final fun <get-DOCUMENT_POSITION_FOLLOWING>(): kotlin.Short
        public final val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: kotlin.Short
            public final fun <get-DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC>(): kotlin.Short
        public final val DOCUMENT_POSITION_PRECEDING: kotlin.Short
            public final fun <get-DOCUMENT_POSITION_PRECEDING>(): kotlin.Short
        public final val DOCUMENT_TYPE_NODE: kotlin.Short
            public final fun <get-DOCUMENT_TYPE_NODE>(): kotlin.Short
        public final val ELEMENT_NODE: kotlin.Short
            public final fun <get-ELEMENT_NODE>(): kotlin.Short
        public final val ENTITY_NODE: kotlin.Short
            public final fun <get-ENTITY_NODE>(): kotlin.Short
        public final val ENTITY_REFERENCE_NODE: kotlin.Short
            public final fun <get-ENTITY_REFERENCE_NODE>(): kotlin.Short
        public final val NOTATION_NODE: kotlin.Short
            public final fun <get-NOTATION_NODE>(): kotlin.Short
        public final val PROCESSING_INSTRUCTION_NODE: kotlin.Short
            public final fun <get-PROCESSING_INSTRUCTION_NODE>(): kotlin.Short
        public final val TEXT_NODE: kotlin.Short
            public final fun <get-TEXT_NODE>(): kotlin.Short
        public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
        public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
        public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
    }
}

public abstract external class SVGSVGElement : org.w3c.dom.svg.SVGGraphicsElement, org.w3c.dom.svg.SVGFitToViewBox, org.w3c.dom.svg.SVGZoomAndPan, org.w3c.dom.WindowEventHandlers {
    /*primary*/ public constructor SVGSVGElement()
    public open override /*1*/ /*fake_override*/ val assignedSlot: org.w3c.dom.HTMLSlotElement?
        public open override /*1*/ /*fake_override*/ fun <get-assignedSlot>(): org.w3c.dom.HTMLSlotElement?
    public open override /*1*/ /*fake_override*/ val attributes: org.w3c.dom.NamedNodeMap
        public open override /*1*/ /*fake_override*/ fun <get-attributes>(): org.w3c.dom.NamedNodeMap
    public open override /*1*/ /*fake_override*/ val baseURI: kotlin.String
        public open override /*1*/ /*fake_override*/ fun <get-baseURI>(): kotlin.String
    public abstract override /*1*/ /*fake_override*/ val childElementCount: kotlin.Int
        public abstract override /*1*/ /*fake_override*/ fun <get-childElementCount>(): kotlin.Int
    public open override /*1*/ /*fake_override*/ val childNodes: org.w3c.dom.NodeList
        public open override /*1*/ /*fake_override*/ fun <get-childNodes>(): org.w3c.dom.NodeList
    public abstract override /*1*/ /*fake_override*/ val children: org.w3c.dom.HTMLCollection
        public abstract override /*1*/ /*fake_override*/ fun <get-children>(): org.w3c.dom.HTMLCollection
    public open override /*1*/ /*fake_override*/ val classList: org.w3c.dom.DOMTokenList
        public open override /*1*/ /*fake_override*/ fun <get-classList>(): org.w3c.dom.DOMTokenList
    public open override /*1*/ /*fake_override*/ var className: kotlin.String
        public open override /*1*/ /*fake_override*/ fun <get-className>(): kotlin.String
        public open override /*1*/ /*fake_override*/ fun <set-className>(/*0*/ <set-?>: kotlin.String): kotlin.Unit
    public open override /*1*/ /*fake_override*/ val clientHeight: kotlin.Int
        public open override /*1*/ /*fake_override*/ fun <get-clientHeight>(): kotlin.Int
    public open override /*1*/ /*fake_override*/ val clientLeft: kotlin.Int
        public open override /*1*/ /*fake_override*/ fun <get-clientLeft>(): kotlin.Int
    public open override /*1*/ /*fake_override*/ val clientTop: kotlin.Int
        public open override /*1*/ /*fake_override*/ fun <get-clientTop>(): kotlin.Int
    public open override /*1*/ /*fake_override*/ val clientWidth: kotlin.Int
        public open override /*1*/ /*fake_override*/ fun <get-clientWidth>(): kotlin.Int
    public open override /*1*/ /*fake_override*/ val correspondingElement: org.w3c.dom.svg.SVGElement?
        public open override /*1*/ /*fake_override*/ fun <get-correspondingElement>(): org.w3c.dom.svg.SVGElement?
    public open override /*1*/ /*fake_override*/ val correspondingUseElement: org.w3c.dom.svg.SVGUseElement?
        public open override /*1*/ /*fake_override*/ fun <get-correspondingUseElement>(): org.w3c.dom.svg.SVGUseElement?
    public open var currentScale: kotlin.Float
        public open fun <get-currentScale>(): kotlin.Float
        public open fun <set-currentScale>(/*0*/ <set-?>: kotlin.Float): kotlin.Unit
    public open val currentTranslate: org.w3c.dom.DOMPointReadOnly
        public open fun <get-currentTranslate>(): org.w3c.dom.DOMPointReadOnly
    public open override /*1*/ /*fake_override*/ val dataset: org.w3c.dom.DOMStringMap
        public open override /*1*/ /*fake_override*/ fun <get-dataset>(): org.w3c.dom.DOMStringMap
    public open override /*1*/ /*fake_override*/ val firstChild: org.w3c.dom.Node?
        public open override /*1*/ /*fake_override*/ fun <get-firstChild>(): org.w3c.dom.Node?
    public open override /*1*/ /*fake_override*/ val firstElementChild: org.w3c.dom.Element?
        public open override /*1*/ /*fake_override*/ fun <get-firstElementChild>(): org.w3c.dom.Element?
    public open val height: org.w3c.dom.svg.SVGAnimatedLength
        public open fun <get-height>(): org.w3c.dom.svg.SVGAnimatedLength
    public open override /*1*/ /*fake_override*/ var id: kotlin.String
        public open override /*1*/ /*fake_override*/ fun <get-id>(): kotlin.String
        public open override /*1*/ /*fake_override*/ fun <set-id>(/*0*/ <set-?>: kotlin.String): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var innerHTML: kotlin.String
        public open override /*1*/ /*fake_override*/ fun <get-innerHTML>(): kotlin.String
        public open override /*1*/ /*fake_override*/ fun <set-innerHTML>(/*0*/ <set-?>: kotlin.String): kotlin.Unit
    public open override /*1*/ /*fake_override*/ val isConnected: kotlin.Boolean
        public open override /*1*/ /*fake_override*/ fun <get-isConnected>(): kotlin.Boolean
    public open override /*1*/ /*fake_override*/ val lastChild: org.w3c.dom.Node?
        public open override /*1*/ /*fake_override*/ fun <get-lastChild>(): org.w3c.dom.Node?
    public open override /*1*/ /*fake_override*/ val lastElementChild: org.w3c.dom.Element?
        public open override /*1*/ /*fake_override*/ fun <get-lastElementChild>(): org.w3c.dom.Element?
    public open override /*1*/ /*fake_override*/ val localName: kotlin.String
        public open override /*1*/ /*fake_override*/ fun <get-localName>(): kotlin.String
    public open override /*1*/ /*fake_override*/ val namespaceURI: kotlin.String?
        public open override /*1*/ /*fake_override*/ fun <get-namespaceURI>(): kotlin.String?
    public open override /*1*/ /*fake_override*/ val nextElementSibling: org.w3c.dom.Element?
        public open override /*1*/ /*fake_override*/ fun <get-nextElementSibling>(): org.w3c.dom.Element?
    public open override /*1*/ /*fake_override*/ val nextSibling: org.w3c.dom.Node?
        public open override /*1*/ /*fake_override*/ fun <get-nextSibling>(): org.w3c.dom.Node?
    public open override /*1*/ /*fake_override*/ val nodeName: kotlin.String
        public open override /*1*/ /*fake_override*/ fun <get-nodeName>(): kotlin.String
    public open override /*1*/ /*fake_override*/ val nodeType: kotlin.Short
        public open override /*1*/ /*fake_override*/ fun <get-nodeType>(): kotlin.Short
    public open override /*1*/ /*fake_override*/ var nodeValue: kotlin.String?
        public open override /*1*/ /*fake_override*/ fun <get-nodeValue>(): kotlin.String?
        public open override /*1*/ /*fake_override*/ fun <set-nodeValue>(/*0*/ <set-?>: kotlin.String?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onabort: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onabort>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onabort>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onafterprint: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onafterprint>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onafterprint>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onbeforeprint: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onbeforeprint>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onbeforeprint>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onbeforeunload: ((org.w3c.dom.BeforeUnloadEvent) -> kotlin.String?)?
        public open override /*1*/ /*fake_override*/ fun <get-onbeforeunload>(): ((org.w3c.dom.BeforeUnloadEvent) -> kotlin.String?)?
        public open override /*1*/ /*fake_override*/ fun <set-onbeforeunload>(/*0*/ value: ((org.w3c.dom.BeforeUnloadEvent) -> kotlin.String?)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onblur: ((org.w3c.dom.events.FocusEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onblur>(): ((org.w3c.dom.events.FocusEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onblur>(/*0*/ value: ((org.w3c.dom.events.FocusEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var oncancel: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-oncancel>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-oncancel>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var oncanplay: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-oncanplay>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-oncanplay>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var oncanplaythrough: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-oncanplaythrough>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-oncanplaythrough>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onchange: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onchange>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onchange>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onclick: ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onclick>(): ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onclick>(/*0*/ value: ((org.w3c.dom.events.MouseEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onclose: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onclose>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onclose>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var oncontextmenu: ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-oncontextmenu>(): ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-oncontextmenu>(/*0*/ value: ((org.w3c.dom.events.MouseEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var oncuechange: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-oncuechange>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-oncuechange>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ondblclick: ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ondblclick>(): ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ondblclick>(/*0*/ value: ((org.w3c.dom.events.MouseEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ondrag: ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ondrag>(): ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ondrag>(/*0*/ value: ((org.w3c.dom.DragEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ondragend: ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ondragend>(): ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ondragend>(/*0*/ value: ((org.w3c.dom.DragEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ondragenter: ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ondragenter>(): ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ondragenter>(/*0*/ value: ((org.w3c.dom.DragEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ondragexit: ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ondragexit>(): ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ondragexit>(/*0*/ value: ((org.w3c.dom.DragEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ondragleave: ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ondragleave>(): ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ondragleave>(/*0*/ value: ((org.w3c.dom.DragEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ondragover: ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ondragover>(): ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ondragover>(/*0*/ value: ((org.w3c.dom.DragEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ondragstart: ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ondragstart>(): ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ondragstart>(/*0*/ value: ((org.w3c.dom.DragEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ondrop: ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ondrop>(): ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ondrop>(/*0*/ value: ((org.w3c.dom.DragEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ondurationchange: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ondurationchange>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ondurationchange>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onemptied: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onemptied>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onemptied>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onended: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onended>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onended>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onerror: ((dynamic, kotlin.String, kotlin.Int, kotlin.Int, kotlin.Any?) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onerror>(): ((dynamic, kotlin.String, kotlin.Int, kotlin.Int, kotlin.Any?) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onerror>(/*0*/ value: ((dynamic, kotlin.String, kotlin.Int, kotlin.Int, kotlin.Any?) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onfocus: ((org.w3c.dom.events.FocusEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onfocus>(): ((org.w3c.dom.events.FocusEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onfocus>(/*0*/ value: ((org.w3c.dom.events.FocusEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ongotpointercapture: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ongotpointercapture>(): ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ongotpointercapture>(/*0*/ value: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onhashchange: ((org.w3c.dom.HashChangeEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onhashchange>(): ((org.w3c.dom.HashChangeEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onhashchange>(/*0*/ value: ((org.w3c.dom.HashChangeEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var oninput: ((org.w3c.dom.events.InputEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-oninput>(): ((org.w3c.dom.events.InputEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-oninput>(/*0*/ value: ((org.w3c.dom.events.InputEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var oninvalid: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-oninvalid>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-oninvalid>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onkeydown: ((org.w3c.dom.events.KeyboardEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onkeydown>(): ((org.w3c.dom.events.KeyboardEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onkeydown>(/*0*/ value: ((org.w3c.dom.events.KeyboardEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onkeypress: ((org.w3c.dom.events.KeyboardEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onkeypress>(): ((org.w3c.dom.events.KeyboardEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onkeypress>(/*0*/ value: ((org.w3c.dom.events.KeyboardEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onkeyup: ((org.w3c.dom.events.KeyboardEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onkeyup>(): ((org.w3c.dom.events.KeyboardEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onkeyup>(/*0*/ value: ((org.w3c.dom.events.KeyboardEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onlanguagechange: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onlanguagechange>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onlanguagechange>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onload: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onload>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onload>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onloadeddata: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onloadeddata>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onloadeddata>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onloadedmetadata: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onloadedmetadata>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onloadedmetadata>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onloadend: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onloadend>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onloadend>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onloadstart: ((org.w3c.xhr.ProgressEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onloadstart>(): ((org.w3c.xhr.ProgressEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onloadstart>(/*0*/ value: ((org.w3c.xhr.ProgressEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onlostpointercapture: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onlostpointercapture>(): ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onlostpointercapture>(/*0*/ value: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onmessage: ((org.w3c.dom.MessageEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onmessage>(): ((org.w3c.dom.MessageEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onmessage>(/*0*/ value: ((org.w3c.dom.MessageEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onmousedown: ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onmousedown>(): ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onmousedown>(/*0*/ value: ((org.w3c.dom.events.MouseEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onmouseenter: ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onmouseenter>(): ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onmouseenter>(/*0*/ value: ((org.w3c.dom.events.MouseEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onmouseleave: ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onmouseleave>(): ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onmouseleave>(/*0*/ value: ((org.w3c.dom.events.MouseEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onmousemove: ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onmousemove>(): ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onmousemove>(/*0*/ value: ((org.w3c.dom.events.MouseEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onmouseout: ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onmouseout>(): ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onmouseout>(/*0*/ value: ((org.w3c.dom.events.MouseEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onmouseover: ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onmouseover>(): ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onmouseover>(/*0*/ value: ((org.w3c.dom.events.MouseEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onmouseup: ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onmouseup>(): ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onmouseup>(/*0*/ value: ((org.w3c.dom.events.MouseEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onoffline: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onoffline>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onoffline>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ononline: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ononline>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ononline>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onpagehide: ((org.w3c.dom.PageTransitionEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onpagehide>(): ((org.w3c.dom.PageTransitionEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onpagehide>(/*0*/ value: ((org.w3c.dom.PageTransitionEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onpageshow: ((org.w3c.dom.PageTransitionEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onpageshow>(): ((org.w3c.dom.PageTransitionEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onpageshow>(/*0*/ value: ((org.w3c.dom.PageTransitionEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onpause: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onpause>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onpause>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onplay: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onplay>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onplay>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onplaying: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onplaying>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onplaying>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onpointercancel: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onpointercancel>(): ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onpointercancel>(/*0*/ value: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onpointerdown: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onpointerdown>(): ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onpointerdown>(/*0*/ value: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onpointerenter: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onpointerenter>(): ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onpointerenter>(/*0*/ value: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onpointerleave: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onpointerleave>(): ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onpointerleave>(/*0*/ value: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onpointermove: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onpointermove>(): ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onpointermove>(/*0*/ value: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onpointerout: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onpointerout>(): ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onpointerout>(/*0*/ value: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onpointerover: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onpointerover>(): ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onpointerover>(/*0*/ value: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onpointerup: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onpointerup>(): ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onpointerup>(/*0*/ value: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onpopstate: ((org.w3c.dom.PopStateEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onpopstate>(): ((org.w3c.dom.PopStateEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onpopstate>(/*0*/ value: ((org.w3c.dom.PopStateEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onprogress: ((org.w3c.xhr.ProgressEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onprogress>(): ((org.w3c.xhr.ProgressEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onprogress>(/*0*/ value: ((org.w3c.xhr.ProgressEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onratechange: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onratechange>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onratechange>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onrejectionhandled: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onrejectionhandled>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onrejectionhandled>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onreset: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onreset>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onreset>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onresize: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onresize>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onresize>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onscroll: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onscroll>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onscroll>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onseeked: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onseeked>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onseeked>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onseeking: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onseeking>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onseeking>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onselect: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onselect>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onselect>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onshow: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onshow>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onshow>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onstalled: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onstalled>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onstalled>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onstorage: ((org.w3c.dom.StorageEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onstorage>(): ((org.w3c.dom.StorageEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onstorage>(/*0*/ value: ((org.w3c.dom.StorageEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onsubmit: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onsubmit>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onsubmit>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onsuspend: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onsuspend>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onsuspend>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ontimeupdate: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ontimeupdate>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ontimeupdate>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ontoggle: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ontoggle>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ontoggle>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onunhandledrejection: ((org.w3c.dom.PromiseRejectionEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onunhandledrejection>(): ((org.w3c.dom.PromiseRejectionEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onunhandledrejection>(/*0*/ value: ((org.w3c.dom.PromiseRejectionEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onunload: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onunload>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onunload>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onvolumechange: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onvolumechange>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onvolumechange>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onwaiting: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onwaiting>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onwaiting>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onwheel: ((org.w3c.dom.events.WheelEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onwheel>(): ((org.w3c.dom.events.WheelEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onwheel>(/*0*/ value: ((org.w3c.dom.events.WheelEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var outerHTML: kotlin.String
        public open override /*1*/ /*fake_override*/ fun <get-outerHTML>(): kotlin.String
        public open override /*1*/ /*fake_override*/ fun <set-outerHTML>(/*0*/ <set-?>: kotlin.String): kotlin.Unit
    public open override /*1*/ /*fake_override*/ val ownerDocument: org.w3c.dom.Document?
        public open override /*1*/ /*fake_override*/ fun <get-ownerDocument>(): org.w3c.dom.Document?
    public open override /*1*/ /*fake_override*/ val ownerSVGElement: org.w3c.dom.svg.SVGSVGElement?
        public open override /*1*/ /*fake_override*/ fun <get-ownerSVGElement>(): org.w3c.dom.svg.SVGSVGElement?
    public open override /*1*/ /*fake_override*/ val parentElement: org.w3c.dom.Element?
        public open override /*1*/ /*fake_override*/ fun <get-parentElement>(): org.w3c.dom.Element?
    public open override /*1*/ /*fake_override*/ val parentNode: org.w3c.dom.Node?
        public open override /*1*/ /*fake_override*/ fun <get-parentNode>(): org.w3c.dom.Node?
    public open override /*1*/ /*fake_override*/ val prefix: kotlin.String?
        public open override /*1*/ /*fake_override*/ fun <get-prefix>(): kotlin.String?
    public abstract override /*1*/ /*fake_override*/ val preserveAspectRatio: org.w3c.dom.svg.SVGAnimatedPreserveAspectRatio
        public abstract override /*1*/ /*fake_override*/ fun <get-preserveAspectRatio>(): org.w3c.dom.svg.SVGAnimatedPreserveAspectRatio
    public open override /*1*/ /*fake_override*/ val previousElementSibling: org.w3c.dom.Element?
        public open override /*1*/ /*fake_override*/ fun <get-previousElementSibling>(): org.w3c.dom.Element?
    public open override /*1*/ /*fake_override*/ val previousSibling: org.w3c.dom.Node?
        public open override /*1*/ /*fake_override*/ fun <get-previousSibling>(): org.w3c.dom.Node?
    public abstract override /*1*/ /*fake_override*/ val requiredExtensions: org.w3c.dom.svg.SVGStringList
        public abstract override /*1*/ /*fake_override*/ fun <get-requiredExtensions>(): org.w3c.dom.svg.SVGStringList
    public open override /*1*/ /*fake_override*/ val scrollHeight: kotlin.Int
        public open override /*1*/ /*fake_override*/ fun <get-scrollHeight>(): kotlin.Int
    public open override /*1*/ /*fake_override*/ var scrollLeft: kotlin.Double
        public open override /*1*/ /*fake_override*/ fun <get-scrollLeft>(): kotlin.Double
        public open override /*1*/ /*fake_override*/ fun <set-scrollLeft>(/*0*/ <set-?>: kotlin.Double): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var scrollTop: kotlin.Double
        public open override /*1*/ /*fake_override*/ fun <get-scrollTop>(): kotlin.Double
        public open override /*1*/ /*fake_override*/ fun <set-scrollTop>(/*0*/ <set-?>: kotlin.Double): kotlin.Unit
    public open override /*1*/ /*fake_override*/ val scrollWidth: kotlin.Int
        public open override /*1*/ /*fake_override*/ fun <get-scrollWidth>(): kotlin.Int
    public open override /*1*/ /*fake_override*/ val shadowRoot: org.w3c.dom.ShadowRoot?
        public open override /*1*/ /*fake_override*/ fun <get-shadowRoot>(): org.w3c.dom.ShadowRoot?
    public open override /*1*/ /*fake_override*/ var slot: kotlin.String
        public open override /*1*/ /*fake_override*/ fun <get-slot>(): kotlin.String
        public open override /*1*/ /*fake_override*/ fun <set-slot>(/*0*/ <set-?>: kotlin.String): kotlin.Unit
    public abstract override /*1*/ /*fake_override*/ val style: org.w3c.dom.css.CSSStyleDeclaration
        public abstract override /*1*/ /*fake_override*/ fun <get-style>(): org.w3c.dom.css.CSSStyleDeclaration
    public abstract override /*1*/ /*fake_override*/ val systemLanguage: org.w3c.dom.svg.SVGStringList
        public abstract override /*1*/ /*fake_override*/ fun <get-systemLanguage>(): org.w3c.dom.svg.SVGStringList
    public open override /*1*/ /*fake_override*/ var tabIndex: kotlin.Int
        public open override /*1*/ /*fake_override*/ fun <get-tabIndex>(): kotlin.Int
        public open override /*1*/ /*fake_override*/ fun <set-tabIndex>(/*0*/ <set-?>: kotlin.Int): kotlin.Unit
    public open override /*1*/ /*fake_override*/ val tagName: kotlin.String
        public open override /*1*/ /*fake_override*/ fun <get-tagName>(): kotlin.String
    public open override /*1*/ /*fake_override*/ var textContent: kotlin.String?
        public open override /*1*/ /*fake_override*/ fun <get-textContent>(): kotlin.String?
        public open override /*1*/ /*fake_override*/ fun <set-textContent>(/*0*/ <set-?>: kotlin.String?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ val transform: org.w3c.dom.svg.SVGAnimatedTransformList
        public open override /*1*/ /*fake_override*/ fun <get-transform>(): org.w3c.dom.svg.SVGAnimatedTransformList
    public abstract override /*1*/ /*fake_override*/ val viewBox: org.w3c.dom.svg.SVGAnimatedRect
        public abstract override /*1*/ /*fake_override*/ fun <get-viewBox>(): org.w3c.dom.svg.SVGAnimatedRect
    public open override /*1*/ /*fake_override*/ val viewportElement: org.w3c.dom.svg.SVGElement?
        public open override /*1*/ /*fake_override*/ fun <get-viewportElement>(): org.w3c.dom.svg.SVGElement?
    public open val width: org.w3c.dom.svg.SVGAnimatedLength
        public open fun <get-width>(): org.w3c.dom.svg.SVGAnimatedLength
    public open val x: org.w3c.dom.svg.SVGAnimatedLength
        public open fun <get-x>(): org.w3c.dom.svg.SVGAnimatedLength
    public open val y: org.w3c.dom.svg.SVGAnimatedLength
        public open fun <get-y>(): org.w3c.dom.svg.SVGAnimatedLength
    public abstract override /*1*/ /*fake_override*/ var zoomAndPan: kotlin.Short
        public abstract override /*1*/ /*fake_override*/ fun <get-zoomAndPan>(): kotlin.Short
        public abstract override /*1*/ /*fake_override*/ fun <set-zoomAndPan>(/*0*/ <set-?>: kotlin.Short): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun addEventListener(/*0*/ type: kotlin.String, /*1*/ callback: ((org.w3c.dom.events.Event) -> kotlin.Unit)?, /*2*/ options: dynamic = ...): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun addEventListener(/*0*/ type: kotlin.String, /*1*/ callback: org.w3c.dom.events.EventListener?, /*2*/ options: dynamic = ...): kotlin.Unit
    public abstract override /*1*/ /*fake_override*/ fun after(/*0*/ vararg nodes: dynamic /*kotlin.Array<out dynamic>*/): kotlin.Unit
    public abstract override /*1*/ /*fake_override*/ fun append(/*0*/ vararg nodes: dynamic /*kotlin.Array<out dynamic>*/): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun appendChild(/*0*/ node: org.w3c.dom.Node): org.w3c.dom.Node
    public final override /*1*/ /*fake_override*/ fun attachShadow(/*0*/ init: org.w3c.dom.ShadowRootInit): org.w3c.dom.ShadowRoot
    public abstract override /*1*/ /*fake_override*/ fun before(/*0*/ vararg nodes: dynamic /*kotlin.Array<out dynamic>*/): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun blur(): kotlin.Unit
    public final fun checkEnclosure(/*0*/ element: org.w3c.dom.svg.SVGElement, /*1*/ rect: org.w3c.dom.DOMRectReadOnly): kotlin.Boolean
    public final fun checkIntersection(/*0*/ element: org.w3c.dom.svg.SVGElement, /*1*/ rect: org.w3c.dom.DOMRectReadOnly): kotlin.Boolean
    public final override /*1*/ /*fake_override*/ fun cloneNode(/*0*/ deep: kotlin.Boolean = ...): org.w3c.dom.Node
    public final override /*1*/ /*fake_override*/ fun closest(/*0*/ selectors: kotlin.String): org.w3c.dom.Element?
    public final override /*1*/ /*fake_override*/ fun compareDocumentPosition(/*0*/ other: org.w3c.dom.Node): kotlin.Short
    public final override /*1*/ /*fake_override*/ fun contains(/*0*/ other: org.w3c.dom.Node?): kotlin.Boolean
    public abstract override /*1*/ /*fake_override*/ fun convertPointFromNode(/*0*/ point: org.w3c.dom.DOMPointInit, /*1*/ from: dynamic, /*2*/ options: org.w3c.dom.ConvertCoordinateOptions = ...): org.w3c.dom.DOMPoint
    public abstract override /*1*/ /*fake_override*/ fun convertQuadFromNode(/*0*/ quad: dynamic, /*1*/ from: dynamic, /*2*/ options: org.w3c.dom.ConvertCoordinateOptions = ...): org.w3c.dom.DOMQuad
    public abstract override /*1*/ /*fake_override*/ fun convertRectFromNode(/*0*/ rect: org.w3c.dom.DOMRectReadOnly, /*1*/ from: dynamic, /*2*/ options: org.w3c.dom.ConvertCoordinateOptions = ...): org.w3c.dom.DOMQuad
    public final fun createSVGAngle(): org.w3c.dom.svg.SVGAngle
    public final fun createSVGLength(): org.w3c.dom.svg.SVGLength
    public final fun createSVGMatrix(): org.w3c.dom.DOMMatrix
    public final fun createSVGNumber(): org.w3c.dom.svg.SVGNumber
    public final fun createSVGPoint(): org.w3c.dom.DOMPoint
    public final fun createSVGRect(): org.w3c.dom.DOMRect
    public final fun createSVGTransform(): org.w3c.dom.svg.SVGTransform
    public final fun createSVGTransformFromMatrix(/*0*/ matrix: org.w3c.dom.DOMMatrixReadOnly): org.w3c.dom.svg.SVGTransform
    public final fun deselectAll(): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun dispatchEvent(/*0*/ event: org.w3c.dom.events.Event): kotlin.Boolean
    public open override /*4*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
    public final override /*1*/ /*fake_override*/ fun focus(): kotlin.Unit
    public final fun forceRedraw(): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun getAttribute(/*0*/ qualifiedName: kotlin.String): kotlin.String?
    public final override /*1*/ /*fake_override*/ fun getAttributeNS(/*0*/ namespace: kotlin.String?, /*1*/ localName: kotlin.String): kotlin.String?
    public final override /*1*/ /*fake_override*/ fun getAttributeNames(): kotlin.Array<kotlin.String>
    public final override /*1*/ /*fake_override*/ fun getAttributeNode(/*0*/ qualifiedName: kotlin.String): org.w3c.dom.Attr?
    public final override /*1*/ /*fake_override*/ fun getAttributeNodeNS(/*0*/ namespace: kotlin.String?, /*1*/ localName: kotlin.String): org.w3c.dom.Attr?
    public final override /*1*/ /*fake_override*/ fun getBBox(/*0*/ options: org.w3c.dom.svg.SVGBoundingBoxOptions = ...): org.w3c.dom.DOMRect
    public final override /*1*/ /*fake_override*/ fun getBoundingClientRect(): org.w3c.dom.DOMRect
    public abstract override /*1*/ /*fake_override*/ fun getBoxQuads(/*0*/ options: org.w3c.dom.BoxQuadOptions = ...): kotlin.Array<org.w3c.dom.DOMQuad>
    public final override /*1*/ /*fake_override*/ fun getCTM(): org.w3c.dom.DOMMatrix?
    public final override /*1*/ /*fake_override*/ fun getClientRects(): kotlin.Array<org.w3c.dom.DOMRect>
    public final fun getElementById(/*0*/ elementId: kotlin.String): org.w3c.dom.Element
    public final override /*1*/ /*fake_override*/ fun getElementsByClassName(/*0*/ classNames: kotlin.String): org.w3c.dom.HTMLCollection
    public final override /*1*/ /*fake_override*/ fun getElementsByTagName(/*0*/ qualifiedName: kotlin.String): org.w3c.dom.HTMLCollection
    public final override /*1*/ /*fake_override*/ fun getElementsByTagNameNS(/*0*/ namespace: kotlin.String?, /*1*/ localName: kotlin.String): org.w3c.dom.HTMLCollection
    public final fun getEnclosureList(/*0*/ rect: org.w3c.dom.DOMRectReadOnly, /*1*/ referenceElement: org.w3c.dom.svg.SVGElement?): org.w3c.dom.NodeList
    public final fun getIntersectionList(/*0*/ rect: org.w3c.dom.DOMRectReadOnly, /*1*/ referenceElement: org.w3c.dom.svg.SVGElement?): org.w3c.dom.NodeList
    public final override /*1*/ /*fake_override*/ fun getRootNode(/*0*/ options: org.w3c.dom.GetRootNodeOptions = ...): org.w3c.dom.Node
    public final override /*1*/ /*fake_override*/ fun getScreenCTM(): org.w3c.dom.DOMMatrix?
    public final override /*1*/ /*fake_override*/ fun hasAttribute(/*0*/ qualifiedName: kotlin.String): kotlin.Boolean
    public final override /*1*/ /*fake_override*/ fun hasAttributeNS(/*0*/ namespace: kotlin.String?, /*1*/ localName: kotlin.String): kotlin.Boolean
    public final override /*1*/ /*fake_override*/ fun hasAttributes(): kotlin.Boolean
    public final override /*1*/ /*fake_override*/ fun hasChildNodes(): kotlin.Boolean
    public final override /*1*/ /*fake_override*/ fun hasPointerCapture(/*0*/ pointerId: kotlin.Int): kotlin.Boolean
    public open override /*4*/ /*fake_override*/ fun hashCode(): kotlin.Int
    public final override /*1*/ /*fake_override*/ fun insertAdjacentElement(/*0*/ where: kotlin.String, /*1*/ element: org.w3c.dom.Element): org.w3c.dom.Element?
    public final override /*1*/ /*fake_override*/ fun insertAdjacentHTML(/*0*/ position: kotlin.String, /*1*/ text: kotlin.String): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun insertAdjacentText(/*0*/ where: kotlin.String, /*1*/ data: kotlin.String): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun insertBefore(/*0*/ node: org.w3c.dom.Node, /*1*/ child: org.w3c.dom.Node?): org.w3c.dom.Node
    public final override /*1*/ /*fake_override*/ fun isDefaultNamespace(/*0*/ namespace: kotlin.String?): kotlin.Boolean
    public final override /*1*/ /*fake_override*/ fun isEqualNode(/*0*/ otherNode: org.w3c.dom.Node?): kotlin.Boolean
    public final override /*1*/ /*fake_override*/ fun isSameNode(/*0*/ otherNode: org.w3c.dom.Node?): kotlin.Boolean
    public final override /*1*/ /*fake_override*/ fun lookupNamespaceURI(/*0*/ prefix: kotlin.String?): kotlin.String?
    public final override /*1*/ /*fake_override*/ fun lookupPrefix(/*0*/ namespace: kotlin.String?): kotlin.String?
    public final override /*1*/ /*fake_override*/ fun matches(/*0*/ selectors: kotlin.String): kotlin.Boolean
    public final override /*1*/ /*fake_override*/ fun normalize(): kotlin.Unit
    public abstract override /*1*/ /*fake_override*/ fun prepend(/*0*/ vararg nodes: dynamic /*kotlin.Array<out dynamic>*/): kotlin.Unit
    public abstract override /*1*/ /*fake_override*/ fun querySelector(/*0*/ selectors: kotlin.String): org.w3c.dom.Element?
    public abstract override /*1*/ /*fake_override*/ fun querySelectorAll(/*0*/ selectors: kotlin.String): org.w3c.dom.NodeList
    public final override /*1*/ /*fake_override*/ fun releasePointerCapture(/*0*/ pointerId: kotlin.Int): kotlin.Unit
    public abstract override /*1*/ /*fake_override*/ fun remove(): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun removeAttribute(/*0*/ qualifiedName: kotlin.String): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun removeAttributeNS(/*0*/ namespace: kotlin.String?, /*1*/ localName: kotlin.String): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun removeAttributeNode(/*0*/ attr: org.w3c.dom.Attr): org.w3c.dom.Attr
    public final override /*1*/ /*fake_override*/ fun removeChild(/*0*/ child: org.w3c.dom.Node): org.w3c.dom.Node
    public final override /*1*/ /*fake_override*/ fun removeEventListener(/*0*/ type: kotlin.String, /*1*/ callback: ((org.w3c.dom.events.Event) -> kotlin.Unit)?, /*2*/ options: dynamic = ...): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun removeEventListener(/*0*/ type: kotlin.String, /*1*/ callback: org.w3c.dom.events.EventListener?, /*2*/ options: dynamic = ...): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun replaceChild(/*0*/ node: org.w3c.dom.Node, /*1*/ child: org.w3c.dom.Node): org.w3c.dom.Node
    public abstract override /*1*/ /*fake_override*/ fun replaceWith(/*0*/ vararg nodes: dynamic /*kotlin.Array<out dynamic>*/): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun requestFullscreen(): kotlin.js.Promise<kotlin.Unit>
    public final override /*1*/ /*fake_override*/ fun scroll(/*0*/ x: kotlin.Double, /*1*/ y: kotlin.Double): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun scroll(/*0*/ options: org.w3c.dom.ScrollToOptions = ...): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun scrollBy(/*0*/ x: kotlin.Double, /*1*/ y: kotlin.Double): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun scrollBy(/*0*/ options: org.w3c.dom.ScrollToOptions = ...): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun scrollIntoView(): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun scrollIntoView(/*0*/ arg: dynamic): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun scrollTo(/*0*/ x: kotlin.Double, /*1*/ y: kotlin.Double): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun scrollTo(/*0*/ options: org.w3c.dom.ScrollToOptions = ...): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun setAttribute(/*0*/ qualifiedName: kotlin.String, /*1*/ value: kotlin.String): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun setAttributeNS(/*0*/ namespace: kotlin.String?, /*1*/ qualifiedName: kotlin.String, /*2*/ value: kotlin.String): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun setAttributeNode(/*0*/ attr: org.w3c.dom.Attr): org.w3c.dom.Attr?
    public final override /*1*/ /*fake_override*/ fun setAttributeNodeNS(/*0*/ attr: org.w3c.dom.Attr): org.w3c.dom.Attr?
    public final override /*1*/ /*fake_override*/ fun setPointerCapture(/*0*/ pointerId: kotlin.Int): kotlin.Unit
    public final fun suspendRedraw(/*0*/ maxWaitMilliseconds: kotlin.Int): kotlin.Int
    public open override /*4*/ /*fake_override*/ fun toString(): kotlin.String
    public final fun unsuspendRedraw(/*0*/ suspendHandleID: kotlin.Int): kotlin.Unit
    public final fun unsuspendRedrawAll(): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun webkitMatchesSelector(/*0*/ selectors: kotlin.String): kotlin.Boolean

    public companion object Companion {
        /*primary*/ private constructor Companion()
        public final val ATTRIBUTE_NODE: kotlin.Short
            public final fun <get-ATTRIBUTE_NODE>(): kotlin.Short
        public final val CDATA_SECTION_NODE: kotlin.Short
            public final fun <get-CDATA_SECTION_NODE>(): kotlin.Short
        public final val COMMENT_NODE: kotlin.Short
            public final fun <get-COMMENT_NODE>(): kotlin.Short
        public final val DOCUMENT_FRAGMENT_NODE: kotlin.Short
            public final fun <get-DOCUMENT_FRAGMENT_NODE>(): kotlin.Short
        public final val DOCUMENT_NODE: kotlin.Short
            public final fun <get-DOCUMENT_NODE>(): kotlin.Short
        public final val DOCUMENT_POSITION_CONTAINED_BY: kotlin.Short
            public final fun <get-DOCUMENT_POSITION_CONTAINED_BY>(): kotlin.Short
        public final val DOCUMENT_POSITION_CONTAINS: kotlin.Short
            public final fun <get-DOCUMENT_POSITION_CONTAINS>(): kotlin.Short
        public final val DOCUMENT_POSITION_DISCONNECTED: kotlin.Short
            public final fun <get-DOCUMENT_POSITION_DISCONNECTED>(): kotlin.Short
        public final val DOCUMENT_POSITION_FOLLOWING: kotlin.Short
            public final fun <get-DOCUMENT_POSITION_FOLLOWING>(): kotlin.Short
        public final val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: kotlin.Short
            public final fun <get-DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC>(): kotlin.Short
        public final val DOCUMENT_POSITION_PRECEDING: kotlin.Short
            public final fun <get-DOCUMENT_POSITION_PRECEDING>(): kotlin.Short
        public final val DOCUMENT_TYPE_NODE: kotlin.Short
            public final fun <get-DOCUMENT_TYPE_NODE>(): kotlin.Short
        public final val ELEMENT_NODE: kotlin.Short
            public final fun <get-ELEMENT_NODE>(): kotlin.Short
        public final val ENTITY_NODE: kotlin.Short
            public final fun <get-ENTITY_NODE>(): kotlin.Short
        public final val ENTITY_REFERENCE_NODE: kotlin.Short
            public final fun <get-ENTITY_REFERENCE_NODE>(): kotlin.Short
        public final val NOTATION_NODE: kotlin.Short
            public final fun <get-NOTATION_NODE>(): kotlin.Short
        public final val PROCESSING_INSTRUCTION_NODE: kotlin.Short
            public final fun <get-PROCESSING_INSTRUCTION_NODE>(): kotlin.Short
        public final val SVG_ZOOMANDPAN_DISABLE: kotlin.Short
            public final fun <get-SVG_ZOOMANDPAN_DISABLE>(): kotlin.Short
        public final val SVG_ZOOMANDPAN_MAGNIFY: kotlin.Short
            public final fun <get-SVG_ZOOMANDPAN_MAGNIFY>(): kotlin.Short
        public final val SVG_ZOOMANDPAN_UNKNOWN: kotlin.Short
            public final fun <get-SVG_ZOOMANDPAN_UNKNOWN>(): kotlin.Short
        public final val TEXT_NODE: kotlin.Short
            public final fun <get-TEXT_NODE>(): kotlin.Short
        public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
        public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
        public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
    }
}

public abstract external class SVGScriptElement : org.w3c.dom.svg.SVGElement, org.w3c.dom.svg.SVGURIReference, org.w3c.dom.HTMLOrSVGScriptElement {
    /*primary*/ public constructor SVGScriptElement()
    public open override /*1*/ /*fake_override*/ val assignedSlot: org.w3c.dom.HTMLSlotElement?
        public open override /*1*/ /*fake_override*/ fun <get-assignedSlot>(): org.w3c.dom.HTMLSlotElement?
    public open override /*1*/ /*fake_override*/ val attributes: org.w3c.dom.NamedNodeMap
        public open override /*1*/ /*fake_override*/ fun <get-attributes>(): org.w3c.dom.NamedNodeMap
    public open override /*1*/ /*fake_override*/ val baseURI: kotlin.String
        public open override /*1*/ /*fake_override*/ fun <get-baseURI>(): kotlin.String
    public abstract override /*1*/ /*fake_override*/ val childElementCount: kotlin.Int
        public abstract override /*1*/ /*fake_override*/ fun <get-childElementCount>(): kotlin.Int
    public open override /*1*/ /*fake_override*/ val childNodes: org.w3c.dom.NodeList
        public open override /*1*/ /*fake_override*/ fun <get-childNodes>(): org.w3c.dom.NodeList
    public abstract override /*1*/ /*fake_override*/ val children: org.w3c.dom.HTMLCollection
        public abstract override /*1*/ /*fake_override*/ fun <get-children>(): org.w3c.dom.HTMLCollection
    public open override /*1*/ /*fake_override*/ val classList: org.w3c.dom.DOMTokenList
        public open override /*1*/ /*fake_override*/ fun <get-classList>(): org.w3c.dom.DOMTokenList
    public open override /*1*/ /*fake_override*/ var className: kotlin.String
        public open override /*1*/ /*fake_override*/ fun <get-className>(): kotlin.String
        public open override /*1*/ /*fake_override*/ fun <set-className>(/*0*/ <set-?>: kotlin.String): kotlin.Unit
    public open override /*1*/ /*fake_override*/ val clientHeight: kotlin.Int
        public open override /*1*/ /*fake_override*/ fun <get-clientHeight>(): kotlin.Int
    public open override /*1*/ /*fake_override*/ val clientLeft: kotlin.Int
        public open override /*1*/ /*fake_override*/ fun <get-clientLeft>(): kotlin.Int
    public open override /*1*/ /*fake_override*/ val clientTop: kotlin.Int
        public open override /*1*/ /*fake_override*/ fun <get-clientTop>(): kotlin.Int
    public open override /*1*/ /*fake_override*/ val clientWidth: kotlin.Int
        public open override /*1*/ /*fake_override*/ fun <get-clientWidth>(): kotlin.Int
    public open override /*1*/ /*fake_override*/ val correspondingElement: org.w3c.dom.svg.SVGElement?
        public open override /*1*/ /*fake_override*/ fun <get-correspondingElement>(): org.w3c.dom.svg.SVGElement?
    public open override /*1*/ /*fake_override*/ val correspondingUseElement: org.w3c.dom.svg.SVGUseElement?
        public open override /*1*/ /*fake_override*/ fun <get-correspondingUseElement>(): org.w3c.dom.svg.SVGUseElement?
    public open var crossOrigin: kotlin.String?
        public open fun <get-crossOrigin>(): kotlin.String?
        public open fun <set-crossOrigin>(/*0*/ <set-?>: kotlin.String?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ val dataset: org.w3c.dom.DOMStringMap
        public open override /*1*/ /*fake_override*/ fun <get-dataset>(): org.w3c.dom.DOMStringMap
    public open override /*1*/ /*fake_override*/ val firstChild: org.w3c.dom.Node?
        public open override /*1*/ /*fake_override*/ fun <get-firstChild>(): org.w3c.dom.Node?
    public open override /*1*/ /*fake_override*/ val firstElementChild: org.w3c.dom.Element?
        public open override /*1*/ /*fake_override*/ fun <get-firstElementChild>(): org.w3c.dom.Element?
    public abstract override /*1*/ /*fake_override*/ val href: org.w3c.dom.svg.SVGAnimatedString
        public abstract override /*1*/ /*fake_override*/ fun <get-href>(): org.w3c.dom.svg.SVGAnimatedString
    public open override /*1*/ /*fake_override*/ var id: kotlin.String
        public open override /*1*/ /*fake_override*/ fun <get-id>(): kotlin.String
        public open override /*1*/ /*fake_override*/ fun <set-id>(/*0*/ <set-?>: kotlin.String): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var innerHTML: kotlin.String
        public open override /*1*/ /*fake_override*/ fun <get-innerHTML>(): kotlin.String
        public open override /*1*/ /*fake_override*/ fun <set-innerHTML>(/*0*/ <set-?>: kotlin.String): kotlin.Unit
    public open override /*1*/ /*fake_override*/ val isConnected: kotlin.Boolean
        public open override /*1*/ /*fake_override*/ fun <get-isConnected>(): kotlin.Boolean
    public open override /*1*/ /*fake_override*/ val lastChild: org.w3c.dom.Node?
        public open override /*1*/ /*fake_override*/ fun <get-lastChild>(): org.w3c.dom.Node?
    public open override /*1*/ /*fake_override*/ val lastElementChild: org.w3c.dom.Element?
        public open override /*1*/ /*fake_override*/ fun <get-lastElementChild>(): org.w3c.dom.Element?
    public open override /*1*/ /*fake_override*/ val localName: kotlin.String
        public open override /*1*/ /*fake_override*/ fun <get-localName>(): kotlin.String
    public open override /*1*/ /*fake_override*/ val namespaceURI: kotlin.String?
        public open override /*1*/ /*fake_override*/ fun <get-namespaceURI>(): kotlin.String?
    public open override /*1*/ /*fake_override*/ val nextElementSibling: org.w3c.dom.Element?
        public open override /*1*/ /*fake_override*/ fun <get-nextElementSibling>(): org.w3c.dom.Element?
    public open override /*1*/ /*fake_override*/ val nextSibling: org.w3c.dom.Node?
        public open override /*1*/ /*fake_override*/ fun <get-nextSibling>(): org.w3c.dom.Node?
    public open override /*1*/ /*fake_override*/ val nodeName: kotlin.String
        public open override /*1*/ /*fake_override*/ fun <get-nodeName>(): kotlin.String
    public open override /*1*/ /*fake_override*/ val nodeType: kotlin.Short
        public open override /*1*/ /*fake_override*/ fun <get-nodeType>(): kotlin.Short
    public open override /*1*/ /*fake_override*/ var nodeValue: kotlin.String?
        public open override /*1*/ /*fake_override*/ fun <get-nodeValue>(): kotlin.String?
        public open override /*1*/ /*fake_override*/ fun <set-nodeValue>(/*0*/ <set-?>: kotlin.String?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onabort: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onabort>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onabort>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onblur: ((org.w3c.dom.events.FocusEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onblur>(): ((org.w3c.dom.events.FocusEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onblur>(/*0*/ value: ((org.w3c.dom.events.FocusEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var oncancel: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-oncancel>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-oncancel>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var oncanplay: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-oncanplay>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-oncanplay>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var oncanplaythrough: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-oncanplaythrough>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-oncanplaythrough>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onchange: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onchange>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onchange>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onclick: ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onclick>(): ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onclick>(/*0*/ value: ((org.w3c.dom.events.MouseEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onclose: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onclose>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onclose>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var oncontextmenu: ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-oncontextmenu>(): ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-oncontextmenu>(/*0*/ value: ((org.w3c.dom.events.MouseEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var oncuechange: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-oncuechange>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-oncuechange>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ondblclick: ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ondblclick>(): ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ondblclick>(/*0*/ value: ((org.w3c.dom.events.MouseEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ondrag: ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ondrag>(): ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ondrag>(/*0*/ value: ((org.w3c.dom.DragEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ondragend: ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ondragend>(): ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ondragend>(/*0*/ value: ((org.w3c.dom.DragEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ondragenter: ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ondragenter>(): ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ondragenter>(/*0*/ value: ((org.w3c.dom.DragEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ondragexit: ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ondragexit>(): ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ondragexit>(/*0*/ value: ((org.w3c.dom.DragEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ondragleave: ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ondragleave>(): ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ondragleave>(/*0*/ value: ((org.w3c.dom.DragEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ondragover: ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ondragover>(): ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ondragover>(/*0*/ value: ((org.w3c.dom.DragEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ondragstart: ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ondragstart>(): ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ondragstart>(/*0*/ value: ((org.w3c.dom.DragEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ondrop: ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ondrop>(): ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ondrop>(/*0*/ value: ((org.w3c.dom.DragEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ondurationchange: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ondurationchange>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ondurationchange>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onemptied: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onemptied>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onemptied>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onended: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onended>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onended>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onerror: ((dynamic, kotlin.String, kotlin.Int, kotlin.Int, kotlin.Any?) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onerror>(): ((dynamic, kotlin.String, kotlin.Int, kotlin.Int, kotlin.Any?) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onerror>(/*0*/ value: ((dynamic, kotlin.String, kotlin.Int, kotlin.Int, kotlin.Any?) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onfocus: ((org.w3c.dom.events.FocusEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onfocus>(): ((org.w3c.dom.events.FocusEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onfocus>(/*0*/ value: ((org.w3c.dom.events.FocusEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ongotpointercapture: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ongotpointercapture>(): ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ongotpointercapture>(/*0*/ value: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var oninput: ((org.w3c.dom.events.InputEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-oninput>(): ((org.w3c.dom.events.InputEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-oninput>(/*0*/ value: ((org.w3c.dom.events.InputEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var oninvalid: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-oninvalid>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-oninvalid>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onkeydown: ((org.w3c.dom.events.KeyboardEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onkeydown>(): ((org.w3c.dom.events.KeyboardEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onkeydown>(/*0*/ value: ((org.w3c.dom.events.KeyboardEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onkeypress: ((org.w3c.dom.events.KeyboardEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onkeypress>(): ((org.w3c.dom.events.KeyboardEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onkeypress>(/*0*/ value: ((org.w3c.dom.events.KeyboardEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onkeyup: ((org.w3c.dom.events.KeyboardEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onkeyup>(): ((org.w3c.dom.events.KeyboardEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onkeyup>(/*0*/ value: ((org.w3c.dom.events.KeyboardEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onload: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onload>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onload>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onloadeddata: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onloadeddata>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onloadeddata>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onloadedmetadata: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onloadedmetadata>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onloadedmetadata>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onloadend: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onloadend>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onloadend>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onloadstart: ((org.w3c.xhr.ProgressEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onloadstart>(): ((org.w3c.xhr.ProgressEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onloadstart>(/*0*/ value: ((org.w3c.xhr.ProgressEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onlostpointercapture: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onlostpointercapture>(): ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onlostpointercapture>(/*0*/ value: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onmousedown: ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onmousedown>(): ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onmousedown>(/*0*/ value: ((org.w3c.dom.events.MouseEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onmouseenter: ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onmouseenter>(): ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onmouseenter>(/*0*/ value: ((org.w3c.dom.events.MouseEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onmouseleave: ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onmouseleave>(): ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onmouseleave>(/*0*/ value: ((org.w3c.dom.events.MouseEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onmousemove: ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onmousemove>(): ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onmousemove>(/*0*/ value: ((org.w3c.dom.events.MouseEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onmouseout: ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onmouseout>(): ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onmouseout>(/*0*/ value: ((org.w3c.dom.events.MouseEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onmouseover: ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onmouseover>(): ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onmouseover>(/*0*/ value: ((org.w3c.dom.events.MouseEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onmouseup: ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onmouseup>(): ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onmouseup>(/*0*/ value: ((org.w3c.dom.events.MouseEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onpause: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onpause>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onpause>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onplay: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onplay>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onplay>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onplaying: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onplaying>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onplaying>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onpointercancel: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onpointercancel>(): ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onpointercancel>(/*0*/ value: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onpointerdown: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onpointerdown>(): ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onpointerdown>(/*0*/ value: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onpointerenter: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onpointerenter>(): ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onpointerenter>(/*0*/ value: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onpointerleave: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onpointerleave>(): ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onpointerleave>(/*0*/ value: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onpointermove: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onpointermove>(): ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onpointermove>(/*0*/ value: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onpointerout: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onpointerout>(): ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onpointerout>(/*0*/ value: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onpointerover: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onpointerover>(): ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onpointerover>(/*0*/ value: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onpointerup: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onpointerup>(): ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onpointerup>(/*0*/ value: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onprogress: ((org.w3c.xhr.ProgressEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onprogress>(): ((org.w3c.xhr.ProgressEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onprogress>(/*0*/ value: ((org.w3c.xhr.ProgressEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onratechange: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onratechange>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onratechange>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onreset: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onreset>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onreset>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onresize: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onresize>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onresize>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onscroll: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onscroll>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onscroll>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onseeked: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onseeked>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onseeked>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onseeking: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onseeking>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onseeking>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onselect: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onselect>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onselect>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onshow: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onshow>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onshow>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onstalled: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onstalled>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onstalled>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onsubmit: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onsubmit>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onsubmit>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onsuspend: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onsuspend>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onsuspend>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ontimeupdate: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ontimeupdate>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ontimeupdate>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ontoggle: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ontoggle>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ontoggle>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onvolumechange: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onvolumechange>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onvolumechange>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onwaiting: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onwaiting>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onwaiting>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onwheel: ((org.w3c.dom.events.WheelEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onwheel>(): ((org.w3c.dom.events.WheelEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onwheel>(/*0*/ value: ((org.w3c.dom.events.WheelEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var outerHTML: kotlin.String
        public open override /*1*/ /*fake_override*/ fun <get-outerHTML>(): kotlin.String
        public open override /*1*/ /*fake_override*/ fun <set-outerHTML>(/*0*/ <set-?>: kotlin.String): kotlin.Unit
    public open override /*1*/ /*fake_override*/ val ownerDocument: org.w3c.dom.Document?
        public open override /*1*/ /*fake_override*/ fun <get-ownerDocument>(): org.w3c.dom.Document?
    public open override /*1*/ /*fake_override*/ val ownerSVGElement: org.w3c.dom.svg.SVGSVGElement?
        public open override /*1*/ /*fake_override*/ fun <get-ownerSVGElement>(): org.w3c.dom.svg.SVGSVGElement?
    public open override /*1*/ /*fake_override*/ val parentElement: org.w3c.dom.Element?
        public open override /*1*/ /*fake_override*/ fun <get-parentElement>(): org.w3c.dom.Element?
    public open override /*1*/ /*fake_override*/ val parentNode: org.w3c.dom.Node?
        public open override /*1*/ /*fake_override*/ fun <get-parentNode>(): org.w3c.dom.Node?
    public open override /*1*/ /*fake_override*/ val prefix: kotlin.String?
        public open override /*1*/ /*fake_override*/ fun <get-prefix>(): kotlin.String?
    public open override /*1*/ /*fake_override*/ val previousElementSibling: org.w3c.dom.Element?
        public open override /*1*/ /*fake_override*/ fun <get-previousElementSibling>(): org.w3c.dom.Element?
    public open override /*1*/ /*fake_override*/ val previousSibling: org.w3c.dom.Node?
        public open override /*1*/ /*fake_override*/ fun <get-previousSibling>(): org.w3c.dom.Node?
    public open override /*1*/ /*fake_override*/ val scrollHeight: kotlin.Int
        public open override /*1*/ /*fake_override*/ fun <get-scrollHeight>(): kotlin.Int
    public open override /*1*/ /*fake_override*/ var scrollLeft: kotlin.Double
        public open override /*1*/ /*fake_override*/ fun <get-scrollLeft>(): kotlin.Double
        public open override /*1*/ /*fake_override*/ fun <set-scrollLeft>(/*0*/ <set-?>: kotlin.Double): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var scrollTop: kotlin.Double
        public open override /*1*/ /*fake_override*/ fun <get-scrollTop>(): kotlin.Double
        public open override /*1*/ /*fake_override*/ fun <set-scrollTop>(/*0*/ <set-?>: kotlin.Double): kotlin.Unit
    public open override /*1*/ /*fake_override*/ val scrollWidth: kotlin.Int
        public open override /*1*/ /*fake_override*/ fun <get-scrollWidth>(): kotlin.Int
    public open override /*1*/ /*fake_override*/ val shadowRoot: org.w3c.dom.ShadowRoot?
        public open override /*1*/ /*fake_override*/ fun <get-shadowRoot>(): org.w3c.dom.ShadowRoot?
    public open override /*1*/ /*fake_override*/ var slot: kotlin.String
        public open override /*1*/ /*fake_override*/ fun <get-slot>(): kotlin.String
        public open override /*1*/ /*fake_override*/ fun <set-slot>(/*0*/ <set-?>: kotlin.String): kotlin.Unit
    public abstract override /*1*/ /*fake_override*/ val style: org.w3c.dom.css.CSSStyleDeclaration
        public abstract override /*1*/ /*fake_override*/ fun <get-style>(): org.w3c.dom.css.CSSStyleDeclaration
    public open override /*1*/ /*fake_override*/ var tabIndex: kotlin.Int
        public open override /*1*/ /*fake_override*/ fun <get-tabIndex>(): kotlin.Int
        public open override /*1*/ /*fake_override*/ fun <set-tabIndex>(/*0*/ <set-?>: kotlin.Int): kotlin.Unit
    public open override /*1*/ /*fake_override*/ val tagName: kotlin.String
        public open override /*1*/ /*fake_override*/ fun <get-tagName>(): kotlin.String
    public open override /*1*/ /*fake_override*/ var textContent: kotlin.String?
        public open override /*1*/ /*fake_override*/ fun <get-textContent>(): kotlin.String?
        public open override /*1*/ /*fake_override*/ fun <set-textContent>(/*0*/ <set-?>: kotlin.String?): kotlin.Unit
    public open var type: kotlin.String
        public open fun <get-type>(): kotlin.String
        public open fun <set-type>(/*0*/ <set-?>: kotlin.String): kotlin.Unit
    public open override /*1*/ /*fake_override*/ val viewportElement: org.w3c.dom.svg.SVGElement?
        public open override /*1*/ /*fake_override*/ fun <get-viewportElement>(): org.w3c.dom.svg.SVGElement?
    public final override /*1*/ /*fake_override*/ fun addEventListener(/*0*/ type: kotlin.String, /*1*/ callback: ((org.w3c.dom.events.Event) -> kotlin.Unit)?, /*2*/ options: dynamic = ...): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun addEventListener(/*0*/ type: kotlin.String, /*1*/ callback: org.w3c.dom.events.EventListener?, /*2*/ options: dynamic = ...): kotlin.Unit
    public abstract override /*1*/ /*fake_override*/ fun after(/*0*/ vararg nodes: dynamic /*kotlin.Array<out dynamic>*/): kotlin.Unit
    public abstract override /*1*/ /*fake_override*/ fun append(/*0*/ vararg nodes: dynamic /*kotlin.Array<out dynamic>*/): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun appendChild(/*0*/ node: org.w3c.dom.Node): org.w3c.dom.Node
    public final override /*1*/ /*fake_override*/ fun attachShadow(/*0*/ init: org.w3c.dom.ShadowRootInit): org.w3c.dom.ShadowRoot
    public abstract override /*1*/ /*fake_override*/ fun before(/*0*/ vararg nodes: dynamic /*kotlin.Array<out dynamic>*/): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun blur(): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun cloneNode(/*0*/ deep: kotlin.Boolean = ...): org.w3c.dom.Node
    public final override /*1*/ /*fake_override*/ fun closest(/*0*/ selectors: kotlin.String): org.w3c.dom.Element?
    public final override /*1*/ /*fake_override*/ fun compareDocumentPosition(/*0*/ other: org.w3c.dom.Node): kotlin.Short
    public final override /*1*/ /*fake_override*/ fun contains(/*0*/ other: org.w3c.dom.Node?): kotlin.Boolean
    public abstract override /*1*/ /*fake_override*/ fun convertPointFromNode(/*0*/ point: org.w3c.dom.DOMPointInit, /*1*/ from: dynamic, /*2*/ options: org.w3c.dom.ConvertCoordinateOptions = ...): org.w3c.dom.DOMPoint
    public abstract override /*1*/ /*fake_override*/ fun convertQuadFromNode(/*0*/ quad: dynamic, /*1*/ from: dynamic, /*2*/ options: org.w3c.dom.ConvertCoordinateOptions = ...): org.w3c.dom.DOMQuad
    public abstract override /*1*/ /*fake_override*/ fun convertRectFromNode(/*0*/ rect: org.w3c.dom.DOMRectReadOnly, /*1*/ from: dynamic, /*2*/ options: org.w3c.dom.ConvertCoordinateOptions = ...): org.w3c.dom.DOMQuad
    public final override /*1*/ /*fake_override*/ fun dispatchEvent(/*0*/ event: org.w3c.dom.events.Event): kotlin.Boolean
    public open override /*3*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
    public final override /*1*/ /*fake_override*/ fun focus(): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun getAttribute(/*0*/ qualifiedName: kotlin.String): kotlin.String?
    public final override /*1*/ /*fake_override*/ fun getAttributeNS(/*0*/ namespace: kotlin.String?, /*1*/ localName: kotlin.String): kotlin.String?
    public final override /*1*/ /*fake_override*/ fun getAttributeNames(): kotlin.Array<kotlin.String>
    public final override /*1*/ /*fake_override*/ fun getAttributeNode(/*0*/ qualifiedName: kotlin.String): org.w3c.dom.Attr?
    public final override /*1*/ /*fake_override*/ fun getAttributeNodeNS(/*0*/ namespace: kotlin.String?, /*1*/ localName: kotlin.String): org.w3c.dom.Attr?
    public final override /*1*/ /*fake_override*/ fun getBoundingClientRect(): org.w3c.dom.DOMRect
    public abstract override /*1*/ /*fake_override*/ fun getBoxQuads(/*0*/ options: org.w3c.dom.BoxQuadOptions = ...): kotlin.Array<org.w3c.dom.DOMQuad>
    public final override /*1*/ /*fake_override*/ fun getClientRects(): kotlin.Array<org.w3c.dom.DOMRect>
    public final override /*1*/ /*fake_override*/ fun getElementsByClassName(/*0*/ classNames: kotlin.String): org.w3c.dom.HTMLCollection
    public final override /*1*/ /*fake_override*/ fun getElementsByTagName(/*0*/ qualifiedName: kotlin.String): org.w3c.dom.HTMLCollection
    public final override /*1*/ /*fake_override*/ fun getElementsByTagNameNS(/*0*/ namespace: kotlin.String?, /*1*/ localName: kotlin.String): org.w3c.dom.HTMLCollection
    public final override /*1*/ /*fake_override*/ fun getRootNode(/*0*/ options: org.w3c.dom.GetRootNodeOptions = ...): org.w3c.dom.Node
    public final override /*1*/ /*fake_override*/ fun hasAttribute(/*0*/ qualifiedName: kotlin.String): kotlin.Boolean
    public final override /*1*/ /*fake_override*/ fun hasAttributeNS(/*0*/ namespace: kotlin.String?, /*1*/ localName: kotlin.String): kotlin.Boolean
    public final override /*1*/ /*fake_override*/ fun hasAttributes(): kotlin.Boolean
    public final override /*1*/ /*fake_override*/ fun hasChildNodes(): kotlin.Boolean
    public final override /*1*/ /*fake_override*/ fun hasPointerCapture(/*0*/ pointerId: kotlin.Int): kotlin.Boolean
    public open override /*3*/ /*fake_override*/ fun hashCode(): kotlin.Int
    public final override /*1*/ /*fake_override*/ fun insertAdjacentElement(/*0*/ where: kotlin.String, /*1*/ element: org.w3c.dom.Element): org.w3c.dom.Element?
    public final override /*1*/ /*fake_override*/ fun insertAdjacentHTML(/*0*/ position: kotlin.String, /*1*/ text: kotlin.String): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun insertAdjacentText(/*0*/ where: kotlin.String, /*1*/ data: kotlin.String): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun insertBefore(/*0*/ node: org.w3c.dom.Node, /*1*/ child: org.w3c.dom.Node?): org.w3c.dom.Node
    public final override /*1*/ /*fake_override*/ fun isDefaultNamespace(/*0*/ namespace: kotlin.String?): kotlin.Boolean
    public final override /*1*/ /*fake_override*/ fun isEqualNode(/*0*/ otherNode: org.w3c.dom.Node?): kotlin.Boolean
    public final override /*1*/ /*fake_override*/ fun isSameNode(/*0*/ otherNode: org.w3c.dom.Node?): kotlin.Boolean
    public final override /*1*/ /*fake_override*/ fun lookupNamespaceURI(/*0*/ prefix: kotlin.String?): kotlin.String?
    public final override /*1*/ /*fake_override*/ fun lookupPrefix(/*0*/ namespace: kotlin.String?): kotlin.String?
    public final override /*1*/ /*fake_override*/ fun matches(/*0*/ selectors: kotlin.String): kotlin.Boolean
    public final override /*1*/ /*fake_override*/ fun normalize(): kotlin.Unit
    public abstract override /*1*/ /*fake_override*/ fun prepend(/*0*/ vararg nodes: dynamic /*kotlin.Array<out dynamic>*/): kotlin.Unit
    public abstract override /*1*/ /*fake_override*/ fun querySelector(/*0*/ selectors: kotlin.String): org.w3c.dom.Element?
    public abstract override /*1*/ /*fake_override*/ fun querySelectorAll(/*0*/ selectors: kotlin.String): org.w3c.dom.NodeList
    public final override /*1*/ /*fake_override*/ fun releasePointerCapture(/*0*/ pointerId: kotlin.Int): kotlin.Unit
    public abstract override /*1*/ /*fake_override*/ fun remove(): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun removeAttribute(/*0*/ qualifiedName: kotlin.String): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun removeAttributeNS(/*0*/ namespace: kotlin.String?, /*1*/ localName: kotlin.String): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun removeAttributeNode(/*0*/ attr: org.w3c.dom.Attr): org.w3c.dom.Attr
    public final override /*1*/ /*fake_override*/ fun removeChild(/*0*/ child: org.w3c.dom.Node): org.w3c.dom.Node
    public final override /*1*/ /*fake_override*/ fun removeEventListener(/*0*/ type: kotlin.String, /*1*/ callback: ((org.w3c.dom.events.Event) -> kotlin.Unit)?, /*2*/ options: dynamic = ...): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun removeEventListener(/*0*/ type: kotlin.String, /*1*/ callback: org.w3c.dom.events.EventListener?, /*2*/ options: dynamic = ...): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun replaceChild(/*0*/ node: org.w3c.dom.Node, /*1*/ child: org.w3c.dom.Node): org.w3c.dom.Node
    public abstract override /*1*/ /*fake_override*/ fun replaceWith(/*0*/ vararg nodes: dynamic /*kotlin.Array<out dynamic>*/): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun requestFullscreen(): kotlin.js.Promise<kotlin.Unit>
    public final override /*1*/ /*fake_override*/ fun scroll(/*0*/ x: kotlin.Double, /*1*/ y: kotlin.Double): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun scroll(/*0*/ options: org.w3c.dom.ScrollToOptions = ...): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun scrollBy(/*0*/ x: kotlin.Double, /*1*/ y: kotlin.Double): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun scrollBy(/*0*/ options: org.w3c.dom.ScrollToOptions = ...): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun scrollIntoView(): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun scrollIntoView(/*0*/ arg: dynamic): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun scrollTo(/*0*/ x: kotlin.Double, /*1*/ y: kotlin.Double): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun scrollTo(/*0*/ options: org.w3c.dom.ScrollToOptions = ...): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun setAttribute(/*0*/ qualifiedName: kotlin.String, /*1*/ value: kotlin.String): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun setAttributeNS(/*0*/ namespace: kotlin.String?, /*1*/ qualifiedName: kotlin.String, /*2*/ value: kotlin.String): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun setAttributeNode(/*0*/ attr: org.w3c.dom.Attr): org.w3c.dom.Attr?
    public final override /*1*/ /*fake_override*/ fun setAttributeNodeNS(/*0*/ attr: org.w3c.dom.Attr): org.w3c.dom.Attr?
    public final override /*1*/ /*fake_override*/ fun setPointerCapture(/*0*/ pointerId: kotlin.Int): kotlin.Unit
    public open override /*3*/ /*fake_override*/ fun toString(): kotlin.String
    public final override /*1*/ /*fake_override*/ fun webkitMatchesSelector(/*0*/ selectors: kotlin.String): kotlin.Boolean

    public companion object Companion {
        /*primary*/ private constructor Companion()
        public final val ATTRIBUTE_NODE: kotlin.Short
            public final fun <get-ATTRIBUTE_NODE>(): kotlin.Short
        public final val CDATA_SECTION_NODE: kotlin.Short
            public final fun <get-CDATA_SECTION_NODE>(): kotlin.Short
        public final val COMMENT_NODE: kotlin.Short
            public final fun <get-COMMENT_NODE>(): kotlin.Short
        public final val DOCUMENT_FRAGMENT_NODE: kotlin.Short
            public final fun <get-DOCUMENT_FRAGMENT_NODE>(): kotlin.Short
        public final val DOCUMENT_NODE: kotlin.Short
            public final fun <get-DOCUMENT_NODE>(): kotlin.Short
        public final val DOCUMENT_POSITION_CONTAINED_BY: kotlin.Short
            public final fun <get-DOCUMENT_POSITION_CONTAINED_BY>(): kotlin.Short
        public final val DOCUMENT_POSITION_CONTAINS: kotlin.Short
            public final fun <get-DOCUMENT_POSITION_CONTAINS>(): kotlin.Short
        public final val DOCUMENT_POSITION_DISCONNECTED: kotlin.Short
            public final fun <get-DOCUMENT_POSITION_DISCONNECTED>(): kotlin.Short
        public final val DOCUMENT_POSITION_FOLLOWING: kotlin.Short
            public final fun <get-DOCUMENT_POSITION_FOLLOWING>(): kotlin.Short
        public final val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: kotlin.Short
            public final fun <get-DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC>(): kotlin.Short
        public final val DOCUMENT_POSITION_PRECEDING: kotlin.Short
            public final fun <get-DOCUMENT_POSITION_PRECEDING>(): kotlin.Short
        public final val DOCUMENT_TYPE_NODE: kotlin.Short
            public final fun <get-DOCUMENT_TYPE_NODE>(): kotlin.Short
        public final val ELEMENT_NODE: kotlin.Short
            public final fun <get-ELEMENT_NODE>(): kotlin.Short
        public final val ENTITY_NODE: kotlin.Short
            public final fun <get-ENTITY_NODE>(): kotlin.Short
        public final val ENTITY_REFERENCE_NODE: kotlin.Short
            public final fun <get-ENTITY_REFERENCE_NODE>(): kotlin.Short
        public final val NOTATION_NODE: kotlin.Short
            public final fun <get-NOTATION_NODE>(): kotlin.Short
        public final val PROCESSING_INSTRUCTION_NODE: kotlin.Short
            public final fun <get-PROCESSING_INSTRUCTION_NODE>(): kotlin.Short
        public final val TEXT_NODE: kotlin.Short
            public final fun <get-TEXT_NODE>(): kotlin.Short
        public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
        public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
        public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
    }
}

public abstract external class SVGSolidcolorElement : org.w3c.dom.svg.SVGElement {
    /*primary*/ public constructor SVGSolidcolorElement()
    public open override /*1*/ /*fake_override*/ val assignedSlot: org.w3c.dom.HTMLSlotElement?
        public open override /*1*/ /*fake_override*/ fun <get-assignedSlot>(): org.w3c.dom.HTMLSlotElement?
    public open override /*1*/ /*fake_override*/ val attributes: org.w3c.dom.NamedNodeMap
        public open override /*1*/ /*fake_override*/ fun <get-attributes>(): org.w3c.dom.NamedNodeMap
    public open override /*1*/ /*fake_override*/ val baseURI: kotlin.String
        public open override /*1*/ /*fake_override*/ fun <get-baseURI>(): kotlin.String
    public abstract override /*1*/ /*fake_override*/ val childElementCount: kotlin.Int
        public abstract override /*1*/ /*fake_override*/ fun <get-childElementCount>(): kotlin.Int
    public open override /*1*/ /*fake_override*/ val childNodes: org.w3c.dom.NodeList
        public open override /*1*/ /*fake_override*/ fun <get-childNodes>(): org.w3c.dom.NodeList
    public abstract override /*1*/ /*fake_override*/ val children: org.w3c.dom.HTMLCollection
        public abstract override /*1*/ /*fake_override*/ fun <get-children>(): org.w3c.dom.HTMLCollection
    public open override /*1*/ /*fake_override*/ val classList: org.w3c.dom.DOMTokenList
        public open override /*1*/ /*fake_override*/ fun <get-classList>(): org.w3c.dom.DOMTokenList
    public open override /*1*/ /*fake_override*/ var className: kotlin.String
        public open override /*1*/ /*fake_override*/ fun <get-className>(): kotlin.String
        public open override /*1*/ /*fake_override*/ fun <set-className>(/*0*/ <set-?>: kotlin.String): kotlin.Unit
    public open override /*1*/ /*fake_override*/ val clientHeight: kotlin.Int
        public open override /*1*/ /*fake_override*/ fun <get-clientHeight>(): kotlin.Int
    public open override /*1*/ /*fake_override*/ val clientLeft: kotlin.Int
        public open override /*1*/ /*fake_override*/ fun <get-clientLeft>(): kotlin.Int
    public open override /*1*/ /*fake_override*/ val clientTop: kotlin.Int
        public open override /*1*/ /*fake_override*/ fun <get-clientTop>(): kotlin.Int
    public open override /*1*/ /*fake_override*/ val clientWidth: kotlin.Int
        public open override /*1*/ /*fake_override*/ fun <get-clientWidth>(): kotlin.Int
    public open override /*1*/ /*fake_override*/ val correspondingElement: org.w3c.dom.svg.SVGElement?
        public open override /*1*/ /*fake_override*/ fun <get-correspondingElement>(): org.w3c.dom.svg.SVGElement?
    public open override /*1*/ /*fake_override*/ val correspondingUseElement: org.w3c.dom.svg.SVGUseElement?
        public open override /*1*/ /*fake_override*/ fun <get-correspondingUseElement>(): org.w3c.dom.svg.SVGUseElement?
    public open override /*1*/ /*fake_override*/ val dataset: org.w3c.dom.DOMStringMap
        public open override /*1*/ /*fake_override*/ fun <get-dataset>(): org.w3c.dom.DOMStringMap
    public open override /*1*/ /*fake_override*/ val firstChild: org.w3c.dom.Node?
        public open override /*1*/ /*fake_override*/ fun <get-firstChild>(): org.w3c.dom.Node?
    public open override /*1*/ /*fake_override*/ val firstElementChild: org.w3c.dom.Element?
        public open override /*1*/ /*fake_override*/ fun <get-firstElementChild>(): org.w3c.dom.Element?
    public open override /*1*/ /*fake_override*/ var id: kotlin.String
        public open override /*1*/ /*fake_override*/ fun <get-id>(): kotlin.String
        public open override /*1*/ /*fake_override*/ fun <set-id>(/*0*/ <set-?>: kotlin.String): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var innerHTML: kotlin.String
        public open override /*1*/ /*fake_override*/ fun <get-innerHTML>(): kotlin.String
        public open override /*1*/ /*fake_override*/ fun <set-innerHTML>(/*0*/ <set-?>: kotlin.String): kotlin.Unit
    public open override /*1*/ /*fake_override*/ val isConnected: kotlin.Boolean
        public open override /*1*/ /*fake_override*/ fun <get-isConnected>(): kotlin.Boolean
    public open override /*1*/ /*fake_override*/ val lastChild: org.w3c.dom.Node?
        public open override /*1*/ /*fake_override*/ fun <get-lastChild>(): org.w3c.dom.Node?
    public open override /*1*/ /*fake_override*/ val lastElementChild: org.w3c.dom.Element?
        public open override /*1*/ /*fake_override*/ fun <get-lastElementChild>(): org.w3c.dom.Element?
    public open override /*1*/ /*fake_override*/ val localName: kotlin.String
        public open override /*1*/ /*fake_override*/ fun <get-localName>(): kotlin.String
    public open override /*1*/ /*fake_override*/ val namespaceURI: kotlin.String?
        public open override /*1*/ /*fake_override*/ fun <get-namespaceURI>(): kotlin.String?
    public open override /*1*/ /*fake_override*/ val nextElementSibling: org.w3c.dom.Element?
        public open override /*1*/ /*fake_override*/ fun <get-nextElementSibling>(): org.w3c.dom.Element?
    public open override /*1*/ /*fake_override*/ val nextSibling: org.w3c.dom.Node?
        public open override /*1*/ /*fake_override*/ fun <get-nextSibling>(): org.w3c.dom.Node?
    public open override /*1*/ /*fake_override*/ val nodeName: kotlin.String
        public open override /*1*/ /*fake_override*/ fun <get-nodeName>(): kotlin.String
    public open override /*1*/ /*fake_override*/ val nodeType: kotlin.Short
        public open override /*1*/ /*fake_override*/ fun <get-nodeType>(): kotlin.Short
    public open override /*1*/ /*fake_override*/ var nodeValue: kotlin.String?
        public open override /*1*/ /*fake_override*/ fun <get-nodeValue>(): kotlin.String?
        public open override /*1*/ /*fake_override*/ fun <set-nodeValue>(/*0*/ <set-?>: kotlin.String?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onabort: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onabort>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onabort>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onblur: ((org.w3c.dom.events.FocusEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onblur>(): ((org.w3c.dom.events.FocusEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onblur>(/*0*/ value: ((org.w3c.dom.events.FocusEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var oncancel: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-oncancel>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-oncancel>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var oncanplay: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-oncanplay>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-oncanplay>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var oncanplaythrough: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-oncanplaythrough>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-oncanplaythrough>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onchange: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onchange>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onchange>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onclick: ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onclick>(): ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onclick>(/*0*/ value: ((org.w3c.dom.events.MouseEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onclose: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onclose>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onclose>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var oncontextmenu: ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-oncontextmenu>(): ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-oncontextmenu>(/*0*/ value: ((org.w3c.dom.events.MouseEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var oncuechange: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-oncuechange>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-oncuechange>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ondblclick: ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ondblclick>(): ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ondblclick>(/*0*/ value: ((org.w3c.dom.events.MouseEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ondrag: ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ondrag>(): ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ondrag>(/*0*/ value: ((org.w3c.dom.DragEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ondragend: ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ondragend>(): ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ondragend>(/*0*/ value: ((org.w3c.dom.DragEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ondragenter: ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ondragenter>(): ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ondragenter>(/*0*/ value: ((org.w3c.dom.DragEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ondragexit: ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ondragexit>(): ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ondragexit>(/*0*/ value: ((org.w3c.dom.DragEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ondragleave: ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ondragleave>(): ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ondragleave>(/*0*/ value: ((org.w3c.dom.DragEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ondragover: ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ondragover>(): ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ondragover>(/*0*/ value: ((org.w3c.dom.DragEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ondragstart: ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ondragstart>(): ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ondragstart>(/*0*/ value: ((org.w3c.dom.DragEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ondrop: ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ondrop>(): ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ondrop>(/*0*/ value: ((org.w3c.dom.DragEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ondurationchange: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ondurationchange>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ondurationchange>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onemptied: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onemptied>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onemptied>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onended: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onended>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onended>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onerror: ((dynamic, kotlin.String, kotlin.Int, kotlin.Int, kotlin.Any?) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onerror>(): ((dynamic, kotlin.String, kotlin.Int, kotlin.Int, kotlin.Any?) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onerror>(/*0*/ value: ((dynamic, kotlin.String, kotlin.Int, kotlin.Int, kotlin.Any?) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onfocus: ((org.w3c.dom.events.FocusEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onfocus>(): ((org.w3c.dom.events.FocusEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onfocus>(/*0*/ value: ((org.w3c.dom.events.FocusEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ongotpointercapture: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ongotpointercapture>(): ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ongotpointercapture>(/*0*/ value: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var oninput: ((org.w3c.dom.events.InputEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-oninput>(): ((org.w3c.dom.events.InputEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-oninput>(/*0*/ value: ((org.w3c.dom.events.InputEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var oninvalid: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-oninvalid>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-oninvalid>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onkeydown: ((org.w3c.dom.events.KeyboardEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onkeydown>(): ((org.w3c.dom.events.KeyboardEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onkeydown>(/*0*/ value: ((org.w3c.dom.events.KeyboardEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onkeypress: ((org.w3c.dom.events.KeyboardEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onkeypress>(): ((org.w3c.dom.events.KeyboardEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onkeypress>(/*0*/ value: ((org.w3c.dom.events.KeyboardEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onkeyup: ((org.w3c.dom.events.KeyboardEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onkeyup>(): ((org.w3c.dom.events.KeyboardEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onkeyup>(/*0*/ value: ((org.w3c.dom.events.KeyboardEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onload: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onload>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onload>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onloadeddata: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onloadeddata>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onloadeddata>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onloadedmetadata: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onloadedmetadata>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onloadedmetadata>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onloadend: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onloadend>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onloadend>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onloadstart: ((org.w3c.xhr.ProgressEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onloadstart>(): ((org.w3c.xhr.ProgressEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onloadstart>(/*0*/ value: ((org.w3c.xhr.ProgressEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onlostpointercapture: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onlostpointercapture>(): ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onlostpointercapture>(/*0*/ value: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onmousedown: ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onmousedown>(): ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onmousedown>(/*0*/ value: ((org.w3c.dom.events.MouseEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onmouseenter: ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onmouseenter>(): ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onmouseenter>(/*0*/ value: ((org.w3c.dom.events.MouseEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onmouseleave: ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onmouseleave>(): ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onmouseleave>(/*0*/ value: ((org.w3c.dom.events.MouseEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onmousemove: ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onmousemove>(): ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onmousemove>(/*0*/ value: ((org.w3c.dom.events.MouseEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onmouseout: ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onmouseout>(): ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onmouseout>(/*0*/ value: ((org.w3c.dom.events.MouseEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onmouseover: ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onmouseover>(): ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onmouseover>(/*0*/ value: ((org.w3c.dom.events.MouseEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onmouseup: ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onmouseup>(): ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onmouseup>(/*0*/ value: ((org.w3c.dom.events.MouseEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onpause: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onpause>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onpause>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onplay: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onplay>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onplay>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onplaying: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onplaying>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onplaying>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onpointercancel: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onpointercancel>(): ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onpointercancel>(/*0*/ value: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onpointerdown: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onpointerdown>(): ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onpointerdown>(/*0*/ value: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onpointerenter: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onpointerenter>(): ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onpointerenter>(/*0*/ value: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onpointerleave: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onpointerleave>(): ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onpointerleave>(/*0*/ value: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onpointermove: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onpointermove>(): ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onpointermove>(/*0*/ value: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onpointerout: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onpointerout>(): ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onpointerout>(/*0*/ value: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onpointerover: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onpointerover>(): ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onpointerover>(/*0*/ value: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onpointerup: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onpointerup>(): ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onpointerup>(/*0*/ value: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onprogress: ((org.w3c.xhr.ProgressEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onprogress>(): ((org.w3c.xhr.ProgressEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onprogress>(/*0*/ value: ((org.w3c.xhr.ProgressEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onratechange: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onratechange>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onratechange>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onreset: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onreset>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onreset>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onresize: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onresize>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onresize>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onscroll: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onscroll>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onscroll>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onseeked: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onseeked>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onseeked>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onseeking: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onseeking>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onseeking>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onselect: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onselect>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onselect>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onshow: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onshow>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onshow>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onstalled: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onstalled>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onstalled>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onsubmit: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onsubmit>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onsubmit>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onsuspend: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onsuspend>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onsuspend>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ontimeupdate: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ontimeupdate>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ontimeupdate>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ontoggle: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ontoggle>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ontoggle>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onvolumechange: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onvolumechange>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onvolumechange>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onwaiting: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onwaiting>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onwaiting>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onwheel: ((org.w3c.dom.events.WheelEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onwheel>(): ((org.w3c.dom.events.WheelEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onwheel>(/*0*/ value: ((org.w3c.dom.events.WheelEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var outerHTML: kotlin.String
        public open override /*1*/ /*fake_override*/ fun <get-outerHTML>(): kotlin.String
        public open override /*1*/ /*fake_override*/ fun <set-outerHTML>(/*0*/ <set-?>: kotlin.String): kotlin.Unit
    public open override /*1*/ /*fake_override*/ val ownerDocument: org.w3c.dom.Document?
        public open override /*1*/ /*fake_override*/ fun <get-ownerDocument>(): org.w3c.dom.Document?
    public open override /*1*/ /*fake_override*/ val ownerSVGElement: org.w3c.dom.svg.SVGSVGElement?
        public open override /*1*/ /*fake_override*/ fun <get-ownerSVGElement>(): org.w3c.dom.svg.SVGSVGElement?
    public open override /*1*/ /*fake_override*/ val parentElement: org.w3c.dom.Element?
        public open override /*1*/ /*fake_override*/ fun <get-parentElement>(): org.w3c.dom.Element?
    public open override /*1*/ /*fake_override*/ val parentNode: org.w3c.dom.Node?
        public open override /*1*/ /*fake_override*/ fun <get-parentNode>(): org.w3c.dom.Node?
    public open override /*1*/ /*fake_override*/ val prefix: kotlin.String?
        public open override /*1*/ /*fake_override*/ fun <get-prefix>(): kotlin.String?
    public open override /*1*/ /*fake_override*/ val previousElementSibling: org.w3c.dom.Element?
        public open override /*1*/ /*fake_override*/ fun <get-previousElementSibling>(): org.w3c.dom.Element?
    public open override /*1*/ /*fake_override*/ val previousSibling: org.w3c.dom.Node?
        public open override /*1*/ /*fake_override*/ fun <get-previousSibling>(): org.w3c.dom.Node?
    public open override /*1*/ /*fake_override*/ val scrollHeight: kotlin.Int
        public open override /*1*/ /*fake_override*/ fun <get-scrollHeight>(): kotlin.Int
    public open override /*1*/ /*fake_override*/ var scrollLeft: kotlin.Double
        public open override /*1*/ /*fake_override*/ fun <get-scrollLeft>(): kotlin.Double
        public open override /*1*/ /*fake_override*/ fun <set-scrollLeft>(/*0*/ <set-?>: kotlin.Double): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var scrollTop: kotlin.Double
        public open override /*1*/ /*fake_override*/ fun <get-scrollTop>(): kotlin.Double
        public open override /*1*/ /*fake_override*/ fun <set-scrollTop>(/*0*/ <set-?>: kotlin.Double): kotlin.Unit
    public open override /*1*/ /*fake_override*/ val scrollWidth: kotlin.Int
        public open override /*1*/ /*fake_override*/ fun <get-scrollWidth>(): kotlin.Int
    public open override /*1*/ /*fake_override*/ val shadowRoot: org.w3c.dom.ShadowRoot?
        public open override /*1*/ /*fake_override*/ fun <get-shadowRoot>(): org.w3c.dom.ShadowRoot?
    public open override /*1*/ /*fake_override*/ var slot: kotlin.String
        public open override /*1*/ /*fake_override*/ fun <get-slot>(): kotlin.String
        public open override /*1*/ /*fake_override*/ fun <set-slot>(/*0*/ <set-?>: kotlin.String): kotlin.Unit
    public abstract override /*1*/ /*fake_override*/ val style: org.w3c.dom.css.CSSStyleDeclaration
        public abstract override /*1*/ /*fake_override*/ fun <get-style>(): org.w3c.dom.css.CSSStyleDeclaration
    public open override /*1*/ /*fake_override*/ var tabIndex: kotlin.Int
        public open override /*1*/ /*fake_override*/ fun <get-tabIndex>(): kotlin.Int
        public open override /*1*/ /*fake_override*/ fun <set-tabIndex>(/*0*/ <set-?>: kotlin.Int): kotlin.Unit
    public open override /*1*/ /*fake_override*/ val tagName: kotlin.String
        public open override /*1*/ /*fake_override*/ fun <get-tagName>(): kotlin.String
    public open override /*1*/ /*fake_override*/ var textContent: kotlin.String?
        public open override /*1*/ /*fake_override*/ fun <get-textContent>(): kotlin.String?
        public open override /*1*/ /*fake_override*/ fun <set-textContent>(/*0*/ <set-?>: kotlin.String?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ val viewportElement: org.w3c.dom.svg.SVGElement?
        public open override /*1*/ /*fake_override*/ fun <get-viewportElement>(): org.w3c.dom.svg.SVGElement?
    public final override /*1*/ /*fake_override*/ fun addEventListener(/*0*/ type: kotlin.String, /*1*/ callback: ((org.w3c.dom.events.Event) -> kotlin.Unit)?, /*2*/ options: dynamic = ...): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun addEventListener(/*0*/ type: kotlin.String, /*1*/ callback: org.w3c.dom.events.EventListener?, /*2*/ options: dynamic = ...): kotlin.Unit
    public abstract override /*1*/ /*fake_override*/ fun after(/*0*/ vararg nodes: dynamic /*kotlin.Array<out dynamic>*/): kotlin.Unit
    public abstract override /*1*/ /*fake_override*/ fun append(/*0*/ vararg nodes: dynamic /*kotlin.Array<out dynamic>*/): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun appendChild(/*0*/ node: org.w3c.dom.Node): org.w3c.dom.Node
    public final override /*1*/ /*fake_override*/ fun attachShadow(/*0*/ init: org.w3c.dom.ShadowRootInit): org.w3c.dom.ShadowRoot
    public abstract override /*1*/ /*fake_override*/ fun before(/*0*/ vararg nodes: dynamic /*kotlin.Array<out dynamic>*/): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun blur(): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun cloneNode(/*0*/ deep: kotlin.Boolean = ...): org.w3c.dom.Node
    public final override /*1*/ /*fake_override*/ fun closest(/*0*/ selectors: kotlin.String): org.w3c.dom.Element?
    public final override /*1*/ /*fake_override*/ fun compareDocumentPosition(/*0*/ other: org.w3c.dom.Node): kotlin.Short
    public final override /*1*/ /*fake_override*/ fun contains(/*0*/ other: org.w3c.dom.Node?): kotlin.Boolean
    public abstract override /*1*/ /*fake_override*/ fun convertPointFromNode(/*0*/ point: org.w3c.dom.DOMPointInit, /*1*/ from: dynamic, /*2*/ options: org.w3c.dom.ConvertCoordinateOptions = ...): org.w3c.dom.DOMPoint
    public abstract override /*1*/ /*fake_override*/ fun convertQuadFromNode(/*0*/ quad: dynamic, /*1*/ from: dynamic, /*2*/ options: org.w3c.dom.ConvertCoordinateOptions = ...): org.w3c.dom.DOMQuad
    public abstract override /*1*/ /*fake_override*/ fun convertRectFromNode(/*0*/ rect: org.w3c.dom.DOMRectReadOnly, /*1*/ from: dynamic, /*2*/ options: org.w3c.dom.ConvertCoordinateOptions = ...): org.w3c.dom.DOMQuad
    public final override /*1*/ /*fake_override*/ fun dispatchEvent(/*0*/ event: org.w3c.dom.events.Event): kotlin.Boolean
    public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
    public final override /*1*/ /*fake_override*/ fun focus(): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun getAttribute(/*0*/ qualifiedName: kotlin.String): kotlin.String?
    public final override /*1*/ /*fake_override*/ fun getAttributeNS(/*0*/ namespace: kotlin.String?, /*1*/ localName: kotlin.String): kotlin.String?
    public final override /*1*/ /*fake_override*/ fun getAttributeNames(): kotlin.Array<kotlin.String>
    public final override /*1*/ /*fake_override*/ fun getAttributeNode(/*0*/ qualifiedName: kotlin.String): org.w3c.dom.Attr?
    public final override /*1*/ /*fake_override*/ fun getAttributeNodeNS(/*0*/ namespace: kotlin.String?, /*1*/ localName: kotlin.String): org.w3c.dom.Attr?
    public final override /*1*/ /*fake_override*/ fun getBoundingClientRect(): org.w3c.dom.DOMRect
    public abstract override /*1*/ /*fake_override*/ fun getBoxQuads(/*0*/ options: org.w3c.dom.BoxQuadOptions = ...): kotlin.Array<org.w3c.dom.DOMQuad>
    public final override /*1*/ /*fake_override*/ fun getClientRects(): kotlin.Array<org.w3c.dom.DOMRect>
    public final override /*1*/ /*fake_override*/ fun getElementsByClassName(/*0*/ classNames: kotlin.String): org.w3c.dom.HTMLCollection
    public final override /*1*/ /*fake_override*/ fun getElementsByTagName(/*0*/ qualifiedName: kotlin.String): org.w3c.dom.HTMLCollection
    public final override /*1*/ /*fake_override*/ fun getElementsByTagNameNS(/*0*/ namespace: kotlin.String?, /*1*/ localName: kotlin.String): org.w3c.dom.HTMLCollection
    public final override /*1*/ /*fake_override*/ fun getRootNode(/*0*/ options: org.w3c.dom.GetRootNodeOptions = ...): org.w3c.dom.Node
    public final override /*1*/ /*fake_override*/ fun hasAttribute(/*0*/ qualifiedName: kotlin.String): kotlin.Boolean
    public final override /*1*/ /*fake_override*/ fun hasAttributeNS(/*0*/ namespace: kotlin.String?, /*1*/ localName: kotlin.String): kotlin.Boolean
    public final override /*1*/ /*fake_override*/ fun hasAttributes(): kotlin.Boolean
    public final override /*1*/ /*fake_override*/ fun hasChildNodes(): kotlin.Boolean
    public final override /*1*/ /*fake_override*/ fun hasPointerCapture(/*0*/ pointerId: kotlin.Int): kotlin.Boolean
    public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
    public final override /*1*/ /*fake_override*/ fun insertAdjacentElement(/*0*/ where: kotlin.String, /*1*/ element: org.w3c.dom.Element): org.w3c.dom.Element?
    public final override /*1*/ /*fake_override*/ fun insertAdjacentHTML(/*0*/ position: kotlin.String, /*1*/ text: kotlin.String): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun insertAdjacentText(/*0*/ where: kotlin.String, /*1*/ data: kotlin.String): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun insertBefore(/*0*/ node: org.w3c.dom.Node, /*1*/ child: org.w3c.dom.Node?): org.w3c.dom.Node
    public final override /*1*/ /*fake_override*/ fun isDefaultNamespace(/*0*/ namespace: kotlin.String?): kotlin.Boolean
    public final override /*1*/ /*fake_override*/ fun isEqualNode(/*0*/ otherNode: org.w3c.dom.Node?): kotlin.Boolean
    public final override /*1*/ /*fake_override*/ fun isSameNode(/*0*/ otherNode: org.w3c.dom.Node?): kotlin.Boolean
    public final override /*1*/ /*fake_override*/ fun lookupNamespaceURI(/*0*/ prefix: kotlin.String?): kotlin.String?
    public final override /*1*/ /*fake_override*/ fun lookupPrefix(/*0*/ namespace: kotlin.String?): kotlin.String?
    public final override /*1*/ /*fake_override*/ fun matches(/*0*/ selectors: kotlin.String): kotlin.Boolean
    public final override /*1*/ /*fake_override*/ fun normalize(): kotlin.Unit
    public abstract override /*1*/ /*fake_override*/ fun prepend(/*0*/ vararg nodes: dynamic /*kotlin.Array<out dynamic>*/): kotlin.Unit
    public abstract override /*1*/ /*fake_override*/ fun querySelector(/*0*/ selectors: kotlin.String): org.w3c.dom.Element?
    public abstract override /*1*/ /*fake_override*/ fun querySelectorAll(/*0*/ selectors: kotlin.String): org.w3c.dom.NodeList
    public final override /*1*/ /*fake_override*/ fun releasePointerCapture(/*0*/ pointerId: kotlin.Int): kotlin.Unit
    public abstract override /*1*/ /*fake_override*/ fun remove(): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun removeAttribute(/*0*/ qualifiedName: kotlin.String): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun removeAttributeNS(/*0*/ namespace: kotlin.String?, /*1*/ localName: kotlin.String): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun removeAttributeNode(/*0*/ attr: org.w3c.dom.Attr): org.w3c.dom.Attr
    public final override /*1*/ /*fake_override*/ fun removeChild(/*0*/ child: org.w3c.dom.Node): org.w3c.dom.Node
    public final override /*1*/ /*fake_override*/ fun removeEventListener(/*0*/ type: kotlin.String, /*1*/ callback: ((org.w3c.dom.events.Event) -> kotlin.Unit)?, /*2*/ options: dynamic = ...): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun removeEventListener(/*0*/ type: kotlin.String, /*1*/ callback: org.w3c.dom.events.EventListener?, /*2*/ options: dynamic = ...): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun replaceChild(/*0*/ node: org.w3c.dom.Node, /*1*/ child: org.w3c.dom.Node): org.w3c.dom.Node
    public abstract override /*1*/ /*fake_override*/ fun replaceWith(/*0*/ vararg nodes: dynamic /*kotlin.Array<out dynamic>*/): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun requestFullscreen(): kotlin.js.Promise<kotlin.Unit>
    public final override /*1*/ /*fake_override*/ fun scroll(/*0*/ x: kotlin.Double, /*1*/ y: kotlin.Double): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun scroll(/*0*/ options: org.w3c.dom.ScrollToOptions = ...): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun scrollBy(/*0*/ x: kotlin.Double, /*1*/ y: kotlin.Double): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun scrollBy(/*0*/ options: org.w3c.dom.ScrollToOptions = ...): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun scrollIntoView(): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun scrollIntoView(/*0*/ arg: dynamic): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun scrollTo(/*0*/ x: kotlin.Double, /*1*/ y: kotlin.Double): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun scrollTo(/*0*/ options: org.w3c.dom.ScrollToOptions = ...): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun setAttribute(/*0*/ qualifiedName: kotlin.String, /*1*/ value: kotlin.String): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun setAttributeNS(/*0*/ namespace: kotlin.String?, /*1*/ qualifiedName: kotlin.String, /*2*/ value: kotlin.String): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun setAttributeNode(/*0*/ attr: org.w3c.dom.Attr): org.w3c.dom.Attr?
    public final override /*1*/ /*fake_override*/ fun setAttributeNodeNS(/*0*/ attr: org.w3c.dom.Attr): org.w3c.dom.Attr?
    public final override /*1*/ /*fake_override*/ fun setPointerCapture(/*0*/ pointerId: kotlin.Int): kotlin.Unit
    public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
    public final override /*1*/ /*fake_override*/ fun webkitMatchesSelector(/*0*/ selectors: kotlin.String): kotlin.Boolean

    public companion object Companion {
        /*primary*/ private constructor Companion()
        public final val ATTRIBUTE_NODE: kotlin.Short
            public final fun <get-ATTRIBUTE_NODE>(): kotlin.Short
        public final val CDATA_SECTION_NODE: kotlin.Short
            public final fun <get-CDATA_SECTION_NODE>(): kotlin.Short
        public final val COMMENT_NODE: kotlin.Short
            public final fun <get-COMMENT_NODE>(): kotlin.Short
        public final val DOCUMENT_FRAGMENT_NODE: kotlin.Short
            public final fun <get-DOCUMENT_FRAGMENT_NODE>(): kotlin.Short
        public final val DOCUMENT_NODE: kotlin.Short
            public final fun <get-DOCUMENT_NODE>(): kotlin.Short
        public final val DOCUMENT_POSITION_CONTAINED_BY: kotlin.Short
            public final fun <get-DOCUMENT_POSITION_CONTAINED_BY>(): kotlin.Short
        public final val DOCUMENT_POSITION_CONTAINS: kotlin.Short
            public final fun <get-DOCUMENT_POSITION_CONTAINS>(): kotlin.Short
        public final val DOCUMENT_POSITION_DISCONNECTED: kotlin.Short
            public final fun <get-DOCUMENT_POSITION_DISCONNECTED>(): kotlin.Short
        public final val DOCUMENT_POSITION_FOLLOWING: kotlin.Short
            public final fun <get-DOCUMENT_POSITION_FOLLOWING>(): kotlin.Short
        public final val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: kotlin.Short
            public final fun <get-DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC>(): kotlin.Short
        public final val DOCUMENT_POSITION_PRECEDING: kotlin.Short
            public final fun <get-DOCUMENT_POSITION_PRECEDING>(): kotlin.Short
        public final val DOCUMENT_TYPE_NODE: kotlin.Short
            public final fun <get-DOCUMENT_TYPE_NODE>(): kotlin.Short
        public final val ELEMENT_NODE: kotlin.Short
            public final fun <get-ELEMENT_NODE>(): kotlin.Short
        public final val ENTITY_NODE: kotlin.Short
            public final fun <get-ENTITY_NODE>(): kotlin.Short
        public final val ENTITY_REFERENCE_NODE: kotlin.Short
            public final fun <get-ENTITY_REFERENCE_NODE>(): kotlin.Short
        public final val NOTATION_NODE: kotlin.Short
            public final fun <get-NOTATION_NODE>(): kotlin.Short
        public final val PROCESSING_INSTRUCTION_NODE: kotlin.Short
            public final fun <get-PROCESSING_INSTRUCTION_NODE>(): kotlin.Short
        public final val TEXT_NODE: kotlin.Short
            public final fun <get-TEXT_NODE>(): kotlin.Short
        public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
        public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
        public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
    }
}

public abstract external class SVGStopElement : org.w3c.dom.svg.SVGElement {
    /*primary*/ public constructor SVGStopElement()
    public open override /*1*/ /*fake_override*/ val assignedSlot: org.w3c.dom.HTMLSlotElement?
        public open override /*1*/ /*fake_override*/ fun <get-assignedSlot>(): org.w3c.dom.HTMLSlotElement?
    public open override /*1*/ /*fake_override*/ val attributes: org.w3c.dom.NamedNodeMap
        public open override /*1*/ /*fake_override*/ fun <get-attributes>(): org.w3c.dom.NamedNodeMap
    public open override /*1*/ /*fake_override*/ val baseURI: kotlin.String
        public open override /*1*/ /*fake_override*/ fun <get-baseURI>(): kotlin.String
    public abstract override /*1*/ /*fake_override*/ val childElementCount: kotlin.Int
        public abstract override /*1*/ /*fake_override*/ fun <get-childElementCount>(): kotlin.Int
    public open override /*1*/ /*fake_override*/ val childNodes: org.w3c.dom.NodeList
        public open override /*1*/ /*fake_override*/ fun <get-childNodes>(): org.w3c.dom.NodeList
    public abstract override /*1*/ /*fake_override*/ val children: org.w3c.dom.HTMLCollection
        public abstract override /*1*/ /*fake_override*/ fun <get-children>(): org.w3c.dom.HTMLCollection
    public open override /*1*/ /*fake_override*/ val classList: org.w3c.dom.DOMTokenList
        public open override /*1*/ /*fake_override*/ fun <get-classList>(): org.w3c.dom.DOMTokenList
    public open override /*1*/ /*fake_override*/ var className: kotlin.String
        public open override /*1*/ /*fake_override*/ fun <get-className>(): kotlin.String
        public open override /*1*/ /*fake_override*/ fun <set-className>(/*0*/ <set-?>: kotlin.String): kotlin.Unit
    public open override /*1*/ /*fake_override*/ val clientHeight: kotlin.Int
        public open override /*1*/ /*fake_override*/ fun <get-clientHeight>(): kotlin.Int
    public open override /*1*/ /*fake_override*/ val clientLeft: kotlin.Int
        public open override /*1*/ /*fake_override*/ fun <get-clientLeft>(): kotlin.Int
    public open override /*1*/ /*fake_override*/ val clientTop: kotlin.Int
        public open override /*1*/ /*fake_override*/ fun <get-clientTop>(): kotlin.Int
    public open override /*1*/ /*fake_override*/ val clientWidth: kotlin.Int
        public open override /*1*/ /*fake_override*/ fun <get-clientWidth>(): kotlin.Int
    public open override /*1*/ /*fake_override*/ val correspondingElement: org.w3c.dom.svg.SVGElement?
        public open override /*1*/ /*fake_override*/ fun <get-correspondingElement>(): org.w3c.dom.svg.SVGElement?
    public open override /*1*/ /*fake_override*/ val correspondingUseElement: org.w3c.dom.svg.SVGUseElement?
        public open override /*1*/ /*fake_override*/ fun <get-correspondingUseElement>(): org.w3c.dom.svg.SVGUseElement?
    public open override /*1*/ /*fake_override*/ val dataset: org.w3c.dom.DOMStringMap
        public open override /*1*/ /*fake_override*/ fun <get-dataset>(): org.w3c.dom.DOMStringMap
    public open override /*1*/ /*fake_override*/ val firstChild: org.w3c.dom.Node?
        public open override /*1*/ /*fake_override*/ fun <get-firstChild>(): org.w3c.dom.Node?
    public open override /*1*/ /*fake_override*/ val firstElementChild: org.w3c.dom.Element?
        public open override /*1*/ /*fake_override*/ fun <get-firstElementChild>(): org.w3c.dom.Element?
    public open override /*1*/ /*fake_override*/ var id: kotlin.String
        public open override /*1*/ /*fake_override*/ fun <get-id>(): kotlin.String
        public open override /*1*/ /*fake_override*/ fun <set-id>(/*0*/ <set-?>: kotlin.String): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var innerHTML: kotlin.String
        public open override /*1*/ /*fake_override*/ fun <get-innerHTML>(): kotlin.String
        public open override /*1*/ /*fake_override*/ fun <set-innerHTML>(/*0*/ <set-?>: kotlin.String): kotlin.Unit
    public open override /*1*/ /*fake_override*/ val isConnected: kotlin.Boolean
        public open override /*1*/ /*fake_override*/ fun <get-isConnected>(): kotlin.Boolean
    public open override /*1*/ /*fake_override*/ val lastChild: org.w3c.dom.Node?
        public open override /*1*/ /*fake_override*/ fun <get-lastChild>(): org.w3c.dom.Node?
    public open override /*1*/ /*fake_override*/ val lastElementChild: org.w3c.dom.Element?
        public open override /*1*/ /*fake_override*/ fun <get-lastElementChild>(): org.w3c.dom.Element?
    public open override /*1*/ /*fake_override*/ val localName: kotlin.String
        public open override /*1*/ /*fake_override*/ fun <get-localName>(): kotlin.String
    public open override /*1*/ /*fake_override*/ val namespaceURI: kotlin.String?
        public open override /*1*/ /*fake_override*/ fun <get-namespaceURI>(): kotlin.String?
    public open override /*1*/ /*fake_override*/ val nextElementSibling: org.w3c.dom.Element?
        public open override /*1*/ /*fake_override*/ fun <get-nextElementSibling>(): org.w3c.dom.Element?
    public open override /*1*/ /*fake_override*/ val nextSibling: org.w3c.dom.Node?
        public open override /*1*/ /*fake_override*/ fun <get-nextSibling>(): org.w3c.dom.Node?
    public open override /*1*/ /*fake_override*/ val nodeName: kotlin.String
        public open override /*1*/ /*fake_override*/ fun <get-nodeName>(): kotlin.String
    public open override /*1*/ /*fake_override*/ val nodeType: kotlin.Short
        public open override /*1*/ /*fake_override*/ fun <get-nodeType>(): kotlin.Short
    public open override /*1*/ /*fake_override*/ var nodeValue: kotlin.String?
        public open override /*1*/ /*fake_override*/ fun <get-nodeValue>(): kotlin.String?
        public open override /*1*/ /*fake_override*/ fun <set-nodeValue>(/*0*/ <set-?>: kotlin.String?): kotlin.Unit
    public open val offset: org.w3c.dom.svg.SVGAnimatedNumber
        public open fun <get-offset>(): org.w3c.dom.svg.SVGAnimatedNumber
    public open override /*1*/ /*fake_override*/ var onabort: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onabort>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onabort>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onblur: ((org.w3c.dom.events.FocusEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onblur>(): ((org.w3c.dom.events.FocusEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onblur>(/*0*/ value: ((org.w3c.dom.events.FocusEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var oncancel: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-oncancel>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-oncancel>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var oncanplay: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-oncanplay>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-oncanplay>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var oncanplaythrough: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-oncanplaythrough>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-oncanplaythrough>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onchange: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onchange>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onchange>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onclick: ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onclick>(): ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onclick>(/*0*/ value: ((org.w3c.dom.events.MouseEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onclose: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onclose>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onclose>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var oncontextmenu: ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-oncontextmenu>(): ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-oncontextmenu>(/*0*/ value: ((org.w3c.dom.events.MouseEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var oncuechange: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-oncuechange>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-oncuechange>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ondblclick: ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ondblclick>(): ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ondblclick>(/*0*/ value: ((org.w3c.dom.events.MouseEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ondrag: ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ondrag>(): ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ondrag>(/*0*/ value: ((org.w3c.dom.DragEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ondragend: ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ondragend>(): ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ondragend>(/*0*/ value: ((org.w3c.dom.DragEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ondragenter: ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ondragenter>(): ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ondragenter>(/*0*/ value: ((org.w3c.dom.DragEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ondragexit: ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ondragexit>(): ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ondragexit>(/*0*/ value: ((org.w3c.dom.DragEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ondragleave: ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ondragleave>(): ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ondragleave>(/*0*/ value: ((org.w3c.dom.DragEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ondragover: ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ondragover>(): ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ondragover>(/*0*/ value: ((org.w3c.dom.DragEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ondragstart: ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ondragstart>(): ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ondragstart>(/*0*/ value: ((org.w3c.dom.DragEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ondrop: ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ondrop>(): ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ondrop>(/*0*/ value: ((org.w3c.dom.DragEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ondurationchange: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ondurationchange>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ondurationchange>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onemptied: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onemptied>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onemptied>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onended: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onended>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onended>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onerror: ((dynamic, kotlin.String, kotlin.Int, kotlin.Int, kotlin.Any?) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onerror>(): ((dynamic, kotlin.String, kotlin.Int, kotlin.Int, kotlin.Any?) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onerror>(/*0*/ value: ((dynamic, kotlin.String, kotlin.Int, kotlin.Int, kotlin.Any?) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onfocus: ((org.w3c.dom.events.FocusEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onfocus>(): ((org.w3c.dom.events.FocusEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onfocus>(/*0*/ value: ((org.w3c.dom.events.FocusEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ongotpointercapture: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ongotpointercapture>(): ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ongotpointercapture>(/*0*/ value: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var oninput: ((org.w3c.dom.events.InputEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-oninput>(): ((org.w3c.dom.events.InputEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-oninput>(/*0*/ value: ((org.w3c.dom.events.InputEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var oninvalid: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-oninvalid>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-oninvalid>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onkeydown: ((org.w3c.dom.events.KeyboardEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onkeydown>(): ((org.w3c.dom.events.KeyboardEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onkeydown>(/*0*/ value: ((org.w3c.dom.events.KeyboardEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onkeypress: ((org.w3c.dom.events.KeyboardEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onkeypress>(): ((org.w3c.dom.events.KeyboardEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onkeypress>(/*0*/ value: ((org.w3c.dom.events.KeyboardEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onkeyup: ((org.w3c.dom.events.KeyboardEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onkeyup>(): ((org.w3c.dom.events.KeyboardEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onkeyup>(/*0*/ value: ((org.w3c.dom.events.KeyboardEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onload: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onload>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onload>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onloadeddata: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onloadeddata>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onloadeddata>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onloadedmetadata: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onloadedmetadata>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onloadedmetadata>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onloadend: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onloadend>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onloadend>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onloadstart: ((org.w3c.xhr.ProgressEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onloadstart>(): ((org.w3c.xhr.ProgressEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onloadstart>(/*0*/ value: ((org.w3c.xhr.ProgressEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onlostpointercapture: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onlostpointercapture>(): ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onlostpointercapture>(/*0*/ value: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onmousedown: ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onmousedown>(): ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onmousedown>(/*0*/ value: ((org.w3c.dom.events.MouseEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onmouseenter: ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onmouseenter>(): ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onmouseenter>(/*0*/ value: ((org.w3c.dom.events.MouseEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onmouseleave: ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onmouseleave>(): ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onmouseleave>(/*0*/ value: ((org.w3c.dom.events.MouseEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onmousemove: ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onmousemove>(): ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onmousemove>(/*0*/ value: ((org.w3c.dom.events.MouseEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onmouseout: ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onmouseout>(): ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onmouseout>(/*0*/ value: ((org.w3c.dom.events.MouseEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onmouseover: ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onmouseover>(): ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onmouseover>(/*0*/ value: ((org.w3c.dom.events.MouseEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onmouseup: ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onmouseup>(): ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onmouseup>(/*0*/ value: ((org.w3c.dom.events.MouseEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onpause: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onpause>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onpause>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onplay: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onplay>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onplay>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onplaying: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onplaying>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onplaying>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onpointercancel: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onpointercancel>(): ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onpointercancel>(/*0*/ value: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onpointerdown: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onpointerdown>(): ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onpointerdown>(/*0*/ value: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onpointerenter: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onpointerenter>(): ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onpointerenter>(/*0*/ value: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onpointerleave: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onpointerleave>(): ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onpointerleave>(/*0*/ value: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onpointermove: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onpointermove>(): ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onpointermove>(/*0*/ value: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onpointerout: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onpointerout>(): ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onpointerout>(/*0*/ value: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onpointerover: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onpointerover>(): ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onpointerover>(/*0*/ value: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onpointerup: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onpointerup>(): ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onpointerup>(/*0*/ value: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onprogress: ((org.w3c.xhr.ProgressEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onprogress>(): ((org.w3c.xhr.ProgressEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onprogress>(/*0*/ value: ((org.w3c.xhr.ProgressEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onratechange: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onratechange>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onratechange>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onreset: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onreset>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onreset>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onresize: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onresize>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onresize>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onscroll: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onscroll>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onscroll>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onseeked: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onseeked>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onseeked>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onseeking: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onseeking>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onseeking>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onselect: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onselect>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onselect>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onshow: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onshow>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onshow>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onstalled: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onstalled>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onstalled>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onsubmit: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onsubmit>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onsubmit>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onsuspend: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onsuspend>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onsuspend>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ontimeupdate: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ontimeupdate>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ontimeupdate>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ontoggle: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ontoggle>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ontoggle>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onvolumechange: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onvolumechange>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onvolumechange>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onwaiting: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onwaiting>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onwaiting>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onwheel: ((org.w3c.dom.events.WheelEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onwheel>(): ((org.w3c.dom.events.WheelEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onwheel>(/*0*/ value: ((org.w3c.dom.events.WheelEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var outerHTML: kotlin.String
        public open override /*1*/ /*fake_override*/ fun <get-outerHTML>(): kotlin.String
        public open override /*1*/ /*fake_override*/ fun <set-outerHTML>(/*0*/ <set-?>: kotlin.String): kotlin.Unit
    public open override /*1*/ /*fake_override*/ val ownerDocument: org.w3c.dom.Document?
        public open override /*1*/ /*fake_override*/ fun <get-ownerDocument>(): org.w3c.dom.Document?
    public open override /*1*/ /*fake_override*/ val ownerSVGElement: org.w3c.dom.svg.SVGSVGElement?
        public open override /*1*/ /*fake_override*/ fun <get-ownerSVGElement>(): org.w3c.dom.svg.SVGSVGElement?
    public open override /*1*/ /*fake_override*/ val parentElement: org.w3c.dom.Element?
        public open override /*1*/ /*fake_override*/ fun <get-parentElement>(): org.w3c.dom.Element?
    public open override /*1*/ /*fake_override*/ val parentNode: org.w3c.dom.Node?
        public open override /*1*/ /*fake_override*/ fun <get-parentNode>(): org.w3c.dom.Node?
    public open override /*1*/ /*fake_override*/ val prefix: kotlin.String?
        public open override /*1*/ /*fake_override*/ fun <get-prefix>(): kotlin.String?
    public open override /*1*/ /*fake_override*/ val previousElementSibling: org.w3c.dom.Element?
        public open override /*1*/ /*fake_override*/ fun <get-previousElementSibling>(): org.w3c.dom.Element?
    public open override /*1*/ /*fake_override*/ val previousSibling: org.w3c.dom.Node?
        public open override /*1*/ /*fake_override*/ fun <get-previousSibling>(): org.w3c.dom.Node?
    public open override /*1*/ /*fake_override*/ val scrollHeight: kotlin.Int
        public open override /*1*/ /*fake_override*/ fun <get-scrollHeight>(): kotlin.Int
    public open override /*1*/ /*fake_override*/ var scrollLeft: kotlin.Double
        public open override /*1*/ /*fake_override*/ fun <get-scrollLeft>(): kotlin.Double
        public open override /*1*/ /*fake_override*/ fun <set-scrollLeft>(/*0*/ <set-?>: kotlin.Double): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var scrollTop: kotlin.Double
        public open override /*1*/ /*fake_override*/ fun <get-scrollTop>(): kotlin.Double
        public open override /*1*/ /*fake_override*/ fun <set-scrollTop>(/*0*/ <set-?>: kotlin.Double): kotlin.Unit
    public open override /*1*/ /*fake_override*/ val scrollWidth: kotlin.Int
        public open override /*1*/ /*fake_override*/ fun <get-scrollWidth>(): kotlin.Int
    public open override /*1*/ /*fake_override*/ val shadowRoot: org.w3c.dom.ShadowRoot?
        public open override /*1*/ /*fake_override*/ fun <get-shadowRoot>(): org.w3c.dom.ShadowRoot?
    public open override /*1*/ /*fake_override*/ var slot: kotlin.String
        public open override /*1*/ /*fake_override*/ fun <get-slot>(): kotlin.String
        public open override /*1*/ /*fake_override*/ fun <set-slot>(/*0*/ <set-?>: kotlin.String): kotlin.Unit
    public abstract override /*1*/ /*fake_override*/ val style: org.w3c.dom.css.CSSStyleDeclaration
        public abstract override /*1*/ /*fake_override*/ fun <get-style>(): org.w3c.dom.css.CSSStyleDeclaration
    public open override /*1*/ /*fake_override*/ var tabIndex: kotlin.Int
        public open override /*1*/ /*fake_override*/ fun <get-tabIndex>(): kotlin.Int
        public open override /*1*/ /*fake_override*/ fun <set-tabIndex>(/*0*/ <set-?>: kotlin.Int): kotlin.Unit
    public open override /*1*/ /*fake_override*/ val tagName: kotlin.String
        public open override /*1*/ /*fake_override*/ fun <get-tagName>(): kotlin.String
    public open override /*1*/ /*fake_override*/ var textContent: kotlin.String?
        public open override /*1*/ /*fake_override*/ fun <get-textContent>(): kotlin.String?
        public open override /*1*/ /*fake_override*/ fun <set-textContent>(/*0*/ <set-?>: kotlin.String?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ val viewportElement: org.w3c.dom.svg.SVGElement?
        public open override /*1*/ /*fake_override*/ fun <get-viewportElement>(): org.w3c.dom.svg.SVGElement?
    public final override /*1*/ /*fake_override*/ fun addEventListener(/*0*/ type: kotlin.String, /*1*/ callback: ((org.w3c.dom.events.Event) -> kotlin.Unit)?, /*2*/ options: dynamic = ...): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun addEventListener(/*0*/ type: kotlin.String, /*1*/ callback: org.w3c.dom.events.EventListener?, /*2*/ options: dynamic = ...): kotlin.Unit
    public abstract override /*1*/ /*fake_override*/ fun after(/*0*/ vararg nodes: dynamic /*kotlin.Array<out dynamic>*/): kotlin.Unit
    public abstract override /*1*/ /*fake_override*/ fun append(/*0*/ vararg nodes: dynamic /*kotlin.Array<out dynamic>*/): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun appendChild(/*0*/ node: org.w3c.dom.Node): org.w3c.dom.Node
    public final override /*1*/ /*fake_override*/ fun attachShadow(/*0*/ init: org.w3c.dom.ShadowRootInit): org.w3c.dom.ShadowRoot
    public abstract override /*1*/ /*fake_override*/ fun before(/*0*/ vararg nodes: dynamic /*kotlin.Array<out dynamic>*/): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun blur(): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun cloneNode(/*0*/ deep: kotlin.Boolean = ...): org.w3c.dom.Node
    public final override /*1*/ /*fake_override*/ fun closest(/*0*/ selectors: kotlin.String): org.w3c.dom.Element?
    public final override /*1*/ /*fake_override*/ fun compareDocumentPosition(/*0*/ other: org.w3c.dom.Node): kotlin.Short
    public final override /*1*/ /*fake_override*/ fun contains(/*0*/ other: org.w3c.dom.Node?): kotlin.Boolean
    public abstract override /*1*/ /*fake_override*/ fun convertPointFromNode(/*0*/ point: org.w3c.dom.DOMPointInit, /*1*/ from: dynamic, /*2*/ options: org.w3c.dom.ConvertCoordinateOptions = ...): org.w3c.dom.DOMPoint
    public abstract override /*1*/ /*fake_override*/ fun convertQuadFromNode(/*0*/ quad: dynamic, /*1*/ from: dynamic, /*2*/ options: org.w3c.dom.ConvertCoordinateOptions = ...): org.w3c.dom.DOMQuad
    public abstract override /*1*/ /*fake_override*/ fun convertRectFromNode(/*0*/ rect: org.w3c.dom.DOMRectReadOnly, /*1*/ from: dynamic, /*2*/ options: org.w3c.dom.ConvertCoordinateOptions = ...): org.w3c.dom.DOMQuad
    public final override /*1*/ /*fake_override*/ fun dispatchEvent(/*0*/ event: org.w3c.dom.events.Event): kotlin.Boolean
    public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
    public final override /*1*/ /*fake_override*/ fun focus(): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun getAttribute(/*0*/ qualifiedName: kotlin.String): kotlin.String?
    public final override /*1*/ /*fake_override*/ fun getAttributeNS(/*0*/ namespace: kotlin.String?, /*1*/ localName: kotlin.String): kotlin.String?
    public final override /*1*/ /*fake_override*/ fun getAttributeNames(): kotlin.Array<kotlin.String>
    public final override /*1*/ /*fake_override*/ fun getAttributeNode(/*0*/ qualifiedName: kotlin.String): org.w3c.dom.Attr?
    public final override /*1*/ /*fake_override*/ fun getAttributeNodeNS(/*0*/ namespace: kotlin.String?, /*1*/ localName: kotlin.String): org.w3c.dom.Attr?
    public final override /*1*/ /*fake_override*/ fun getBoundingClientRect(): org.w3c.dom.DOMRect
    public abstract override /*1*/ /*fake_override*/ fun getBoxQuads(/*0*/ options: org.w3c.dom.BoxQuadOptions = ...): kotlin.Array<org.w3c.dom.DOMQuad>
    public final override /*1*/ /*fake_override*/ fun getClientRects(): kotlin.Array<org.w3c.dom.DOMRect>
    public final override /*1*/ /*fake_override*/ fun getElementsByClassName(/*0*/ classNames: kotlin.String): org.w3c.dom.HTMLCollection
    public final override /*1*/ /*fake_override*/ fun getElementsByTagName(/*0*/ qualifiedName: kotlin.String): org.w3c.dom.HTMLCollection
    public final override /*1*/ /*fake_override*/ fun getElementsByTagNameNS(/*0*/ namespace: kotlin.String?, /*1*/ localName: kotlin.String): org.w3c.dom.HTMLCollection
    public final override /*1*/ /*fake_override*/ fun getRootNode(/*0*/ options: org.w3c.dom.GetRootNodeOptions = ...): org.w3c.dom.Node
    public final override /*1*/ /*fake_override*/ fun hasAttribute(/*0*/ qualifiedName: kotlin.String): kotlin.Boolean
    public final override /*1*/ /*fake_override*/ fun hasAttributeNS(/*0*/ namespace: kotlin.String?, /*1*/ localName: kotlin.String): kotlin.Boolean
    public final override /*1*/ /*fake_override*/ fun hasAttributes(): kotlin.Boolean
    public final override /*1*/ /*fake_override*/ fun hasChildNodes(): kotlin.Boolean
    public final override /*1*/ /*fake_override*/ fun hasPointerCapture(/*0*/ pointerId: kotlin.Int): kotlin.Boolean
    public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
    public final override /*1*/ /*fake_override*/ fun insertAdjacentElement(/*0*/ where: kotlin.String, /*1*/ element: org.w3c.dom.Element): org.w3c.dom.Element?
    public final override /*1*/ /*fake_override*/ fun insertAdjacentHTML(/*0*/ position: kotlin.String, /*1*/ text: kotlin.String): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun insertAdjacentText(/*0*/ where: kotlin.String, /*1*/ data: kotlin.String): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun insertBefore(/*0*/ node: org.w3c.dom.Node, /*1*/ child: org.w3c.dom.Node?): org.w3c.dom.Node
    public final override /*1*/ /*fake_override*/ fun isDefaultNamespace(/*0*/ namespace: kotlin.String?): kotlin.Boolean
    public final override /*1*/ /*fake_override*/ fun isEqualNode(/*0*/ otherNode: org.w3c.dom.Node?): kotlin.Boolean
    public final override /*1*/ /*fake_override*/ fun isSameNode(/*0*/ otherNode: org.w3c.dom.Node?): kotlin.Boolean
    public final override /*1*/ /*fake_override*/ fun lookupNamespaceURI(/*0*/ prefix: kotlin.String?): kotlin.String?
    public final override /*1*/ /*fake_override*/ fun lookupPrefix(/*0*/ namespace: kotlin.String?): kotlin.String?
    public final override /*1*/ /*fake_override*/ fun matches(/*0*/ selectors: kotlin.String): kotlin.Boolean
    public final override /*1*/ /*fake_override*/ fun normalize(): kotlin.Unit
    public abstract override /*1*/ /*fake_override*/ fun prepend(/*0*/ vararg nodes: dynamic /*kotlin.Array<out dynamic>*/): kotlin.Unit
    public abstract override /*1*/ /*fake_override*/ fun querySelector(/*0*/ selectors: kotlin.String): org.w3c.dom.Element?
    public abstract override /*1*/ /*fake_override*/ fun querySelectorAll(/*0*/ selectors: kotlin.String): org.w3c.dom.NodeList
    public final override /*1*/ /*fake_override*/ fun releasePointerCapture(/*0*/ pointerId: kotlin.Int): kotlin.Unit
    public abstract override /*1*/ /*fake_override*/ fun remove(): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun removeAttribute(/*0*/ qualifiedName: kotlin.String): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun removeAttributeNS(/*0*/ namespace: kotlin.String?, /*1*/ localName: kotlin.String): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun removeAttributeNode(/*0*/ attr: org.w3c.dom.Attr): org.w3c.dom.Attr
    public final override /*1*/ /*fake_override*/ fun removeChild(/*0*/ child: org.w3c.dom.Node): org.w3c.dom.Node
    public final override /*1*/ /*fake_override*/ fun removeEventListener(/*0*/ type: kotlin.String, /*1*/ callback: ((org.w3c.dom.events.Event) -> kotlin.Unit)?, /*2*/ options: dynamic = ...): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun removeEventListener(/*0*/ type: kotlin.String, /*1*/ callback: org.w3c.dom.events.EventListener?, /*2*/ options: dynamic = ...): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun replaceChild(/*0*/ node: org.w3c.dom.Node, /*1*/ child: org.w3c.dom.Node): org.w3c.dom.Node
    public abstract override /*1*/ /*fake_override*/ fun replaceWith(/*0*/ vararg nodes: dynamic /*kotlin.Array<out dynamic>*/): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun requestFullscreen(): kotlin.js.Promise<kotlin.Unit>
    public final override /*1*/ /*fake_override*/ fun scroll(/*0*/ x: kotlin.Double, /*1*/ y: kotlin.Double): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun scroll(/*0*/ options: org.w3c.dom.ScrollToOptions = ...): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun scrollBy(/*0*/ x: kotlin.Double, /*1*/ y: kotlin.Double): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun scrollBy(/*0*/ options: org.w3c.dom.ScrollToOptions = ...): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun scrollIntoView(): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun scrollIntoView(/*0*/ arg: dynamic): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun scrollTo(/*0*/ x: kotlin.Double, /*1*/ y: kotlin.Double): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun scrollTo(/*0*/ options: org.w3c.dom.ScrollToOptions = ...): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun setAttribute(/*0*/ qualifiedName: kotlin.String, /*1*/ value: kotlin.String): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun setAttributeNS(/*0*/ namespace: kotlin.String?, /*1*/ qualifiedName: kotlin.String, /*2*/ value: kotlin.String): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun setAttributeNode(/*0*/ attr: org.w3c.dom.Attr): org.w3c.dom.Attr?
    public final override /*1*/ /*fake_override*/ fun setAttributeNodeNS(/*0*/ attr: org.w3c.dom.Attr): org.w3c.dom.Attr?
    public final override /*1*/ /*fake_override*/ fun setPointerCapture(/*0*/ pointerId: kotlin.Int): kotlin.Unit
    public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
    public final override /*1*/ /*fake_override*/ fun webkitMatchesSelector(/*0*/ selectors: kotlin.String): kotlin.Boolean

    public companion object Companion {
        /*primary*/ private constructor Companion()
        public final val ATTRIBUTE_NODE: kotlin.Short
            public final fun <get-ATTRIBUTE_NODE>(): kotlin.Short
        public final val CDATA_SECTION_NODE: kotlin.Short
            public final fun <get-CDATA_SECTION_NODE>(): kotlin.Short
        public final val COMMENT_NODE: kotlin.Short
            public final fun <get-COMMENT_NODE>(): kotlin.Short
        public final val DOCUMENT_FRAGMENT_NODE: kotlin.Short
            public final fun <get-DOCUMENT_FRAGMENT_NODE>(): kotlin.Short
        public final val DOCUMENT_NODE: kotlin.Short
            public final fun <get-DOCUMENT_NODE>(): kotlin.Short
        public final val DOCUMENT_POSITION_CONTAINED_BY: kotlin.Short
            public final fun <get-DOCUMENT_POSITION_CONTAINED_BY>(): kotlin.Short
        public final val DOCUMENT_POSITION_CONTAINS: kotlin.Short
            public final fun <get-DOCUMENT_POSITION_CONTAINS>(): kotlin.Short
        public final val DOCUMENT_POSITION_DISCONNECTED: kotlin.Short
            public final fun <get-DOCUMENT_POSITION_DISCONNECTED>(): kotlin.Short
        public final val DOCUMENT_POSITION_FOLLOWING: kotlin.Short
            public final fun <get-DOCUMENT_POSITION_FOLLOWING>(): kotlin.Short
        public final val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: kotlin.Short
            public final fun <get-DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC>(): kotlin.Short
        public final val DOCUMENT_POSITION_PRECEDING: kotlin.Short
            public final fun <get-DOCUMENT_POSITION_PRECEDING>(): kotlin.Short
        public final val DOCUMENT_TYPE_NODE: kotlin.Short
            public final fun <get-DOCUMENT_TYPE_NODE>(): kotlin.Short
        public final val ELEMENT_NODE: kotlin.Short
            public final fun <get-ELEMENT_NODE>(): kotlin.Short
        public final val ENTITY_NODE: kotlin.Short
            public final fun <get-ENTITY_NODE>(): kotlin.Short
        public final val ENTITY_REFERENCE_NODE: kotlin.Short
            public final fun <get-ENTITY_REFERENCE_NODE>(): kotlin.Short
        public final val NOTATION_NODE: kotlin.Short
            public final fun <get-NOTATION_NODE>(): kotlin.Short
        public final val PROCESSING_INSTRUCTION_NODE: kotlin.Short
            public final fun <get-PROCESSING_INSTRUCTION_NODE>(): kotlin.Short
        public final val TEXT_NODE: kotlin.Short
            public final fun <get-TEXT_NODE>(): kotlin.Short
        public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
        public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
        public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
    }
}

public abstract external class SVGStringList {
    /*primary*/ public constructor SVGStringList()
    public open val length: kotlin.Int
        public open fun <get-length>(): kotlin.Int
    public open val numberOfItems: kotlin.Int
        public open fun <get-numberOfItems>(): kotlin.Int
    public final fun appendItem(/*0*/ newItem: kotlin.String): kotlin.String
    public final fun clear(): kotlin.Unit
    public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
    public final fun getItem(/*0*/ index: kotlin.Int): kotlin.String
    public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
    public final fun initialize(/*0*/ newItem: kotlin.String): kotlin.String
    public final fun insertItemBefore(/*0*/ newItem: kotlin.String, /*1*/ index: kotlin.Int): kotlin.String
    public final fun removeItem(/*0*/ index: kotlin.Int): kotlin.String
    public final fun replaceItem(/*0*/ newItem: kotlin.String, /*1*/ index: kotlin.Int): kotlin.String
    public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
}

public abstract external class SVGStyleElement : org.w3c.dom.svg.SVGElement, org.w3c.dom.css.LinkStyle {
    /*primary*/ public constructor SVGStyleElement()
    public open override /*1*/ /*fake_override*/ val assignedSlot: org.w3c.dom.HTMLSlotElement?
        public open override /*1*/ /*fake_override*/ fun <get-assignedSlot>(): org.w3c.dom.HTMLSlotElement?
    public open override /*1*/ /*fake_override*/ val attributes: org.w3c.dom.NamedNodeMap
        public open override /*1*/ /*fake_override*/ fun <get-attributes>(): org.w3c.dom.NamedNodeMap
    public open override /*1*/ /*fake_override*/ val baseURI: kotlin.String
        public open override /*1*/ /*fake_override*/ fun <get-baseURI>(): kotlin.String
    public abstract override /*1*/ /*fake_override*/ val childElementCount: kotlin.Int
        public abstract override /*1*/ /*fake_override*/ fun <get-childElementCount>(): kotlin.Int
    public open override /*1*/ /*fake_override*/ val childNodes: org.w3c.dom.NodeList
        public open override /*1*/ /*fake_override*/ fun <get-childNodes>(): org.w3c.dom.NodeList
    public abstract override /*1*/ /*fake_override*/ val children: org.w3c.dom.HTMLCollection
        public abstract override /*1*/ /*fake_override*/ fun <get-children>(): org.w3c.dom.HTMLCollection
    public open override /*1*/ /*fake_override*/ val classList: org.w3c.dom.DOMTokenList
        public open override /*1*/ /*fake_override*/ fun <get-classList>(): org.w3c.dom.DOMTokenList
    public open override /*1*/ /*fake_override*/ var className: kotlin.String
        public open override /*1*/ /*fake_override*/ fun <get-className>(): kotlin.String
        public open override /*1*/ /*fake_override*/ fun <set-className>(/*0*/ <set-?>: kotlin.String): kotlin.Unit
    public open override /*1*/ /*fake_override*/ val clientHeight: kotlin.Int
        public open override /*1*/ /*fake_override*/ fun <get-clientHeight>(): kotlin.Int
    public open override /*1*/ /*fake_override*/ val clientLeft: kotlin.Int
        public open override /*1*/ /*fake_override*/ fun <get-clientLeft>(): kotlin.Int
    public open override /*1*/ /*fake_override*/ val clientTop: kotlin.Int
        public open override /*1*/ /*fake_override*/ fun <get-clientTop>(): kotlin.Int
    public open override /*1*/ /*fake_override*/ val clientWidth: kotlin.Int
        public open override /*1*/ /*fake_override*/ fun <get-clientWidth>(): kotlin.Int
    public open override /*1*/ /*fake_override*/ val correspondingElement: org.w3c.dom.svg.SVGElement?
        public open override /*1*/ /*fake_override*/ fun <get-correspondingElement>(): org.w3c.dom.svg.SVGElement?
    public open override /*1*/ /*fake_override*/ val correspondingUseElement: org.w3c.dom.svg.SVGUseElement?
        public open override /*1*/ /*fake_override*/ fun <get-correspondingUseElement>(): org.w3c.dom.svg.SVGUseElement?
    public open override /*1*/ /*fake_override*/ val dataset: org.w3c.dom.DOMStringMap
        public open override /*1*/ /*fake_override*/ fun <get-dataset>(): org.w3c.dom.DOMStringMap
    public open override /*1*/ /*fake_override*/ val firstChild: org.w3c.dom.Node?
        public open override /*1*/ /*fake_override*/ fun <get-firstChild>(): org.w3c.dom.Node?
    public open override /*1*/ /*fake_override*/ val firstElementChild: org.w3c.dom.Element?
        public open override /*1*/ /*fake_override*/ fun <get-firstElementChild>(): org.w3c.dom.Element?
    public open override /*1*/ /*fake_override*/ var id: kotlin.String
        public open override /*1*/ /*fake_override*/ fun <get-id>(): kotlin.String
        public open override /*1*/ /*fake_override*/ fun <set-id>(/*0*/ <set-?>: kotlin.String): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var innerHTML: kotlin.String
        public open override /*1*/ /*fake_override*/ fun <get-innerHTML>(): kotlin.String
        public open override /*1*/ /*fake_override*/ fun <set-innerHTML>(/*0*/ <set-?>: kotlin.String): kotlin.Unit
    public open override /*1*/ /*fake_override*/ val isConnected: kotlin.Boolean
        public open override /*1*/ /*fake_override*/ fun <get-isConnected>(): kotlin.Boolean
    public open override /*1*/ /*fake_override*/ val lastChild: org.w3c.dom.Node?
        public open override /*1*/ /*fake_override*/ fun <get-lastChild>(): org.w3c.dom.Node?
    public open override /*1*/ /*fake_override*/ val lastElementChild: org.w3c.dom.Element?
        public open override /*1*/ /*fake_override*/ fun <get-lastElementChild>(): org.w3c.dom.Element?
    public open override /*1*/ /*fake_override*/ val localName: kotlin.String
        public open override /*1*/ /*fake_override*/ fun <get-localName>(): kotlin.String
    public open var media: kotlin.String
        public open fun <get-media>(): kotlin.String
        public open fun <set-media>(/*0*/ <set-?>: kotlin.String): kotlin.Unit
    public open override /*1*/ /*fake_override*/ val namespaceURI: kotlin.String?
        public open override /*1*/ /*fake_override*/ fun <get-namespaceURI>(): kotlin.String?
    public open override /*1*/ /*fake_override*/ val nextElementSibling: org.w3c.dom.Element?
        public open override /*1*/ /*fake_override*/ fun <get-nextElementSibling>(): org.w3c.dom.Element?
    public open override /*1*/ /*fake_override*/ val nextSibling: org.w3c.dom.Node?
        public open override /*1*/ /*fake_override*/ fun <get-nextSibling>(): org.w3c.dom.Node?
    public open override /*1*/ /*fake_override*/ val nodeName: kotlin.String
        public open override /*1*/ /*fake_override*/ fun <get-nodeName>(): kotlin.String
    public open override /*1*/ /*fake_override*/ val nodeType: kotlin.Short
        public open override /*1*/ /*fake_override*/ fun <get-nodeType>(): kotlin.Short
    public open override /*1*/ /*fake_override*/ var nodeValue: kotlin.String?
        public open override /*1*/ /*fake_override*/ fun <get-nodeValue>(): kotlin.String?
        public open override /*1*/ /*fake_override*/ fun <set-nodeValue>(/*0*/ <set-?>: kotlin.String?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onabort: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onabort>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onabort>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onblur: ((org.w3c.dom.events.FocusEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onblur>(): ((org.w3c.dom.events.FocusEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onblur>(/*0*/ value: ((org.w3c.dom.events.FocusEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var oncancel: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-oncancel>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-oncancel>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var oncanplay: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-oncanplay>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-oncanplay>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var oncanplaythrough: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-oncanplaythrough>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-oncanplaythrough>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onchange: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onchange>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onchange>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onclick: ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onclick>(): ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onclick>(/*0*/ value: ((org.w3c.dom.events.MouseEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onclose: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onclose>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onclose>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var oncontextmenu: ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-oncontextmenu>(): ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-oncontextmenu>(/*0*/ value: ((org.w3c.dom.events.MouseEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var oncuechange: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-oncuechange>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-oncuechange>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ondblclick: ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ondblclick>(): ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ondblclick>(/*0*/ value: ((org.w3c.dom.events.MouseEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ondrag: ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ondrag>(): ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ondrag>(/*0*/ value: ((org.w3c.dom.DragEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ondragend: ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ondragend>(): ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ondragend>(/*0*/ value: ((org.w3c.dom.DragEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ondragenter: ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ondragenter>(): ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ondragenter>(/*0*/ value: ((org.w3c.dom.DragEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ondragexit: ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ondragexit>(): ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ondragexit>(/*0*/ value: ((org.w3c.dom.DragEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ondragleave: ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ondragleave>(): ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ondragleave>(/*0*/ value: ((org.w3c.dom.DragEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ondragover: ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ondragover>(): ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ondragover>(/*0*/ value: ((org.w3c.dom.DragEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ondragstart: ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ondragstart>(): ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ondragstart>(/*0*/ value: ((org.w3c.dom.DragEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ondrop: ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ondrop>(): ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ondrop>(/*0*/ value: ((org.w3c.dom.DragEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ondurationchange: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ondurationchange>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ondurationchange>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onemptied: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onemptied>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onemptied>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onended: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onended>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onended>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onerror: ((dynamic, kotlin.String, kotlin.Int, kotlin.Int, kotlin.Any?) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onerror>(): ((dynamic, kotlin.String, kotlin.Int, kotlin.Int, kotlin.Any?) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onerror>(/*0*/ value: ((dynamic, kotlin.String, kotlin.Int, kotlin.Int, kotlin.Any?) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onfocus: ((org.w3c.dom.events.FocusEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onfocus>(): ((org.w3c.dom.events.FocusEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onfocus>(/*0*/ value: ((org.w3c.dom.events.FocusEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ongotpointercapture: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ongotpointercapture>(): ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ongotpointercapture>(/*0*/ value: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var oninput: ((org.w3c.dom.events.InputEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-oninput>(): ((org.w3c.dom.events.InputEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-oninput>(/*0*/ value: ((org.w3c.dom.events.InputEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var oninvalid: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-oninvalid>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-oninvalid>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onkeydown: ((org.w3c.dom.events.KeyboardEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onkeydown>(): ((org.w3c.dom.events.KeyboardEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onkeydown>(/*0*/ value: ((org.w3c.dom.events.KeyboardEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onkeypress: ((org.w3c.dom.events.KeyboardEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onkeypress>(): ((org.w3c.dom.events.KeyboardEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onkeypress>(/*0*/ value: ((org.w3c.dom.events.KeyboardEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onkeyup: ((org.w3c.dom.events.KeyboardEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onkeyup>(): ((org.w3c.dom.events.KeyboardEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onkeyup>(/*0*/ value: ((org.w3c.dom.events.KeyboardEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onload: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onload>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onload>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onloadeddata: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onloadeddata>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onloadeddata>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onloadedmetadata: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onloadedmetadata>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onloadedmetadata>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onloadend: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onloadend>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onloadend>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onloadstart: ((org.w3c.xhr.ProgressEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onloadstart>(): ((org.w3c.xhr.ProgressEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onloadstart>(/*0*/ value: ((org.w3c.xhr.ProgressEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onlostpointercapture: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onlostpointercapture>(): ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onlostpointercapture>(/*0*/ value: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onmousedown: ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onmousedown>(): ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onmousedown>(/*0*/ value: ((org.w3c.dom.events.MouseEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onmouseenter: ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onmouseenter>(): ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onmouseenter>(/*0*/ value: ((org.w3c.dom.events.MouseEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onmouseleave: ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onmouseleave>(): ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onmouseleave>(/*0*/ value: ((org.w3c.dom.events.MouseEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onmousemove: ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onmousemove>(): ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onmousemove>(/*0*/ value: ((org.w3c.dom.events.MouseEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onmouseout: ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onmouseout>(): ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onmouseout>(/*0*/ value: ((org.w3c.dom.events.MouseEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onmouseover: ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onmouseover>(): ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onmouseover>(/*0*/ value: ((org.w3c.dom.events.MouseEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onmouseup: ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onmouseup>(): ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onmouseup>(/*0*/ value: ((org.w3c.dom.events.MouseEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onpause: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onpause>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onpause>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onplay: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onplay>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onplay>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onplaying: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onplaying>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onplaying>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onpointercancel: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onpointercancel>(): ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onpointercancel>(/*0*/ value: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onpointerdown: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onpointerdown>(): ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onpointerdown>(/*0*/ value: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onpointerenter: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onpointerenter>(): ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onpointerenter>(/*0*/ value: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onpointerleave: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onpointerleave>(): ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onpointerleave>(/*0*/ value: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onpointermove: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onpointermove>(): ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onpointermove>(/*0*/ value: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onpointerout: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onpointerout>(): ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onpointerout>(/*0*/ value: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onpointerover: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onpointerover>(): ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onpointerover>(/*0*/ value: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onpointerup: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onpointerup>(): ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onpointerup>(/*0*/ value: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onprogress: ((org.w3c.xhr.ProgressEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onprogress>(): ((org.w3c.xhr.ProgressEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onprogress>(/*0*/ value: ((org.w3c.xhr.ProgressEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onratechange: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onratechange>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onratechange>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onreset: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onreset>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onreset>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onresize: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onresize>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onresize>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onscroll: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onscroll>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onscroll>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onseeked: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onseeked>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onseeked>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onseeking: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onseeking>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onseeking>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onselect: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onselect>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onselect>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onshow: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onshow>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onshow>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onstalled: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onstalled>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onstalled>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onsubmit: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onsubmit>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onsubmit>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onsuspend: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onsuspend>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onsuspend>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ontimeupdate: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ontimeupdate>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ontimeupdate>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ontoggle: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ontoggle>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ontoggle>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onvolumechange: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onvolumechange>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onvolumechange>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onwaiting: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onwaiting>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onwaiting>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onwheel: ((org.w3c.dom.events.WheelEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onwheel>(): ((org.w3c.dom.events.WheelEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onwheel>(/*0*/ value: ((org.w3c.dom.events.WheelEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var outerHTML: kotlin.String
        public open override /*1*/ /*fake_override*/ fun <get-outerHTML>(): kotlin.String
        public open override /*1*/ /*fake_override*/ fun <set-outerHTML>(/*0*/ <set-?>: kotlin.String): kotlin.Unit
    public open override /*1*/ /*fake_override*/ val ownerDocument: org.w3c.dom.Document?
        public open override /*1*/ /*fake_override*/ fun <get-ownerDocument>(): org.w3c.dom.Document?
    public open override /*1*/ /*fake_override*/ val ownerSVGElement: org.w3c.dom.svg.SVGSVGElement?
        public open override /*1*/ /*fake_override*/ fun <get-ownerSVGElement>(): org.w3c.dom.svg.SVGSVGElement?
    public open override /*1*/ /*fake_override*/ val parentElement: org.w3c.dom.Element?
        public open override /*1*/ /*fake_override*/ fun <get-parentElement>(): org.w3c.dom.Element?
    public open override /*1*/ /*fake_override*/ val parentNode: org.w3c.dom.Node?
        public open override /*1*/ /*fake_override*/ fun <get-parentNode>(): org.w3c.dom.Node?
    public open override /*1*/ /*fake_override*/ val prefix: kotlin.String?
        public open override /*1*/ /*fake_override*/ fun <get-prefix>(): kotlin.String?
    public open override /*1*/ /*fake_override*/ val previousElementSibling: org.w3c.dom.Element?
        public open override /*1*/ /*fake_override*/ fun <get-previousElementSibling>(): org.w3c.dom.Element?
    public open override /*1*/ /*fake_override*/ val previousSibling: org.w3c.dom.Node?
        public open override /*1*/ /*fake_override*/ fun <get-previousSibling>(): org.w3c.dom.Node?
    public open override /*1*/ /*fake_override*/ val scrollHeight: kotlin.Int
        public open override /*1*/ /*fake_override*/ fun <get-scrollHeight>(): kotlin.Int
    public open override /*1*/ /*fake_override*/ var scrollLeft: kotlin.Double
        public open override /*1*/ /*fake_override*/ fun <get-scrollLeft>(): kotlin.Double
        public open override /*1*/ /*fake_override*/ fun <set-scrollLeft>(/*0*/ <set-?>: kotlin.Double): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var scrollTop: kotlin.Double
        public open override /*1*/ /*fake_override*/ fun <get-scrollTop>(): kotlin.Double
        public open override /*1*/ /*fake_override*/ fun <set-scrollTop>(/*0*/ <set-?>: kotlin.Double): kotlin.Unit
    public open override /*1*/ /*fake_override*/ val scrollWidth: kotlin.Int
        public open override /*1*/ /*fake_override*/ fun <get-scrollWidth>(): kotlin.Int
    public open override /*1*/ /*fake_override*/ val shadowRoot: org.w3c.dom.ShadowRoot?
        public open override /*1*/ /*fake_override*/ fun <get-shadowRoot>(): org.w3c.dom.ShadowRoot?
    public open override /*1*/ /*fake_override*/ val sheet: org.w3c.dom.css.StyleSheet?
        public open override /*1*/ /*fake_override*/ fun <get-sheet>(): org.w3c.dom.css.StyleSheet?
    public open override /*1*/ /*fake_override*/ var slot: kotlin.String
        public open override /*1*/ /*fake_override*/ fun <get-slot>(): kotlin.String
        public open override /*1*/ /*fake_override*/ fun <set-slot>(/*0*/ <set-?>: kotlin.String): kotlin.Unit
    public abstract override /*1*/ /*fake_override*/ val style: org.w3c.dom.css.CSSStyleDeclaration
        public abstract override /*1*/ /*fake_override*/ fun <get-style>(): org.w3c.dom.css.CSSStyleDeclaration
    public open override /*1*/ /*fake_override*/ var tabIndex: kotlin.Int
        public open override /*1*/ /*fake_override*/ fun <get-tabIndex>(): kotlin.Int
        public open override /*1*/ /*fake_override*/ fun <set-tabIndex>(/*0*/ <set-?>: kotlin.Int): kotlin.Unit
    public open override /*1*/ /*fake_override*/ val tagName: kotlin.String
        public open override /*1*/ /*fake_override*/ fun <get-tagName>(): kotlin.String
    public open override /*1*/ /*fake_override*/ var textContent: kotlin.String?
        public open override /*1*/ /*fake_override*/ fun <get-textContent>(): kotlin.String?
        public open override /*1*/ /*fake_override*/ fun <set-textContent>(/*0*/ <set-?>: kotlin.String?): kotlin.Unit
    public open var title: kotlin.String
        public open fun <get-title>(): kotlin.String
        public open fun <set-title>(/*0*/ <set-?>: kotlin.String): kotlin.Unit
    public open var type: kotlin.String
        public open fun <get-type>(): kotlin.String
        public open fun <set-type>(/*0*/ <set-?>: kotlin.String): kotlin.Unit
    public open override /*1*/ /*fake_override*/ val viewportElement: org.w3c.dom.svg.SVGElement?
        public open override /*1*/ /*fake_override*/ fun <get-viewportElement>(): org.w3c.dom.svg.SVGElement?
    public final override /*1*/ /*fake_override*/ fun addEventListener(/*0*/ type: kotlin.String, /*1*/ callback: ((org.w3c.dom.events.Event) -> kotlin.Unit)?, /*2*/ options: dynamic = ...): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun addEventListener(/*0*/ type: kotlin.String, /*1*/ callback: org.w3c.dom.events.EventListener?, /*2*/ options: dynamic = ...): kotlin.Unit
    public abstract override /*1*/ /*fake_override*/ fun after(/*0*/ vararg nodes: dynamic /*kotlin.Array<out dynamic>*/): kotlin.Unit
    public abstract override /*1*/ /*fake_override*/ fun append(/*0*/ vararg nodes: dynamic /*kotlin.Array<out dynamic>*/): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun appendChild(/*0*/ node: org.w3c.dom.Node): org.w3c.dom.Node
    public final override /*1*/ /*fake_override*/ fun attachShadow(/*0*/ init: org.w3c.dom.ShadowRootInit): org.w3c.dom.ShadowRoot
    public abstract override /*1*/ /*fake_override*/ fun before(/*0*/ vararg nodes: dynamic /*kotlin.Array<out dynamic>*/): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun blur(): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun cloneNode(/*0*/ deep: kotlin.Boolean = ...): org.w3c.dom.Node
    public final override /*1*/ /*fake_override*/ fun closest(/*0*/ selectors: kotlin.String): org.w3c.dom.Element?
    public final override /*1*/ /*fake_override*/ fun compareDocumentPosition(/*0*/ other: org.w3c.dom.Node): kotlin.Short
    public final override /*1*/ /*fake_override*/ fun contains(/*0*/ other: org.w3c.dom.Node?): kotlin.Boolean
    public abstract override /*1*/ /*fake_override*/ fun convertPointFromNode(/*0*/ point: org.w3c.dom.DOMPointInit, /*1*/ from: dynamic, /*2*/ options: org.w3c.dom.ConvertCoordinateOptions = ...): org.w3c.dom.DOMPoint
    public abstract override /*1*/ /*fake_override*/ fun convertQuadFromNode(/*0*/ quad: dynamic, /*1*/ from: dynamic, /*2*/ options: org.w3c.dom.ConvertCoordinateOptions = ...): org.w3c.dom.DOMQuad
    public abstract override /*1*/ /*fake_override*/ fun convertRectFromNode(/*0*/ rect: org.w3c.dom.DOMRectReadOnly, /*1*/ from: dynamic, /*2*/ options: org.w3c.dom.ConvertCoordinateOptions = ...): org.w3c.dom.DOMQuad
    public final override /*1*/ /*fake_override*/ fun dispatchEvent(/*0*/ event: org.w3c.dom.events.Event): kotlin.Boolean
    public open override /*2*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
    public final override /*1*/ /*fake_override*/ fun focus(): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun getAttribute(/*0*/ qualifiedName: kotlin.String): kotlin.String?
    public final override /*1*/ /*fake_override*/ fun getAttributeNS(/*0*/ namespace: kotlin.String?, /*1*/ localName: kotlin.String): kotlin.String?
    public final override /*1*/ /*fake_override*/ fun getAttributeNames(): kotlin.Array<kotlin.String>
    public final override /*1*/ /*fake_override*/ fun getAttributeNode(/*0*/ qualifiedName: kotlin.String): org.w3c.dom.Attr?
    public final override /*1*/ /*fake_override*/ fun getAttributeNodeNS(/*0*/ namespace: kotlin.String?, /*1*/ localName: kotlin.String): org.w3c.dom.Attr?
    public final override /*1*/ /*fake_override*/ fun getBoundingClientRect(): org.w3c.dom.DOMRect
    public abstract override /*1*/ /*fake_override*/ fun getBoxQuads(/*0*/ options: org.w3c.dom.BoxQuadOptions = ...): kotlin.Array<org.w3c.dom.DOMQuad>
    public final override /*1*/ /*fake_override*/ fun getClientRects(): kotlin.Array<org.w3c.dom.DOMRect>
    public final override /*1*/ /*fake_override*/ fun getElementsByClassName(/*0*/ classNames: kotlin.String): org.w3c.dom.HTMLCollection
    public final override /*1*/ /*fake_override*/ fun getElementsByTagName(/*0*/ qualifiedName: kotlin.String): org.w3c.dom.HTMLCollection
    public final override /*1*/ /*fake_override*/ fun getElementsByTagNameNS(/*0*/ namespace: kotlin.String?, /*1*/ localName: kotlin.String): org.w3c.dom.HTMLCollection
    public final override /*1*/ /*fake_override*/ fun getRootNode(/*0*/ options: org.w3c.dom.GetRootNodeOptions = ...): org.w3c.dom.Node
    public final override /*1*/ /*fake_override*/ fun hasAttribute(/*0*/ qualifiedName: kotlin.String): kotlin.Boolean
    public final override /*1*/ /*fake_override*/ fun hasAttributeNS(/*0*/ namespace: kotlin.String?, /*1*/ localName: kotlin.String): kotlin.Boolean
    public final override /*1*/ /*fake_override*/ fun hasAttributes(): kotlin.Boolean
    public final override /*1*/ /*fake_override*/ fun hasChildNodes(): kotlin.Boolean
    public final override /*1*/ /*fake_override*/ fun hasPointerCapture(/*0*/ pointerId: kotlin.Int): kotlin.Boolean
    public open override /*2*/ /*fake_override*/ fun hashCode(): kotlin.Int
    public final override /*1*/ /*fake_override*/ fun insertAdjacentElement(/*0*/ where: kotlin.String, /*1*/ element: org.w3c.dom.Element): org.w3c.dom.Element?
    public final override /*1*/ /*fake_override*/ fun insertAdjacentHTML(/*0*/ position: kotlin.String, /*1*/ text: kotlin.String): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun insertAdjacentText(/*0*/ where: kotlin.String, /*1*/ data: kotlin.String): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun insertBefore(/*0*/ node: org.w3c.dom.Node, /*1*/ child: org.w3c.dom.Node?): org.w3c.dom.Node
    public final override /*1*/ /*fake_override*/ fun isDefaultNamespace(/*0*/ namespace: kotlin.String?): kotlin.Boolean
    public final override /*1*/ /*fake_override*/ fun isEqualNode(/*0*/ otherNode: org.w3c.dom.Node?): kotlin.Boolean
    public final override /*1*/ /*fake_override*/ fun isSameNode(/*0*/ otherNode: org.w3c.dom.Node?): kotlin.Boolean
    public final override /*1*/ /*fake_override*/ fun lookupNamespaceURI(/*0*/ prefix: kotlin.String?): kotlin.String?
    public final override /*1*/ /*fake_override*/ fun lookupPrefix(/*0*/ namespace: kotlin.String?): kotlin.String?
    public final override /*1*/ /*fake_override*/ fun matches(/*0*/ selectors: kotlin.String): kotlin.Boolean
    public final override /*1*/ /*fake_override*/ fun normalize(): kotlin.Unit
    public abstract override /*1*/ /*fake_override*/ fun prepend(/*0*/ vararg nodes: dynamic /*kotlin.Array<out dynamic>*/): kotlin.Unit
    public abstract override /*1*/ /*fake_override*/ fun querySelector(/*0*/ selectors: kotlin.String): org.w3c.dom.Element?
    public abstract override /*1*/ /*fake_override*/ fun querySelectorAll(/*0*/ selectors: kotlin.String): org.w3c.dom.NodeList
    public final override /*1*/ /*fake_override*/ fun releasePointerCapture(/*0*/ pointerId: kotlin.Int): kotlin.Unit
    public abstract override /*1*/ /*fake_override*/ fun remove(): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun removeAttribute(/*0*/ qualifiedName: kotlin.String): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun removeAttributeNS(/*0*/ namespace: kotlin.String?, /*1*/ localName: kotlin.String): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun removeAttributeNode(/*0*/ attr: org.w3c.dom.Attr): org.w3c.dom.Attr
    public final override /*1*/ /*fake_override*/ fun removeChild(/*0*/ child: org.w3c.dom.Node): org.w3c.dom.Node
    public final override /*1*/ /*fake_override*/ fun removeEventListener(/*0*/ type: kotlin.String, /*1*/ callback: ((org.w3c.dom.events.Event) -> kotlin.Unit)?, /*2*/ options: dynamic = ...): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun removeEventListener(/*0*/ type: kotlin.String, /*1*/ callback: org.w3c.dom.events.EventListener?, /*2*/ options: dynamic = ...): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun replaceChild(/*0*/ node: org.w3c.dom.Node, /*1*/ child: org.w3c.dom.Node): org.w3c.dom.Node
    public abstract override /*1*/ /*fake_override*/ fun replaceWith(/*0*/ vararg nodes: dynamic /*kotlin.Array<out dynamic>*/): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun requestFullscreen(): kotlin.js.Promise<kotlin.Unit>
    public final override /*1*/ /*fake_override*/ fun scroll(/*0*/ x: kotlin.Double, /*1*/ y: kotlin.Double): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun scroll(/*0*/ options: org.w3c.dom.ScrollToOptions = ...): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun scrollBy(/*0*/ x: kotlin.Double, /*1*/ y: kotlin.Double): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun scrollBy(/*0*/ options: org.w3c.dom.ScrollToOptions = ...): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun scrollIntoView(): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun scrollIntoView(/*0*/ arg: dynamic): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun scrollTo(/*0*/ x: kotlin.Double, /*1*/ y: kotlin.Double): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun scrollTo(/*0*/ options: org.w3c.dom.ScrollToOptions = ...): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun setAttribute(/*0*/ qualifiedName: kotlin.String, /*1*/ value: kotlin.String): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun setAttributeNS(/*0*/ namespace: kotlin.String?, /*1*/ qualifiedName: kotlin.String, /*2*/ value: kotlin.String): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun setAttributeNode(/*0*/ attr: org.w3c.dom.Attr): org.w3c.dom.Attr?
    public final override /*1*/ /*fake_override*/ fun setAttributeNodeNS(/*0*/ attr: org.w3c.dom.Attr): org.w3c.dom.Attr?
    public final override /*1*/ /*fake_override*/ fun setPointerCapture(/*0*/ pointerId: kotlin.Int): kotlin.Unit
    public open override /*2*/ /*fake_override*/ fun toString(): kotlin.String
    public final override /*1*/ /*fake_override*/ fun webkitMatchesSelector(/*0*/ selectors: kotlin.String): kotlin.Boolean

    public companion object Companion {
        /*primary*/ private constructor Companion()
        public final val ATTRIBUTE_NODE: kotlin.Short
            public final fun <get-ATTRIBUTE_NODE>(): kotlin.Short
        public final val CDATA_SECTION_NODE: kotlin.Short
            public final fun <get-CDATA_SECTION_NODE>(): kotlin.Short
        public final val COMMENT_NODE: kotlin.Short
            public final fun <get-COMMENT_NODE>(): kotlin.Short
        public final val DOCUMENT_FRAGMENT_NODE: kotlin.Short
            public final fun <get-DOCUMENT_FRAGMENT_NODE>(): kotlin.Short
        public final val DOCUMENT_NODE: kotlin.Short
            public final fun <get-DOCUMENT_NODE>(): kotlin.Short
        public final val DOCUMENT_POSITION_CONTAINED_BY: kotlin.Short
            public final fun <get-DOCUMENT_POSITION_CONTAINED_BY>(): kotlin.Short
        public final val DOCUMENT_POSITION_CONTAINS: kotlin.Short
            public final fun <get-DOCUMENT_POSITION_CONTAINS>(): kotlin.Short
        public final val DOCUMENT_POSITION_DISCONNECTED: kotlin.Short
            public final fun <get-DOCUMENT_POSITION_DISCONNECTED>(): kotlin.Short
        public final val DOCUMENT_POSITION_FOLLOWING: kotlin.Short
            public final fun <get-DOCUMENT_POSITION_FOLLOWING>(): kotlin.Short
        public final val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: kotlin.Short
            public final fun <get-DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC>(): kotlin.Short
        public final val DOCUMENT_POSITION_PRECEDING: kotlin.Short
            public final fun <get-DOCUMENT_POSITION_PRECEDING>(): kotlin.Short
        public final val DOCUMENT_TYPE_NODE: kotlin.Short
            public final fun <get-DOCUMENT_TYPE_NODE>(): kotlin.Short
        public final val ELEMENT_NODE: kotlin.Short
            public final fun <get-ELEMENT_NODE>(): kotlin.Short
        public final val ENTITY_NODE: kotlin.Short
            public final fun <get-ENTITY_NODE>(): kotlin.Short
        public final val ENTITY_REFERENCE_NODE: kotlin.Short
            public final fun <get-ENTITY_REFERENCE_NODE>(): kotlin.Short
        public final val NOTATION_NODE: kotlin.Short
            public final fun <get-NOTATION_NODE>(): kotlin.Short
        public final val PROCESSING_INSTRUCTION_NODE: kotlin.Short
            public final fun <get-PROCESSING_INSTRUCTION_NODE>(): kotlin.Short
        public final val TEXT_NODE: kotlin.Short
            public final fun <get-TEXT_NODE>(): kotlin.Short
        public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
        public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
        public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
    }
}

public abstract external class SVGSwitchElement : org.w3c.dom.svg.SVGGraphicsElement {
    /*primary*/ public constructor SVGSwitchElement()
    public open override /*1*/ /*fake_override*/ val assignedSlot: org.w3c.dom.HTMLSlotElement?
        public open override /*1*/ /*fake_override*/ fun <get-assignedSlot>(): org.w3c.dom.HTMLSlotElement?
    public open override /*1*/ /*fake_override*/ val attributes: org.w3c.dom.NamedNodeMap
        public open override /*1*/ /*fake_override*/ fun <get-attributes>(): org.w3c.dom.NamedNodeMap
    public open override /*1*/ /*fake_override*/ val baseURI: kotlin.String
        public open override /*1*/ /*fake_override*/ fun <get-baseURI>(): kotlin.String
    public abstract override /*1*/ /*fake_override*/ val childElementCount: kotlin.Int
        public abstract override /*1*/ /*fake_override*/ fun <get-childElementCount>(): kotlin.Int
    public open override /*1*/ /*fake_override*/ val childNodes: org.w3c.dom.NodeList
        public open override /*1*/ /*fake_override*/ fun <get-childNodes>(): org.w3c.dom.NodeList
    public abstract override /*1*/ /*fake_override*/ val children: org.w3c.dom.HTMLCollection
        public abstract override /*1*/ /*fake_override*/ fun <get-children>(): org.w3c.dom.HTMLCollection
    public open override /*1*/ /*fake_override*/ val classList: org.w3c.dom.DOMTokenList
        public open override /*1*/ /*fake_override*/ fun <get-classList>(): org.w3c.dom.DOMTokenList
    public open override /*1*/ /*fake_override*/ var className: kotlin.String
        public open override /*1*/ /*fake_override*/ fun <get-className>(): kotlin.String
        public open override /*1*/ /*fake_override*/ fun <set-className>(/*0*/ <set-?>: kotlin.String): kotlin.Unit
    public open override /*1*/ /*fake_override*/ val clientHeight: kotlin.Int
        public open override /*1*/ /*fake_override*/ fun <get-clientHeight>(): kotlin.Int
    public open override /*1*/ /*fake_override*/ val clientLeft: kotlin.Int
        public open override /*1*/ /*fake_override*/ fun <get-clientLeft>(): kotlin.Int
    public open override /*1*/ /*fake_override*/ val clientTop: kotlin.Int
        public open override /*1*/ /*fake_override*/ fun <get-clientTop>(): kotlin.Int
    public open override /*1*/ /*fake_override*/ val clientWidth: kotlin.Int
        public open override /*1*/ /*fake_override*/ fun <get-clientWidth>(): kotlin.Int
    public open override /*1*/ /*fake_override*/ val correspondingElement: org.w3c.dom.svg.SVGElement?
        public open override /*1*/ /*fake_override*/ fun <get-correspondingElement>(): org.w3c.dom.svg.SVGElement?
    public open override /*1*/ /*fake_override*/ val correspondingUseElement: org.w3c.dom.svg.SVGUseElement?
        public open override /*1*/ /*fake_override*/ fun <get-correspondingUseElement>(): org.w3c.dom.svg.SVGUseElement?
    public open override /*1*/ /*fake_override*/ val dataset: org.w3c.dom.DOMStringMap
        public open override /*1*/ /*fake_override*/ fun <get-dataset>(): org.w3c.dom.DOMStringMap
    public open override /*1*/ /*fake_override*/ val firstChild: org.w3c.dom.Node?
        public open override /*1*/ /*fake_override*/ fun <get-firstChild>(): org.w3c.dom.Node?
    public open override /*1*/ /*fake_override*/ val firstElementChild: org.w3c.dom.Element?
        public open override /*1*/ /*fake_override*/ fun <get-firstElementChild>(): org.w3c.dom.Element?
    public open override /*1*/ /*fake_override*/ var id: kotlin.String
        public open override /*1*/ /*fake_override*/ fun <get-id>(): kotlin.String
        public open override /*1*/ /*fake_override*/ fun <set-id>(/*0*/ <set-?>: kotlin.String): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var innerHTML: kotlin.String
        public open override /*1*/ /*fake_override*/ fun <get-innerHTML>(): kotlin.String
        public open override /*1*/ /*fake_override*/ fun <set-innerHTML>(/*0*/ <set-?>: kotlin.String): kotlin.Unit
    public open override /*1*/ /*fake_override*/ val isConnected: kotlin.Boolean
        public open override /*1*/ /*fake_override*/ fun <get-isConnected>(): kotlin.Boolean
    public open override /*1*/ /*fake_override*/ val lastChild: org.w3c.dom.Node?
        public open override /*1*/ /*fake_override*/ fun <get-lastChild>(): org.w3c.dom.Node?
    public open override /*1*/ /*fake_override*/ val lastElementChild: org.w3c.dom.Element?
        public open override /*1*/ /*fake_override*/ fun <get-lastElementChild>(): org.w3c.dom.Element?
    public open override /*1*/ /*fake_override*/ val localName: kotlin.String
        public open override /*1*/ /*fake_override*/ fun <get-localName>(): kotlin.String
    public open override /*1*/ /*fake_override*/ val namespaceURI: kotlin.String?
        public open override /*1*/ /*fake_override*/ fun <get-namespaceURI>(): kotlin.String?
    public open override /*1*/ /*fake_override*/ val nextElementSibling: org.w3c.dom.Element?
        public open override /*1*/ /*fake_override*/ fun <get-nextElementSibling>(): org.w3c.dom.Element?
    public open override /*1*/ /*fake_override*/ val nextSibling: org.w3c.dom.Node?
        public open override /*1*/ /*fake_override*/ fun <get-nextSibling>(): org.w3c.dom.Node?
    public open override /*1*/ /*fake_override*/ val nodeName: kotlin.String
        public open override /*1*/ /*fake_override*/ fun <get-nodeName>(): kotlin.String
    public open override /*1*/ /*fake_override*/ val nodeType: kotlin.Short
        public open override /*1*/ /*fake_override*/ fun <get-nodeType>(): kotlin.Short
    public open override /*1*/ /*fake_override*/ var nodeValue: kotlin.String?
        public open override /*1*/ /*fake_override*/ fun <get-nodeValue>(): kotlin.String?
        public open override /*1*/ /*fake_override*/ fun <set-nodeValue>(/*0*/ <set-?>: kotlin.String?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onabort: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onabort>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onabort>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onblur: ((org.w3c.dom.events.FocusEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onblur>(): ((org.w3c.dom.events.FocusEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onblur>(/*0*/ value: ((org.w3c.dom.events.FocusEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var oncancel: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-oncancel>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-oncancel>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var oncanplay: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-oncanplay>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-oncanplay>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var oncanplaythrough: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-oncanplaythrough>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-oncanplaythrough>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onchange: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onchange>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onchange>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onclick: ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onclick>(): ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onclick>(/*0*/ value: ((org.w3c.dom.events.MouseEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onclose: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onclose>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onclose>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var oncontextmenu: ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-oncontextmenu>(): ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-oncontextmenu>(/*0*/ value: ((org.w3c.dom.events.MouseEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var oncuechange: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-oncuechange>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-oncuechange>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ondblclick: ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ondblclick>(): ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ondblclick>(/*0*/ value: ((org.w3c.dom.events.MouseEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ondrag: ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ondrag>(): ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ondrag>(/*0*/ value: ((org.w3c.dom.DragEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ondragend: ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ondragend>(): ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ondragend>(/*0*/ value: ((org.w3c.dom.DragEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ondragenter: ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ondragenter>(): ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ondragenter>(/*0*/ value: ((org.w3c.dom.DragEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ondragexit: ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ondragexit>(): ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ondragexit>(/*0*/ value: ((org.w3c.dom.DragEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ondragleave: ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ondragleave>(): ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ondragleave>(/*0*/ value: ((org.w3c.dom.DragEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ondragover: ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ondragover>(): ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ondragover>(/*0*/ value: ((org.w3c.dom.DragEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ondragstart: ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ondragstart>(): ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ondragstart>(/*0*/ value: ((org.w3c.dom.DragEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ondrop: ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ondrop>(): ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ondrop>(/*0*/ value: ((org.w3c.dom.DragEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ondurationchange: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ondurationchange>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ondurationchange>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onemptied: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onemptied>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onemptied>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onended: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onended>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onended>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onerror: ((dynamic, kotlin.String, kotlin.Int, kotlin.Int, kotlin.Any?) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onerror>(): ((dynamic, kotlin.String, kotlin.Int, kotlin.Int, kotlin.Any?) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onerror>(/*0*/ value: ((dynamic, kotlin.String, kotlin.Int, kotlin.Int, kotlin.Any?) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onfocus: ((org.w3c.dom.events.FocusEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onfocus>(): ((org.w3c.dom.events.FocusEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onfocus>(/*0*/ value: ((org.w3c.dom.events.FocusEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ongotpointercapture: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ongotpointercapture>(): ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ongotpointercapture>(/*0*/ value: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var oninput: ((org.w3c.dom.events.InputEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-oninput>(): ((org.w3c.dom.events.InputEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-oninput>(/*0*/ value: ((org.w3c.dom.events.InputEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var oninvalid: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-oninvalid>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-oninvalid>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onkeydown: ((org.w3c.dom.events.KeyboardEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onkeydown>(): ((org.w3c.dom.events.KeyboardEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onkeydown>(/*0*/ value: ((org.w3c.dom.events.KeyboardEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onkeypress: ((org.w3c.dom.events.KeyboardEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onkeypress>(): ((org.w3c.dom.events.KeyboardEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onkeypress>(/*0*/ value: ((org.w3c.dom.events.KeyboardEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onkeyup: ((org.w3c.dom.events.KeyboardEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onkeyup>(): ((org.w3c.dom.events.KeyboardEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onkeyup>(/*0*/ value: ((org.w3c.dom.events.KeyboardEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onload: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onload>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onload>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onloadeddata: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onloadeddata>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onloadeddata>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onloadedmetadata: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onloadedmetadata>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onloadedmetadata>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onloadend: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onloadend>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onloadend>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onloadstart: ((org.w3c.xhr.ProgressEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onloadstart>(): ((org.w3c.xhr.ProgressEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onloadstart>(/*0*/ value: ((org.w3c.xhr.ProgressEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onlostpointercapture: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onlostpointercapture>(): ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onlostpointercapture>(/*0*/ value: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onmousedown: ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onmousedown>(): ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onmousedown>(/*0*/ value: ((org.w3c.dom.events.MouseEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onmouseenter: ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onmouseenter>(): ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onmouseenter>(/*0*/ value: ((org.w3c.dom.events.MouseEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onmouseleave: ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onmouseleave>(): ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onmouseleave>(/*0*/ value: ((org.w3c.dom.events.MouseEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onmousemove: ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onmousemove>(): ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onmousemove>(/*0*/ value: ((org.w3c.dom.events.MouseEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onmouseout: ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onmouseout>(): ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onmouseout>(/*0*/ value: ((org.w3c.dom.events.MouseEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onmouseover: ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onmouseover>(): ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onmouseover>(/*0*/ value: ((org.w3c.dom.events.MouseEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onmouseup: ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onmouseup>(): ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onmouseup>(/*0*/ value: ((org.w3c.dom.events.MouseEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onpause: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onpause>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onpause>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onplay: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onplay>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onplay>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onplaying: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onplaying>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onplaying>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onpointercancel: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onpointercancel>(): ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onpointercancel>(/*0*/ value: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onpointerdown: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onpointerdown>(): ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onpointerdown>(/*0*/ value: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onpointerenter: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onpointerenter>(): ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onpointerenter>(/*0*/ value: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onpointerleave: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onpointerleave>(): ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onpointerleave>(/*0*/ value: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onpointermove: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onpointermove>(): ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onpointermove>(/*0*/ value: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onpointerout: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onpointerout>(): ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onpointerout>(/*0*/ value: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onpointerover: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onpointerover>(): ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onpointerover>(/*0*/ value: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onpointerup: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onpointerup>(): ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onpointerup>(/*0*/ value: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onprogress: ((org.w3c.xhr.ProgressEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onprogress>(): ((org.w3c.xhr.ProgressEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onprogress>(/*0*/ value: ((org.w3c.xhr.ProgressEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onratechange: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onratechange>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onratechange>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onreset: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onreset>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onreset>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onresize: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onresize>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onresize>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onscroll: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onscroll>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onscroll>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onseeked: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onseeked>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onseeked>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onseeking: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onseeking>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onseeking>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onselect: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onselect>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onselect>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onshow: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onshow>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onshow>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onstalled: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onstalled>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onstalled>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onsubmit: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onsubmit>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onsubmit>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onsuspend: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onsuspend>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onsuspend>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ontimeupdate: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ontimeupdate>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ontimeupdate>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ontoggle: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ontoggle>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ontoggle>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onvolumechange: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onvolumechange>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onvolumechange>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onwaiting: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onwaiting>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onwaiting>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onwheel: ((org.w3c.dom.events.WheelEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onwheel>(): ((org.w3c.dom.events.WheelEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onwheel>(/*0*/ value: ((org.w3c.dom.events.WheelEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var outerHTML: kotlin.String
        public open override /*1*/ /*fake_override*/ fun <get-outerHTML>(): kotlin.String
        public open override /*1*/ /*fake_override*/ fun <set-outerHTML>(/*0*/ <set-?>: kotlin.String): kotlin.Unit
    public open override /*1*/ /*fake_override*/ val ownerDocument: org.w3c.dom.Document?
        public open override /*1*/ /*fake_override*/ fun <get-ownerDocument>(): org.w3c.dom.Document?
    public open override /*1*/ /*fake_override*/ val ownerSVGElement: org.w3c.dom.svg.SVGSVGElement?
        public open override /*1*/ /*fake_override*/ fun <get-ownerSVGElement>(): org.w3c.dom.svg.SVGSVGElement?
    public open override /*1*/ /*fake_override*/ val parentElement: org.w3c.dom.Element?
        public open override /*1*/ /*fake_override*/ fun <get-parentElement>(): org.w3c.dom.Element?
    public open override /*1*/ /*fake_override*/ val parentNode: org.w3c.dom.Node?
        public open override /*1*/ /*fake_override*/ fun <get-parentNode>(): org.w3c.dom.Node?
    public open override /*1*/ /*fake_override*/ val prefix: kotlin.String?
        public open override /*1*/ /*fake_override*/ fun <get-prefix>(): kotlin.String?
    public open override /*1*/ /*fake_override*/ val previousElementSibling: org.w3c.dom.Element?
        public open override /*1*/ /*fake_override*/ fun <get-previousElementSibling>(): org.w3c.dom.Element?
    public open override /*1*/ /*fake_override*/ val previousSibling: org.w3c.dom.Node?
        public open override /*1*/ /*fake_override*/ fun <get-previousSibling>(): org.w3c.dom.Node?
    public abstract override /*1*/ /*fake_override*/ val requiredExtensions: org.w3c.dom.svg.SVGStringList
        public abstract override /*1*/ /*fake_override*/ fun <get-requiredExtensions>(): org.w3c.dom.svg.SVGStringList
    public open override /*1*/ /*fake_override*/ val scrollHeight: kotlin.Int
        public open override /*1*/ /*fake_override*/ fun <get-scrollHeight>(): kotlin.Int
    public open override /*1*/ /*fake_override*/ var scrollLeft: kotlin.Double
        public open override /*1*/ /*fake_override*/ fun <get-scrollLeft>(): kotlin.Double
        public open override /*1*/ /*fake_override*/ fun <set-scrollLeft>(/*0*/ <set-?>: kotlin.Double): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var scrollTop: kotlin.Double
        public open override /*1*/ /*fake_override*/ fun <get-scrollTop>(): kotlin.Double
        public open override /*1*/ /*fake_override*/ fun <set-scrollTop>(/*0*/ <set-?>: kotlin.Double): kotlin.Unit
    public open override /*1*/ /*fake_override*/ val scrollWidth: kotlin.Int
        public open override /*1*/ /*fake_override*/ fun <get-scrollWidth>(): kotlin.Int
    public open override /*1*/ /*fake_override*/ val shadowRoot: org.w3c.dom.ShadowRoot?
        public open override /*1*/ /*fake_override*/ fun <get-shadowRoot>(): org.w3c.dom.ShadowRoot?
    public open override /*1*/ /*fake_override*/ var slot: kotlin.String
        public open override /*1*/ /*fake_override*/ fun <get-slot>(): kotlin.String
        public open override /*1*/ /*fake_override*/ fun <set-slot>(/*0*/ <set-?>: kotlin.String): kotlin.Unit
    public abstract override /*1*/ /*fake_override*/ val style: org.w3c.dom.css.CSSStyleDeclaration
        public abstract override /*1*/ /*fake_override*/ fun <get-style>(): org.w3c.dom.css.CSSStyleDeclaration
    public abstract override /*1*/ /*fake_override*/ val systemLanguage: org.w3c.dom.svg.SVGStringList
        public abstract override /*1*/ /*fake_override*/ fun <get-systemLanguage>(): org.w3c.dom.svg.SVGStringList
    public open override /*1*/ /*fake_override*/ var tabIndex: kotlin.Int
        public open override /*1*/ /*fake_override*/ fun <get-tabIndex>(): kotlin.Int
        public open override /*1*/ /*fake_override*/ fun <set-tabIndex>(/*0*/ <set-?>: kotlin.Int): kotlin.Unit
    public open override /*1*/ /*fake_override*/ val tagName: kotlin.String
        public open override /*1*/ /*fake_override*/ fun <get-tagName>(): kotlin.String
    public open override /*1*/ /*fake_override*/ var textContent: kotlin.String?
        public open override /*1*/ /*fake_override*/ fun <get-textContent>(): kotlin.String?
        public open override /*1*/ /*fake_override*/ fun <set-textContent>(/*0*/ <set-?>: kotlin.String?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ val transform: org.w3c.dom.svg.SVGAnimatedTransformList
        public open override /*1*/ /*fake_override*/ fun <get-transform>(): org.w3c.dom.svg.SVGAnimatedTransformList
    public open override /*1*/ /*fake_override*/ val viewportElement: org.w3c.dom.svg.SVGElement?
        public open override /*1*/ /*fake_override*/ fun <get-viewportElement>(): org.w3c.dom.svg.SVGElement?
    public final override /*1*/ /*fake_override*/ fun addEventListener(/*0*/ type: kotlin.String, /*1*/ callback: ((org.w3c.dom.events.Event) -> kotlin.Unit)?, /*2*/ options: dynamic = ...): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun addEventListener(/*0*/ type: kotlin.String, /*1*/ callback: org.w3c.dom.events.EventListener?, /*2*/ options: dynamic = ...): kotlin.Unit
    public abstract override /*1*/ /*fake_override*/ fun after(/*0*/ vararg nodes: dynamic /*kotlin.Array<out dynamic>*/): kotlin.Unit
    public abstract override /*1*/ /*fake_override*/ fun append(/*0*/ vararg nodes: dynamic /*kotlin.Array<out dynamic>*/): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun appendChild(/*0*/ node: org.w3c.dom.Node): org.w3c.dom.Node
    public final override /*1*/ /*fake_override*/ fun attachShadow(/*0*/ init: org.w3c.dom.ShadowRootInit): org.w3c.dom.ShadowRoot
    public abstract override /*1*/ /*fake_override*/ fun before(/*0*/ vararg nodes: dynamic /*kotlin.Array<out dynamic>*/): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun blur(): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun cloneNode(/*0*/ deep: kotlin.Boolean = ...): org.w3c.dom.Node
    public final override /*1*/ /*fake_override*/ fun closest(/*0*/ selectors: kotlin.String): org.w3c.dom.Element?
    public final override /*1*/ /*fake_override*/ fun compareDocumentPosition(/*0*/ other: org.w3c.dom.Node): kotlin.Short
    public final override /*1*/ /*fake_override*/ fun contains(/*0*/ other: org.w3c.dom.Node?): kotlin.Boolean
    public abstract override /*1*/ /*fake_override*/ fun convertPointFromNode(/*0*/ point: org.w3c.dom.DOMPointInit, /*1*/ from: dynamic, /*2*/ options: org.w3c.dom.ConvertCoordinateOptions = ...): org.w3c.dom.DOMPoint
    public abstract override /*1*/ /*fake_override*/ fun convertQuadFromNode(/*0*/ quad: dynamic, /*1*/ from: dynamic, /*2*/ options: org.w3c.dom.ConvertCoordinateOptions = ...): org.w3c.dom.DOMQuad
    public abstract override /*1*/ /*fake_override*/ fun convertRectFromNode(/*0*/ rect: org.w3c.dom.DOMRectReadOnly, /*1*/ from: dynamic, /*2*/ options: org.w3c.dom.ConvertCoordinateOptions = ...): org.w3c.dom.DOMQuad
    public final override /*1*/ /*fake_override*/ fun dispatchEvent(/*0*/ event: org.w3c.dom.events.Event): kotlin.Boolean
    public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
    public final override /*1*/ /*fake_override*/ fun focus(): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun getAttribute(/*0*/ qualifiedName: kotlin.String): kotlin.String?
    public final override /*1*/ /*fake_override*/ fun getAttributeNS(/*0*/ namespace: kotlin.String?, /*1*/ localName: kotlin.String): kotlin.String?
    public final override /*1*/ /*fake_override*/ fun getAttributeNames(): kotlin.Array<kotlin.String>
    public final override /*1*/ /*fake_override*/ fun getAttributeNode(/*0*/ qualifiedName: kotlin.String): org.w3c.dom.Attr?
    public final override /*1*/ /*fake_override*/ fun getAttributeNodeNS(/*0*/ namespace: kotlin.String?, /*1*/ localName: kotlin.String): org.w3c.dom.Attr?
    public final override /*1*/ /*fake_override*/ fun getBBox(/*0*/ options: org.w3c.dom.svg.SVGBoundingBoxOptions = ...): org.w3c.dom.DOMRect
    public final override /*1*/ /*fake_override*/ fun getBoundingClientRect(): org.w3c.dom.DOMRect
    public abstract override /*1*/ /*fake_override*/ fun getBoxQuads(/*0*/ options: org.w3c.dom.BoxQuadOptions = ...): kotlin.Array<org.w3c.dom.DOMQuad>
    public final override /*1*/ /*fake_override*/ fun getCTM(): org.w3c.dom.DOMMatrix?
    public final override /*1*/ /*fake_override*/ fun getClientRects(): kotlin.Array<org.w3c.dom.DOMRect>
    public final override /*1*/ /*fake_override*/ fun getElementsByClassName(/*0*/ classNames: kotlin.String): org.w3c.dom.HTMLCollection
    public final override /*1*/ /*fake_override*/ fun getElementsByTagName(/*0*/ qualifiedName: kotlin.String): org.w3c.dom.HTMLCollection
    public final override /*1*/ /*fake_override*/ fun getElementsByTagNameNS(/*0*/ namespace: kotlin.String?, /*1*/ localName: kotlin.String): org.w3c.dom.HTMLCollection
    public final override /*1*/ /*fake_override*/ fun getRootNode(/*0*/ options: org.w3c.dom.GetRootNodeOptions = ...): org.w3c.dom.Node
    public final override /*1*/ /*fake_override*/ fun getScreenCTM(): org.w3c.dom.DOMMatrix?
    public final override /*1*/ /*fake_override*/ fun hasAttribute(/*0*/ qualifiedName: kotlin.String): kotlin.Boolean
    public final override /*1*/ /*fake_override*/ fun hasAttributeNS(/*0*/ namespace: kotlin.String?, /*1*/ localName: kotlin.String): kotlin.Boolean
    public final override /*1*/ /*fake_override*/ fun hasAttributes(): kotlin.Boolean
    public final override /*1*/ /*fake_override*/ fun hasChildNodes(): kotlin.Boolean
    public final override /*1*/ /*fake_override*/ fun hasPointerCapture(/*0*/ pointerId: kotlin.Int): kotlin.Boolean
    public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
    public final override /*1*/ /*fake_override*/ fun insertAdjacentElement(/*0*/ where: kotlin.String, /*1*/ element: org.w3c.dom.Element): org.w3c.dom.Element?
    public final override /*1*/ /*fake_override*/ fun insertAdjacentHTML(/*0*/ position: kotlin.String, /*1*/ text: kotlin.String): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun insertAdjacentText(/*0*/ where: kotlin.String, /*1*/ data: kotlin.String): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun insertBefore(/*0*/ node: org.w3c.dom.Node, /*1*/ child: org.w3c.dom.Node?): org.w3c.dom.Node
    public final override /*1*/ /*fake_override*/ fun isDefaultNamespace(/*0*/ namespace: kotlin.String?): kotlin.Boolean
    public final override /*1*/ /*fake_override*/ fun isEqualNode(/*0*/ otherNode: org.w3c.dom.Node?): kotlin.Boolean
    public final override /*1*/ /*fake_override*/ fun isSameNode(/*0*/ otherNode: org.w3c.dom.Node?): kotlin.Boolean
    public final override /*1*/ /*fake_override*/ fun lookupNamespaceURI(/*0*/ prefix: kotlin.String?): kotlin.String?
    public final override /*1*/ /*fake_override*/ fun lookupPrefix(/*0*/ namespace: kotlin.String?): kotlin.String?
    public final override /*1*/ /*fake_override*/ fun matches(/*0*/ selectors: kotlin.String): kotlin.Boolean
    public final override /*1*/ /*fake_override*/ fun normalize(): kotlin.Unit
    public abstract override /*1*/ /*fake_override*/ fun prepend(/*0*/ vararg nodes: dynamic /*kotlin.Array<out dynamic>*/): kotlin.Unit
    public abstract override /*1*/ /*fake_override*/ fun querySelector(/*0*/ selectors: kotlin.String): org.w3c.dom.Element?
    public abstract override /*1*/ /*fake_override*/ fun querySelectorAll(/*0*/ selectors: kotlin.String): org.w3c.dom.NodeList
    public final override /*1*/ /*fake_override*/ fun releasePointerCapture(/*0*/ pointerId: kotlin.Int): kotlin.Unit
    public abstract override /*1*/ /*fake_override*/ fun remove(): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun removeAttribute(/*0*/ qualifiedName: kotlin.String): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun removeAttributeNS(/*0*/ namespace: kotlin.String?, /*1*/ localName: kotlin.String): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun removeAttributeNode(/*0*/ attr: org.w3c.dom.Attr): org.w3c.dom.Attr
    public final override /*1*/ /*fake_override*/ fun removeChild(/*0*/ child: org.w3c.dom.Node): org.w3c.dom.Node
    public final override /*1*/ /*fake_override*/ fun removeEventListener(/*0*/ type: kotlin.String, /*1*/ callback: ((org.w3c.dom.events.Event) -> kotlin.Unit)?, /*2*/ options: dynamic = ...): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun removeEventListener(/*0*/ type: kotlin.String, /*1*/ callback: org.w3c.dom.events.EventListener?, /*2*/ options: dynamic = ...): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun replaceChild(/*0*/ node: org.w3c.dom.Node, /*1*/ child: org.w3c.dom.Node): org.w3c.dom.Node
    public abstract override /*1*/ /*fake_override*/ fun replaceWith(/*0*/ vararg nodes: dynamic /*kotlin.Array<out dynamic>*/): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun requestFullscreen(): kotlin.js.Promise<kotlin.Unit>
    public final override /*1*/ /*fake_override*/ fun scroll(/*0*/ x: kotlin.Double, /*1*/ y: kotlin.Double): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun scroll(/*0*/ options: org.w3c.dom.ScrollToOptions = ...): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun scrollBy(/*0*/ x: kotlin.Double, /*1*/ y: kotlin.Double): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun scrollBy(/*0*/ options: org.w3c.dom.ScrollToOptions = ...): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun scrollIntoView(): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun scrollIntoView(/*0*/ arg: dynamic): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun scrollTo(/*0*/ x: kotlin.Double, /*1*/ y: kotlin.Double): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun scrollTo(/*0*/ options: org.w3c.dom.ScrollToOptions = ...): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun setAttribute(/*0*/ qualifiedName: kotlin.String, /*1*/ value: kotlin.String): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun setAttributeNS(/*0*/ namespace: kotlin.String?, /*1*/ qualifiedName: kotlin.String, /*2*/ value: kotlin.String): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun setAttributeNode(/*0*/ attr: org.w3c.dom.Attr): org.w3c.dom.Attr?
    public final override /*1*/ /*fake_override*/ fun setAttributeNodeNS(/*0*/ attr: org.w3c.dom.Attr): org.w3c.dom.Attr?
    public final override /*1*/ /*fake_override*/ fun setPointerCapture(/*0*/ pointerId: kotlin.Int): kotlin.Unit
    public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
    public final override /*1*/ /*fake_override*/ fun webkitMatchesSelector(/*0*/ selectors: kotlin.String): kotlin.Boolean

    public companion object Companion {
        /*primary*/ private constructor Companion()
        public final val ATTRIBUTE_NODE: kotlin.Short
            public final fun <get-ATTRIBUTE_NODE>(): kotlin.Short
        public final val CDATA_SECTION_NODE: kotlin.Short
            public final fun <get-CDATA_SECTION_NODE>(): kotlin.Short
        public final val COMMENT_NODE: kotlin.Short
            public final fun <get-COMMENT_NODE>(): kotlin.Short
        public final val DOCUMENT_FRAGMENT_NODE: kotlin.Short
            public final fun <get-DOCUMENT_FRAGMENT_NODE>(): kotlin.Short
        public final val DOCUMENT_NODE: kotlin.Short
            public final fun <get-DOCUMENT_NODE>(): kotlin.Short
        public final val DOCUMENT_POSITION_CONTAINED_BY: kotlin.Short
            public final fun <get-DOCUMENT_POSITION_CONTAINED_BY>(): kotlin.Short
        public final val DOCUMENT_POSITION_CONTAINS: kotlin.Short
            public final fun <get-DOCUMENT_POSITION_CONTAINS>(): kotlin.Short
        public final val DOCUMENT_POSITION_DISCONNECTED: kotlin.Short
            public final fun <get-DOCUMENT_POSITION_DISCONNECTED>(): kotlin.Short
        public final val DOCUMENT_POSITION_FOLLOWING: kotlin.Short
            public final fun <get-DOCUMENT_POSITION_FOLLOWING>(): kotlin.Short
        public final val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: kotlin.Short
            public final fun <get-DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC>(): kotlin.Short
        public final val DOCUMENT_POSITION_PRECEDING: kotlin.Short
            public final fun <get-DOCUMENT_POSITION_PRECEDING>(): kotlin.Short
        public final val DOCUMENT_TYPE_NODE: kotlin.Short
            public final fun <get-DOCUMENT_TYPE_NODE>(): kotlin.Short
        public final val ELEMENT_NODE: kotlin.Short
            public final fun <get-ELEMENT_NODE>(): kotlin.Short
        public final val ENTITY_NODE: kotlin.Short
            public final fun <get-ENTITY_NODE>(): kotlin.Short
        public final val ENTITY_REFERENCE_NODE: kotlin.Short
            public final fun <get-ENTITY_REFERENCE_NODE>(): kotlin.Short
        public final val NOTATION_NODE: kotlin.Short
            public final fun <get-NOTATION_NODE>(): kotlin.Short
        public final val PROCESSING_INSTRUCTION_NODE: kotlin.Short
            public final fun <get-PROCESSING_INSTRUCTION_NODE>(): kotlin.Short
        public final val TEXT_NODE: kotlin.Short
            public final fun <get-TEXT_NODE>(): kotlin.Short
        public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
        public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
        public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
    }
}

public abstract external class SVGSymbolElement : org.w3c.dom.svg.SVGGraphicsElement, org.w3c.dom.svg.SVGFitToViewBox {
    /*primary*/ public constructor SVGSymbolElement()
    public open override /*1*/ /*fake_override*/ val assignedSlot: org.w3c.dom.HTMLSlotElement?
        public open override /*1*/ /*fake_override*/ fun <get-assignedSlot>(): org.w3c.dom.HTMLSlotElement?
    public open override /*1*/ /*fake_override*/ val attributes: org.w3c.dom.NamedNodeMap
        public open override /*1*/ /*fake_override*/ fun <get-attributes>(): org.w3c.dom.NamedNodeMap
    public open override /*1*/ /*fake_override*/ val baseURI: kotlin.String
        public open override /*1*/ /*fake_override*/ fun <get-baseURI>(): kotlin.String
    public abstract override /*1*/ /*fake_override*/ val childElementCount: kotlin.Int
        public abstract override /*1*/ /*fake_override*/ fun <get-childElementCount>(): kotlin.Int
    public open override /*1*/ /*fake_override*/ val childNodes: org.w3c.dom.NodeList
        public open override /*1*/ /*fake_override*/ fun <get-childNodes>(): org.w3c.dom.NodeList
    public abstract override /*1*/ /*fake_override*/ val children: org.w3c.dom.HTMLCollection
        public abstract override /*1*/ /*fake_override*/ fun <get-children>(): org.w3c.dom.HTMLCollection
    public open override /*1*/ /*fake_override*/ val classList: org.w3c.dom.DOMTokenList
        public open override /*1*/ /*fake_override*/ fun <get-classList>(): org.w3c.dom.DOMTokenList
    public open override /*1*/ /*fake_override*/ var className: kotlin.String
        public open override /*1*/ /*fake_override*/ fun <get-className>(): kotlin.String
        public open override /*1*/ /*fake_override*/ fun <set-className>(/*0*/ <set-?>: kotlin.String): kotlin.Unit
    public open override /*1*/ /*fake_override*/ val clientHeight: kotlin.Int
        public open override /*1*/ /*fake_override*/ fun <get-clientHeight>(): kotlin.Int
    public open override /*1*/ /*fake_override*/ val clientLeft: kotlin.Int
        public open override /*1*/ /*fake_override*/ fun <get-clientLeft>(): kotlin.Int
    public open override /*1*/ /*fake_override*/ val clientTop: kotlin.Int
        public open override /*1*/ /*fake_override*/ fun <get-clientTop>(): kotlin.Int
    public open override /*1*/ /*fake_override*/ val clientWidth: kotlin.Int
        public open override /*1*/ /*fake_override*/ fun <get-clientWidth>(): kotlin.Int
    public open override /*1*/ /*fake_override*/ val correspondingElement: org.w3c.dom.svg.SVGElement?
        public open override /*1*/ /*fake_override*/ fun <get-correspondingElement>(): org.w3c.dom.svg.SVGElement?
    public open override /*1*/ /*fake_override*/ val correspondingUseElement: org.w3c.dom.svg.SVGUseElement?
        public open override /*1*/ /*fake_override*/ fun <get-correspondingUseElement>(): org.w3c.dom.svg.SVGUseElement?
    public open override /*1*/ /*fake_override*/ val dataset: org.w3c.dom.DOMStringMap
        public open override /*1*/ /*fake_override*/ fun <get-dataset>(): org.w3c.dom.DOMStringMap
    public open override /*1*/ /*fake_override*/ val firstChild: org.w3c.dom.Node?
        public open override /*1*/ /*fake_override*/ fun <get-firstChild>(): org.w3c.dom.Node?
    public open override /*1*/ /*fake_override*/ val firstElementChild: org.w3c.dom.Element?
        public open override /*1*/ /*fake_override*/ fun <get-firstElementChild>(): org.w3c.dom.Element?
    public open override /*1*/ /*fake_override*/ var id: kotlin.String
        public open override /*1*/ /*fake_override*/ fun <get-id>(): kotlin.String
        public open override /*1*/ /*fake_override*/ fun <set-id>(/*0*/ <set-?>: kotlin.String): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var innerHTML: kotlin.String
        public open override /*1*/ /*fake_override*/ fun <get-innerHTML>(): kotlin.String
        public open override /*1*/ /*fake_override*/ fun <set-innerHTML>(/*0*/ <set-?>: kotlin.String): kotlin.Unit
    public open override /*1*/ /*fake_override*/ val isConnected: kotlin.Boolean
        public open override /*1*/ /*fake_override*/ fun <get-isConnected>(): kotlin.Boolean
    public open override /*1*/ /*fake_override*/ val lastChild: org.w3c.dom.Node?
        public open override /*1*/ /*fake_override*/ fun <get-lastChild>(): org.w3c.dom.Node?
    public open override /*1*/ /*fake_override*/ val lastElementChild: org.w3c.dom.Element?
        public open override /*1*/ /*fake_override*/ fun <get-lastElementChild>(): org.w3c.dom.Element?
    public open override /*1*/ /*fake_override*/ val localName: kotlin.String
        public open override /*1*/ /*fake_override*/ fun <get-localName>(): kotlin.String
    public open override /*1*/ /*fake_override*/ val namespaceURI: kotlin.String?
        public open override /*1*/ /*fake_override*/ fun <get-namespaceURI>(): kotlin.String?
    public open override /*1*/ /*fake_override*/ val nextElementSibling: org.w3c.dom.Element?
        public open override /*1*/ /*fake_override*/ fun <get-nextElementSibling>(): org.w3c.dom.Element?
    public open override /*1*/ /*fake_override*/ val nextSibling: org.w3c.dom.Node?
        public open override /*1*/ /*fake_override*/ fun <get-nextSibling>(): org.w3c.dom.Node?
    public open override /*1*/ /*fake_override*/ val nodeName: kotlin.String
        public open override /*1*/ /*fake_override*/ fun <get-nodeName>(): kotlin.String
    public open override /*1*/ /*fake_override*/ val nodeType: kotlin.Short
        public open override /*1*/ /*fake_override*/ fun <get-nodeType>(): kotlin.Short
    public open override /*1*/ /*fake_override*/ var nodeValue: kotlin.String?
        public open override /*1*/ /*fake_override*/ fun <get-nodeValue>(): kotlin.String?
        public open override /*1*/ /*fake_override*/ fun <set-nodeValue>(/*0*/ <set-?>: kotlin.String?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onabort: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onabort>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onabort>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onblur: ((org.w3c.dom.events.FocusEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onblur>(): ((org.w3c.dom.events.FocusEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onblur>(/*0*/ value: ((org.w3c.dom.events.FocusEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var oncancel: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-oncancel>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-oncancel>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var oncanplay: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-oncanplay>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-oncanplay>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var oncanplaythrough: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-oncanplaythrough>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-oncanplaythrough>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onchange: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onchange>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onchange>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onclick: ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onclick>(): ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onclick>(/*0*/ value: ((org.w3c.dom.events.MouseEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onclose: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onclose>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onclose>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var oncontextmenu: ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-oncontextmenu>(): ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-oncontextmenu>(/*0*/ value: ((org.w3c.dom.events.MouseEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var oncuechange: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-oncuechange>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-oncuechange>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ondblclick: ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ondblclick>(): ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ondblclick>(/*0*/ value: ((org.w3c.dom.events.MouseEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ondrag: ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ondrag>(): ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ondrag>(/*0*/ value: ((org.w3c.dom.DragEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ondragend: ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ondragend>(): ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ondragend>(/*0*/ value: ((org.w3c.dom.DragEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ondragenter: ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ondragenter>(): ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ondragenter>(/*0*/ value: ((org.w3c.dom.DragEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ondragexit: ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ondragexit>(): ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ondragexit>(/*0*/ value: ((org.w3c.dom.DragEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ondragleave: ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ondragleave>(): ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ondragleave>(/*0*/ value: ((org.w3c.dom.DragEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ondragover: ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ondragover>(): ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ondragover>(/*0*/ value: ((org.w3c.dom.DragEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ondragstart: ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ondragstart>(): ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ondragstart>(/*0*/ value: ((org.w3c.dom.DragEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ondrop: ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ondrop>(): ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ondrop>(/*0*/ value: ((org.w3c.dom.DragEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ondurationchange: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ondurationchange>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ondurationchange>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onemptied: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onemptied>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onemptied>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onended: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onended>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onended>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onerror: ((dynamic, kotlin.String, kotlin.Int, kotlin.Int, kotlin.Any?) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onerror>(): ((dynamic, kotlin.String, kotlin.Int, kotlin.Int, kotlin.Any?) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onerror>(/*0*/ value: ((dynamic, kotlin.String, kotlin.Int, kotlin.Int, kotlin.Any?) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onfocus: ((org.w3c.dom.events.FocusEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onfocus>(): ((org.w3c.dom.events.FocusEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onfocus>(/*0*/ value: ((org.w3c.dom.events.FocusEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ongotpointercapture: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ongotpointercapture>(): ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ongotpointercapture>(/*0*/ value: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var oninput: ((org.w3c.dom.events.InputEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-oninput>(): ((org.w3c.dom.events.InputEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-oninput>(/*0*/ value: ((org.w3c.dom.events.InputEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var oninvalid: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-oninvalid>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-oninvalid>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onkeydown: ((org.w3c.dom.events.KeyboardEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onkeydown>(): ((org.w3c.dom.events.KeyboardEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onkeydown>(/*0*/ value: ((org.w3c.dom.events.KeyboardEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onkeypress: ((org.w3c.dom.events.KeyboardEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onkeypress>(): ((org.w3c.dom.events.KeyboardEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onkeypress>(/*0*/ value: ((org.w3c.dom.events.KeyboardEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onkeyup: ((org.w3c.dom.events.KeyboardEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onkeyup>(): ((org.w3c.dom.events.KeyboardEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onkeyup>(/*0*/ value: ((org.w3c.dom.events.KeyboardEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onload: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onload>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onload>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onloadeddata: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onloadeddata>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onloadeddata>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onloadedmetadata: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onloadedmetadata>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onloadedmetadata>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onloadend: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onloadend>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onloadend>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onloadstart: ((org.w3c.xhr.ProgressEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onloadstart>(): ((org.w3c.xhr.ProgressEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onloadstart>(/*0*/ value: ((org.w3c.xhr.ProgressEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onlostpointercapture: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onlostpointercapture>(): ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onlostpointercapture>(/*0*/ value: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onmousedown: ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onmousedown>(): ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onmousedown>(/*0*/ value: ((org.w3c.dom.events.MouseEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onmouseenter: ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onmouseenter>(): ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onmouseenter>(/*0*/ value: ((org.w3c.dom.events.MouseEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onmouseleave: ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onmouseleave>(): ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onmouseleave>(/*0*/ value: ((org.w3c.dom.events.MouseEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onmousemove: ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onmousemove>(): ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onmousemove>(/*0*/ value: ((org.w3c.dom.events.MouseEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onmouseout: ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onmouseout>(): ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onmouseout>(/*0*/ value: ((org.w3c.dom.events.MouseEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onmouseover: ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onmouseover>(): ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onmouseover>(/*0*/ value: ((org.w3c.dom.events.MouseEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onmouseup: ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onmouseup>(): ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onmouseup>(/*0*/ value: ((org.w3c.dom.events.MouseEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onpause: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onpause>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onpause>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onplay: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onplay>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onplay>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onplaying: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onplaying>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onplaying>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onpointercancel: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onpointercancel>(): ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onpointercancel>(/*0*/ value: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onpointerdown: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onpointerdown>(): ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onpointerdown>(/*0*/ value: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onpointerenter: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onpointerenter>(): ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onpointerenter>(/*0*/ value: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onpointerleave: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onpointerleave>(): ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onpointerleave>(/*0*/ value: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onpointermove: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onpointermove>(): ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onpointermove>(/*0*/ value: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onpointerout: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onpointerout>(): ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onpointerout>(/*0*/ value: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onpointerover: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onpointerover>(): ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onpointerover>(/*0*/ value: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onpointerup: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onpointerup>(): ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onpointerup>(/*0*/ value: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onprogress: ((org.w3c.xhr.ProgressEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onprogress>(): ((org.w3c.xhr.ProgressEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onprogress>(/*0*/ value: ((org.w3c.xhr.ProgressEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onratechange: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onratechange>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onratechange>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onreset: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onreset>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onreset>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onresize: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onresize>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onresize>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onscroll: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onscroll>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onscroll>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onseeked: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onseeked>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onseeked>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onseeking: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onseeking>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onseeking>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onselect: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onselect>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onselect>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onshow: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onshow>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onshow>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onstalled: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onstalled>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onstalled>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onsubmit: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onsubmit>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onsubmit>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onsuspend: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onsuspend>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onsuspend>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ontimeupdate: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ontimeupdate>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ontimeupdate>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ontoggle: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ontoggle>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ontoggle>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onvolumechange: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onvolumechange>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onvolumechange>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onwaiting: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onwaiting>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onwaiting>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onwheel: ((org.w3c.dom.events.WheelEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onwheel>(): ((org.w3c.dom.events.WheelEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onwheel>(/*0*/ value: ((org.w3c.dom.events.WheelEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var outerHTML: kotlin.String
        public open override /*1*/ /*fake_override*/ fun <get-outerHTML>(): kotlin.String
        public open override /*1*/ /*fake_override*/ fun <set-outerHTML>(/*0*/ <set-?>: kotlin.String): kotlin.Unit
    public open override /*1*/ /*fake_override*/ val ownerDocument: org.w3c.dom.Document?
        public open override /*1*/ /*fake_override*/ fun <get-ownerDocument>(): org.w3c.dom.Document?
    public open override /*1*/ /*fake_override*/ val ownerSVGElement: org.w3c.dom.svg.SVGSVGElement?
        public open override /*1*/ /*fake_override*/ fun <get-ownerSVGElement>(): org.w3c.dom.svg.SVGSVGElement?
    public open override /*1*/ /*fake_override*/ val parentElement: org.w3c.dom.Element?
        public open override /*1*/ /*fake_override*/ fun <get-parentElement>(): org.w3c.dom.Element?
    public open override /*1*/ /*fake_override*/ val parentNode: org.w3c.dom.Node?
        public open override /*1*/ /*fake_override*/ fun <get-parentNode>(): org.w3c.dom.Node?
    public open override /*1*/ /*fake_override*/ val prefix: kotlin.String?
        public open override /*1*/ /*fake_override*/ fun <get-prefix>(): kotlin.String?
    public abstract override /*1*/ /*fake_override*/ val preserveAspectRatio: org.w3c.dom.svg.SVGAnimatedPreserveAspectRatio
        public abstract override /*1*/ /*fake_override*/ fun <get-preserveAspectRatio>(): org.w3c.dom.svg.SVGAnimatedPreserveAspectRatio
    public open override /*1*/ /*fake_override*/ val previousElementSibling: org.w3c.dom.Element?
        public open override /*1*/ /*fake_override*/ fun <get-previousElementSibling>(): org.w3c.dom.Element?
    public open override /*1*/ /*fake_override*/ val previousSibling: org.w3c.dom.Node?
        public open override /*1*/ /*fake_override*/ fun <get-previousSibling>(): org.w3c.dom.Node?
    public abstract override /*1*/ /*fake_override*/ val requiredExtensions: org.w3c.dom.svg.SVGStringList
        public abstract override /*1*/ /*fake_override*/ fun <get-requiredExtensions>(): org.w3c.dom.svg.SVGStringList
    public open override /*1*/ /*fake_override*/ val scrollHeight: kotlin.Int
        public open override /*1*/ /*fake_override*/ fun <get-scrollHeight>(): kotlin.Int
    public open override /*1*/ /*fake_override*/ var scrollLeft: kotlin.Double
        public open override /*1*/ /*fake_override*/ fun <get-scrollLeft>(): kotlin.Double
        public open override /*1*/ /*fake_override*/ fun <set-scrollLeft>(/*0*/ <set-?>: kotlin.Double): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var scrollTop: kotlin.Double
        public open override /*1*/ /*fake_override*/ fun <get-scrollTop>(): kotlin.Double
        public open override /*1*/ /*fake_override*/ fun <set-scrollTop>(/*0*/ <set-?>: kotlin.Double): kotlin.Unit
    public open override /*1*/ /*fake_override*/ val scrollWidth: kotlin.Int
        public open override /*1*/ /*fake_override*/ fun <get-scrollWidth>(): kotlin.Int
    public open override /*1*/ /*fake_override*/ val shadowRoot: org.w3c.dom.ShadowRoot?
        public open override /*1*/ /*fake_override*/ fun <get-shadowRoot>(): org.w3c.dom.ShadowRoot?
    public open override /*1*/ /*fake_override*/ var slot: kotlin.String
        public open override /*1*/ /*fake_override*/ fun <get-slot>(): kotlin.String
        public open override /*1*/ /*fake_override*/ fun <set-slot>(/*0*/ <set-?>: kotlin.String): kotlin.Unit
    public abstract override /*1*/ /*fake_override*/ val style: org.w3c.dom.css.CSSStyleDeclaration
        public abstract override /*1*/ /*fake_override*/ fun <get-style>(): org.w3c.dom.css.CSSStyleDeclaration
    public abstract override /*1*/ /*fake_override*/ val systemLanguage: org.w3c.dom.svg.SVGStringList
        public abstract override /*1*/ /*fake_override*/ fun <get-systemLanguage>(): org.w3c.dom.svg.SVGStringList
    public open override /*1*/ /*fake_override*/ var tabIndex: kotlin.Int
        public open override /*1*/ /*fake_override*/ fun <get-tabIndex>(): kotlin.Int
        public open override /*1*/ /*fake_override*/ fun <set-tabIndex>(/*0*/ <set-?>: kotlin.Int): kotlin.Unit
    public open override /*1*/ /*fake_override*/ val tagName: kotlin.String
        public open override /*1*/ /*fake_override*/ fun <get-tagName>(): kotlin.String
    public open override /*1*/ /*fake_override*/ var textContent: kotlin.String?
        public open override /*1*/ /*fake_override*/ fun <get-textContent>(): kotlin.String?
        public open override /*1*/ /*fake_override*/ fun <set-textContent>(/*0*/ <set-?>: kotlin.String?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ val transform: org.w3c.dom.svg.SVGAnimatedTransformList
        public open override /*1*/ /*fake_override*/ fun <get-transform>(): org.w3c.dom.svg.SVGAnimatedTransformList
    public abstract override /*1*/ /*fake_override*/ val viewBox: org.w3c.dom.svg.SVGAnimatedRect
        public abstract override /*1*/ /*fake_override*/ fun <get-viewBox>(): org.w3c.dom.svg.SVGAnimatedRect
    public open override /*1*/ /*fake_override*/ val viewportElement: org.w3c.dom.svg.SVGElement?
        public open override /*1*/ /*fake_override*/ fun <get-viewportElement>(): org.w3c.dom.svg.SVGElement?
    public final override /*1*/ /*fake_override*/ fun addEventListener(/*0*/ type: kotlin.String, /*1*/ callback: ((org.w3c.dom.events.Event) -> kotlin.Unit)?, /*2*/ options: dynamic = ...): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun addEventListener(/*0*/ type: kotlin.String, /*1*/ callback: org.w3c.dom.events.EventListener?, /*2*/ options: dynamic = ...): kotlin.Unit
    public abstract override /*1*/ /*fake_override*/ fun after(/*0*/ vararg nodes: dynamic /*kotlin.Array<out dynamic>*/): kotlin.Unit
    public abstract override /*1*/ /*fake_override*/ fun append(/*0*/ vararg nodes: dynamic /*kotlin.Array<out dynamic>*/): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun appendChild(/*0*/ node: org.w3c.dom.Node): org.w3c.dom.Node
    public final override /*1*/ /*fake_override*/ fun attachShadow(/*0*/ init: org.w3c.dom.ShadowRootInit): org.w3c.dom.ShadowRoot
    public abstract override /*1*/ /*fake_override*/ fun before(/*0*/ vararg nodes: dynamic /*kotlin.Array<out dynamic>*/): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun blur(): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun cloneNode(/*0*/ deep: kotlin.Boolean = ...): org.w3c.dom.Node
    public final override /*1*/ /*fake_override*/ fun closest(/*0*/ selectors: kotlin.String): org.w3c.dom.Element?
    public final override /*1*/ /*fake_override*/ fun compareDocumentPosition(/*0*/ other: org.w3c.dom.Node): kotlin.Short
    public final override /*1*/ /*fake_override*/ fun contains(/*0*/ other: org.w3c.dom.Node?): kotlin.Boolean
    public abstract override /*1*/ /*fake_override*/ fun convertPointFromNode(/*0*/ point: org.w3c.dom.DOMPointInit, /*1*/ from: dynamic, /*2*/ options: org.w3c.dom.ConvertCoordinateOptions = ...): org.w3c.dom.DOMPoint
    public abstract override /*1*/ /*fake_override*/ fun convertQuadFromNode(/*0*/ quad: dynamic, /*1*/ from: dynamic, /*2*/ options: org.w3c.dom.ConvertCoordinateOptions = ...): org.w3c.dom.DOMQuad
    public abstract override /*1*/ /*fake_override*/ fun convertRectFromNode(/*0*/ rect: org.w3c.dom.DOMRectReadOnly, /*1*/ from: dynamic, /*2*/ options: org.w3c.dom.ConvertCoordinateOptions = ...): org.w3c.dom.DOMQuad
    public final override /*1*/ /*fake_override*/ fun dispatchEvent(/*0*/ event: org.w3c.dom.events.Event): kotlin.Boolean
    public open override /*2*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
    public final override /*1*/ /*fake_override*/ fun focus(): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun getAttribute(/*0*/ qualifiedName: kotlin.String): kotlin.String?
    public final override /*1*/ /*fake_override*/ fun getAttributeNS(/*0*/ namespace: kotlin.String?, /*1*/ localName: kotlin.String): kotlin.String?
    public final override /*1*/ /*fake_override*/ fun getAttributeNames(): kotlin.Array<kotlin.String>
    public final override /*1*/ /*fake_override*/ fun getAttributeNode(/*0*/ qualifiedName: kotlin.String): org.w3c.dom.Attr?
    public final override /*1*/ /*fake_override*/ fun getAttributeNodeNS(/*0*/ namespace: kotlin.String?, /*1*/ localName: kotlin.String): org.w3c.dom.Attr?
    public final override /*1*/ /*fake_override*/ fun getBBox(/*0*/ options: org.w3c.dom.svg.SVGBoundingBoxOptions = ...): org.w3c.dom.DOMRect
    public final override /*1*/ /*fake_override*/ fun getBoundingClientRect(): org.w3c.dom.DOMRect
    public abstract override /*1*/ /*fake_override*/ fun getBoxQuads(/*0*/ options: org.w3c.dom.BoxQuadOptions = ...): kotlin.Array<org.w3c.dom.DOMQuad>
    public final override /*1*/ /*fake_override*/ fun getCTM(): org.w3c.dom.DOMMatrix?
    public final override /*1*/ /*fake_override*/ fun getClientRects(): kotlin.Array<org.w3c.dom.DOMRect>
    public final override /*1*/ /*fake_override*/ fun getElementsByClassName(/*0*/ classNames: kotlin.String): org.w3c.dom.HTMLCollection
    public final override /*1*/ /*fake_override*/ fun getElementsByTagName(/*0*/ qualifiedName: kotlin.String): org.w3c.dom.HTMLCollection
    public final override /*1*/ /*fake_override*/ fun getElementsByTagNameNS(/*0*/ namespace: kotlin.String?, /*1*/ localName: kotlin.String): org.w3c.dom.HTMLCollection
    public final override /*1*/ /*fake_override*/ fun getRootNode(/*0*/ options: org.w3c.dom.GetRootNodeOptions = ...): org.w3c.dom.Node
    public final override /*1*/ /*fake_override*/ fun getScreenCTM(): org.w3c.dom.DOMMatrix?
    public final override /*1*/ /*fake_override*/ fun hasAttribute(/*0*/ qualifiedName: kotlin.String): kotlin.Boolean
    public final override /*1*/ /*fake_override*/ fun hasAttributeNS(/*0*/ namespace: kotlin.String?, /*1*/ localName: kotlin.String): kotlin.Boolean
    public final override /*1*/ /*fake_override*/ fun hasAttributes(): kotlin.Boolean
    public final override /*1*/ /*fake_override*/ fun hasChildNodes(): kotlin.Boolean
    public final override /*1*/ /*fake_override*/ fun hasPointerCapture(/*0*/ pointerId: kotlin.Int): kotlin.Boolean
    public open override /*2*/ /*fake_override*/ fun hashCode(): kotlin.Int
    public final override /*1*/ /*fake_override*/ fun insertAdjacentElement(/*0*/ where: kotlin.String, /*1*/ element: org.w3c.dom.Element): org.w3c.dom.Element?
    public final override /*1*/ /*fake_override*/ fun insertAdjacentHTML(/*0*/ position: kotlin.String, /*1*/ text: kotlin.String): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun insertAdjacentText(/*0*/ where: kotlin.String, /*1*/ data: kotlin.String): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun insertBefore(/*0*/ node: org.w3c.dom.Node, /*1*/ child: org.w3c.dom.Node?): org.w3c.dom.Node
    public final override /*1*/ /*fake_override*/ fun isDefaultNamespace(/*0*/ namespace: kotlin.String?): kotlin.Boolean
    public final override /*1*/ /*fake_override*/ fun isEqualNode(/*0*/ otherNode: org.w3c.dom.Node?): kotlin.Boolean
    public final override /*1*/ /*fake_override*/ fun isSameNode(/*0*/ otherNode: org.w3c.dom.Node?): kotlin.Boolean
    public final override /*1*/ /*fake_override*/ fun lookupNamespaceURI(/*0*/ prefix: kotlin.String?): kotlin.String?
    public final override /*1*/ /*fake_override*/ fun lookupPrefix(/*0*/ namespace: kotlin.String?): kotlin.String?
    public final override /*1*/ /*fake_override*/ fun matches(/*0*/ selectors: kotlin.String): kotlin.Boolean
    public final override /*1*/ /*fake_override*/ fun normalize(): kotlin.Unit
    public abstract override /*1*/ /*fake_override*/ fun prepend(/*0*/ vararg nodes: dynamic /*kotlin.Array<out dynamic>*/): kotlin.Unit
    public abstract override /*1*/ /*fake_override*/ fun querySelector(/*0*/ selectors: kotlin.String): org.w3c.dom.Element?
    public abstract override /*1*/ /*fake_override*/ fun querySelectorAll(/*0*/ selectors: kotlin.String): org.w3c.dom.NodeList
    public final override /*1*/ /*fake_override*/ fun releasePointerCapture(/*0*/ pointerId: kotlin.Int): kotlin.Unit
    public abstract override /*1*/ /*fake_override*/ fun remove(): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun removeAttribute(/*0*/ qualifiedName: kotlin.String): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun removeAttributeNS(/*0*/ namespace: kotlin.String?, /*1*/ localName: kotlin.String): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun removeAttributeNode(/*0*/ attr: org.w3c.dom.Attr): org.w3c.dom.Attr
    public final override /*1*/ /*fake_override*/ fun removeChild(/*0*/ child: org.w3c.dom.Node): org.w3c.dom.Node
    public final override /*1*/ /*fake_override*/ fun removeEventListener(/*0*/ type: kotlin.String, /*1*/ callback: ((org.w3c.dom.events.Event) -> kotlin.Unit)?, /*2*/ options: dynamic = ...): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun removeEventListener(/*0*/ type: kotlin.String, /*1*/ callback: org.w3c.dom.events.EventListener?, /*2*/ options: dynamic = ...): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun replaceChild(/*0*/ node: org.w3c.dom.Node, /*1*/ child: org.w3c.dom.Node): org.w3c.dom.Node
    public abstract override /*1*/ /*fake_override*/ fun replaceWith(/*0*/ vararg nodes: dynamic /*kotlin.Array<out dynamic>*/): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun requestFullscreen(): kotlin.js.Promise<kotlin.Unit>
    public final override /*1*/ /*fake_override*/ fun scroll(/*0*/ x: kotlin.Double, /*1*/ y: kotlin.Double): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun scroll(/*0*/ options: org.w3c.dom.ScrollToOptions = ...): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun scrollBy(/*0*/ x: kotlin.Double, /*1*/ y: kotlin.Double): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun scrollBy(/*0*/ options: org.w3c.dom.ScrollToOptions = ...): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun scrollIntoView(): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun scrollIntoView(/*0*/ arg: dynamic): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun scrollTo(/*0*/ x: kotlin.Double, /*1*/ y: kotlin.Double): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun scrollTo(/*0*/ options: org.w3c.dom.ScrollToOptions = ...): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun setAttribute(/*0*/ qualifiedName: kotlin.String, /*1*/ value: kotlin.String): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun setAttributeNS(/*0*/ namespace: kotlin.String?, /*1*/ qualifiedName: kotlin.String, /*2*/ value: kotlin.String): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun setAttributeNode(/*0*/ attr: org.w3c.dom.Attr): org.w3c.dom.Attr?
    public final override /*1*/ /*fake_override*/ fun setAttributeNodeNS(/*0*/ attr: org.w3c.dom.Attr): org.w3c.dom.Attr?
    public final override /*1*/ /*fake_override*/ fun setPointerCapture(/*0*/ pointerId: kotlin.Int): kotlin.Unit
    public open override /*2*/ /*fake_override*/ fun toString(): kotlin.String
    public final override /*1*/ /*fake_override*/ fun webkitMatchesSelector(/*0*/ selectors: kotlin.String): kotlin.Boolean

    public companion object Companion {
        /*primary*/ private constructor Companion()
        public final val ATTRIBUTE_NODE: kotlin.Short
            public final fun <get-ATTRIBUTE_NODE>(): kotlin.Short
        public final val CDATA_SECTION_NODE: kotlin.Short
            public final fun <get-CDATA_SECTION_NODE>(): kotlin.Short
        public final val COMMENT_NODE: kotlin.Short
            public final fun <get-COMMENT_NODE>(): kotlin.Short
        public final val DOCUMENT_FRAGMENT_NODE: kotlin.Short
            public final fun <get-DOCUMENT_FRAGMENT_NODE>(): kotlin.Short
        public final val DOCUMENT_NODE: kotlin.Short
            public final fun <get-DOCUMENT_NODE>(): kotlin.Short
        public final val DOCUMENT_POSITION_CONTAINED_BY: kotlin.Short
            public final fun <get-DOCUMENT_POSITION_CONTAINED_BY>(): kotlin.Short
        public final val DOCUMENT_POSITION_CONTAINS: kotlin.Short
            public final fun <get-DOCUMENT_POSITION_CONTAINS>(): kotlin.Short
        public final val DOCUMENT_POSITION_DISCONNECTED: kotlin.Short
            public final fun <get-DOCUMENT_POSITION_DISCONNECTED>(): kotlin.Short
        public final val DOCUMENT_POSITION_FOLLOWING: kotlin.Short
            public final fun <get-DOCUMENT_POSITION_FOLLOWING>(): kotlin.Short
        public final val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: kotlin.Short
            public final fun <get-DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC>(): kotlin.Short
        public final val DOCUMENT_POSITION_PRECEDING: kotlin.Short
            public final fun <get-DOCUMENT_POSITION_PRECEDING>(): kotlin.Short
        public final val DOCUMENT_TYPE_NODE: kotlin.Short
            public final fun <get-DOCUMENT_TYPE_NODE>(): kotlin.Short
        public final val ELEMENT_NODE: kotlin.Short
            public final fun <get-ELEMENT_NODE>(): kotlin.Short
        public final val ENTITY_NODE: kotlin.Short
            public final fun <get-ENTITY_NODE>(): kotlin.Short
        public final val ENTITY_REFERENCE_NODE: kotlin.Short
            public final fun <get-ENTITY_REFERENCE_NODE>(): kotlin.Short
        public final val NOTATION_NODE: kotlin.Short
            public final fun <get-NOTATION_NODE>(): kotlin.Short
        public final val PROCESSING_INSTRUCTION_NODE: kotlin.Short
            public final fun <get-PROCESSING_INSTRUCTION_NODE>(): kotlin.Short
        public final val TEXT_NODE: kotlin.Short
            public final fun <get-TEXT_NODE>(): kotlin.Short
        public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
        public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
        public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
    }
}

public abstract external class SVGTSpanElement : org.w3c.dom.svg.SVGTextPositioningElement {
    /*primary*/ public constructor SVGTSpanElement()
    public open override /*1*/ /*fake_override*/ val assignedSlot: org.w3c.dom.HTMLSlotElement?
        public open override /*1*/ /*fake_override*/ fun <get-assignedSlot>(): org.w3c.dom.HTMLSlotElement?
    public open override /*1*/ /*fake_override*/ val attributes: org.w3c.dom.NamedNodeMap
        public open override /*1*/ /*fake_override*/ fun <get-attributes>(): org.w3c.dom.NamedNodeMap
    public open override /*1*/ /*fake_override*/ val baseURI: kotlin.String
        public open override /*1*/ /*fake_override*/ fun <get-baseURI>(): kotlin.String
    public abstract override /*1*/ /*fake_override*/ val childElementCount: kotlin.Int
        public abstract override /*1*/ /*fake_override*/ fun <get-childElementCount>(): kotlin.Int
    public open override /*1*/ /*fake_override*/ val childNodes: org.w3c.dom.NodeList
        public open override /*1*/ /*fake_override*/ fun <get-childNodes>(): org.w3c.dom.NodeList
    public abstract override /*1*/ /*fake_override*/ val children: org.w3c.dom.HTMLCollection
        public abstract override /*1*/ /*fake_override*/ fun <get-children>(): org.w3c.dom.HTMLCollection
    public open override /*1*/ /*fake_override*/ val classList: org.w3c.dom.DOMTokenList
        public open override /*1*/ /*fake_override*/ fun <get-classList>(): org.w3c.dom.DOMTokenList
    public open override /*1*/ /*fake_override*/ var className: kotlin.String
        public open override /*1*/ /*fake_override*/ fun <get-className>(): kotlin.String
        public open override /*1*/ /*fake_override*/ fun <set-className>(/*0*/ <set-?>: kotlin.String): kotlin.Unit
    public open override /*1*/ /*fake_override*/ val clientHeight: kotlin.Int
        public open override /*1*/ /*fake_override*/ fun <get-clientHeight>(): kotlin.Int
    public open override /*1*/ /*fake_override*/ val clientLeft: kotlin.Int
        public open override /*1*/ /*fake_override*/ fun <get-clientLeft>(): kotlin.Int
    public open override /*1*/ /*fake_override*/ val clientTop: kotlin.Int
        public open override /*1*/ /*fake_override*/ fun <get-clientTop>(): kotlin.Int
    public open override /*1*/ /*fake_override*/ val clientWidth: kotlin.Int
        public open override /*1*/ /*fake_override*/ fun <get-clientWidth>(): kotlin.Int
    public open override /*1*/ /*fake_override*/ val correspondingElement: org.w3c.dom.svg.SVGElement?
        public open override /*1*/ /*fake_override*/ fun <get-correspondingElement>(): org.w3c.dom.svg.SVGElement?
    public open override /*1*/ /*fake_override*/ val correspondingUseElement: org.w3c.dom.svg.SVGUseElement?
        public open override /*1*/ /*fake_override*/ fun <get-correspondingUseElement>(): org.w3c.dom.svg.SVGUseElement?
    public open override /*1*/ /*fake_override*/ val dataset: org.w3c.dom.DOMStringMap
        public open override /*1*/ /*fake_override*/ fun <get-dataset>(): org.w3c.dom.DOMStringMap
    public open override /*1*/ /*fake_override*/ val dx: org.w3c.dom.svg.SVGAnimatedLengthList
        public open override /*1*/ /*fake_override*/ fun <get-dx>(): org.w3c.dom.svg.SVGAnimatedLengthList
    public open override /*1*/ /*fake_override*/ val dy: org.w3c.dom.svg.SVGAnimatedLengthList
        public open override /*1*/ /*fake_override*/ fun <get-dy>(): org.w3c.dom.svg.SVGAnimatedLengthList
    public open override /*1*/ /*fake_override*/ val firstChild: org.w3c.dom.Node?
        public open override /*1*/ /*fake_override*/ fun <get-firstChild>(): org.w3c.dom.Node?
    public open override /*1*/ /*fake_override*/ val firstElementChild: org.w3c.dom.Element?
        public open override /*1*/ /*fake_override*/ fun <get-firstElementChild>(): org.w3c.dom.Element?
    public open override /*1*/ /*fake_override*/ var id: kotlin.String
        public open override /*1*/ /*fake_override*/ fun <get-id>(): kotlin.String
        public open override /*1*/ /*fake_override*/ fun <set-id>(/*0*/ <set-?>: kotlin.String): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var innerHTML: kotlin.String
        public open override /*1*/ /*fake_override*/ fun <get-innerHTML>(): kotlin.String
        public open override /*1*/ /*fake_override*/ fun <set-innerHTML>(/*0*/ <set-?>: kotlin.String): kotlin.Unit
    public open override /*1*/ /*fake_override*/ val isConnected: kotlin.Boolean
        public open override /*1*/ /*fake_override*/ fun <get-isConnected>(): kotlin.Boolean
    public open override /*1*/ /*fake_override*/ val lastChild: org.w3c.dom.Node?
        public open override /*1*/ /*fake_override*/ fun <get-lastChild>(): org.w3c.dom.Node?
    public open override /*1*/ /*fake_override*/ val lastElementChild: org.w3c.dom.Element?
        public open override /*1*/ /*fake_override*/ fun <get-lastElementChild>(): org.w3c.dom.Element?
    public open override /*1*/ /*fake_override*/ val lengthAdjust: org.w3c.dom.svg.SVGAnimatedEnumeration
        public open override /*1*/ /*fake_override*/ fun <get-lengthAdjust>(): org.w3c.dom.svg.SVGAnimatedEnumeration
    public open override /*1*/ /*fake_override*/ val localName: kotlin.String
        public open override /*1*/ /*fake_override*/ fun <get-localName>(): kotlin.String
    public open override /*1*/ /*fake_override*/ val namespaceURI: kotlin.String?
        public open override /*1*/ /*fake_override*/ fun <get-namespaceURI>(): kotlin.String?
    public open override /*1*/ /*fake_override*/ val nextElementSibling: org.w3c.dom.Element?
        public open override /*1*/ /*fake_override*/ fun <get-nextElementSibling>(): org.w3c.dom.Element?
    public open override /*1*/ /*fake_override*/ val nextSibling: org.w3c.dom.Node?
        public open override /*1*/ /*fake_override*/ fun <get-nextSibling>(): org.w3c.dom.Node?
    public open override /*1*/ /*fake_override*/ val nodeName: kotlin.String
        public open override /*1*/ /*fake_override*/ fun <get-nodeName>(): kotlin.String
    public open override /*1*/ /*fake_override*/ val nodeType: kotlin.Short
        public open override /*1*/ /*fake_override*/ fun <get-nodeType>(): kotlin.Short
    public open override /*1*/ /*fake_override*/ var nodeValue: kotlin.String?
        public open override /*1*/ /*fake_override*/ fun <get-nodeValue>(): kotlin.String?
        public open override /*1*/ /*fake_override*/ fun <set-nodeValue>(/*0*/ <set-?>: kotlin.String?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onabort: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onabort>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onabort>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onblur: ((org.w3c.dom.events.FocusEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onblur>(): ((org.w3c.dom.events.FocusEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onblur>(/*0*/ value: ((org.w3c.dom.events.FocusEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var oncancel: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-oncancel>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-oncancel>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var oncanplay: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-oncanplay>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-oncanplay>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var oncanplaythrough: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-oncanplaythrough>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-oncanplaythrough>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onchange: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onchange>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onchange>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onclick: ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onclick>(): ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onclick>(/*0*/ value: ((org.w3c.dom.events.MouseEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onclose: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onclose>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onclose>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var oncontextmenu: ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-oncontextmenu>(): ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-oncontextmenu>(/*0*/ value: ((org.w3c.dom.events.MouseEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var oncuechange: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-oncuechange>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-oncuechange>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ondblclick: ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ondblclick>(): ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ondblclick>(/*0*/ value: ((org.w3c.dom.events.MouseEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ondrag: ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ondrag>(): ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ondrag>(/*0*/ value: ((org.w3c.dom.DragEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ondragend: ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ondragend>(): ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ondragend>(/*0*/ value: ((org.w3c.dom.DragEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ondragenter: ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ondragenter>(): ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ondragenter>(/*0*/ value: ((org.w3c.dom.DragEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ondragexit: ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ondragexit>(): ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ondragexit>(/*0*/ value: ((org.w3c.dom.DragEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ondragleave: ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ondragleave>(): ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ondragleave>(/*0*/ value: ((org.w3c.dom.DragEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ondragover: ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ondragover>(): ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ondragover>(/*0*/ value: ((org.w3c.dom.DragEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ondragstart: ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ondragstart>(): ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ondragstart>(/*0*/ value: ((org.w3c.dom.DragEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ondrop: ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ondrop>(): ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ondrop>(/*0*/ value: ((org.w3c.dom.DragEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ondurationchange: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ondurationchange>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ondurationchange>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onemptied: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onemptied>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onemptied>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onended: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onended>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onended>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onerror: ((dynamic, kotlin.String, kotlin.Int, kotlin.Int, kotlin.Any?) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onerror>(): ((dynamic, kotlin.String, kotlin.Int, kotlin.Int, kotlin.Any?) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onerror>(/*0*/ value: ((dynamic, kotlin.String, kotlin.Int, kotlin.Int, kotlin.Any?) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onfocus: ((org.w3c.dom.events.FocusEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onfocus>(): ((org.w3c.dom.events.FocusEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onfocus>(/*0*/ value: ((org.w3c.dom.events.FocusEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ongotpointercapture: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ongotpointercapture>(): ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ongotpointercapture>(/*0*/ value: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var oninput: ((org.w3c.dom.events.InputEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-oninput>(): ((org.w3c.dom.events.InputEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-oninput>(/*0*/ value: ((org.w3c.dom.events.InputEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var oninvalid: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-oninvalid>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-oninvalid>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onkeydown: ((org.w3c.dom.events.KeyboardEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onkeydown>(): ((org.w3c.dom.events.KeyboardEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onkeydown>(/*0*/ value: ((org.w3c.dom.events.KeyboardEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onkeypress: ((org.w3c.dom.events.KeyboardEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onkeypress>(): ((org.w3c.dom.events.KeyboardEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onkeypress>(/*0*/ value: ((org.w3c.dom.events.KeyboardEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onkeyup: ((org.w3c.dom.events.KeyboardEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onkeyup>(): ((org.w3c.dom.events.KeyboardEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onkeyup>(/*0*/ value: ((org.w3c.dom.events.KeyboardEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onload: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onload>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onload>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onloadeddata: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onloadeddata>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onloadeddata>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onloadedmetadata: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onloadedmetadata>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onloadedmetadata>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onloadend: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onloadend>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onloadend>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onloadstart: ((org.w3c.xhr.ProgressEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onloadstart>(): ((org.w3c.xhr.ProgressEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onloadstart>(/*0*/ value: ((org.w3c.xhr.ProgressEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onlostpointercapture: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onlostpointercapture>(): ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onlostpointercapture>(/*0*/ value: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onmousedown: ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onmousedown>(): ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onmousedown>(/*0*/ value: ((org.w3c.dom.events.MouseEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onmouseenter: ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onmouseenter>(): ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onmouseenter>(/*0*/ value: ((org.w3c.dom.events.MouseEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onmouseleave: ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onmouseleave>(): ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onmouseleave>(/*0*/ value: ((org.w3c.dom.events.MouseEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onmousemove: ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onmousemove>(): ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onmousemove>(/*0*/ value: ((org.w3c.dom.events.MouseEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onmouseout: ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onmouseout>(): ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onmouseout>(/*0*/ value: ((org.w3c.dom.events.MouseEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onmouseover: ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onmouseover>(): ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onmouseover>(/*0*/ value: ((org.w3c.dom.events.MouseEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onmouseup: ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onmouseup>(): ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onmouseup>(/*0*/ value: ((org.w3c.dom.events.MouseEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onpause: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onpause>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onpause>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onplay: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onplay>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onplay>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onplaying: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onplaying>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onplaying>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onpointercancel: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onpointercancel>(): ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onpointercancel>(/*0*/ value: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onpointerdown: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onpointerdown>(): ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onpointerdown>(/*0*/ value: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onpointerenter: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onpointerenter>(): ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onpointerenter>(/*0*/ value: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onpointerleave: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onpointerleave>(): ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onpointerleave>(/*0*/ value: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onpointermove: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onpointermove>(): ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onpointermove>(/*0*/ value: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onpointerout: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onpointerout>(): ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onpointerout>(/*0*/ value: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onpointerover: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onpointerover>(): ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onpointerover>(/*0*/ value: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onpointerup: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onpointerup>(): ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onpointerup>(/*0*/ value: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onprogress: ((org.w3c.xhr.ProgressEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onprogress>(): ((org.w3c.xhr.ProgressEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onprogress>(/*0*/ value: ((org.w3c.xhr.ProgressEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onratechange: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onratechange>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onratechange>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onreset: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onreset>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onreset>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onresize: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onresize>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onresize>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onscroll: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onscroll>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onscroll>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onseeked: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onseeked>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onseeked>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onseeking: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onseeking>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onseeking>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onselect: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onselect>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onselect>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onshow: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onshow>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onshow>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onstalled: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onstalled>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onstalled>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onsubmit: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onsubmit>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onsubmit>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onsuspend: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onsuspend>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onsuspend>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ontimeupdate: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ontimeupdate>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ontimeupdate>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ontoggle: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ontoggle>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ontoggle>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onvolumechange: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onvolumechange>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onvolumechange>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onwaiting: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onwaiting>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onwaiting>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onwheel: ((org.w3c.dom.events.WheelEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onwheel>(): ((org.w3c.dom.events.WheelEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onwheel>(/*0*/ value: ((org.w3c.dom.events.WheelEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var outerHTML: kotlin.String
        public open override /*1*/ /*fake_override*/ fun <get-outerHTML>(): kotlin.String
        public open override /*1*/ /*fake_override*/ fun <set-outerHTML>(/*0*/ <set-?>: kotlin.String): kotlin.Unit
    public open override /*1*/ /*fake_override*/ val ownerDocument: org.w3c.dom.Document?
        public open override /*1*/ /*fake_override*/ fun <get-ownerDocument>(): org.w3c.dom.Document?
    public open override /*1*/ /*fake_override*/ val ownerSVGElement: org.w3c.dom.svg.SVGSVGElement?
        public open override /*1*/ /*fake_override*/ fun <get-ownerSVGElement>(): org.w3c.dom.svg.SVGSVGElement?
    public open override /*1*/ /*fake_override*/ val parentElement: org.w3c.dom.Element?
        public open override /*1*/ /*fake_override*/ fun <get-parentElement>(): org.w3c.dom.Element?
    public open override /*1*/ /*fake_override*/ val parentNode: org.w3c.dom.Node?
        public open override /*1*/ /*fake_override*/ fun <get-parentNode>(): org.w3c.dom.Node?
    public open override /*1*/ /*fake_override*/ val prefix: kotlin.String?
        public open override /*1*/ /*fake_override*/ fun <get-prefix>(): kotlin.String?
    public open override /*1*/ /*fake_override*/ val previousElementSibling: org.w3c.dom.Element?
        public open override /*1*/ /*fake_override*/ fun <get-previousElementSibling>(): org.w3c.dom.Element?
    public open override /*1*/ /*fake_override*/ val previousSibling: org.w3c.dom.Node?
        public open override /*1*/ /*fake_override*/ fun <get-previousSibling>(): org.w3c.dom.Node?
    public abstract override /*1*/ /*fake_override*/ val requiredExtensions: org.w3c.dom.svg.SVGStringList
        public abstract override /*1*/ /*fake_override*/ fun <get-requiredExtensions>(): org.w3c.dom.svg.SVGStringList
    public open override /*1*/ /*fake_override*/ val rotate: org.w3c.dom.svg.SVGAnimatedNumberList
        public open override /*1*/ /*fake_override*/ fun <get-rotate>(): org.w3c.dom.svg.SVGAnimatedNumberList
    public open override /*1*/ /*fake_override*/ val scrollHeight: kotlin.Int
        public open override /*1*/ /*fake_override*/ fun <get-scrollHeight>(): kotlin.Int
    public open override /*1*/ /*fake_override*/ var scrollLeft: kotlin.Double
        public open override /*1*/ /*fake_override*/ fun <get-scrollLeft>(): kotlin.Double
        public open override /*1*/ /*fake_override*/ fun <set-scrollLeft>(/*0*/ <set-?>: kotlin.Double): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var scrollTop: kotlin.Double
        public open override /*1*/ /*fake_override*/ fun <get-scrollTop>(): kotlin.Double
        public open override /*1*/ /*fake_override*/ fun <set-scrollTop>(/*0*/ <set-?>: kotlin.Double): kotlin.Unit
    public open override /*1*/ /*fake_override*/ val scrollWidth: kotlin.Int
        public open override /*1*/ /*fake_override*/ fun <get-scrollWidth>(): kotlin.Int
    public open override /*1*/ /*fake_override*/ val shadowRoot: org.w3c.dom.ShadowRoot?
        public open override /*1*/ /*fake_override*/ fun <get-shadowRoot>(): org.w3c.dom.ShadowRoot?
    public open override /*1*/ /*fake_override*/ var slot: kotlin.String
        public open override /*1*/ /*fake_override*/ fun <get-slot>(): kotlin.String
        public open override /*1*/ /*fake_override*/ fun <set-slot>(/*0*/ <set-?>: kotlin.String): kotlin.Unit
    public abstract override /*1*/ /*fake_override*/ val style: org.w3c.dom.css.CSSStyleDeclaration
        public abstract override /*1*/ /*fake_override*/ fun <get-style>(): org.w3c.dom.css.CSSStyleDeclaration
    public abstract override /*1*/ /*fake_override*/ val systemLanguage: org.w3c.dom.svg.SVGStringList
        public abstract override /*1*/ /*fake_override*/ fun <get-systemLanguage>(): org.w3c.dom.svg.SVGStringList
    public open override /*1*/ /*fake_override*/ var tabIndex: kotlin.Int
        public open override /*1*/ /*fake_override*/ fun <get-tabIndex>(): kotlin.Int
        public open override /*1*/ /*fake_override*/ fun <set-tabIndex>(/*0*/ <set-?>: kotlin.Int): kotlin.Unit
    public open override /*1*/ /*fake_override*/ val tagName: kotlin.String
        public open override /*1*/ /*fake_override*/ fun <get-tagName>(): kotlin.String
    public open override /*1*/ /*fake_override*/ var textContent: kotlin.String?
        public open override /*1*/ /*fake_override*/ fun <get-textContent>(): kotlin.String?
        public open override /*1*/ /*fake_override*/ fun <set-textContent>(/*0*/ <set-?>: kotlin.String?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ val textLength: org.w3c.dom.svg.SVGAnimatedLength
        public open override /*1*/ /*fake_override*/ fun <get-textLength>(): org.w3c.dom.svg.SVGAnimatedLength
    public open override /*1*/ /*fake_override*/ val transform: org.w3c.dom.svg.SVGAnimatedTransformList
        public open override /*1*/ /*fake_override*/ fun <get-transform>(): org.w3c.dom.svg.SVGAnimatedTransformList
    public open override /*1*/ /*fake_override*/ val viewportElement: org.w3c.dom.svg.SVGElement?
        public open override /*1*/ /*fake_override*/ fun <get-viewportElement>(): org.w3c.dom.svg.SVGElement?
    public open override /*1*/ /*fake_override*/ val x: org.w3c.dom.svg.SVGAnimatedLengthList
        public open override /*1*/ /*fake_override*/ fun <get-x>(): org.w3c.dom.svg.SVGAnimatedLengthList
    public open override /*1*/ /*fake_override*/ val y: org.w3c.dom.svg.SVGAnimatedLengthList
        public open override /*1*/ /*fake_override*/ fun <get-y>(): org.w3c.dom.svg.SVGAnimatedLengthList
    public final override /*1*/ /*fake_override*/ fun addEventListener(/*0*/ type: kotlin.String, /*1*/ callback: ((org.w3c.dom.events.Event) -> kotlin.Unit)?, /*2*/ options: dynamic = ...): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun addEventListener(/*0*/ type: kotlin.String, /*1*/ callback: org.w3c.dom.events.EventListener?, /*2*/ options: dynamic = ...): kotlin.Unit
    public abstract override /*1*/ /*fake_override*/ fun after(/*0*/ vararg nodes: dynamic /*kotlin.Array<out dynamic>*/): kotlin.Unit
    public abstract override /*1*/ /*fake_override*/ fun append(/*0*/ vararg nodes: dynamic /*kotlin.Array<out dynamic>*/): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun appendChild(/*0*/ node: org.w3c.dom.Node): org.w3c.dom.Node
    public final override /*1*/ /*fake_override*/ fun attachShadow(/*0*/ init: org.w3c.dom.ShadowRootInit): org.w3c.dom.ShadowRoot
    public abstract override /*1*/ /*fake_override*/ fun before(/*0*/ vararg nodes: dynamic /*kotlin.Array<out dynamic>*/): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun blur(): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun cloneNode(/*0*/ deep: kotlin.Boolean = ...): org.w3c.dom.Node
    public final override /*1*/ /*fake_override*/ fun closest(/*0*/ selectors: kotlin.String): org.w3c.dom.Element?
    public final override /*1*/ /*fake_override*/ fun compareDocumentPosition(/*0*/ other: org.w3c.dom.Node): kotlin.Short
    public final override /*1*/ /*fake_override*/ fun contains(/*0*/ other: org.w3c.dom.Node?): kotlin.Boolean
    public abstract override /*1*/ /*fake_override*/ fun convertPointFromNode(/*0*/ point: org.w3c.dom.DOMPointInit, /*1*/ from: dynamic, /*2*/ options: org.w3c.dom.ConvertCoordinateOptions = ...): org.w3c.dom.DOMPoint
    public abstract override /*1*/ /*fake_override*/ fun convertQuadFromNode(/*0*/ quad: dynamic, /*1*/ from: dynamic, /*2*/ options: org.w3c.dom.ConvertCoordinateOptions = ...): org.w3c.dom.DOMQuad
    public abstract override /*1*/ /*fake_override*/ fun convertRectFromNode(/*0*/ rect: org.w3c.dom.DOMRectReadOnly, /*1*/ from: dynamic, /*2*/ options: org.w3c.dom.ConvertCoordinateOptions = ...): org.w3c.dom.DOMQuad
    public final override /*1*/ /*fake_override*/ fun dispatchEvent(/*0*/ event: org.w3c.dom.events.Event): kotlin.Boolean
    public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
    public final override /*1*/ /*fake_override*/ fun focus(): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun getAttribute(/*0*/ qualifiedName: kotlin.String): kotlin.String?
    public final override /*1*/ /*fake_override*/ fun getAttributeNS(/*0*/ namespace: kotlin.String?, /*1*/ localName: kotlin.String): kotlin.String?
    public final override /*1*/ /*fake_override*/ fun getAttributeNames(): kotlin.Array<kotlin.String>
    public final override /*1*/ /*fake_override*/ fun getAttributeNode(/*0*/ qualifiedName: kotlin.String): org.w3c.dom.Attr?
    public final override /*1*/ /*fake_override*/ fun getAttributeNodeNS(/*0*/ namespace: kotlin.String?, /*1*/ localName: kotlin.String): org.w3c.dom.Attr?
    public final override /*1*/ /*fake_override*/ fun getBBox(/*0*/ options: org.w3c.dom.svg.SVGBoundingBoxOptions = ...): org.w3c.dom.DOMRect
    public final override /*1*/ /*fake_override*/ fun getBoundingClientRect(): org.w3c.dom.DOMRect
    public abstract override /*1*/ /*fake_override*/ fun getBoxQuads(/*0*/ options: org.w3c.dom.BoxQuadOptions = ...): kotlin.Array<org.w3c.dom.DOMQuad>
    public final override /*1*/ /*fake_override*/ fun getCTM(): org.w3c.dom.DOMMatrix?
    public final override /*1*/ /*fake_override*/ fun getCharNumAtPosition(/*0*/ point: org.w3c.dom.DOMPoint): kotlin.Int
    public final override /*1*/ /*fake_override*/ fun getClientRects(): kotlin.Array<org.w3c.dom.DOMRect>
    public final override /*1*/ /*fake_override*/ fun getComputedTextLength(): kotlin.Float
    public final override /*1*/ /*fake_override*/ fun getElementsByClassName(/*0*/ classNames: kotlin.String): org.w3c.dom.HTMLCollection
    public final override /*1*/ /*fake_override*/ fun getElementsByTagName(/*0*/ qualifiedName: kotlin.String): org.w3c.dom.HTMLCollection
    public final override /*1*/ /*fake_override*/ fun getElementsByTagNameNS(/*0*/ namespace: kotlin.String?, /*1*/ localName: kotlin.String): org.w3c.dom.HTMLCollection
    public final override /*1*/ /*fake_override*/ fun getEndPositionOfChar(/*0*/ charnum: kotlin.Int): org.w3c.dom.DOMPoint
    public final override /*1*/ /*fake_override*/ fun getExtentOfChar(/*0*/ charnum: kotlin.Int): org.w3c.dom.DOMRect
    public final override /*1*/ /*fake_override*/ fun getNumberOfChars(): kotlin.Int
    public final override /*1*/ /*fake_override*/ fun getRootNode(/*0*/ options: org.w3c.dom.GetRootNodeOptions = ...): org.w3c.dom.Node
    public final override /*1*/ /*fake_override*/ fun getRotationOfChar(/*0*/ charnum: kotlin.Int): kotlin.Float
    public final override /*1*/ /*fake_override*/ fun getScreenCTM(): org.w3c.dom.DOMMatrix?
    public final override /*1*/ /*fake_override*/ fun getStartPositionOfChar(/*0*/ charnum: kotlin.Int): org.w3c.dom.DOMPoint
    public final override /*1*/ /*fake_override*/ fun getSubStringLength(/*0*/ charnum: kotlin.Int, /*1*/ nchars: kotlin.Int): kotlin.Float
    public final override /*1*/ /*fake_override*/ fun hasAttribute(/*0*/ qualifiedName: kotlin.String): kotlin.Boolean
    public final override /*1*/ /*fake_override*/ fun hasAttributeNS(/*0*/ namespace: kotlin.String?, /*1*/ localName: kotlin.String): kotlin.Boolean
    public final override /*1*/ /*fake_override*/ fun hasAttributes(): kotlin.Boolean
    public final override /*1*/ /*fake_override*/ fun hasChildNodes(): kotlin.Boolean
    public final override /*1*/ /*fake_override*/ fun hasPointerCapture(/*0*/ pointerId: kotlin.Int): kotlin.Boolean
    public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
    public final override /*1*/ /*fake_override*/ fun insertAdjacentElement(/*0*/ where: kotlin.String, /*1*/ element: org.w3c.dom.Element): org.w3c.dom.Element?
    public final override /*1*/ /*fake_override*/ fun insertAdjacentHTML(/*0*/ position: kotlin.String, /*1*/ text: kotlin.String): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun insertAdjacentText(/*0*/ where: kotlin.String, /*1*/ data: kotlin.String): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun insertBefore(/*0*/ node: org.w3c.dom.Node, /*1*/ child: org.w3c.dom.Node?): org.w3c.dom.Node
    public final override /*1*/ /*fake_override*/ fun isDefaultNamespace(/*0*/ namespace: kotlin.String?): kotlin.Boolean
    public final override /*1*/ /*fake_override*/ fun isEqualNode(/*0*/ otherNode: org.w3c.dom.Node?): kotlin.Boolean
    public final override /*1*/ /*fake_override*/ fun isSameNode(/*0*/ otherNode: org.w3c.dom.Node?): kotlin.Boolean
    public final override /*1*/ /*fake_override*/ fun lookupNamespaceURI(/*0*/ prefix: kotlin.String?): kotlin.String?
    public final override /*1*/ /*fake_override*/ fun lookupPrefix(/*0*/ namespace: kotlin.String?): kotlin.String?
    public final override /*1*/ /*fake_override*/ fun matches(/*0*/ selectors: kotlin.String): kotlin.Boolean
    public final override /*1*/ /*fake_override*/ fun normalize(): kotlin.Unit
    public abstract override /*1*/ /*fake_override*/ fun prepend(/*0*/ vararg nodes: dynamic /*kotlin.Array<out dynamic>*/): kotlin.Unit
    public abstract override /*1*/ /*fake_override*/ fun querySelector(/*0*/ selectors: kotlin.String): org.w3c.dom.Element?
    public abstract override /*1*/ /*fake_override*/ fun querySelectorAll(/*0*/ selectors: kotlin.String): org.w3c.dom.NodeList
    public final override /*1*/ /*fake_override*/ fun releasePointerCapture(/*0*/ pointerId: kotlin.Int): kotlin.Unit
    public abstract override /*1*/ /*fake_override*/ fun remove(): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun removeAttribute(/*0*/ qualifiedName: kotlin.String): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun removeAttributeNS(/*0*/ namespace: kotlin.String?, /*1*/ localName: kotlin.String): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun removeAttributeNode(/*0*/ attr: org.w3c.dom.Attr): org.w3c.dom.Attr
    public final override /*1*/ /*fake_override*/ fun removeChild(/*0*/ child: org.w3c.dom.Node): org.w3c.dom.Node
    public final override /*1*/ /*fake_override*/ fun removeEventListener(/*0*/ type: kotlin.String, /*1*/ callback: ((org.w3c.dom.events.Event) -> kotlin.Unit)?, /*2*/ options: dynamic = ...): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun removeEventListener(/*0*/ type: kotlin.String, /*1*/ callback: org.w3c.dom.events.EventListener?, /*2*/ options: dynamic = ...): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun replaceChild(/*0*/ node: org.w3c.dom.Node, /*1*/ child: org.w3c.dom.Node): org.w3c.dom.Node
    public abstract override /*1*/ /*fake_override*/ fun replaceWith(/*0*/ vararg nodes: dynamic /*kotlin.Array<out dynamic>*/): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun requestFullscreen(): kotlin.js.Promise<kotlin.Unit>
    public final override /*1*/ /*fake_override*/ fun scroll(/*0*/ x: kotlin.Double, /*1*/ y: kotlin.Double): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun scroll(/*0*/ options: org.w3c.dom.ScrollToOptions = ...): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun scrollBy(/*0*/ x: kotlin.Double, /*1*/ y: kotlin.Double): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun scrollBy(/*0*/ options: org.w3c.dom.ScrollToOptions = ...): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun scrollIntoView(): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun scrollIntoView(/*0*/ arg: dynamic): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun scrollTo(/*0*/ x: kotlin.Double, /*1*/ y: kotlin.Double): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun scrollTo(/*0*/ options: org.w3c.dom.ScrollToOptions = ...): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun selectSubString(/*0*/ charnum: kotlin.Int, /*1*/ nchars: kotlin.Int): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun setAttribute(/*0*/ qualifiedName: kotlin.String, /*1*/ value: kotlin.String): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun setAttributeNS(/*0*/ namespace: kotlin.String?, /*1*/ qualifiedName: kotlin.String, /*2*/ value: kotlin.String): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun setAttributeNode(/*0*/ attr: org.w3c.dom.Attr): org.w3c.dom.Attr?
    public final override /*1*/ /*fake_override*/ fun setAttributeNodeNS(/*0*/ attr: org.w3c.dom.Attr): org.w3c.dom.Attr?
    public final override /*1*/ /*fake_override*/ fun setPointerCapture(/*0*/ pointerId: kotlin.Int): kotlin.Unit
    public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
    public final override /*1*/ /*fake_override*/ fun webkitMatchesSelector(/*0*/ selectors: kotlin.String): kotlin.Boolean

    public companion object Companion {
        /*primary*/ private constructor Companion()
        public final val ATTRIBUTE_NODE: kotlin.Short
            public final fun <get-ATTRIBUTE_NODE>(): kotlin.Short
        public final val CDATA_SECTION_NODE: kotlin.Short
            public final fun <get-CDATA_SECTION_NODE>(): kotlin.Short
        public final val COMMENT_NODE: kotlin.Short
            public final fun <get-COMMENT_NODE>(): kotlin.Short
        public final val DOCUMENT_FRAGMENT_NODE: kotlin.Short
            public final fun <get-DOCUMENT_FRAGMENT_NODE>(): kotlin.Short
        public final val DOCUMENT_NODE: kotlin.Short
            public final fun <get-DOCUMENT_NODE>(): kotlin.Short
        public final val DOCUMENT_POSITION_CONTAINED_BY: kotlin.Short
            public final fun <get-DOCUMENT_POSITION_CONTAINED_BY>(): kotlin.Short
        public final val DOCUMENT_POSITION_CONTAINS: kotlin.Short
            public final fun <get-DOCUMENT_POSITION_CONTAINS>(): kotlin.Short
        public final val DOCUMENT_POSITION_DISCONNECTED: kotlin.Short
            public final fun <get-DOCUMENT_POSITION_DISCONNECTED>(): kotlin.Short
        public final val DOCUMENT_POSITION_FOLLOWING: kotlin.Short
            public final fun <get-DOCUMENT_POSITION_FOLLOWING>(): kotlin.Short
        public final val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: kotlin.Short
            public final fun <get-DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC>(): kotlin.Short
        public final val DOCUMENT_POSITION_PRECEDING: kotlin.Short
            public final fun <get-DOCUMENT_POSITION_PRECEDING>(): kotlin.Short
        public final val DOCUMENT_TYPE_NODE: kotlin.Short
            public final fun <get-DOCUMENT_TYPE_NODE>(): kotlin.Short
        public final val ELEMENT_NODE: kotlin.Short
            public final fun <get-ELEMENT_NODE>(): kotlin.Short
        public final val ENTITY_NODE: kotlin.Short
            public final fun <get-ENTITY_NODE>(): kotlin.Short
        public final val ENTITY_REFERENCE_NODE: kotlin.Short
            public final fun <get-ENTITY_REFERENCE_NODE>(): kotlin.Short
        public final val LENGTHADJUST_SPACING: kotlin.Short
            public final fun <get-LENGTHADJUST_SPACING>(): kotlin.Short
        public final val LENGTHADJUST_SPACINGANDGLYPHS: kotlin.Short
            public final fun <get-LENGTHADJUST_SPACINGANDGLYPHS>(): kotlin.Short
        public final val LENGTHADJUST_UNKNOWN: kotlin.Short
            public final fun <get-LENGTHADJUST_UNKNOWN>(): kotlin.Short
        public final val NOTATION_NODE: kotlin.Short
            public final fun <get-NOTATION_NODE>(): kotlin.Short
        public final val PROCESSING_INSTRUCTION_NODE: kotlin.Short
            public final fun <get-PROCESSING_INSTRUCTION_NODE>(): kotlin.Short
        public final val TEXT_NODE: kotlin.Short
            public final fun <get-TEXT_NODE>(): kotlin.Short
        public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
        public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
        public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
    }
}

public external interface SVGTests {
    public abstract val requiredExtensions: org.w3c.dom.svg.SVGStringList
        public abstract fun <get-requiredExtensions>(): org.w3c.dom.svg.SVGStringList
    public abstract val systemLanguage: org.w3c.dom.svg.SVGStringList
        public abstract fun <get-systemLanguage>(): org.w3c.dom.svg.SVGStringList
    public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
    public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
    public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
}

public abstract external class SVGTextContentElement : org.w3c.dom.svg.SVGGraphicsElement {
    /*primary*/ public constructor SVGTextContentElement()
    public open override /*1*/ /*fake_override*/ val assignedSlot: org.w3c.dom.HTMLSlotElement?
        public open override /*1*/ /*fake_override*/ fun <get-assignedSlot>(): org.w3c.dom.HTMLSlotElement?
    public open override /*1*/ /*fake_override*/ val attributes: org.w3c.dom.NamedNodeMap
        public open override /*1*/ /*fake_override*/ fun <get-attributes>(): org.w3c.dom.NamedNodeMap
    public open override /*1*/ /*fake_override*/ val baseURI: kotlin.String
        public open override /*1*/ /*fake_override*/ fun <get-baseURI>(): kotlin.String
    public abstract override /*1*/ /*fake_override*/ val childElementCount: kotlin.Int
        public abstract override /*1*/ /*fake_override*/ fun <get-childElementCount>(): kotlin.Int
    public open override /*1*/ /*fake_override*/ val childNodes: org.w3c.dom.NodeList
        public open override /*1*/ /*fake_override*/ fun <get-childNodes>(): org.w3c.dom.NodeList
    public abstract override /*1*/ /*fake_override*/ val children: org.w3c.dom.HTMLCollection
        public abstract override /*1*/ /*fake_override*/ fun <get-children>(): org.w3c.dom.HTMLCollection
    public open override /*1*/ /*fake_override*/ val classList: org.w3c.dom.DOMTokenList
        public open override /*1*/ /*fake_override*/ fun <get-classList>(): org.w3c.dom.DOMTokenList
    public open override /*1*/ /*fake_override*/ var className: kotlin.String
        public open override /*1*/ /*fake_override*/ fun <get-className>(): kotlin.String
        public open override /*1*/ /*fake_override*/ fun <set-className>(/*0*/ <set-?>: kotlin.String): kotlin.Unit
    public open override /*1*/ /*fake_override*/ val clientHeight: kotlin.Int
        public open override /*1*/ /*fake_override*/ fun <get-clientHeight>(): kotlin.Int
    public open override /*1*/ /*fake_override*/ val clientLeft: kotlin.Int
        public open override /*1*/ /*fake_override*/ fun <get-clientLeft>(): kotlin.Int
    public open override /*1*/ /*fake_override*/ val clientTop: kotlin.Int
        public open override /*1*/ /*fake_override*/ fun <get-clientTop>(): kotlin.Int
    public open override /*1*/ /*fake_override*/ val clientWidth: kotlin.Int
        public open override /*1*/ /*fake_override*/ fun <get-clientWidth>(): kotlin.Int
    public open override /*1*/ /*fake_override*/ val correspondingElement: org.w3c.dom.svg.SVGElement?
        public open override /*1*/ /*fake_override*/ fun <get-correspondingElement>(): org.w3c.dom.svg.SVGElement?
    public open override /*1*/ /*fake_override*/ val correspondingUseElement: org.w3c.dom.svg.SVGUseElement?
        public open override /*1*/ /*fake_override*/ fun <get-correspondingUseElement>(): org.w3c.dom.svg.SVGUseElement?
    public open override /*1*/ /*fake_override*/ val dataset: org.w3c.dom.DOMStringMap
        public open override /*1*/ /*fake_override*/ fun <get-dataset>(): org.w3c.dom.DOMStringMap
    public open override /*1*/ /*fake_override*/ val firstChild: org.w3c.dom.Node?
        public open override /*1*/ /*fake_override*/ fun <get-firstChild>(): org.w3c.dom.Node?
    public open override /*1*/ /*fake_override*/ val firstElementChild: org.w3c.dom.Element?
        public open override /*1*/ /*fake_override*/ fun <get-firstElementChild>(): org.w3c.dom.Element?
    public open override /*1*/ /*fake_override*/ var id: kotlin.String
        public open override /*1*/ /*fake_override*/ fun <get-id>(): kotlin.String
        public open override /*1*/ /*fake_override*/ fun <set-id>(/*0*/ <set-?>: kotlin.String): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var innerHTML: kotlin.String
        public open override /*1*/ /*fake_override*/ fun <get-innerHTML>(): kotlin.String
        public open override /*1*/ /*fake_override*/ fun <set-innerHTML>(/*0*/ <set-?>: kotlin.String): kotlin.Unit
    public open override /*1*/ /*fake_override*/ val isConnected: kotlin.Boolean
        public open override /*1*/ /*fake_override*/ fun <get-isConnected>(): kotlin.Boolean
    public open override /*1*/ /*fake_override*/ val lastChild: org.w3c.dom.Node?
        public open override /*1*/ /*fake_override*/ fun <get-lastChild>(): org.w3c.dom.Node?
    public open override /*1*/ /*fake_override*/ val lastElementChild: org.w3c.dom.Element?
        public open override /*1*/ /*fake_override*/ fun <get-lastElementChild>(): org.w3c.dom.Element?
    public open val lengthAdjust: org.w3c.dom.svg.SVGAnimatedEnumeration
        public open fun <get-lengthAdjust>(): org.w3c.dom.svg.SVGAnimatedEnumeration
    public open override /*1*/ /*fake_override*/ val localName: kotlin.String
        public open override /*1*/ /*fake_override*/ fun <get-localName>(): kotlin.String
    public open override /*1*/ /*fake_override*/ val namespaceURI: kotlin.String?
        public open override /*1*/ /*fake_override*/ fun <get-namespaceURI>(): kotlin.String?
    public open override /*1*/ /*fake_override*/ val nextElementSibling: org.w3c.dom.Element?
        public open override /*1*/ /*fake_override*/ fun <get-nextElementSibling>(): org.w3c.dom.Element?
    public open override /*1*/ /*fake_override*/ val nextSibling: org.w3c.dom.Node?
        public open override /*1*/ /*fake_override*/ fun <get-nextSibling>(): org.w3c.dom.Node?
    public open override /*1*/ /*fake_override*/ val nodeName: kotlin.String
        public open override /*1*/ /*fake_override*/ fun <get-nodeName>(): kotlin.String
    public open override /*1*/ /*fake_override*/ val nodeType: kotlin.Short
        public open override /*1*/ /*fake_override*/ fun <get-nodeType>(): kotlin.Short
    public open override /*1*/ /*fake_override*/ var nodeValue: kotlin.String?
        public open override /*1*/ /*fake_override*/ fun <get-nodeValue>(): kotlin.String?
        public open override /*1*/ /*fake_override*/ fun <set-nodeValue>(/*0*/ <set-?>: kotlin.String?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onabort: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onabort>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onabort>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onblur: ((org.w3c.dom.events.FocusEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onblur>(): ((org.w3c.dom.events.FocusEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onblur>(/*0*/ value: ((org.w3c.dom.events.FocusEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var oncancel: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-oncancel>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-oncancel>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var oncanplay: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-oncanplay>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-oncanplay>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var oncanplaythrough: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-oncanplaythrough>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-oncanplaythrough>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onchange: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onchange>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onchange>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onclick: ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onclick>(): ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onclick>(/*0*/ value: ((org.w3c.dom.events.MouseEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onclose: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onclose>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onclose>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var oncontextmenu: ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-oncontextmenu>(): ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-oncontextmenu>(/*0*/ value: ((org.w3c.dom.events.MouseEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var oncuechange: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-oncuechange>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-oncuechange>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ondblclick: ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ondblclick>(): ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ondblclick>(/*0*/ value: ((org.w3c.dom.events.MouseEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ondrag: ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ondrag>(): ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ondrag>(/*0*/ value: ((org.w3c.dom.DragEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ondragend: ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ondragend>(): ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ondragend>(/*0*/ value: ((org.w3c.dom.DragEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ondragenter: ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ondragenter>(): ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ondragenter>(/*0*/ value: ((org.w3c.dom.DragEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ondragexit: ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ondragexit>(): ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ondragexit>(/*0*/ value: ((org.w3c.dom.DragEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ondragleave: ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ondragleave>(): ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ondragleave>(/*0*/ value: ((org.w3c.dom.DragEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ondragover: ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ondragover>(): ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ondragover>(/*0*/ value: ((org.w3c.dom.DragEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ondragstart: ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ondragstart>(): ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ondragstart>(/*0*/ value: ((org.w3c.dom.DragEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ondrop: ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ondrop>(): ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ondrop>(/*0*/ value: ((org.w3c.dom.DragEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ondurationchange: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ondurationchange>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ondurationchange>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onemptied: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onemptied>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onemptied>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onended: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onended>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onended>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onerror: ((dynamic, kotlin.String, kotlin.Int, kotlin.Int, kotlin.Any?) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onerror>(): ((dynamic, kotlin.String, kotlin.Int, kotlin.Int, kotlin.Any?) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onerror>(/*0*/ value: ((dynamic, kotlin.String, kotlin.Int, kotlin.Int, kotlin.Any?) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onfocus: ((org.w3c.dom.events.FocusEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onfocus>(): ((org.w3c.dom.events.FocusEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onfocus>(/*0*/ value: ((org.w3c.dom.events.FocusEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ongotpointercapture: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ongotpointercapture>(): ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ongotpointercapture>(/*0*/ value: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var oninput: ((org.w3c.dom.events.InputEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-oninput>(): ((org.w3c.dom.events.InputEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-oninput>(/*0*/ value: ((org.w3c.dom.events.InputEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var oninvalid: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-oninvalid>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-oninvalid>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onkeydown: ((org.w3c.dom.events.KeyboardEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onkeydown>(): ((org.w3c.dom.events.KeyboardEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onkeydown>(/*0*/ value: ((org.w3c.dom.events.KeyboardEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onkeypress: ((org.w3c.dom.events.KeyboardEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onkeypress>(): ((org.w3c.dom.events.KeyboardEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onkeypress>(/*0*/ value: ((org.w3c.dom.events.KeyboardEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onkeyup: ((org.w3c.dom.events.KeyboardEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onkeyup>(): ((org.w3c.dom.events.KeyboardEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onkeyup>(/*0*/ value: ((org.w3c.dom.events.KeyboardEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onload: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onload>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onload>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onloadeddata: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onloadeddata>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onloadeddata>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onloadedmetadata: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onloadedmetadata>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onloadedmetadata>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onloadend: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onloadend>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onloadend>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onloadstart: ((org.w3c.xhr.ProgressEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onloadstart>(): ((org.w3c.xhr.ProgressEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onloadstart>(/*0*/ value: ((org.w3c.xhr.ProgressEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onlostpointercapture: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onlostpointercapture>(): ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onlostpointercapture>(/*0*/ value: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onmousedown: ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onmousedown>(): ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onmousedown>(/*0*/ value: ((org.w3c.dom.events.MouseEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onmouseenter: ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onmouseenter>(): ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onmouseenter>(/*0*/ value: ((org.w3c.dom.events.MouseEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onmouseleave: ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onmouseleave>(): ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onmouseleave>(/*0*/ value: ((org.w3c.dom.events.MouseEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onmousemove: ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onmousemove>(): ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onmousemove>(/*0*/ value: ((org.w3c.dom.events.MouseEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onmouseout: ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onmouseout>(): ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onmouseout>(/*0*/ value: ((org.w3c.dom.events.MouseEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onmouseover: ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onmouseover>(): ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onmouseover>(/*0*/ value: ((org.w3c.dom.events.MouseEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onmouseup: ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onmouseup>(): ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onmouseup>(/*0*/ value: ((org.w3c.dom.events.MouseEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onpause: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onpause>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onpause>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onplay: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onplay>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onplay>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onplaying: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onplaying>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onplaying>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onpointercancel: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onpointercancel>(): ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onpointercancel>(/*0*/ value: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onpointerdown: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onpointerdown>(): ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onpointerdown>(/*0*/ value: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onpointerenter: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onpointerenter>(): ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onpointerenter>(/*0*/ value: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onpointerleave: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onpointerleave>(): ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onpointerleave>(/*0*/ value: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onpointermove: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onpointermove>(): ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onpointermove>(/*0*/ value: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onpointerout: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onpointerout>(): ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onpointerout>(/*0*/ value: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onpointerover: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onpointerover>(): ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onpointerover>(/*0*/ value: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onpointerup: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onpointerup>(): ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onpointerup>(/*0*/ value: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onprogress: ((org.w3c.xhr.ProgressEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onprogress>(): ((org.w3c.xhr.ProgressEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onprogress>(/*0*/ value: ((org.w3c.xhr.ProgressEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onratechange: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onratechange>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onratechange>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onreset: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onreset>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onreset>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onresize: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onresize>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onresize>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onscroll: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onscroll>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onscroll>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onseeked: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onseeked>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onseeked>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onseeking: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onseeking>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onseeking>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onselect: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onselect>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onselect>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onshow: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onshow>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onshow>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onstalled: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onstalled>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onstalled>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onsubmit: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onsubmit>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onsubmit>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onsuspend: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onsuspend>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onsuspend>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ontimeupdate: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ontimeupdate>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ontimeupdate>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ontoggle: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ontoggle>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ontoggle>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onvolumechange: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onvolumechange>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onvolumechange>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onwaiting: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onwaiting>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onwaiting>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onwheel: ((org.w3c.dom.events.WheelEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onwheel>(): ((org.w3c.dom.events.WheelEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onwheel>(/*0*/ value: ((org.w3c.dom.events.WheelEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var outerHTML: kotlin.String
        public open override /*1*/ /*fake_override*/ fun <get-outerHTML>(): kotlin.String
        public open override /*1*/ /*fake_override*/ fun <set-outerHTML>(/*0*/ <set-?>: kotlin.String): kotlin.Unit
    public open override /*1*/ /*fake_override*/ val ownerDocument: org.w3c.dom.Document?
        public open override /*1*/ /*fake_override*/ fun <get-ownerDocument>(): org.w3c.dom.Document?
    public open override /*1*/ /*fake_override*/ val ownerSVGElement: org.w3c.dom.svg.SVGSVGElement?
        public open override /*1*/ /*fake_override*/ fun <get-ownerSVGElement>(): org.w3c.dom.svg.SVGSVGElement?
    public open override /*1*/ /*fake_override*/ val parentElement: org.w3c.dom.Element?
        public open override /*1*/ /*fake_override*/ fun <get-parentElement>(): org.w3c.dom.Element?
    public open override /*1*/ /*fake_override*/ val parentNode: org.w3c.dom.Node?
        public open override /*1*/ /*fake_override*/ fun <get-parentNode>(): org.w3c.dom.Node?
    public open override /*1*/ /*fake_override*/ val prefix: kotlin.String?
        public open override /*1*/ /*fake_override*/ fun <get-prefix>(): kotlin.String?
    public open override /*1*/ /*fake_override*/ val previousElementSibling: org.w3c.dom.Element?
        public open override /*1*/ /*fake_override*/ fun <get-previousElementSibling>(): org.w3c.dom.Element?
    public open override /*1*/ /*fake_override*/ val previousSibling: org.w3c.dom.Node?
        public open override /*1*/ /*fake_override*/ fun <get-previousSibling>(): org.w3c.dom.Node?
    public abstract override /*1*/ /*fake_override*/ val requiredExtensions: org.w3c.dom.svg.SVGStringList
        public abstract override /*1*/ /*fake_override*/ fun <get-requiredExtensions>(): org.w3c.dom.svg.SVGStringList
    public open override /*1*/ /*fake_override*/ val scrollHeight: kotlin.Int
        public open override /*1*/ /*fake_override*/ fun <get-scrollHeight>(): kotlin.Int
    public open override /*1*/ /*fake_override*/ var scrollLeft: kotlin.Double
        public open override /*1*/ /*fake_override*/ fun <get-scrollLeft>(): kotlin.Double
        public open override /*1*/ /*fake_override*/ fun <set-scrollLeft>(/*0*/ <set-?>: kotlin.Double): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var scrollTop: kotlin.Double
        public open override /*1*/ /*fake_override*/ fun <get-scrollTop>(): kotlin.Double
        public open override /*1*/ /*fake_override*/ fun <set-scrollTop>(/*0*/ <set-?>: kotlin.Double): kotlin.Unit
    public open override /*1*/ /*fake_override*/ val scrollWidth: kotlin.Int
        public open override /*1*/ /*fake_override*/ fun <get-scrollWidth>(): kotlin.Int
    public open override /*1*/ /*fake_override*/ val shadowRoot: org.w3c.dom.ShadowRoot?
        public open override /*1*/ /*fake_override*/ fun <get-shadowRoot>(): org.w3c.dom.ShadowRoot?
    public open override /*1*/ /*fake_override*/ var slot: kotlin.String
        public open override /*1*/ /*fake_override*/ fun <get-slot>(): kotlin.String
        public open override /*1*/ /*fake_override*/ fun <set-slot>(/*0*/ <set-?>: kotlin.String): kotlin.Unit
    public abstract override /*1*/ /*fake_override*/ val style: org.w3c.dom.css.CSSStyleDeclaration
        public abstract override /*1*/ /*fake_override*/ fun <get-style>(): org.w3c.dom.css.CSSStyleDeclaration
    public abstract override /*1*/ /*fake_override*/ val systemLanguage: org.w3c.dom.svg.SVGStringList
        public abstract override /*1*/ /*fake_override*/ fun <get-systemLanguage>(): org.w3c.dom.svg.SVGStringList
    public open override /*1*/ /*fake_override*/ var tabIndex: kotlin.Int
        public open override /*1*/ /*fake_override*/ fun <get-tabIndex>(): kotlin.Int
        public open override /*1*/ /*fake_override*/ fun <set-tabIndex>(/*0*/ <set-?>: kotlin.Int): kotlin.Unit
    public open override /*1*/ /*fake_override*/ val tagName: kotlin.String
        public open override /*1*/ /*fake_override*/ fun <get-tagName>(): kotlin.String
    public open override /*1*/ /*fake_override*/ var textContent: kotlin.String?
        public open override /*1*/ /*fake_override*/ fun <get-textContent>(): kotlin.String?
        public open override /*1*/ /*fake_override*/ fun <set-textContent>(/*0*/ <set-?>: kotlin.String?): kotlin.Unit
    public open val textLength: org.w3c.dom.svg.SVGAnimatedLength
        public open fun <get-textLength>(): org.w3c.dom.svg.SVGAnimatedLength
    public open override /*1*/ /*fake_override*/ val transform: org.w3c.dom.svg.SVGAnimatedTransformList
        public open override /*1*/ /*fake_override*/ fun <get-transform>(): org.w3c.dom.svg.SVGAnimatedTransformList
    public open override /*1*/ /*fake_override*/ val viewportElement: org.w3c.dom.svg.SVGElement?
        public open override /*1*/ /*fake_override*/ fun <get-viewportElement>(): org.w3c.dom.svg.SVGElement?
    public final override /*1*/ /*fake_override*/ fun addEventListener(/*0*/ type: kotlin.String, /*1*/ callback: ((org.w3c.dom.events.Event) -> kotlin.Unit)?, /*2*/ options: dynamic = ...): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun addEventListener(/*0*/ type: kotlin.String, /*1*/ callback: org.w3c.dom.events.EventListener?, /*2*/ options: dynamic = ...): kotlin.Unit
    public abstract override /*1*/ /*fake_override*/ fun after(/*0*/ vararg nodes: dynamic /*kotlin.Array<out dynamic>*/): kotlin.Unit
    public abstract override /*1*/ /*fake_override*/ fun append(/*0*/ vararg nodes: dynamic /*kotlin.Array<out dynamic>*/): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun appendChild(/*0*/ node: org.w3c.dom.Node): org.w3c.dom.Node
    public final override /*1*/ /*fake_override*/ fun attachShadow(/*0*/ init: org.w3c.dom.ShadowRootInit): org.w3c.dom.ShadowRoot
    public abstract override /*1*/ /*fake_override*/ fun before(/*0*/ vararg nodes: dynamic /*kotlin.Array<out dynamic>*/): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun blur(): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun cloneNode(/*0*/ deep: kotlin.Boolean = ...): org.w3c.dom.Node
    public final override /*1*/ /*fake_override*/ fun closest(/*0*/ selectors: kotlin.String): org.w3c.dom.Element?
    public final override /*1*/ /*fake_override*/ fun compareDocumentPosition(/*0*/ other: org.w3c.dom.Node): kotlin.Short
    public final override /*1*/ /*fake_override*/ fun contains(/*0*/ other: org.w3c.dom.Node?): kotlin.Boolean
    public abstract override /*1*/ /*fake_override*/ fun convertPointFromNode(/*0*/ point: org.w3c.dom.DOMPointInit, /*1*/ from: dynamic, /*2*/ options: org.w3c.dom.ConvertCoordinateOptions = ...): org.w3c.dom.DOMPoint
    public abstract override /*1*/ /*fake_override*/ fun convertQuadFromNode(/*0*/ quad: dynamic, /*1*/ from: dynamic, /*2*/ options: org.w3c.dom.ConvertCoordinateOptions = ...): org.w3c.dom.DOMQuad
    public abstract override /*1*/ /*fake_override*/ fun convertRectFromNode(/*0*/ rect: org.w3c.dom.DOMRectReadOnly, /*1*/ from: dynamic, /*2*/ options: org.w3c.dom.ConvertCoordinateOptions = ...): org.w3c.dom.DOMQuad
    public final override /*1*/ /*fake_override*/ fun dispatchEvent(/*0*/ event: org.w3c.dom.events.Event): kotlin.Boolean
    public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
    public final override /*1*/ /*fake_override*/ fun focus(): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun getAttribute(/*0*/ qualifiedName: kotlin.String): kotlin.String?
    public final override /*1*/ /*fake_override*/ fun getAttributeNS(/*0*/ namespace: kotlin.String?, /*1*/ localName: kotlin.String): kotlin.String?
    public final override /*1*/ /*fake_override*/ fun getAttributeNames(): kotlin.Array<kotlin.String>
    public final override /*1*/ /*fake_override*/ fun getAttributeNode(/*0*/ qualifiedName: kotlin.String): org.w3c.dom.Attr?
    public final override /*1*/ /*fake_override*/ fun getAttributeNodeNS(/*0*/ namespace: kotlin.String?, /*1*/ localName: kotlin.String): org.w3c.dom.Attr?
    public final override /*1*/ /*fake_override*/ fun getBBox(/*0*/ options: org.w3c.dom.svg.SVGBoundingBoxOptions = ...): org.w3c.dom.DOMRect
    public final override /*1*/ /*fake_override*/ fun getBoundingClientRect(): org.w3c.dom.DOMRect
    public abstract override /*1*/ /*fake_override*/ fun getBoxQuads(/*0*/ options: org.w3c.dom.BoxQuadOptions = ...): kotlin.Array<org.w3c.dom.DOMQuad>
    public final override /*1*/ /*fake_override*/ fun getCTM(): org.w3c.dom.DOMMatrix?
    public final fun getCharNumAtPosition(/*0*/ point: org.w3c.dom.DOMPoint): kotlin.Int
    public final override /*1*/ /*fake_override*/ fun getClientRects(): kotlin.Array<org.w3c.dom.DOMRect>
    public final fun getComputedTextLength(): kotlin.Float
    public final override /*1*/ /*fake_override*/ fun getElementsByClassName(/*0*/ classNames: kotlin.String): org.w3c.dom.HTMLCollection
    public final override /*1*/ /*fake_override*/ fun getElementsByTagName(/*0*/ qualifiedName: kotlin.String): org.w3c.dom.HTMLCollection
    public final override /*1*/ /*fake_override*/ fun getElementsByTagNameNS(/*0*/ namespace: kotlin.String?, /*1*/ localName: kotlin.String): org.w3c.dom.HTMLCollection
    public final fun getEndPositionOfChar(/*0*/ charnum: kotlin.Int): org.w3c.dom.DOMPoint
    public final fun getExtentOfChar(/*0*/ charnum: kotlin.Int): org.w3c.dom.DOMRect
    public final fun getNumberOfChars(): kotlin.Int
    public final override /*1*/ /*fake_override*/ fun getRootNode(/*0*/ options: org.w3c.dom.GetRootNodeOptions = ...): org.w3c.dom.Node
    public final fun getRotationOfChar(/*0*/ charnum: kotlin.Int): kotlin.Float
    public final override /*1*/ /*fake_override*/ fun getScreenCTM(): org.w3c.dom.DOMMatrix?
    public final fun getStartPositionOfChar(/*0*/ charnum: kotlin.Int): org.w3c.dom.DOMPoint
    public final fun getSubStringLength(/*0*/ charnum: kotlin.Int, /*1*/ nchars: kotlin.Int): kotlin.Float
    public final override /*1*/ /*fake_override*/ fun hasAttribute(/*0*/ qualifiedName: kotlin.String): kotlin.Boolean
    public final override /*1*/ /*fake_override*/ fun hasAttributeNS(/*0*/ namespace: kotlin.String?, /*1*/ localName: kotlin.String): kotlin.Boolean
    public final override /*1*/ /*fake_override*/ fun hasAttributes(): kotlin.Boolean
    public final override /*1*/ /*fake_override*/ fun hasChildNodes(): kotlin.Boolean
    public final override /*1*/ /*fake_override*/ fun hasPointerCapture(/*0*/ pointerId: kotlin.Int): kotlin.Boolean
    public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
    public final override /*1*/ /*fake_override*/ fun insertAdjacentElement(/*0*/ where: kotlin.String, /*1*/ element: org.w3c.dom.Element): org.w3c.dom.Element?
    public final override /*1*/ /*fake_override*/ fun insertAdjacentHTML(/*0*/ position: kotlin.String, /*1*/ text: kotlin.String): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun insertAdjacentText(/*0*/ where: kotlin.String, /*1*/ data: kotlin.String): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun insertBefore(/*0*/ node: org.w3c.dom.Node, /*1*/ child: org.w3c.dom.Node?): org.w3c.dom.Node
    public final override /*1*/ /*fake_override*/ fun isDefaultNamespace(/*0*/ namespace: kotlin.String?): kotlin.Boolean
    public final override /*1*/ /*fake_override*/ fun isEqualNode(/*0*/ otherNode: org.w3c.dom.Node?): kotlin.Boolean
    public final override /*1*/ /*fake_override*/ fun isSameNode(/*0*/ otherNode: org.w3c.dom.Node?): kotlin.Boolean
    public final override /*1*/ /*fake_override*/ fun lookupNamespaceURI(/*0*/ prefix: kotlin.String?): kotlin.String?
    public final override /*1*/ /*fake_override*/ fun lookupPrefix(/*0*/ namespace: kotlin.String?): kotlin.String?
    public final override /*1*/ /*fake_override*/ fun matches(/*0*/ selectors: kotlin.String): kotlin.Boolean
    public final override /*1*/ /*fake_override*/ fun normalize(): kotlin.Unit
    public abstract override /*1*/ /*fake_override*/ fun prepend(/*0*/ vararg nodes: dynamic /*kotlin.Array<out dynamic>*/): kotlin.Unit
    public abstract override /*1*/ /*fake_override*/ fun querySelector(/*0*/ selectors: kotlin.String): org.w3c.dom.Element?
    public abstract override /*1*/ /*fake_override*/ fun querySelectorAll(/*0*/ selectors: kotlin.String): org.w3c.dom.NodeList
    public final override /*1*/ /*fake_override*/ fun releasePointerCapture(/*0*/ pointerId: kotlin.Int): kotlin.Unit
    public abstract override /*1*/ /*fake_override*/ fun remove(): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun removeAttribute(/*0*/ qualifiedName: kotlin.String): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun removeAttributeNS(/*0*/ namespace: kotlin.String?, /*1*/ localName: kotlin.String): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun removeAttributeNode(/*0*/ attr: org.w3c.dom.Attr): org.w3c.dom.Attr
    public final override /*1*/ /*fake_override*/ fun removeChild(/*0*/ child: org.w3c.dom.Node): org.w3c.dom.Node
    public final override /*1*/ /*fake_override*/ fun removeEventListener(/*0*/ type: kotlin.String, /*1*/ callback: ((org.w3c.dom.events.Event) -> kotlin.Unit)?, /*2*/ options: dynamic = ...): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun removeEventListener(/*0*/ type: kotlin.String, /*1*/ callback: org.w3c.dom.events.EventListener?, /*2*/ options: dynamic = ...): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun replaceChild(/*0*/ node: org.w3c.dom.Node, /*1*/ child: org.w3c.dom.Node): org.w3c.dom.Node
    public abstract override /*1*/ /*fake_override*/ fun replaceWith(/*0*/ vararg nodes: dynamic /*kotlin.Array<out dynamic>*/): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun requestFullscreen(): kotlin.js.Promise<kotlin.Unit>
    public final override /*1*/ /*fake_override*/ fun scroll(/*0*/ x: kotlin.Double, /*1*/ y: kotlin.Double): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun scroll(/*0*/ options: org.w3c.dom.ScrollToOptions = ...): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun scrollBy(/*0*/ x: kotlin.Double, /*1*/ y: kotlin.Double): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun scrollBy(/*0*/ options: org.w3c.dom.ScrollToOptions = ...): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun scrollIntoView(): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun scrollIntoView(/*0*/ arg: dynamic): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun scrollTo(/*0*/ x: kotlin.Double, /*1*/ y: kotlin.Double): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun scrollTo(/*0*/ options: org.w3c.dom.ScrollToOptions = ...): kotlin.Unit
    public final fun selectSubString(/*0*/ charnum: kotlin.Int, /*1*/ nchars: kotlin.Int): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun setAttribute(/*0*/ qualifiedName: kotlin.String, /*1*/ value: kotlin.String): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun setAttributeNS(/*0*/ namespace: kotlin.String?, /*1*/ qualifiedName: kotlin.String, /*2*/ value: kotlin.String): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun setAttributeNode(/*0*/ attr: org.w3c.dom.Attr): org.w3c.dom.Attr?
    public final override /*1*/ /*fake_override*/ fun setAttributeNodeNS(/*0*/ attr: org.w3c.dom.Attr): org.w3c.dom.Attr?
    public final override /*1*/ /*fake_override*/ fun setPointerCapture(/*0*/ pointerId: kotlin.Int): kotlin.Unit
    public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
    public final override /*1*/ /*fake_override*/ fun webkitMatchesSelector(/*0*/ selectors: kotlin.String): kotlin.Boolean

    public companion object Companion {
        /*primary*/ private constructor Companion()
        public final val ATTRIBUTE_NODE: kotlin.Short
            public final fun <get-ATTRIBUTE_NODE>(): kotlin.Short
        public final val CDATA_SECTION_NODE: kotlin.Short
            public final fun <get-CDATA_SECTION_NODE>(): kotlin.Short
        public final val COMMENT_NODE: kotlin.Short
            public final fun <get-COMMENT_NODE>(): kotlin.Short
        public final val DOCUMENT_FRAGMENT_NODE: kotlin.Short
            public final fun <get-DOCUMENT_FRAGMENT_NODE>(): kotlin.Short
        public final val DOCUMENT_NODE: kotlin.Short
            public final fun <get-DOCUMENT_NODE>(): kotlin.Short
        public final val DOCUMENT_POSITION_CONTAINED_BY: kotlin.Short
            public final fun <get-DOCUMENT_POSITION_CONTAINED_BY>(): kotlin.Short
        public final val DOCUMENT_POSITION_CONTAINS: kotlin.Short
            public final fun <get-DOCUMENT_POSITION_CONTAINS>(): kotlin.Short
        public final val DOCUMENT_POSITION_DISCONNECTED: kotlin.Short
            public final fun <get-DOCUMENT_POSITION_DISCONNECTED>(): kotlin.Short
        public final val DOCUMENT_POSITION_FOLLOWING: kotlin.Short
            public final fun <get-DOCUMENT_POSITION_FOLLOWING>(): kotlin.Short
        public final val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: kotlin.Short
            public final fun <get-DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC>(): kotlin.Short
        public final val DOCUMENT_POSITION_PRECEDING: kotlin.Short
            public final fun <get-DOCUMENT_POSITION_PRECEDING>(): kotlin.Short
        public final val DOCUMENT_TYPE_NODE: kotlin.Short
            public final fun <get-DOCUMENT_TYPE_NODE>(): kotlin.Short
        public final val ELEMENT_NODE: kotlin.Short
            public final fun <get-ELEMENT_NODE>(): kotlin.Short
        public final val ENTITY_NODE: kotlin.Short
            public final fun <get-ENTITY_NODE>(): kotlin.Short
        public final val ENTITY_REFERENCE_NODE: kotlin.Short
            public final fun <get-ENTITY_REFERENCE_NODE>(): kotlin.Short
        public final val LENGTHADJUST_SPACING: kotlin.Short
            public final fun <get-LENGTHADJUST_SPACING>(): kotlin.Short
        public final val LENGTHADJUST_SPACINGANDGLYPHS: kotlin.Short
            public final fun <get-LENGTHADJUST_SPACINGANDGLYPHS>(): kotlin.Short
        public final val LENGTHADJUST_UNKNOWN: kotlin.Short
            public final fun <get-LENGTHADJUST_UNKNOWN>(): kotlin.Short
        public final val NOTATION_NODE: kotlin.Short
            public final fun <get-NOTATION_NODE>(): kotlin.Short
        public final val PROCESSING_INSTRUCTION_NODE: kotlin.Short
            public final fun <get-PROCESSING_INSTRUCTION_NODE>(): kotlin.Short
        public final val TEXT_NODE: kotlin.Short
            public final fun <get-TEXT_NODE>(): kotlin.Short
        public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
        public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
        public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
    }
}

public abstract external class SVGTextElement : org.w3c.dom.svg.SVGTextPositioningElement {
    /*primary*/ public constructor SVGTextElement()
    public open override /*1*/ /*fake_override*/ val assignedSlot: org.w3c.dom.HTMLSlotElement?
        public open override /*1*/ /*fake_override*/ fun <get-assignedSlot>(): org.w3c.dom.HTMLSlotElement?
    public open override /*1*/ /*fake_override*/ val attributes: org.w3c.dom.NamedNodeMap
        public open override /*1*/ /*fake_override*/ fun <get-attributes>(): org.w3c.dom.NamedNodeMap
    public open override /*1*/ /*fake_override*/ val baseURI: kotlin.String
        public open override /*1*/ /*fake_override*/ fun <get-baseURI>(): kotlin.String
    public abstract override /*1*/ /*fake_override*/ val childElementCount: kotlin.Int
        public abstract override /*1*/ /*fake_override*/ fun <get-childElementCount>(): kotlin.Int
    public open override /*1*/ /*fake_override*/ val childNodes: org.w3c.dom.NodeList
        public open override /*1*/ /*fake_override*/ fun <get-childNodes>(): org.w3c.dom.NodeList
    public abstract override /*1*/ /*fake_override*/ val children: org.w3c.dom.HTMLCollection
        public abstract override /*1*/ /*fake_override*/ fun <get-children>(): org.w3c.dom.HTMLCollection
    public open override /*1*/ /*fake_override*/ val classList: org.w3c.dom.DOMTokenList
        public open override /*1*/ /*fake_override*/ fun <get-classList>(): org.w3c.dom.DOMTokenList
    public open override /*1*/ /*fake_override*/ var className: kotlin.String
        public open override /*1*/ /*fake_override*/ fun <get-className>(): kotlin.String
        public open override /*1*/ /*fake_override*/ fun <set-className>(/*0*/ <set-?>: kotlin.String): kotlin.Unit
    public open override /*1*/ /*fake_override*/ val clientHeight: kotlin.Int
        public open override /*1*/ /*fake_override*/ fun <get-clientHeight>(): kotlin.Int
    public open override /*1*/ /*fake_override*/ val clientLeft: kotlin.Int
        public open override /*1*/ /*fake_override*/ fun <get-clientLeft>(): kotlin.Int
    public open override /*1*/ /*fake_override*/ val clientTop: kotlin.Int
        public open override /*1*/ /*fake_override*/ fun <get-clientTop>(): kotlin.Int
    public open override /*1*/ /*fake_override*/ val clientWidth: kotlin.Int
        public open override /*1*/ /*fake_override*/ fun <get-clientWidth>(): kotlin.Int
    public open override /*1*/ /*fake_override*/ val correspondingElement: org.w3c.dom.svg.SVGElement?
        public open override /*1*/ /*fake_override*/ fun <get-correspondingElement>(): org.w3c.dom.svg.SVGElement?
    public open override /*1*/ /*fake_override*/ val correspondingUseElement: org.w3c.dom.svg.SVGUseElement?
        public open override /*1*/ /*fake_override*/ fun <get-correspondingUseElement>(): org.w3c.dom.svg.SVGUseElement?
    public open override /*1*/ /*fake_override*/ val dataset: org.w3c.dom.DOMStringMap
        public open override /*1*/ /*fake_override*/ fun <get-dataset>(): org.w3c.dom.DOMStringMap
    public open override /*1*/ /*fake_override*/ val dx: org.w3c.dom.svg.SVGAnimatedLengthList
        public open override /*1*/ /*fake_override*/ fun <get-dx>(): org.w3c.dom.svg.SVGAnimatedLengthList
    public open override /*1*/ /*fake_override*/ val dy: org.w3c.dom.svg.SVGAnimatedLengthList
        public open override /*1*/ /*fake_override*/ fun <get-dy>(): org.w3c.dom.svg.SVGAnimatedLengthList
    public open override /*1*/ /*fake_override*/ val firstChild: org.w3c.dom.Node?
        public open override /*1*/ /*fake_override*/ fun <get-firstChild>(): org.w3c.dom.Node?
    public open override /*1*/ /*fake_override*/ val firstElementChild: org.w3c.dom.Element?
        public open override /*1*/ /*fake_override*/ fun <get-firstElementChild>(): org.w3c.dom.Element?
    public open override /*1*/ /*fake_override*/ var id: kotlin.String
        public open override /*1*/ /*fake_override*/ fun <get-id>(): kotlin.String
        public open override /*1*/ /*fake_override*/ fun <set-id>(/*0*/ <set-?>: kotlin.String): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var innerHTML: kotlin.String
        public open override /*1*/ /*fake_override*/ fun <get-innerHTML>(): kotlin.String
        public open override /*1*/ /*fake_override*/ fun <set-innerHTML>(/*0*/ <set-?>: kotlin.String): kotlin.Unit
    public open override /*1*/ /*fake_override*/ val isConnected: kotlin.Boolean
        public open override /*1*/ /*fake_override*/ fun <get-isConnected>(): kotlin.Boolean
    public open override /*1*/ /*fake_override*/ val lastChild: org.w3c.dom.Node?
        public open override /*1*/ /*fake_override*/ fun <get-lastChild>(): org.w3c.dom.Node?
    public open override /*1*/ /*fake_override*/ val lastElementChild: org.w3c.dom.Element?
        public open override /*1*/ /*fake_override*/ fun <get-lastElementChild>(): org.w3c.dom.Element?
    public open override /*1*/ /*fake_override*/ val lengthAdjust: org.w3c.dom.svg.SVGAnimatedEnumeration
        public open override /*1*/ /*fake_override*/ fun <get-lengthAdjust>(): org.w3c.dom.svg.SVGAnimatedEnumeration
    public open override /*1*/ /*fake_override*/ val localName: kotlin.String
        public open override /*1*/ /*fake_override*/ fun <get-localName>(): kotlin.String
    public open override /*1*/ /*fake_override*/ val namespaceURI: kotlin.String?
        public open override /*1*/ /*fake_override*/ fun <get-namespaceURI>(): kotlin.String?
    public open override /*1*/ /*fake_override*/ val nextElementSibling: org.w3c.dom.Element?
        public open override /*1*/ /*fake_override*/ fun <get-nextElementSibling>(): org.w3c.dom.Element?
    public open override /*1*/ /*fake_override*/ val nextSibling: org.w3c.dom.Node?
        public open override /*1*/ /*fake_override*/ fun <get-nextSibling>(): org.w3c.dom.Node?
    public open override /*1*/ /*fake_override*/ val nodeName: kotlin.String
        public open override /*1*/ /*fake_override*/ fun <get-nodeName>(): kotlin.String
    public open override /*1*/ /*fake_override*/ val nodeType: kotlin.Short
        public open override /*1*/ /*fake_override*/ fun <get-nodeType>(): kotlin.Short
    public open override /*1*/ /*fake_override*/ var nodeValue: kotlin.String?
        public open override /*1*/ /*fake_override*/ fun <get-nodeValue>(): kotlin.String?
        public open override /*1*/ /*fake_override*/ fun <set-nodeValue>(/*0*/ <set-?>: kotlin.String?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onabort: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onabort>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onabort>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onblur: ((org.w3c.dom.events.FocusEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onblur>(): ((org.w3c.dom.events.FocusEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onblur>(/*0*/ value: ((org.w3c.dom.events.FocusEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var oncancel: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-oncancel>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-oncancel>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var oncanplay: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-oncanplay>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-oncanplay>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var oncanplaythrough: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-oncanplaythrough>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-oncanplaythrough>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onchange: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onchange>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onchange>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onclick: ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onclick>(): ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onclick>(/*0*/ value: ((org.w3c.dom.events.MouseEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onclose: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onclose>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onclose>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var oncontextmenu: ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-oncontextmenu>(): ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-oncontextmenu>(/*0*/ value: ((org.w3c.dom.events.MouseEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var oncuechange: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-oncuechange>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-oncuechange>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ondblclick: ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ondblclick>(): ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ondblclick>(/*0*/ value: ((org.w3c.dom.events.MouseEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ondrag: ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ondrag>(): ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ondrag>(/*0*/ value: ((org.w3c.dom.DragEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ondragend: ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ondragend>(): ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ondragend>(/*0*/ value: ((org.w3c.dom.DragEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ondragenter: ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ondragenter>(): ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ondragenter>(/*0*/ value: ((org.w3c.dom.DragEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ondragexit: ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ondragexit>(): ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ondragexit>(/*0*/ value: ((org.w3c.dom.DragEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ondragleave: ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ondragleave>(): ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ondragleave>(/*0*/ value: ((org.w3c.dom.DragEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ondragover: ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ondragover>(): ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ondragover>(/*0*/ value: ((org.w3c.dom.DragEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ondragstart: ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ondragstart>(): ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ondragstart>(/*0*/ value: ((org.w3c.dom.DragEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ondrop: ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ondrop>(): ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ondrop>(/*0*/ value: ((org.w3c.dom.DragEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ondurationchange: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ondurationchange>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ondurationchange>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onemptied: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onemptied>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onemptied>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onended: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onended>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onended>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onerror: ((dynamic, kotlin.String, kotlin.Int, kotlin.Int, kotlin.Any?) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onerror>(): ((dynamic, kotlin.String, kotlin.Int, kotlin.Int, kotlin.Any?) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onerror>(/*0*/ value: ((dynamic, kotlin.String, kotlin.Int, kotlin.Int, kotlin.Any?) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onfocus: ((org.w3c.dom.events.FocusEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onfocus>(): ((org.w3c.dom.events.FocusEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onfocus>(/*0*/ value: ((org.w3c.dom.events.FocusEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ongotpointercapture: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ongotpointercapture>(): ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ongotpointercapture>(/*0*/ value: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var oninput: ((org.w3c.dom.events.InputEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-oninput>(): ((org.w3c.dom.events.InputEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-oninput>(/*0*/ value: ((org.w3c.dom.events.InputEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var oninvalid: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-oninvalid>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-oninvalid>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onkeydown: ((org.w3c.dom.events.KeyboardEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onkeydown>(): ((org.w3c.dom.events.KeyboardEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onkeydown>(/*0*/ value: ((org.w3c.dom.events.KeyboardEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onkeypress: ((org.w3c.dom.events.KeyboardEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onkeypress>(): ((org.w3c.dom.events.KeyboardEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onkeypress>(/*0*/ value: ((org.w3c.dom.events.KeyboardEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onkeyup: ((org.w3c.dom.events.KeyboardEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onkeyup>(): ((org.w3c.dom.events.KeyboardEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onkeyup>(/*0*/ value: ((org.w3c.dom.events.KeyboardEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onload: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onload>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onload>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onloadeddata: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onloadeddata>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onloadeddata>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onloadedmetadata: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onloadedmetadata>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onloadedmetadata>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onloadend: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onloadend>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onloadend>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onloadstart: ((org.w3c.xhr.ProgressEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onloadstart>(): ((org.w3c.xhr.ProgressEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onloadstart>(/*0*/ value: ((org.w3c.xhr.ProgressEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onlostpointercapture: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onlostpointercapture>(): ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onlostpointercapture>(/*0*/ value: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onmousedown: ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onmousedown>(): ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onmousedown>(/*0*/ value: ((org.w3c.dom.events.MouseEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onmouseenter: ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onmouseenter>(): ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onmouseenter>(/*0*/ value: ((org.w3c.dom.events.MouseEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onmouseleave: ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onmouseleave>(): ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onmouseleave>(/*0*/ value: ((org.w3c.dom.events.MouseEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onmousemove: ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onmousemove>(): ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onmousemove>(/*0*/ value: ((org.w3c.dom.events.MouseEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onmouseout: ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onmouseout>(): ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onmouseout>(/*0*/ value: ((org.w3c.dom.events.MouseEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onmouseover: ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onmouseover>(): ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onmouseover>(/*0*/ value: ((org.w3c.dom.events.MouseEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onmouseup: ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onmouseup>(): ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onmouseup>(/*0*/ value: ((org.w3c.dom.events.MouseEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onpause: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onpause>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onpause>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onplay: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onplay>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onplay>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onplaying: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onplaying>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onplaying>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onpointercancel: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onpointercancel>(): ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onpointercancel>(/*0*/ value: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onpointerdown: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onpointerdown>(): ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onpointerdown>(/*0*/ value: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onpointerenter: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onpointerenter>(): ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onpointerenter>(/*0*/ value: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onpointerleave: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onpointerleave>(): ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onpointerleave>(/*0*/ value: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onpointermove: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onpointermove>(): ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onpointermove>(/*0*/ value: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onpointerout: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onpointerout>(): ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onpointerout>(/*0*/ value: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onpointerover: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onpointerover>(): ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onpointerover>(/*0*/ value: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onpointerup: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onpointerup>(): ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onpointerup>(/*0*/ value: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onprogress: ((org.w3c.xhr.ProgressEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onprogress>(): ((org.w3c.xhr.ProgressEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onprogress>(/*0*/ value: ((org.w3c.xhr.ProgressEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onratechange: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onratechange>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onratechange>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onreset: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onreset>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onreset>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onresize: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onresize>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onresize>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onscroll: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onscroll>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onscroll>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onseeked: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onseeked>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onseeked>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onseeking: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onseeking>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onseeking>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onselect: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onselect>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onselect>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onshow: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onshow>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onshow>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onstalled: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onstalled>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onstalled>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onsubmit: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onsubmit>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onsubmit>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onsuspend: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onsuspend>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onsuspend>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ontimeupdate: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ontimeupdate>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ontimeupdate>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ontoggle: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ontoggle>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ontoggle>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onvolumechange: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onvolumechange>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onvolumechange>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onwaiting: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onwaiting>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onwaiting>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onwheel: ((org.w3c.dom.events.WheelEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onwheel>(): ((org.w3c.dom.events.WheelEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onwheel>(/*0*/ value: ((org.w3c.dom.events.WheelEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var outerHTML: kotlin.String
        public open override /*1*/ /*fake_override*/ fun <get-outerHTML>(): kotlin.String
        public open override /*1*/ /*fake_override*/ fun <set-outerHTML>(/*0*/ <set-?>: kotlin.String): kotlin.Unit
    public open override /*1*/ /*fake_override*/ val ownerDocument: org.w3c.dom.Document?
        public open override /*1*/ /*fake_override*/ fun <get-ownerDocument>(): org.w3c.dom.Document?
    public open override /*1*/ /*fake_override*/ val ownerSVGElement: org.w3c.dom.svg.SVGSVGElement?
        public open override /*1*/ /*fake_override*/ fun <get-ownerSVGElement>(): org.w3c.dom.svg.SVGSVGElement?
    public open override /*1*/ /*fake_override*/ val parentElement: org.w3c.dom.Element?
        public open override /*1*/ /*fake_override*/ fun <get-parentElement>(): org.w3c.dom.Element?
    public open override /*1*/ /*fake_override*/ val parentNode: org.w3c.dom.Node?
        public open override /*1*/ /*fake_override*/ fun <get-parentNode>(): org.w3c.dom.Node?
    public open override /*1*/ /*fake_override*/ val prefix: kotlin.String?
        public open override /*1*/ /*fake_override*/ fun <get-prefix>(): kotlin.String?
    public open override /*1*/ /*fake_override*/ val previousElementSibling: org.w3c.dom.Element?
        public open override /*1*/ /*fake_override*/ fun <get-previousElementSibling>(): org.w3c.dom.Element?
    public open override /*1*/ /*fake_override*/ val previousSibling: org.w3c.dom.Node?
        public open override /*1*/ /*fake_override*/ fun <get-previousSibling>(): org.w3c.dom.Node?
    public abstract override /*1*/ /*fake_override*/ val requiredExtensions: org.w3c.dom.svg.SVGStringList
        public abstract override /*1*/ /*fake_override*/ fun <get-requiredExtensions>(): org.w3c.dom.svg.SVGStringList
    public open override /*1*/ /*fake_override*/ val rotate: org.w3c.dom.svg.SVGAnimatedNumberList
        public open override /*1*/ /*fake_override*/ fun <get-rotate>(): org.w3c.dom.svg.SVGAnimatedNumberList
    public open override /*1*/ /*fake_override*/ val scrollHeight: kotlin.Int
        public open override /*1*/ /*fake_override*/ fun <get-scrollHeight>(): kotlin.Int
    public open override /*1*/ /*fake_override*/ var scrollLeft: kotlin.Double
        public open override /*1*/ /*fake_override*/ fun <get-scrollLeft>(): kotlin.Double
        public open override /*1*/ /*fake_override*/ fun <set-scrollLeft>(/*0*/ <set-?>: kotlin.Double): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var scrollTop: kotlin.Double
        public open override /*1*/ /*fake_override*/ fun <get-scrollTop>(): kotlin.Double
        public open override /*1*/ /*fake_override*/ fun <set-scrollTop>(/*0*/ <set-?>: kotlin.Double): kotlin.Unit
    public open override /*1*/ /*fake_override*/ val scrollWidth: kotlin.Int
        public open override /*1*/ /*fake_override*/ fun <get-scrollWidth>(): kotlin.Int
    public open override /*1*/ /*fake_override*/ val shadowRoot: org.w3c.dom.ShadowRoot?
        public open override /*1*/ /*fake_override*/ fun <get-shadowRoot>(): org.w3c.dom.ShadowRoot?
    public open override /*1*/ /*fake_override*/ var slot: kotlin.String
        public open override /*1*/ /*fake_override*/ fun <get-slot>(): kotlin.String
        public open override /*1*/ /*fake_override*/ fun <set-slot>(/*0*/ <set-?>: kotlin.String): kotlin.Unit
    public abstract override /*1*/ /*fake_override*/ val style: org.w3c.dom.css.CSSStyleDeclaration
        public abstract override /*1*/ /*fake_override*/ fun <get-style>(): org.w3c.dom.css.CSSStyleDeclaration
    public abstract override /*1*/ /*fake_override*/ val systemLanguage: org.w3c.dom.svg.SVGStringList
        public abstract override /*1*/ /*fake_override*/ fun <get-systemLanguage>(): org.w3c.dom.svg.SVGStringList
    public open override /*1*/ /*fake_override*/ var tabIndex: kotlin.Int
        public open override /*1*/ /*fake_override*/ fun <get-tabIndex>(): kotlin.Int
        public open override /*1*/ /*fake_override*/ fun <set-tabIndex>(/*0*/ <set-?>: kotlin.Int): kotlin.Unit
    public open override /*1*/ /*fake_override*/ val tagName: kotlin.String
        public open override /*1*/ /*fake_override*/ fun <get-tagName>(): kotlin.String
    public open override /*1*/ /*fake_override*/ var textContent: kotlin.String?
        public open override /*1*/ /*fake_override*/ fun <get-textContent>(): kotlin.String?
        public open override /*1*/ /*fake_override*/ fun <set-textContent>(/*0*/ <set-?>: kotlin.String?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ val textLength: org.w3c.dom.svg.SVGAnimatedLength
        public open override /*1*/ /*fake_override*/ fun <get-textLength>(): org.w3c.dom.svg.SVGAnimatedLength
    public open override /*1*/ /*fake_override*/ val transform: org.w3c.dom.svg.SVGAnimatedTransformList
        public open override /*1*/ /*fake_override*/ fun <get-transform>(): org.w3c.dom.svg.SVGAnimatedTransformList
    public open override /*1*/ /*fake_override*/ val viewportElement: org.w3c.dom.svg.SVGElement?
        public open override /*1*/ /*fake_override*/ fun <get-viewportElement>(): org.w3c.dom.svg.SVGElement?
    public open override /*1*/ /*fake_override*/ val x: org.w3c.dom.svg.SVGAnimatedLengthList
        public open override /*1*/ /*fake_override*/ fun <get-x>(): org.w3c.dom.svg.SVGAnimatedLengthList
    public open override /*1*/ /*fake_override*/ val y: org.w3c.dom.svg.SVGAnimatedLengthList
        public open override /*1*/ /*fake_override*/ fun <get-y>(): org.w3c.dom.svg.SVGAnimatedLengthList
    public final override /*1*/ /*fake_override*/ fun addEventListener(/*0*/ type: kotlin.String, /*1*/ callback: ((org.w3c.dom.events.Event) -> kotlin.Unit)?, /*2*/ options: dynamic = ...): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun addEventListener(/*0*/ type: kotlin.String, /*1*/ callback: org.w3c.dom.events.EventListener?, /*2*/ options: dynamic = ...): kotlin.Unit
    public abstract override /*1*/ /*fake_override*/ fun after(/*0*/ vararg nodes: dynamic /*kotlin.Array<out dynamic>*/): kotlin.Unit
    public abstract override /*1*/ /*fake_override*/ fun append(/*0*/ vararg nodes: dynamic /*kotlin.Array<out dynamic>*/): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun appendChild(/*0*/ node: org.w3c.dom.Node): org.w3c.dom.Node
    public final override /*1*/ /*fake_override*/ fun attachShadow(/*0*/ init: org.w3c.dom.ShadowRootInit): org.w3c.dom.ShadowRoot
    public abstract override /*1*/ /*fake_override*/ fun before(/*0*/ vararg nodes: dynamic /*kotlin.Array<out dynamic>*/): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun blur(): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun cloneNode(/*0*/ deep: kotlin.Boolean = ...): org.w3c.dom.Node
    public final override /*1*/ /*fake_override*/ fun closest(/*0*/ selectors: kotlin.String): org.w3c.dom.Element?
    public final override /*1*/ /*fake_override*/ fun compareDocumentPosition(/*0*/ other: org.w3c.dom.Node): kotlin.Short
    public final override /*1*/ /*fake_override*/ fun contains(/*0*/ other: org.w3c.dom.Node?): kotlin.Boolean
    public abstract override /*1*/ /*fake_override*/ fun convertPointFromNode(/*0*/ point: org.w3c.dom.DOMPointInit, /*1*/ from: dynamic, /*2*/ options: org.w3c.dom.ConvertCoordinateOptions = ...): org.w3c.dom.DOMPoint
    public abstract override /*1*/ /*fake_override*/ fun convertQuadFromNode(/*0*/ quad: dynamic, /*1*/ from: dynamic, /*2*/ options: org.w3c.dom.ConvertCoordinateOptions = ...): org.w3c.dom.DOMQuad
    public abstract override /*1*/ /*fake_override*/ fun convertRectFromNode(/*0*/ rect: org.w3c.dom.DOMRectReadOnly, /*1*/ from: dynamic, /*2*/ options: org.w3c.dom.ConvertCoordinateOptions = ...): org.w3c.dom.DOMQuad
    public final override /*1*/ /*fake_override*/ fun dispatchEvent(/*0*/ event: org.w3c.dom.events.Event): kotlin.Boolean
    public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
    public final override /*1*/ /*fake_override*/ fun focus(): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun getAttribute(/*0*/ qualifiedName: kotlin.String): kotlin.String?
    public final override /*1*/ /*fake_override*/ fun getAttributeNS(/*0*/ namespace: kotlin.String?, /*1*/ localName: kotlin.String): kotlin.String?
    public final override /*1*/ /*fake_override*/ fun getAttributeNames(): kotlin.Array<kotlin.String>
    public final override /*1*/ /*fake_override*/ fun getAttributeNode(/*0*/ qualifiedName: kotlin.String): org.w3c.dom.Attr?
    public final override /*1*/ /*fake_override*/ fun getAttributeNodeNS(/*0*/ namespace: kotlin.String?, /*1*/ localName: kotlin.String): org.w3c.dom.Attr?
    public final override /*1*/ /*fake_override*/ fun getBBox(/*0*/ options: org.w3c.dom.svg.SVGBoundingBoxOptions = ...): org.w3c.dom.DOMRect
    public final override /*1*/ /*fake_override*/ fun getBoundingClientRect(): org.w3c.dom.DOMRect
    public abstract override /*1*/ /*fake_override*/ fun getBoxQuads(/*0*/ options: org.w3c.dom.BoxQuadOptions = ...): kotlin.Array<org.w3c.dom.DOMQuad>
    public final override /*1*/ /*fake_override*/ fun getCTM(): org.w3c.dom.DOMMatrix?
    public final override /*1*/ /*fake_override*/ fun getCharNumAtPosition(/*0*/ point: org.w3c.dom.DOMPoint): kotlin.Int
    public final override /*1*/ /*fake_override*/ fun getClientRects(): kotlin.Array<org.w3c.dom.DOMRect>
    public final override /*1*/ /*fake_override*/ fun getComputedTextLength(): kotlin.Float
    public final override /*1*/ /*fake_override*/ fun getElementsByClassName(/*0*/ classNames: kotlin.String): org.w3c.dom.HTMLCollection
    public final override /*1*/ /*fake_override*/ fun getElementsByTagName(/*0*/ qualifiedName: kotlin.String): org.w3c.dom.HTMLCollection
    public final override /*1*/ /*fake_override*/ fun getElementsByTagNameNS(/*0*/ namespace: kotlin.String?, /*1*/ localName: kotlin.String): org.w3c.dom.HTMLCollection
    public final override /*1*/ /*fake_override*/ fun getEndPositionOfChar(/*0*/ charnum: kotlin.Int): org.w3c.dom.DOMPoint
    public final override /*1*/ /*fake_override*/ fun getExtentOfChar(/*0*/ charnum: kotlin.Int): org.w3c.dom.DOMRect
    public final override /*1*/ /*fake_override*/ fun getNumberOfChars(): kotlin.Int
    public final override /*1*/ /*fake_override*/ fun getRootNode(/*0*/ options: org.w3c.dom.GetRootNodeOptions = ...): org.w3c.dom.Node
    public final override /*1*/ /*fake_override*/ fun getRotationOfChar(/*0*/ charnum: kotlin.Int): kotlin.Float
    public final override /*1*/ /*fake_override*/ fun getScreenCTM(): org.w3c.dom.DOMMatrix?
    public final override /*1*/ /*fake_override*/ fun getStartPositionOfChar(/*0*/ charnum: kotlin.Int): org.w3c.dom.DOMPoint
    public final override /*1*/ /*fake_override*/ fun getSubStringLength(/*0*/ charnum: kotlin.Int, /*1*/ nchars: kotlin.Int): kotlin.Float
    public final override /*1*/ /*fake_override*/ fun hasAttribute(/*0*/ qualifiedName: kotlin.String): kotlin.Boolean
    public final override /*1*/ /*fake_override*/ fun hasAttributeNS(/*0*/ namespace: kotlin.String?, /*1*/ localName: kotlin.String): kotlin.Boolean
    public final override /*1*/ /*fake_override*/ fun hasAttributes(): kotlin.Boolean
    public final override /*1*/ /*fake_override*/ fun hasChildNodes(): kotlin.Boolean
    public final override /*1*/ /*fake_override*/ fun hasPointerCapture(/*0*/ pointerId: kotlin.Int): kotlin.Boolean
    public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
    public final override /*1*/ /*fake_override*/ fun insertAdjacentElement(/*0*/ where: kotlin.String, /*1*/ element: org.w3c.dom.Element): org.w3c.dom.Element?
    public final override /*1*/ /*fake_override*/ fun insertAdjacentHTML(/*0*/ position: kotlin.String, /*1*/ text: kotlin.String): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun insertAdjacentText(/*0*/ where: kotlin.String, /*1*/ data: kotlin.String): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun insertBefore(/*0*/ node: org.w3c.dom.Node, /*1*/ child: org.w3c.dom.Node?): org.w3c.dom.Node
    public final override /*1*/ /*fake_override*/ fun isDefaultNamespace(/*0*/ namespace: kotlin.String?): kotlin.Boolean
    public final override /*1*/ /*fake_override*/ fun isEqualNode(/*0*/ otherNode: org.w3c.dom.Node?): kotlin.Boolean
    public final override /*1*/ /*fake_override*/ fun isSameNode(/*0*/ otherNode: org.w3c.dom.Node?): kotlin.Boolean
    public final override /*1*/ /*fake_override*/ fun lookupNamespaceURI(/*0*/ prefix: kotlin.String?): kotlin.String?
    public final override /*1*/ /*fake_override*/ fun lookupPrefix(/*0*/ namespace: kotlin.String?): kotlin.String?
    public final override /*1*/ /*fake_override*/ fun matches(/*0*/ selectors: kotlin.String): kotlin.Boolean
    public final override /*1*/ /*fake_override*/ fun normalize(): kotlin.Unit
    public abstract override /*1*/ /*fake_override*/ fun prepend(/*0*/ vararg nodes: dynamic /*kotlin.Array<out dynamic>*/): kotlin.Unit
    public abstract override /*1*/ /*fake_override*/ fun querySelector(/*0*/ selectors: kotlin.String): org.w3c.dom.Element?
    public abstract override /*1*/ /*fake_override*/ fun querySelectorAll(/*0*/ selectors: kotlin.String): org.w3c.dom.NodeList
    public final override /*1*/ /*fake_override*/ fun releasePointerCapture(/*0*/ pointerId: kotlin.Int): kotlin.Unit
    public abstract override /*1*/ /*fake_override*/ fun remove(): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun removeAttribute(/*0*/ qualifiedName: kotlin.String): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun removeAttributeNS(/*0*/ namespace: kotlin.String?, /*1*/ localName: kotlin.String): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun removeAttributeNode(/*0*/ attr: org.w3c.dom.Attr): org.w3c.dom.Attr
    public final override /*1*/ /*fake_override*/ fun removeChild(/*0*/ child: org.w3c.dom.Node): org.w3c.dom.Node
    public final override /*1*/ /*fake_override*/ fun removeEventListener(/*0*/ type: kotlin.String, /*1*/ callback: ((org.w3c.dom.events.Event) -> kotlin.Unit)?, /*2*/ options: dynamic = ...): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun removeEventListener(/*0*/ type: kotlin.String, /*1*/ callback: org.w3c.dom.events.EventListener?, /*2*/ options: dynamic = ...): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun replaceChild(/*0*/ node: org.w3c.dom.Node, /*1*/ child: org.w3c.dom.Node): org.w3c.dom.Node
    public abstract override /*1*/ /*fake_override*/ fun replaceWith(/*0*/ vararg nodes: dynamic /*kotlin.Array<out dynamic>*/): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun requestFullscreen(): kotlin.js.Promise<kotlin.Unit>
    public final override /*1*/ /*fake_override*/ fun scroll(/*0*/ x: kotlin.Double, /*1*/ y: kotlin.Double): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun scroll(/*0*/ options: org.w3c.dom.ScrollToOptions = ...): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun scrollBy(/*0*/ x: kotlin.Double, /*1*/ y: kotlin.Double): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun scrollBy(/*0*/ options: org.w3c.dom.ScrollToOptions = ...): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun scrollIntoView(): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun scrollIntoView(/*0*/ arg: dynamic): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun scrollTo(/*0*/ x: kotlin.Double, /*1*/ y: kotlin.Double): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun scrollTo(/*0*/ options: org.w3c.dom.ScrollToOptions = ...): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun selectSubString(/*0*/ charnum: kotlin.Int, /*1*/ nchars: kotlin.Int): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun setAttribute(/*0*/ qualifiedName: kotlin.String, /*1*/ value: kotlin.String): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun setAttributeNS(/*0*/ namespace: kotlin.String?, /*1*/ qualifiedName: kotlin.String, /*2*/ value: kotlin.String): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun setAttributeNode(/*0*/ attr: org.w3c.dom.Attr): org.w3c.dom.Attr?
    public final override /*1*/ /*fake_override*/ fun setAttributeNodeNS(/*0*/ attr: org.w3c.dom.Attr): org.w3c.dom.Attr?
    public final override /*1*/ /*fake_override*/ fun setPointerCapture(/*0*/ pointerId: kotlin.Int): kotlin.Unit
    public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
    public final override /*1*/ /*fake_override*/ fun webkitMatchesSelector(/*0*/ selectors: kotlin.String): kotlin.Boolean

    public companion object Companion {
        /*primary*/ private constructor Companion()
        public final val ATTRIBUTE_NODE: kotlin.Short
            public final fun <get-ATTRIBUTE_NODE>(): kotlin.Short
        public final val CDATA_SECTION_NODE: kotlin.Short
            public final fun <get-CDATA_SECTION_NODE>(): kotlin.Short
        public final val COMMENT_NODE: kotlin.Short
            public final fun <get-COMMENT_NODE>(): kotlin.Short
        public final val DOCUMENT_FRAGMENT_NODE: kotlin.Short
            public final fun <get-DOCUMENT_FRAGMENT_NODE>(): kotlin.Short
        public final val DOCUMENT_NODE: kotlin.Short
            public final fun <get-DOCUMENT_NODE>(): kotlin.Short
        public final val DOCUMENT_POSITION_CONTAINED_BY: kotlin.Short
            public final fun <get-DOCUMENT_POSITION_CONTAINED_BY>(): kotlin.Short
        public final val DOCUMENT_POSITION_CONTAINS: kotlin.Short
            public final fun <get-DOCUMENT_POSITION_CONTAINS>(): kotlin.Short
        public final val DOCUMENT_POSITION_DISCONNECTED: kotlin.Short
            public final fun <get-DOCUMENT_POSITION_DISCONNECTED>(): kotlin.Short
        public final val DOCUMENT_POSITION_FOLLOWING: kotlin.Short
            public final fun <get-DOCUMENT_POSITION_FOLLOWING>(): kotlin.Short
        public final val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: kotlin.Short
            public final fun <get-DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC>(): kotlin.Short
        public final val DOCUMENT_POSITION_PRECEDING: kotlin.Short
            public final fun <get-DOCUMENT_POSITION_PRECEDING>(): kotlin.Short
        public final val DOCUMENT_TYPE_NODE: kotlin.Short
            public final fun <get-DOCUMENT_TYPE_NODE>(): kotlin.Short
        public final val ELEMENT_NODE: kotlin.Short
            public final fun <get-ELEMENT_NODE>(): kotlin.Short
        public final val ENTITY_NODE: kotlin.Short
            public final fun <get-ENTITY_NODE>(): kotlin.Short
        public final val ENTITY_REFERENCE_NODE: kotlin.Short
            public final fun <get-ENTITY_REFERENCE_NODE>(): kotlin.Short
        public final val LENGTHADJUST_SPACING: kotlin.Short
            public final fun <get-LENGTHADJUST_SPACING>(): kotlin.Short
        public final val LENGTHADJUST_SPACINGANDGLYPHS: kotlin.Short
            public final fun <get-LENGTHADJUST_SPACINGANDGLYPHS>(): kotlin.Short
        public final val LENGTHADJUST_UNKNOWN: kotlin.Short
            public final fun <get-LENGTHADJUST_UNKNOWN>(): kotlin.Short
        public final val NOTATION_NODE: kotlin.Short
            public final fun <get-NOTATION_NODE>(): kotlin.Short
        public final val PROCESSING_INSTRUCTION_NODE: kotlin.Short
            public final fun <get-PROCESSING_INSTRUCTION_NODE>(): kotlin.Short
        public final val TEXT_NODE: kotlin.Short
            public final fun <get-TEXT_NODE>(): kotlin.Short
        public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
        public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
        public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
    }
}

public abstract external class SVGTextPathElement : org.w3c.dom.svg.SVGTextContentElement, org.w3c.dom.svg.SVGURIReference {
    /*primary*/ public constructor SVGTextPathElement()
    public open override /*1*/ /*fake_override*/ val assignedSlot: org.w3c.dom.HTMLSlotElement?
        public open override /*1*/ /*fake_override*/ fun <get-assignedSlot>(): org.w3c.dom.HTMLSlotElement?
    public open override /*1*/ /*fake_override*/ val attributes: org.w3c.dom.NamedNodeMap
        public open override /*1*/ /*fake_override*/ fun <get-attributes>(): org.w3c.dom.NamedNodeMap
    public open override /*1*/ /*fake_override*/ val baseURI: kotlin.String
        public open override /*1*/ /*fake_override*/ fun <get-baseURI>(): kotlin.String
    public abstract override /*1*/ /*fake_override*/ val childElementCount: kotlin.Int
        public abstract override /*1*/ /*fake_override*/ fun <get-childElementCount>(): kotlin.Int
    public open override /*1*/ /*fake_override*/ val childNodes: org.w3c.dom.NodeList
        public open override /*1*/ /*fake_override*/ fun <get-childNodes>(): org.w3c.dom.NodeList
    public abstract override /*1*/ /*fake_override*/ val children: org.w3c.dom.HTMLCollection
        public abstract override /*1*/ /*fake_override*/ fun <get-children>(): org.w3c.dom.HTMLCollection
    public open override /*1*/ /*fake_override*/ val classList: org.w3c.dom.DOMTokenList
        public open override /*1*/ /*fake_override*/ fun <get-classList>(): org.w3c.dom.DOMTokenList
    public open override /*1*/ /*fake_override*/ var className: kotlin.String
        public open override /*1*/ /*fake_override*/ fun <get-className>(): kotlin.String
        public open override /*1*/ /*fake_override*/ fun <set-className>(/*0*/ <set-?>: kotlin.String): kotlin.Unit
    public open override /*1*/ /*fake_override*/ val clientHeight: kotlin.Int
        public open override /*1*/ /*fake_override*/ fun <get-clientHeight>(): kotlin.Int
    public open override /*1*/ /*fake_override*/ val clientLeft: kotlin.Int
        public open override /*1*/ /*fake_override*/ fun <get-clientLeft>(): kotlin.Int
    public open override /*1*/ /*fake_override*/ val clientTop: kotlin.Int
        public open override /*1*/ /*fake_override*/ fun <get-clientTop>(): kotlin.Int
    public open override /*1*/ /*fake_override*/ val clientWidth: kotlin.Int
        public open override /*1*/ /*fake_override*/ fun <get-clientWidth>(): kotlin.Int
    public open override /*1*/ /*fake_override*/ val correspondingElement: org.w3c.dom.svg.SVGElement?
        public open override /*1*/ /*fake_override*/ fun <get-correspondingElement>(): org.w3c.dom.svg.SVGElement?
    public open override /*1*/ /*fake_override*/ val correspondingUseElement: org.w3c.dom.svg.SVGUseElement?
        public open override /*1*/ /*fake_override*/ fun <get-correspondingUseElement>(): org.w3c.dom.svg.SVGUseElement?
    public open override /*1*/ /*fake_override*/ val dataset: org.w3c.dom.DOMStringMap
        public open override /*1*/ /*fake_override*/ fun <get-dataset>(): org.w3c.dom.DOMStringMap
    public open override /*1*/ /*fake_override*/ val firstChild: org.w3c.dom.Node?
        public open override /*1*/ /*fake_override*/ fun <get-firstChild>(): org.w3c.dom.Node?
    public open override /*1*/ /*fake_override*/ val firstElementChild: org.w3c.dom.Element?
        public open override /*1*/ /*fake_override*/ fun <get-firstElementChild>(): org.w3c.dom.Element?
    public abstract override /*1*/ /*fake_override*/ val href: org.w3c.dom.svg.SVGAnimatedString
        public abstract override /*1*/ /*fake_override*/ fun <get-href>(): org.w3c.dom.svg.SVGAnimatedString
    public open override /*1*/ /*fake_override*/ var id: kotlin.String
        public open override /*1*/ /*fake_override*/ fun <get-id>(): kotlin.String
        public open override /*1*/ /*fake_override*/ fun <set-id>(/*0*/ <set-?>: kotlin.String): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var innerHTML: kotlin.String
        public open override /*1*/ /*fake_override*/ fun <get-innerHTML>(): kotlin.String
        public open override /*1*/ /*fake_override*/ fun <set-innerHTML>(/*0*/ <set-?>: kotlin.String): kotlin.Unit
    public open override /*1*/ /*fake_override*/ val isConnected: kotlin.Boolean
        public open override /*1*/ /*fake_override*/ fun <get-isConnected>(): kotlin.Boolean
    public open override /*1*/ /*fake_override*/ val lastChild: org.w3c.dom.Node?
        public open override /*1*/ /*fake_override*/ fun <get-lastChild>(): org.w3c.dom.Node?
    public open override /*1*/ /*fake_override*/ val lastElementChild: org.w3c.dom.Element?
        public open override /*1*/ /*fake_override*/ fun <get-lastElementChild>(): org.w3c.dom.Element?
    public open override /*1*/ /*fake_override*/ val lengthAdjust: org.w3c.dom.svg.SVGAnimatedEnumeration
        public open override /*1*/ /*fake_override*/ fun <get-lengthAdjust>(): org.w3c.dom.svg.SVGAnimatedEnumeration
    public open override /*1*/ /*fake_override*/ val localName: kotlin.String
        public open override /*1*/ /*fake_override*/ fun <get-localName>(): kotlin.String
    public open val method: org.w3c.dom.svg.SVGAnimatedEnumeration
        public open fun <get-method>(): org.w3c.dom.svg.SVGAnimatedEnumeration
    public open override /*1*/ /*fake_override*/ val namespaceURI: kotlin.String?
        public open override /*1*/ /*fake_override*/ fun <get-namespaceURI>(): kotlin.String?
    public open override /*1*/ /*fake_override*/ val nextElementSibling: org.w3c.dom.Element?
        public open override /*1*/ /*fake_override*/ fun <get-nextElementSibling>(): org.w3c.dom.Element?
    public open override /*1*/ /*fake_override*/ val nextSibling: org.w3c.dom.Node?
        public open override /*1*/ /*fake_override*/ fun <get-nextSibling>(): org.w3c.dom.Node?
    public open override /*1*/ /*fake_override*/ val nodeName: kotlin.String
        public open override /*1*/ /*fake_override*/ fun <get-nodeName>(): kotlin.String
    public open override /*1*/ /*fake_override*/ val nodeType: kotlin.Short
        public open override /*1*/ /*fake_override*/ fun <get-nodeType>(): kotlin.Short
    public open override /*1*/ /*fake_override*/ var nodeValue: kotlin.String?
        public open override /*1*/ /*fake_override*/ fun <get-nodeValue>(): kotlin.String?
        public open override /*1*/ /*fake_override*/ fun <set-nodeValue>(/*0*/ <set-?>: kotlin.String?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onabort: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onabort>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onabort>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onblur: ((org.w3c.dom.events.FocusEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onblur>(): ((org.w3c.dom.events.FocusEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onblur>(/*0*/ value: ((org.w3c.dom.events.FocusEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var oncancel: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-oncancel>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-oncancel>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var oncanplay: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-oncanplay>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-oncanplay>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var oncanplaythrough: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-oncanplaythrough>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-oncanplaythrough>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onchange: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onchange>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onchange>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onclick: ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onclick>(): ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onclick>(/*0*/ value: ((org.w3c.dom.events.MouseEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onclose: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onclose>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onclose>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var oncontextmenu: ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-oncontextmenu>(): ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-oncontextmenu>(/*0*/ value: ((org.w3c.dom.events.MouseEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var oncuechange: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-oncuechange>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-oncuechange>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ondblclick: ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ondblclick>(): ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ondblclick>(/*0*/ value: ((org.w3c.dom.events.MouseEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ondrag: ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ondrag>(): ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ondrag>(/*0*/ value: ((org.w3c.dom.DragEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ondragend: ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ondragend>(): ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ondragend>(/*0*/ value: ((org.w3c.dom.DragEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ondragenter: ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ondragenter>(): ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ondragenter>(/*0*/ value: ((org.w3c.dom.DragEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ondragexit: ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ondragexit>(): ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ondragexit>(/*0*/ value: ((org.w3c.dom.DragEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ondragleave: ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ondragleave>(): ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ondragleave>(/*0*/ value: ((org.w3c.dom.DragEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ondragover: ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ondragover>(): ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ondragover>(/*0*/ value: ((org.w3c.dom.DragEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ondragstart: ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ondragstart>(): ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ondragstart>(/*0*/ value: ((org.w3c.dom.DragEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ondrop: ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ondrop>(): ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ondrop>(/*0*/ value: ((org.w3c.dom.DragEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ondurationchange: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ondurationchange>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ondurationchange>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onemptied: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onemptied>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onemptied>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onended: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onended>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onended>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onerror: ((dynamic, kotlin.String, kotlin.Int, kotlin.Int, kotlin.Any?) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onerror>(): ((dynamic, kotlin.String, kotlin.Int, kotlin.Int, kotlin.Any?) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onerror>(/*0*/ value: ((dynamic, kotlin.String, kotlin.Int, kotlin.Int, kotlin.Any?) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onfocus: ((org.w3c.dom.events.FocusEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onfocus>(): ((org.w3c.dom.events.FocusEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onfocus>(/*0*/ value: ((org.w3c.dom.events.FocusEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ongotpointercapture: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ongotpointercapture>(): ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ongotpointercapture>(/*0*/ value: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var oninput: ((org.w3c.dom.events.InputEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-oninput>(): ((org.w3c.dom.events.InputEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-oninput>(/*0*/ value: ((org.w3c.dom.events.InputEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var oninvalid: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-oninvalid>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-oninvalid>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onkeydown: ((org.w3c.dom.events.KeyboardEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onkeydown>(): ((org.w3c.dom.events.KeyboardEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onkeydown>(/*0*/ value: ((org.w3c.dom.events.KeyboardEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onkeypress: ((org.w3c.dom.events.KeyboardEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onkeypress>(): ((org.w3c.dom.events.KeyboardEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onkeypress>(/*0*/ value: ((org.w3c.dom.events.KeyboardEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onkeyup: ((org.w3c.dom.events.KeyboardEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onkeyup>(): ((org.w3c.dom.events.KeyboardEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onkeyup>(/*0*/ value: ((org.w3c.dom.events.KeyboardEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onload: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onload>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onload>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onloadeddata: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onloadeddata>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onloadeddata>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onloadedmetadata: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onloadedmetadata>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onloadedmetadata>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onloadend: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onloadend>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onloadend>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onloadstart: ((org.w3c.xhr.ProgressEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onloadstart>(): ((org.w3c.xhr.ProgressEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onloadstart>(/*0*/ value: ((org.w3c.xhr.ProgressEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onlostpointercapture: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onlostpointercapture>(): ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onlostpointercapture>(/*0*/ value: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onmousedown: ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onmousedown>(): ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onmousedown>(/*0*/ value: ((org.w3c.dom.events.MouseEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onmouseenter: ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onmouseenter>(): ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onmouseenter>(/*0*/ value: ((org.w3c.dom.events.MouseEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onmouseleave: ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onmouseleave>(): ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onmouseleave>(/*0*/ value: ((org.w3c.dom.events.MouseEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onmousemove: ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onmousemove>(): ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onmousemove>(/*0*/ value: ((org.w3c.dom.events.MouseEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onmouseout: ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onmouseout>(): ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onmouseout>(/*0*/ value: ((org.w3c.dom.events.MouseEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onmouseover: ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onmouseover>(): ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onmouseover>(/*0*/ value: ((org.w3c.dom.events.MouseEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onmouseup: ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onmouseup>(): ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onmouseup>(/*0*/ value: ((org.w3c.dom.events.MouseEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onpause: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onpause>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onpause>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onplay: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onplay>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onplay>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onplaying: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onplaying>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onplaying>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onpointercancel: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onpointercancel>(): ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onpointercancel>(/*0*/ value: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onpointerdown: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onpointerdown>(): ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onpointerdown>(/*0*/ value: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onpointerenter: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onpointerenter>(): ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onpointerenter>(/*0*/ value: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onpointerleave: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onpointerleave>(): ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onpointerleave>(/*0*/ value: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onpointermove: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onpointermove>(): ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onpointermove>(/*0*/ value: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onpointerout: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onpointerout>(): ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onpointerout>(/*0*/ value: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onpointerover: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onpointerover>(): ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onpointerover>(/*0*/ value: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onpointerup: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onpointerup>(): ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onpointerup>(/*0*/ value: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onprogress: ((org.w3c.xhr.ProgressEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onprogress>(): ((org.w3c.xhr.ProgressEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onprogress>(/*0*/ value: ((org.w3c.xhr.ProgressEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onratechange: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onratechange>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onratechange>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onreset: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onreset>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onreset>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onresize: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onresize>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onresize>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onscroll: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onscroll>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onscroll>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onseeked: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onseeked>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onseeked>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onseeking: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onseeking>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onseeking>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onselect: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onselect>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onselect>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onshow: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onshow>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onshow>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onstalled: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onstalled>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onstalled>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onsubmit: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onsubmit>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onsubmit>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onsuspend: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onsuspend>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onsuspend>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ontimeupdate: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ontimeupdate>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ontimeupdate>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ontoggle: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ontoggle>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ontoggle>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onvolumechange: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onvolumechange>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onvolumechange>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onwaiting: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onwaiting>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onwaiting>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onwheel: ((org.w3c.dom.events.WheelEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onwheel>(): ((org.w3c.dom.events.WheelEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onwheel>(/*0*/ value: ((org.w3c.dom.events.WheelEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var outerHTML: kotlin.String
        public open override /*1*/ /*fake_override*/ fun <get-outerHTML>(): kotlin.String
        public open override /*1*/ /*fake_override*/ fun <set-outerHTML>(/*0*/ <set-?>: kotlin.String): kotlin.Unit
    public open override /*1*/ /*fake_override*/ val ownerDocument: org.w3c.dom.Document?
        public open override /*1*/ /*fake_override*/ fun <get-ownerDocument>(): org.w3c.dom.Document?
    public open override /*1*/ /*fake_override*/ val ownerSVGElement: org.w3c.dom.svg.SVGSVGElement?
        public open override /*1*/ /*fake_override*/ fun <get-ownerSVGElement>(): org.w3c.dom.svg.SVGSVGElement?
    public open override /*1*/ /*fake_override*/ val parentElement: org.w3c.dom.Element?
        public open override /*1*/ /*fake_override*/ fun <get-parentElement>(): org.w3c.dom.Element?
    public open override /*1*/ /*fake_override*/ val parentNode: org.w3c.dom.Node?
        public open override /*1*/ /*fake_override*/ fun <get-parentNode>(): org.w3c.dom.Node?
    public open override /*1*/ /*fake_override*/ val prefix: kotlin.String?
        public open override /*1*/ /*fake_override*/ fun <get-prefix>(): kotlin.String?
    public open override /*1*/ /*fake_override*/ val previousElementSibling: org.w3c.dom.Element?
        public open override /*1*/ /*fake_override*/ fun <get-previousElementSibling>(): org.w3c.dom.Element?
    public open override /*1*/ /*fake_override*/ val previousSibling: org.w3c.dom.Node?
        public open override /*1*/ /*fake_override*/ fun <get-previousSibling>(): org.w3c.dom.Node?
    public abstract override /*1*/ /*fake_override*/ val requiredExtensions: org.w3c.dom.svg.SVGStringList
        public abstract override /*1*/ /*fake_override*/ fun <get-requiredExtensions>(): org.w3c.dom.svg.SVGStringList
    public open override /*1*/ /*fake_override*/ val scrollHeight: kotlin.Int
        public open override /*1*/ /*fake_override*/ fun <get-scrollHeight>(): kotlin.Int
    public open override /*1*/ /*fake_override*/ var scrollLeft: kotlin.Double
        public open override /*1*/ /*fake_override*/ fun <get-scrollLeft>(): kotlin.Double
        public open override /*1*/ /*fake_override*/ fun <set-scrollLeft>(/*0*/ <set-?>: kotlin.Double): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var scrollTop: kotlin.Double
        public open override /*1*/ /*fake_override*/ fun <get-scrollTop>(): kotlin.Double
        public open override /*1*/ /*fake_override*/ fun <set-scrollTop>(/*0*/ <set-?>: kotlin.Double): kotlin.Unit
    public open override /*1*/ /*fake_override*/ val scrollWidth: kotlin.Int
        public open override /*1*/ /*fake_override*/ fun <get-scrollWidth>(): kotlin.Int
    public open override /*1*/ /*fake_override*/ val shadowRoot: org.w3c.dom.ShadowRoot?
        public open override /*1*/ /*fake_override*/ fun <get-shadowRoot>(): org.w3c.dom.ShadowRoot?
    public open override /*1*/ /*fake_override*/ var slot: kotlin.String
        public open override /*1*/ /*fake_override*/ fun <get-slot>(): kotlin.String
        public open override /*1*/ /*fake_override*/ fun <set-slot>(/*0*/ <set-?>: kotlin.String): kotlin.Unit
    public open val spacing: org.w3c.dom.svg.SVGAnimatedEnumeration
        public open fun <get-spacing>(): org.w3c.dom.svg.SVGAnimatedEnumeration
    public open val startOffset: org.w3c.dom.svg.SVGAnimatedLength
        public open fun <get-startOffset>(): org.w3c.dom.svg.SVGAnimatedLength
    public abstract override /*1*/ /*fake_override*/ val style: org.w3c.dom.css.CSSStyleDeclaration
        public abstract override /*1*/ /*fake_override*/ fun <get-style>(): org.w3c.dom.css.CSSStyleDeclaration
    public abstract override /*1*/ /*fake_override*/ val systemLanguage: org.w3c.dom.svg.SVGStringList
        public abstract override /*1*/ /*fake_override*/ fun <get-systemLanguage>(): org.w3c.dom.svg.SVGStringList
    public open override /*1*/ /*fake_override*/ var tabIndex: kotlin.Int
        public open override /*1*/ /*fake_override*/ fun <get-tabIndex>(): kotlin.Int
        public open override /*1*/ /*fake_override*/ fun <set-tabIndex>(/*0*/ <set-?>: kotlin.Int): kotlin.Unit
    public open override /*1*/ /*fake_override*/ val tagName: kotlin.String
        public open override /*1*/ /*fake_override*/ fun <get-tagName>(): kotlin.String
    public open override /*1*/ /*fake_override*/ var textContent: kotlin.String?
        public open override /*1*/ /*fake_override*/ fun <get-textContent>(): kotlin.String?
        public open override /*1*/ /*fake_override*/ fun <set-textContent>(/*0*/ <set-?>: kotlin.String?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ val textLength: org.w3c.dom.svg.SVGAnimatedLength
        public open override /*1*/ /*fake_override*/ fun <get-textLength>(): org.w3c.dom.svg.SVGAnimatedLength
    public open override /*1*/ /*fake_override*/ val transform: org.w3c.dom.svg.SVGAnimatedTransformList
        public open override /*1*/ /*fake_override*/ fun <get-transform>(): org.w3c.dom.svg.SVGAnimatedTransformList
    public open override /*1*/ /*fake_override*/ val viewportElement: org.w3c.dom.svg.SVGElement?
        public open override /*1*/ /*fake_override*/ fun <get-viewportElement>(): org.w3c.dom.svg.SVGElement?
    public final override /*1*/ /*fake_override*/ fun addEventListener(/*0*/ type: kotlin.String, /*1*/ callback: ((org.w3c.dom.events.Event) -> kotlin.Unit)?, /*2*/ options: dynamic = ...): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun addEventListener(/*0*/ type: kotlin.String, /*1*/ callback: org.w3c.dom.events.EventListener?, /*2*/ options: dynamic = ...): kotlin.Unit
    public abstract override /*1*/ /*fake_override*/ fun after(/*0*/ vararg nodes: dynamic /*kotlin.Array<out dynamic>*/): kotlin.Unit
    public abstract override /*1*/ /*fake_override*/ fun append(/*0*/ vararg nodes: dynamic /*kotlin.Array<out dynamic>*/): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun appendChild(/*0*/ node: org.w3c.dom.Node): org.w3c.dom.Node
    public final override /*1*/ /*fake_override*/ fun attachShadow(/*0*/ init: org.w3c.dom.ShadowRootInit): org.w3c.dom.ShadowRoot
    public abstract override /*1*/ /*fake_override*/ fun before(/*0*/ vararg nodes: dynamic /*kotlin.Array<out dynamic>*/): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun blur(): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun cloneNode(/*0*/ deep: kotlin.Boolean = ...): org.w3c.dom.Node
    public final override /*1*/ /*fake_override*/ fun closest(/*0*/ selectors: kotlin.String): org.w3c.dom.Element?
    public final override /*1*/ /*fake_override*/ fun compareDocumentPosition(/*0*/ other: org.w3c.dom.Node): kotlin.Short
    public final override /*1*/ /*fake_override*/ fun contains(/*0*/ other: org.w3c.dom.Node?): kotlin.Boolean
    public abstract override /*1*/ /*fake_override*/ fun convertPointFromNode(/*0*/ point: org.w3c.dom.DOMPointInit, /*1*/ from: dynamic, /*2*/ options: org.w3c.dom.ConvertCoordinateOptions = ...): org.w3c.dom.DOMPoint
    public abstract override /*1*/ /*fake_override*/ fun convertQuadFromNode(/*0*/ quad: dynamic, /*1*/ from: dynamic, /*2*/ options: org.w3c.dom.ConvertCoordinateOptions = ...): org.w3c.dom.DOMQuad
    public abstract override /*1*/ /*fake_override*/ fun convertRectFromNode(/*0*/ rect: org.w3c.dom.DOMRectReadOnly, /*1*/ from: dynamic, /*2*/ options: org.w3c.dom.ConvertCoordinateOptions = ...): org.w3c.dom.DOMQuad
    public final override /*1*/ /*fake_override*/ fun dispatchEvent(/*0*/ event: org.w3c.dom.events.Event): kotlin.Boolean
    public open override /*2*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
    public final override /*1*/ /*fake_override*/ fun focus(): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun getAttribute(/*0*/ qualifiedName: kotlin.String): kotlin.String?
    public final override /*1*/ /*fake_override*/ fun getAttributeNS(/*0*/ namespace: kotlin.String?, /*1*/ localName: kotlin.String): kotlin.String?
    public final override /*1*/ /*fake_override*/ fun getAttributeNames(): kotlin.Array<kotlin.String>
    public final override /*1*/ /*fake_override*/ fun getAttributeNode(/*0*/ qualifiedName: kotlin.String): org.w3c.dom.Attr?
    public final override /*1*/ /*fake_override*/ fun getAttributeNodeNS(/*0*/ namespace: kotlin.String?, /*1*/ localName: kotlin.String): org.w3c.dom.Attr?
    public final override /*1*/ /*fake_override*/ fun getBBox(/*0*/ options: org.w3c.dom.svg.SVGBoundingBoxOptions = ...): org.w3c.dom.DOMRect
    public final override /*1*/ /*fake_override*/ fun getBoundingClientRect(): org.w3c.dom.DOMRect
    public abstract override /*1*/ /*fake_override*/ fun getBoxQuads(/*0*/ options: org.w3c.dom.BoxQuadOptions = ...): kotlin.Array<org.w3c.dom.DOMQuad>
    public final override /*1*/ /*fake_override*/ fun getCTM(): org.w3c.dom.DOMMatrix?
    public final override /*1*/ /*fake_override*/ fun getCharNumAtPosition(/*0*/ point: org.w3c.dom.DOMPoint): kotlin.Int
    public final override /*1*/ /*fake_override*/ fun getClientRects(): kotlin.Array<org.w3c.dom.DOMRect>
    public final override /*1*/ /*fake_override*/ fun getComputedTextLength(): kotlin.Float
    public final override /*1*/ /*fake_override*/ fun getElementsByClassName(/*0*/ classNames: kotlin.String): org.w3c.dom.HTMLCollection
    public final override /*1*/ /*fake_override*/ fun getElementsByTagName(/*0*/ qualifiedName: kotlin.String): org.w3c.dom.HTMLCollection
    public final override /*1*/ /*fake_override*/ fun getElementsByTagNameNS(/*0*/ namespace: kotlin.String?, /*1*/ localName: kotlin.String): org.w3c.dom.HTMLCollection
    public final override /*1*/ /*fake_override*/ fun getEndPositionOfChar(/*0*/ charnum: kotlin.Int): org.w3c.dom.DOMPoint
    public final override /*1*/ /*fake_override*/ fun getExtentOfChar(/*0*/ charnum: kotlin.Int): org.w3c.dom.DOMRect
    public final override /*1*/ /*fake_override*/ fun getNumberOfChars(): kotlin.Int
    public final override /*1*/ /*fake_override*/ fun getRootNode(/*0*/ options: org.w3c.dom.GetRootNodeOptions = ...): org.w3c.dom.Node
    public final override /*1*/ /*fake_override*/ fun getRotationOfChar(/*0*/ charnum: kotlin.Int): kotlin.Float
    public final override /*1*/ /*fake_override*/ fun getScreenCTM(): org.w3c.dom.DOMMatrix?
    public final override /*1*/ /*fake_override*/ fun getStartPositionOfChar(/*0*/ charnum: kotlin.Int): org.w3c.dom.DOMPoint
    public final override /*1*/ /*fake_override*/ fun getSubStringLength(/*0*/ charnum: kotlin.Int, /*1*/ nchars: kotlin.Int): kotlin.Float
    public final override /*1*/ /*fake_override*/ fun hasAttribute(/*0*/ qualifiedName: kotlin.String): kotlin.Boolean
    public final override /*1*/ /*fake_override*/ fun hasAttributeNS(/*0*/ namespace: kotlin.String?, /*1*/ localName: kotlin.String): kotlin.Boolean
    public final override /*1*/ /*fake_override*/ fun hasAttributes(): kotlin.Boolean
    public final override /*1*/ /*fake_override*/ fun hasChildNodes(): kotlin.Boolean
    public final override /*1*/ /*fake_override*/ fun hasPointerCapture(/*0*/ pointerId: kotlin.Int): kotlin.Boolean
    public open override /*2*/ /*fake_override*/ fun hashCode(): kotlin.Int
    public final override /*1*/ /*fake_override*/ fun insertAdjacentElement(/*0*/ where: kotlin.String, /*1*/ element: org.w3c.dom.Element): org.w3c.dom.Element?
    public final override /*1*/ /*fake_override*/ fun insertAdjacentHTML(/*0*/ position: kotlin.String, /*1*/ text: kotlin.String): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun insertAdjacentText(/*0*/ where: kotlin.String, /*1*/ data: kotlin.String): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun insertBefore(/*0*/ node: org.w3c.dom.Node, /*1*/ child: org.w3c.dom.Node?): org.w3c.dom.Node
    public final override /*1*/ /*fake_override*/ fun isDefaultNamespace(/*0*/ namespace: kotlin.String?): kotlin.Boolean
    public final override /*1*/ /*fake_override*/ fun isEqualNode(/*0*/ otherNode: org.w3c.dom.Node?): kotlin.Boolean
    public final override /*1*/ /*fake_override*/ fun isSameNode(/*0*/ otherNode: org.w3c.dom.Node?): kotlin.Boolean
    public final override /*1*/ /*fake_override*/ fun lookupNamespaceURI(/*0*/ prefix: kotlin.String?): kotlin.String?
    public final override /*1*/ /*fake_override*/ fun lookupPrefix(/*0*/ namespace: kotlin.String?): kotlin.String?
    public final override /*1*/ /*fake_override*/ fun matches(/*0*/ selectors: kotlin.String): kotlin.Boolean
    public final override /*1*/ /*fake_override*/ fun normalize(): kotlin.Unit
    public abstract override /*1*/ /*fake_override*/ fun prepend(/*0*/ vararg nodes: dynamic /*kotlin.Array<out dynamic>*/): kotlin.Unit
    public abstract override /*1*/ /*fake_override*/ fun querySelector(/*0*/ selectors: kotlin.String): org.w3c.dom.Element?
    public abstract override /*1*/ /*fake_override*/ fun querySelectorAll(/*0*/ selectors: kotlin.String): org.w3c.dom.NodeList
    public final override /*1*/ /*fake_override*/ fun releasePointerCapture(/*0*/ pointerId: kotlin.Int): kotlin.Unit
    public abstract override /*1*/ /*fake_override*/ fun remove(): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun removeAttribute(/*0*/ qualifiedName: kotlin.String): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun removeAttributeNS(/*0*/ namespace: kotlin.String?, /*1*/ localName: kotlin.String): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun removeAttributeNode(/*0*/ attr: org.w3c.dom.Attr): org.w3c.dom.Attr
    public final override /*1*/ /*fake_override*/ fun removeChild(/*0*/ child: org.w3c.dom.Node): org.w3c.dom.Node
    public final override /*1*/ /*fake_override*/ fun removeEventListener(/*0*/ type: kotlin.String, /*1*/ callback: ((org.w3c.dom.events.Event) -> kotlin.Unit)?, /*2*/ options: dynamic = ...): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun removeEventListener(/*0*/ type: kotlin.String, /*1*/ callback: org.w3c.dom.events.EventListener?, /*2*/ options: dynamic = ...): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun replaceChild(/*0*/ node: org.w3c.dom.Node, /*1*/ child: org.w3c.dom.Node): org.w3c.dom.Node
    public abstract override /*1*/ /*fake_override*/ fun replaceWith(/*0*/ vararg nodes: dynamic /*kotlin.Array<out dynamic>*/): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun requestFullscreen(): kotlin.js.Promise<kotlin.Unit>
    public final override /*1*/ /*fake_override*/ fun scroll(/*0*/ x: kotlin.Double, /*1*/ y: kotlin.Double): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun scroll(/*0*/ options: org.w3c.dom.ScrollToOptions = ...): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun scrollBy(/*0*/ x: kotlin.Double, /*1*/ y: kotlin.Double): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun scrollBy(/*0*/ options: org.w3c.dom.ScrollToOptions = ...): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun scrollIntoView(): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun scrollIntoView(/*0*/ arg: dynamic): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun scrollTo(/*0*/ x: kotlin.Double, /*1*/ y: kotlin.Double): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun scrollTo(/*0*/ options: org.w3c.dom.ScrollToOptions = ...): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun selectSubString(/*0*/ charnum: kotlin.Int, /*1*/ nchars: kotlin.Int): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun setAttribute(/*0*/ qualifiedName: kotlin.String, /*1*/ value: kotlin.String): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun setAttributeNS(/*0*/ namespace: kotlin.String?, /*1*/ qualifiedName: kotlin.String, /*2*/ value: kotlin.String): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun setAttributeNode(/*0*/ attr: org.w3c.dom.Attr): org.w3c.dom.Attr?
    public final override /*1*/ /*fake_override*/ fun setAttributeNodeNS(/*0*/ attr: org.w3c.dom.Attr): org.w3c.dom.Attr?
    public final override /*1*/ /*fake_override*/ fun setPointerCapture(/*0*/ pointerId: kotlin.Int): kotlin.Unit
    public open override /*2*/ /*fake_override*/ fun toString(): kotlin.String
    public final override /*1*/ /*fake_override*/ fun webkitMatchesSelector(/*0*/ selectors: kotlin.String): kotlin.Boolean

    public companion object Companion {
        /*primary*/ private constructor Companion()
        public final val ATTRIBUTE_NODE: kotlin.Short
            public final fun <get-ATTRIBUTE_NODE>(): kotlin.Short
        public final val CDATA_SECTION_NODE: kotlin.Short
            public final fun <get-CDATA_SECTION_NODE>(): kotlin.Short
        public final val COMMENT_NODE: kotlin.Short
            public final fun <get-COMMENT_NODE>(): kotlin.Short
        public final val DOCUMENT_FRAGMENT_NODE: kotlin.Short
            public final fun <get-DOCUMENT_FRAGMENT_NODE>(): kotlin.Short
        public final val DOCUMENT_NODE: kotlin.Short
            public final fun <get-DOCUMENT_NODE>(): kotlin.Short
        public final val DOCUMENT_POSITION_CONTAINED_BY: kotlin.Short
            public final fun <get-DOCUMENT_POSITION_CONTAINED_BY>(): kotlin.Short
        public final val DOCUMENT_POSITION_CONTAINS: kotlin.Short
            public final fun <get-DOCUMENT_POSITION_CONTAINS>(): kotlin.Short
        public final val DOCUMENT_POSITION_DISCONNECTED: kotlin.Short
            public final fun <get-DOCUMENT_POSITION_DISCONNECTED>(): kotlin.Short
        public final val DOCUMENT_POSITION_FOLLOWING: kotlin.Short
            public final fun <get-DOCUMENT_POSITION_FOLLOWING>(): kotlin.Short
        public final val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: kotlin.Short
            public final fun <get-DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC>(): kotlin.Short
        public final val DOCUMENT_POSITION_PRECEDING: kotlin.Short
            public final fun <get-DOCUMENT_POSITION_PRECEDING>(): kotlin.Short
        public final val DOCUMENT_TYPE_NODE: kotlin.Short
            public final fun <get-DOCUMENT_TYPE_NODE>(): kotlin.Short
        public final val ELEMENT_NODE: kotlin.Short
            public final fun <get-ELEMENT_NODE>(): kotlin.Short
        public final val ENTITY_NODE: kotlin.Short
            public final fun <get-ENTITY_NODE>(): kotlin.Short
        public final val ENTITY_REFERENCE_NODE: kotlin.Short
            public final fun <get-ENTITY_REFERENCE_NODE>(): kotlin.Short
        public final val LENGTHADJUST_SPACING: kotlin.Short
            public final fun <get-LENGTHADJUST_SPACING>(): kotlin.Short
        public final val LENGTHADJUST_SPACINGANDGLYPHS: kotlin.Short
            public final fun <get-LENGTHADJUST_SPACINGANDGLYPHS>(): kotlin.Short
        public final val LENGTHADJUST_UNKNOWN: kotlin.Short
            public final fun <get-LENGTHADJUST_UNKNOWN>(): kotlin.Short
        public final val NOTATION_NODE: kotlin.Short
            public final fun <get-NOTATION_NODE>(): kotlin.Short
        public final val PROCESSING_INSTRUCTION_NODE: kotlin.Short
            public final fun <get-PROCESSING_INSTRUCTION_NODE>(): kotlin.Short
        public final val TEXTPATH_METHODTYPE_ALIGN: kotlin.Short
            public final fun <get-TEXTPATH_METHODTYPE_ALIGN>(): kotlin.Short
        public final val TEXTPATH_METHODTYPE_STRETCH: kotlin.Short
            public final fun <get-TEXTPATH_METHODTYPE_STRETCH>(): kotlin.Short
        public final val TEXTPATH_METHODTYPE_UNKNOWN: kotlin.Short
            public final fun <get-TEXTPATH_METHODTYPE_UNKNOWN>(): kotlin.Short
        public final val TEXTPATH_SPACINGTYPE_AUTO: kotlin.Short
            public final fun <get-TEXTPATH_SPACINGTYPE_AUTO>(): kotlin.Short
        public final val TEXTPATH_SPACINGTYPE_EXACT: kotlin.Short
            public final fun <get-TEXTPATH_SPACINGTYPE_EXACT>(): kotlin.Short
        public final val TEXTPATH_SPACINGTYPE_UNKNOWN: kotlin.Short
            public final fun <get-TEXTPATH_SPACINGTYPE_UNKNOWN>(): kotlin.Short
        public final val TEXT_NODE: kotlin.Short
            public final fun <get-TEXT_NODE>(): kotlin.Short
        public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
        public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
        public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
    }
}

public abstract external class SVGTextPositioningElement : org.w3c.dom.svg.SVGTextContentElement {
    /*primary*/ public constructor SVGTextPositioningElement()
    public open override /*1*/ /*fake_override*/ val assignedSlot: org.w3c.dom.HTMLSlotElement?
        public open override /*1*/ /*fake_override*/ fun <get-assignedSlot>(): org.w3c.dom.HTMLSlotElement?
    public open override /*1*/ /*fake_override*/ val attributes: org.w3c.dom.NamedNodeMap
        public open override /*1*/ /*fake_override*/ fun <get-attributes>(): org.w3c.dom.NamedNodeMap
    public open override /*1*/ /*fake_override*/ val baseURI: kotlin.String
        public open override /*1*/ /*fake_override*/ fun <get-baseURI>(): kotlin.String
    public abstract override /*1*/ /*fake_override*/ val childElementCount: kotlin.Int
        public abstract override /*1*/ /*fake_override*/ fun <get-childElementCount>(): kotlin.Int
    public open override /*1*/ /*fake_override*/ val childNodes: org.w3c.dom.NodeList
        public open override /*1*/ /*fake_override*/ fun <get-childNodes>(): org.w3c.dom.NodeList
    public abstract override /*1*/ /*fake_override*/ val children: org.w3c.dom.HTMLCollection
        public abstract override /*1*/ /*fake_override*/ fun <get-children>(): org.w3c.dom.HTMLCollection
    public open override /*1*/ /*fake_override*/ val classList: org.w3c.dom.DOMTokenList
        public open override /*1*/ /*fake_override*/ fun <get-classList>(): org.w3c.dom.DOMTokenList
    public open override /*1*/ /*fake_override*/ var className: kotlin.String
        public open override /*1*/ /*fake_override*/ fun <get-className>(): kotlin.String
        public open override /*1*/ /*fake_override*/ fun <set-className>(/*0*/ <set-?>: kotlin.String): kotlin.Unit
    public open override /*1*/ /*fake_override*/ val clientHeight: kotlin.Int
        public open override /*1*/ /*fake_override*/ fun <get-clientHeight>(): kotlin.Int
    public open override /*1*/ /*fake_override*/ val clientLeft: kotlin.Int
        public open override /*1*/ /*fake_override*/ fun <get-clientLeft>(): kotlin.Int
    public open override /*1*/ /*fake_override*/ val clientTop: kotlin.Int
        public open override /*1*/ /*fake_override*/ fun <get-clientTop>(): kotlin.Int
    public open override /*1*/ /*fake_override*/ val clientWidth: kotlin.Int
        public open override /*1*/ /*fake_override*/ fun <get-clientWidth>(): kotlin.Int
    public open override /*1*/ /*fake_override*/ val correspondingElement: org.w3c.dom.svg.SVGElement?
        public open override /*1*/ /*fake_override*/ fun <get-correspondingElement>(): org.w3c.dom.svg.SVGElement?
    public open override /*1*/ /*fake_override*/ val correspondingUseElement: org.w3c.dom.svg.SVGUseElement?
        public open override /*1*/ /*fake_override*/ fun <get-correspondingUseElement>(): org.w3c.dom.svg.SVGUseElement?
    public open override /*1*/ /*fake_override*/ val dataset: org.w3c.dom.DOMStringMap
        public open override /*1*/ /*fake_override*/ fun <get-dataset>(): org.w3c.dom.DOMStringMap
    public open val dx: org.w3c.dom.svg.SVGAnimatedLengthList
        public open fun <get-dx>(): org.w3c.dom.svg.SVGAnimatedLengthList
    public open val dy: org.w3c.dom.svg.SVGAnimatedLengthList
        public open fun <get-dy>(): org.w3c.dom.svg.SVGAnimatedLengthList
    public open override /*1*/ /*fake_override*/ val firstChild: org.w3c.dom.Node?
        public open override /*1*/ /*fake_override*/ fun <get-firstChild>(): org.w3c.dom.Node?
    public open override /*1*/ /*fake_override*/ val firstElementChild: org.w3c.dom.Element?
        public open override /*1*/ /*fake_override*/ fun <get-firstElementChild>(): org.w3c.dom.Element?
    public open override /*1*/ /*fake_override*/ var id: kotlin.String
        public open override /*1*/ /*fake_override*/ fun <get-id>(): kotlin.String
        public open override /*1*/ /*fake_override*/ fun <set-id>(/*0*/ <set-?>: kotlin.String): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var innerHTML: kotlin.String
        public open override /*1*/ /*fake_override*/ fun <get-innerHTML>(): kotlin.String
        public open override /*1*/ /*fake_override*/ fun <set-innerHTML>(/*0*/ <set-?>: kotlin.String): kotlin.Unit
    public open override /*1*/ /*fake_override*/ val isConnected: kotlin.Boolean
        public open override /*1*/ /*fake_override*/ fun <get-isConnected>(): kotlin.Boolean
    public open override /*1*/ /*fake_override*/ val lastChild: org.w3c.dom.Node?
        public open override /*1*/ /*fake_override*/ fun <get-lastChild>(): org.w3c.dom.Node?
    public open override /*1*/ /*fake_override*/ val lastElementChild: org.w3c.dom.Element?
        public open override /*1*/ /*fake_override*/ fun <get-lastElementChild>(): org.w3c.dom.Element?
    public open override /*1*/ /*fake_override*/ val lengthAdjust: org.w3c.dom.svg.SVGAnimatedEnumeration
        public open override /*1*/ /*fake_override*/ fun <get-lengthAdjust>(): org.w3c.dom.svg.SVGAnimatedEnumeration
    public open override /*1*/ /*fake_override*/ val localName: kotlin.String
        public open override /*1*/ /*fake_override*/ fun <get-localName>(): kotlin.String
    public open override /*1*/ /*fake_override*/ val namespaceURI: kotlin.String?
        public open override /*1*/ /*fake_override*/ fun <get-namespaceURI>(): kotlin.String?
    public open override /*1*/ /*fake_override*/ val nextElementSibling: org.w3c.dom.Element?
        public open override /*1*/ /*fake_override*/ fun <get-nextElementSibling>(): org.w3c.dom.Element?
    public open override /*1*/ /*fake_override*/ val nextSibling: org.w3c.dom.Node?
        public open override /*1*/ /*fake_override*/ fun <get-nextSibling>(): org.w3c.dom.Node?
    public open override /*1*/ /*fake_override*/ val nodeName: kotlin.String
        public open override /*1*/ /*fake_override*/ fun <get-nodeName>(): kotlin.String
    public open override /*1*/ /*fake_override*/ val nodeType: kotlin.Short
        public open override /*1*/ /*fake_override*/ fun <get-nodeType>(): kotlin.Short
    public open override /*1*/ /*fake_override*/ var nodeValue: kotlin.String?
        public open override /*1*/ /*fake_override*/ fun <get-nodeValue>(): kotlin.String?
        public open override /*1*/ /*fake_override*/ fun <set-nodeValue>(/*0*/ <set-?>: kotlin.String?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onabort: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onabort>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onabort>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onblur: ((org.w3c.dom.events.FocusEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onblur>(): ((org.w3c.dom.events.FocusEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onblur>(/*0*/ value: ((org.w3c.dom.events.FocusEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var oncancel: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-oncancel>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-oncancel>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var oncanplay: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-oncanplay>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-oncanplay>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var oncanplaythrough: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-oncanplaythrough>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-oncanplaythrough>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onchange: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onchange>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onchange>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onclick: ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onclick>(): ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onclick>(/*0*/ value: ((org.w3c.dom.events.MouseEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onclose: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onclose>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onclose>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var oncontextmenu: ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-oncontextmenu>(): ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-oncontextmenu>(/*0*/ value: ((org.w3c.dom.events.MouseEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var oncuechange: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-oncuechange>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-oncuechange>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ondblclick: ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ondblclick>(): ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ondblclick>(/*0*/ value: ((org.w3c.dom.events.MouseEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ondrag: ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ondrag>(): ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ondrag>(/*0*/ value: ((org.w3c.dom.DragEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ondragend: ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ondragend>(): ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ondragend>(/*0*/ value: ((org.w3c.dom.DragEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ondragenter: ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ondragenter>(): ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ondragenter>(/*0*/ value: ((org.w3c.dom.DragEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ondragexit: ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ondragexit>(): ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ondragexit>(/*0*/ value: ((org.w3c.dom.DragEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ondragleave: ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ondragleave>(): ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ondragleave>(/*0*/ value: ((org.w3c.dom.DragEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ondragover: ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ondragover>(): ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ondragover>(/*0*/ value: ((org.w3c.dom.DragEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ondragstart: ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ondragstart>(): ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ondragstart>(/*0*/ value: ((org.w3c.dom.DragEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ondrop: ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ondrop>(): ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ondrop>(/*0*/ value: ((org.w3c.dom.DragEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ondurationchange: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ondurationchange>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ondurationchange>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onemptied: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onemptied>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onemptied>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onended: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onended>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onended>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onerror: ((dynamic, kotlin.String, kotlin.Int, kotlin.Int, kotlin.Any?) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onerror>(): ((dynamic, kotlin.String, kotlin.Int, kotlin.Int, kotlin.Any?) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onerror>(/*0*/ value: ((dynamic, kotlin.String, kotlin.Int, kotlin.Int, kotlin.Any?) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onfocus: ((org.w3c.dom.events.FocusEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onfocus>(): ((org.w3c.dom.events.FocusEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onfocus>(/*0*/ value: ((org.w3c.dom.events.FocusEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ongotpointercapture: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ongotpointercapture>(): ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ongotpointercapture>(/*0*/ value: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var oninput: ((org.w3c.dom.events.InputEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-oninput>(): ((org.w3c.dom.events.InputEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-oninput>(/*0*/ value: ((org.w3c.dom.events.InputEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var oninvalid: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-oninvalid>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-oninvalid>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onkeydown: ((org.w3c.dom.events.KeyboardEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onkeydown>(): ((org.w3c.dom.events.KeyboardEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onkeydown>(/*0*/ value: ((org.w3c.dom.events.KeyboardEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onkeypress: ((org.w3c.dom.events.KeyboardEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onkeypress>(): ((org.w3c.dom.events.KeyboardEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onkeypress>(/*0*/ value: ((org.w3c.dom.events.KeyboardEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onkeyup: ((org.w3c.dom.events.KeyboardEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onkeyup>(): ((org.w3c.dom.events.KeyboardEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onkeyup>(/*0*/ value: ((org.w3c.dom.events.KeyboardEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onload: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onload>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onload>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onloadeddata: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onloadeddata>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onloadeddata>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onloadedmetadata: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onloadedmetadata>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onloadedmetadata>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onloadend: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onloadend>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onloadend>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onloadstart: ((org.w3c.xhr.ProgressEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onloadstart>(): ((org.w3c.xhr.ProgressEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onloadstart>(/*0*/ value: ((org.w3c.xhr.ProgressEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onlostpointercapture: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onlostpointercapture>(): ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onlostpointercapture>(/*0*/ value: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onmousedown: ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onmousedown>(): ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onmousedown>(/*0*/ value: ((org.w3c.dom.events.MouseEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onmouseenter: ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onmouseenter>(): ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onmouseenter>(/*0*/ value: ((org.w3c.dom.events.MouseEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onmouseleave: ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onmouseleave>(): ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onmouseleave>(/*0*/ value: ((org.w3c.dom.events.MouseEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onmousemove: ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onmousemove>(): ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onmousemove>(/*0*/ value: ((org.w3c.dom.events.MouseEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onmouseout: ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onmouseout>(): ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onmouseout>(/*0*/ value: ((org.w3c.dom.events.MouseEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onmouseover: ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onmouseover>(): ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onmouseover>(/*0*/ value: ((org.w3c.dom.events.MouseEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onmouseup: ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onmouseup>(): ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onmouseup>(/*0*/ value: ((org.w3c.dom.events.MouseEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onpause: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onpause>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onpause>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onplay: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onplay>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onplay>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onplaying: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onplaying>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onplaying>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onpointercancel: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onpointercancel>(): ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onpointercancel>(/*0*/ value: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onpointerdown: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onpointerdown>(): ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onpointerdown>(/*0*/ value: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onpointerenter: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onpointerenter>(): ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onpointerenter>(/*0*/ value: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onpointerleave: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onpointerleave>(): ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onpointerleave>(/*0*/ value: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onpointermove: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onpointermove>(): ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onpointermove>(/*0*/ value: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onpointerout: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onpointerout>(): ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onpointerout>(/*0*/ value: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onpointerover: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onpointerover>(): ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onpointerover>(/*0*/ value: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onpointerup: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onpointerup>(): ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onpointerup>(/*0*/ value: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onprogress: ((org.w3c.xhr.ProgressEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onprogress>(): ((org.w3c.xhr.ProgressEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onprogress>(/*0*/ value: ((org.w3c.xhr.ProgressEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onratechange: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onratechange>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onratechange>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onreset: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onreset>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onreset>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onresize: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onresize>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onresize>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onscroll: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onscroll>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onscroll>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onseeked: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onseeked>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onseeked>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onseeking: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onseeking>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onseeking>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onselect: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onselect>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onselect>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onshow: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onshow>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onshow>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onstalled: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onstalled>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onstalled>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onsubmit: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onsubmit>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onsubmit>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onsuspend: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onsuspend>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onsuspend>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ontimeupdate: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ontimeupdate>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ontimeupdate>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ontoggle: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ontoggle>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ontoggle>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onvolumechange: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onvolumechange>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onvolumechange>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onwaiting: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onwaiting>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onwaiting>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onwheel: ((org.w3c.dom.events.WheelEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onwheel>(): ((org.w3c.dom.events.WheelEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onwheel>(/*0*/ value: ((org.w3c.dom.events.WheelEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var outerHTML: kotlin.String
        public open override /*1*/ /*fake_override*/ fun <get-outerHTML>(): kotlin.String
        public open override /*1*/ /*fake_override*/ fun <set-outerHTML>(/*0*/ <set-?>: kotlin.String): kotlin.Unit
    public open override /*1*/ /*fake_override*/ val ownerDocument: org.w3c.dom.Document?
        public open override /*1*/ /*fake_override*/ fun <get-ownerDocument>(): org.w3c.dom.Document?
    public open override /*1*/ /*fake_override*/ val ownerSVGElement: org.w3c.dom.svg.SVGSVGElement?
        public open override /*1*/ /*fake_override*/ fun <get-ownerSVGElement>(): org.w3c.dom.svg.SVGSVGElement?
    public open override /*1*/ /*fake_override*/ val parentElement: org.w3c.dom.Element?
        public open override /*1*/ /*fake_override*/ fun <get-parentElement>(): org.w3c.dom.Element?
    public open override /*1*/ /*fake_override*/ val parentNode: org.w3c.dom.Node?
        public open override /*1*/ /*fake_override*/ fun <get-parentNode>(): org.w3c.dom.Node?
    public open override /*1*/ /*fake_override*/ val prefix: kotlin.String?
        public open override /*1*/ /*fake_override*/ fun <get-prefix>(): kotlin.String?
    public open override /*1*/ /*fake_override*/ val previousElementSibling: org.w3c.dom.Element?
        public open override /*1*/ /*fake_override*/ fun <get-previousElementSibling>(): org.w3c.dom.Element?
    public open override /*1*/ /*fake_override*/ val previousSibling: org.w3c.dom.Node?
        public open override /*1*/ /*fake_override*/ fun <get-previousSibling>(): org.w3c.dom.Node?
    public abstract override /*1*/ /*fake_override*/ val requiredExtensions: org.w3c.dom.svg.SVGStringList
        public abstract override /*1*/ /*fake_override*/ fun <get-requiredExtensions>(): org.w3c.dom.svg.SVGStringList
    public open val rotate: org.w3c.dom.svg.SVGAnimatedNumberList
        public open fun <get-rotate>(): org.w3c.dom.svg.SVGAnimatedNumberList
    public open override /*1*/ /*fake_override*/ val scrollHeight: kotlin.Int
        public open override /*1*/ /*fake_override*/ fun <get-scrollHeight>(): kotlin.Int
    public open override /*1*/ /*fake_override*/ var scrollLeft: kotlin.Double
        public open override /*1*/ /*fake_override*/ fun <get-scrollLeft>(): kotlin.Double
        public open override /*1*/ /*fake_override*/ fun <set-scrollLeft>(/*0*/ <set-?>: kotlin.Double): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var scrollTop: kotlin.Double
        public open override /*1*/ /*fake_override*/ fun <get-scrollTop>(): kotlin.Double
        public open override /*1*/ /*fake_override*/ fun <set-scrollTop>(/*0*/ <set-?>: kotlin.Double): kotlin.Unit
    public open override /*1*/ /*fake_override*/ val scrollWidth: kotlin.Int
        public open override /*1*/ /*fake_override*/ fun <get-scrollWidth>(): kotlin.Int
    public open override /*1*/ /*fake_override*/ val shadowRoot: org.w3c.dom.ShadowRoot?
        public open override /*1*/ /*fake_override*/ fun <get-shadowRoot>(): org.w3c.dom.ShadowRoot?
    public open override /*1*/ /*fake_override*/ var slot: kotlin.String
        public open override /*1*/ /*fake_override*/ fun <get-slot>(): kotlin.String
        public open override /*1*/ /*fake_override*/ fun <set-slot>(/*0*/ <set-?>: kotlin.String): kotlin.Unit
    public abstract override /*1*/ /*fake_override*/ val style: org.w3c.dom.css.CSSStyleDeclaration
        public abstract override /*1*/ /*fake_override*/ fun <get-style>(): org.w3c.dom.css.CSSStyleDeclaration
    public abstract override /*1*/ /*fake_override*/ val systemLanguage: org.w3c.dom.svg.SVGStringList
        public abstract override /*1*/ /*fake_override*/ fun <get-systemLanguage>(): org.w3c.dom.svg.SVGStringList
    public open override /*1*/ /*fake_override*/ var tabIndex: kotlin.Int
        public open override /*1*/ /*fake_override*/ fun <get-tabIndex>(): kotlin.Int
        public open override /*1*/ /*fake_override*/ fun <set-tabIndex>(/*0*/ <set-?>: kotlin.Int): kotlin.Unit
    public open override /*1*/ /*fake_override*/ val tagName: kotlin.String
        public open override /*1*/ /*fake_override*/ fun <get-tagName>(): kotlin.String
    public open override /*1*/ /*fake_override*/ var textContent: kotlin.String?
        public open override /*1*/ /*fake_override*/ fun <get-textContent>(): kotlin.String?
        public open override /*1*/ /*fake_override*/ fun <set-textContent>(/*0*/ <set-?>: kotlin.String?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ val textLength: org.w3c.dom.svg.SVGAnimatedLength
        public open override /*1*/ /*fake_override*/ fun <get-textLength>(): org.w3c.dom.svg.SVGAnimatedLength
    public open override /*1*/ /*fake_override*/ val transform: org.w3c.dom.svg.SVGAnimatedTransformList
        public open override /*1*/ /*fake_override*/ fun <get-transform>(): org.w3c.dom.svg.SVGAnimatedTransformList
    public open override /*1*/ /*fake_override*/ val viewportElement: org.w3c.dom.svg.SVGElement?
        public open override /*1*/ /*fake_override*/ fun <get-viewportElement>(): org.w3c.dom.svg.SVGElement?
    public open val x: org.w3c.dom.svg.SVGAnimatedLengthList
        public open fun <get-x>(): org.w3c.dom.svg.SVGAnimatedLengthList
    public open val y: org.w3c.dom.svg.SVGAnimatedLengthList
        public open fun <get-y>(): org.w3c.dom.svg.SVGAnimatedLengthList
    public final override /*1*/ /*fake_override*/ fun addEventListener(/*0*/ type: kotlin.String, /*1*/ callback: ((org.w3c.dom.events.Event) -> kotlin.Unit)?, /*2*/ options: dynamic = ...): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun addEventListener(/*0*/ type: kotlin.String, /*1*/ callback: org.w3c.dom.events.EventListener?, /*2*/ options: dynamic = ...): kotlin.Unit
    public abstract override /*1*/ /*fake_override*/ fun after(/*0*/ vararg nodes: dynamic /*kotlin.Array<out dynamic>*/): kotlin.Unit
    public abstract override /*1*/ /*fake_override*/ fun append(/*0*/ vararg nodes: dynamic /*kotlin.Array<out dynamic>*/): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun appendChild(/*0*/ node: org.w3c.dom.Node): org.w3c.dom.Node
    public final override /*1*/ /*fake_override*/ fun attachShadow(/*0*/ init: org.w3c.dom.ShadowRootInit): org.w3c.dom.ShadowRoot
    public abstract override /*1*/ /*fake_override*/ fun before(/*0*/ vararg nodes: dynamic /*kotlin.Array<out dynamic>*/): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun blur(): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun cloneNode(/*0*/ deep: kotlin.Boolean = ...): org.w3c.dom.Node
    public final override /*1*/ /*fake_override*/ fun closest(/*0*/ selectors: kotlin.String): org.w3c.dom.Element?
    public final override /*1*/ /*fake_override*/ fun compareDocumentPosition(/*0*/ other: org.w3c.dom.Node): kotlin.Short
    public final override /*1*/ /*fake_override*/ fun contains(/*0*/ other: org.w3c.dom.Node?): kotlin.Boolean
    public abstract override /*1*/ /*fake_override*/ fun convertPointFromNode(/*0*/ point: org.w3c.dom.DOMPointInit, /*1*/ from: dynamic, /*2*/ options: org.w3c.dom.ConvertCoordinateOptions = ...): org.w3c.dom.DOMPoint
    public abstract override /*1*/ /*fake_override*/ fun convertQuadFromNode(/*0*/ quad: dynamic, /*1*/ from: dynamic, /*2*/ options: org.w3c.dom.ConvertCoordinateOptions = ...): org.w3c.dom.DOMQuad
    public abstract override /*1*/ /*fake_override*/ fun convertRectFromNode(/*0*/ rect: org.w3c.dom.DOMRectReadOnly, /*1*/ from: dynamic, /*2*/ options: org.w3c.dom.ConvertCoordinateOptions = ...): org.w3c.dom.DOMQuad
    public final override /*1*/ /*fake_override*/ fun dispatchEvent(/*0*/ event: org.w3c.dom.events.Event): kotlin.Boolean
    public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
    public final override /*1*/ /*fake_override*/ fun focus(): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun getAttribute(/*0*/ qualifiedName: kotlin.String): kotlin.String?
    public final override /*1*/ /*fake_override*/ fun getAttributeNS(/*0*/ namespace: kotlin.String?, /*1*/ localName: kotlin.String): kotlin.String?
    public final override /*1*/ /*fake_override*/ fun getAttributeNames(): kotlin.Array<kotlin.String>
    public final override /*1*/ /*fake_override*/ fun getAttributeNode(/*0*/ qualifiedName: kotlin.String): org.w3c.dom.Attr?
    public final override /*1*/ /*fake_override*/ fun getAttributeNodeNS(/*0*/ namespace: kotlin.String?, /*1*/ localName: kotlin.String): org.w3c.dom.Attr?
    public final override /*1*/ /*fake_override*/ fun getBBox(/*0*/ options: org.w3c.dom.svg.SVGBoundingBoxOptions = ...): org.w3c.dom.DOMRect
    public final override /*1*/ /*fake_override*/ fun getBoundingClientRect(): org.w3c.dom.DOMRect
    public abstract override /*1*/ /*fake_override*/ fun getBoxQuads(/*0*/ options: org.w3c.dom.BoxQuadOptions = ...): kotlin.Array<org.w3c.dom.DOMQuad>
    public final override /*1*/ /*fake_override*/ fun getCTM(): org.w3c.dom.DOMMatrix?
    public final override /*1*/ /*fake_override*/ fun getCharNumAtPosition(/*0*/ point: org.w3c.dom.DOMPoint): kotlin.Int
    public final override /*1*/ /*fake_override*/ fun getClientRects(): kotlin.Array<org.w3c.dom.DOMRect>
    public final override /*1*/ /*fake_override*/ fun getComputedTextLength(): kotlin.Float
    public final override /*1*/ /*fake_override*/ fun getElementsByClassName(/*0*/ classNames: kotlin.String): org.w3c.dom.HTMLCollection
    public final override /*1*/ /*fake_override*/ fun getElementsByTagName(/*0*/ qualifiedName: kotlin.String): org.w3c.dom.HTMLCollection
    public final override /*1*/ /*fake_override*/ fun getElementsByTagNameNS(/*0*/ namespace: kotlin.String?, /*1*/ localName: kotlin.String): org.w3c.dom.HTMLCollection
    public final override /*1*/ /*fake_override*/ fun getEndPositionOfChar(/*0*/ charnum: kotlin.Int): org.w3c.dom.DOMPoint
    public final override /*1*/ /*fake_override*/ fun getExtentOfChar(/*0*/ charnum: kotlin.Int): org.w3c.dom.DOMRect
    public final override /*1*/ /*fake_override*/ fun getNumberOfChars(): kotlin.Int
    public final override /*1*/ /*fake_override*/ fun getRootNode(/*0*/ options: org.w3c.dom.GetRootNodeOptions = ...): org.w3c.dom.Node
    public final override /*1*/ /*fake_override*/ fun getRotationOfChar(/*0*/ charnum: kotlin.Int): kotlin.Float
    public final override /*1*/ /*fake_override*/ fun getScreenCTM(): org.w3c.dom.DOMMatrix?
    public final override /*1*/ /*fake_override*/ fun getStartPositionOfChar(/*0*/ charnum: kotlin.Int): org.w3c.dom.DOMPoint
    public final override /*1*/ /*fake_override*/ fun getSubStringLength(/*0*/ charnum: kotlin.Int, /*1*/ nchars: kotlin.Int): kotlin.Float
    public final override /*1*/ /*fake_override*/ fun hasAttribute(/*0*/ qualifiedName: kotlin.String): kotlin.Boolean
    public final override /*1*/ /*fake_override*/ fun hasAttributeNS(/*0*/ namespace: kotlin.String?, /*1*/ localName: kotlin.String): kotlin.Boolean
    public final override /*1*/ /*fake_override*/ fun hasAttributes(): kotlin.Boolean
    public final override /*1*/ /*fake_override*/ fun hasChildNodes(): kotlin.Boolean
    public final override /*1*/ /*fake_override*/ fun hasPointerCapture(/*0*/ pointerId: kotlin.Int): kotlin.Boolean
    public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
    public final override /*1*/ /*fake_override*/ fun insertAdjacentElement(/*0*/ where: kotlin.String, /*1*/ element: org.w3c.dom.Element): org.w3c.dom.Element?
    public final override /*1*/ /*fake_override*/ fun insertAdjacentHTML(/*0*/ position: kotlin.String, /*1*/ text: kotlin.String): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun insertAdjacentText(/*0*/ where: kotlin.String, /*1*/ data: kotlin.String): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun insertBefore(/*0*/ node: org.w3c.dom.Node, /*1*/ child: org.w3c.dom.Node?): org.w3c.dom.Node
    public final override /*1*/ /*fake_override*/ fun isDefaultNamespace(/*0*/ namespace: kotlin.String?): kotlin.Boolean
    public final override /*1*/ /*fake_override*/ fun isEqualNode(/*0*/ otherNode: org.w3c.dom.Node?): kotlin.Boolean
    public final override /*1*/ /*fake_override*/ fun isSameNode(/*0*/ otherNode: org.w3c.dom.Node?): kotlin.Boolean
    public final override /*1*/ /*fake_override*/ fun lookupNamespaceURI(/*0*/ prefix: kotlin.String?): kotlin.String?
    public final override /*1*/ /*fake_override*/ fun lookupPrefix(/*0*/ namespace: kotlin.String?): kotlin.String?
    public final override /*1*/ /*fake_override*/ fun matches(/*0*/ selectors: kotlin.String): kotlin.Boolean
    public final override /*1*/ /*fake_override*/ fun normalize(): kotlin.Unit
    public abstract override /*1*/ /*fake_override*/ fun prepend(/*0*/ vararg nodes: dynamic /*kotlin.Array<out dynamic>*/): kotlin.Unit
    public abstract override /*1*/ /*fake_override*/ fun querySelector(/*0*/ selectors: kotlin.String): org.w3c.dom.Element?
    public abstract override /*1*/ /*fake_override*/ fun querySelectorAll(/*0*/ selectors: kotlin.String): org.w3c.dom.NodeList
    public final override /*1*/ /*fake_override*/ fun releasePointerCapture(/*0*/ pointerId: kotlin.Int): kotlin.Unit
    public abstract override /*1*/ /*fake_override*/ fun remove(): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun removeAttribute(/*0*/ qualifiedName: kotlin.String): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun removeAttributeNS(/*0*/ namespace: kotlin.String?, /*1*/ localName: kotlin.String): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun removeAttributeNode(/*0*/ attr: org.w3c.dom.Attr): org.w3c.dom.Attr
    public final override /*1*/ /*fake_override*/ fun removeChild(/*0*/ child: org.w3c.dom.Node): org.w3c.dom.Node
    public final override /*1*/ /*fake_override*/ fun removeEventListener(/*0*/ type: kotlin.String, /*1*/ callback: ((org.w3c.dom.events.Event) -> kotlin.Unit)?, /*2*/ options: dynamic = ...): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun removeEventListener(/*0*/ type: kotlin.String, /*1*/ callback: org.w3c.dom.events.EventListener?, /*2*/ options: dynamic = ...): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun replaceChild(/*0*/ node: org.w3c.dom.Node, /*1*/ child: org.w3c.dom.Node): org.w3c.dom.Node
    public abstract override /*1*/ /*fake_override*/ fun replaceWith(/*0*/ vararg nodes: dynamic /*kotlin.Array<out dynamic>*/): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun requestFullscreen(): kotlin.js.Promise<kotlin.Unit>
    public final override /*1*/ /*fake_override*/ fun scroll(/*0*/ x: kotlin.Double, /*1*/ y: kotlin.Double): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun scroll(/*0*/ options: org.w3c.dom.ScrollToOptions = ...): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun scrollBy(/*0*/ x: kotlin.Double, /*1*/ y: kotlin.Double): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun scrollBy(/*0*/ options: org.w3c.dom.ScrollToOptions = ...): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun scrollIntoView(): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun scrollIntoView(/*0*/ arg: dynamic): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun scrollTo(/*0*/ x: kotlin.Double, /*1*/ y: kotlin.Double): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun scrollTo(/*0*/ options: org.w3c.dom.ScrollToOptions = ...): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun selectSubString(/*0*/ charnum: kotlin.Int, /*1*/ nchars: kotlin.Int): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun setAttribute(/*0*/ qualifiedName: kotlin.String, /*1*/ value: kotlin.String): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun setAttributeNS(/*0*/ namespace: kotlin.String?, /*1*/ qualifiedName: kotlin.String, /*2*/ value: kotlin.String): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun setAttributeNode(/*0*/ attr: org.w3c.dom.Attr): org.w3c.dom.Attr?
    public final override /*1*/ /*fake_override*/ fun setAttributeNodeNS(/*0*/ attr: org.w3c.dom.Attr): org.w3c.dom.Attr?
    public final override /*1*/ /*fake_override*/ fun setPointerCapture(/*0*/ pointerId: kotlin.Int): kotlin.Unit
    public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
    public final override /*1*/ /*fake_override*/ fun webkitMatchesSelector(/*0*/ selectors: kotlin.String): kotlin.Boolean

    public companion object Companion {
        /*primary*/ private constructor Companion()
        public final val ATTRIBUTE_NODE: kotlin.Short
            public final fun <get-ATTRIBUTE_NODE>(): kotlin.Short
        public final val CDATA_SECTION_NODE: kotlin.Short
            public final fun <get-CDATA_SECTION_NODE>(): kotlin.Short
        public final val COMMENT_NODE: kotlin.Short
            public final fun <get-COMMENT_NODE>(): kotlin.Short
        public final val DOCUMENT_FRAGMENT_NODE: kotlin.Short
            public final fun <get-DOCUMENT_FRAGMENT_NODE>(): kotlin.Short
        public final val DOCUMENT_NODE: kotlin.Short
            public final fun <get-DOCUMENT_NODE>(): kotlin.Short
        public final val DOCUMENT_POSITION_CONTAINED_BY: kotlin.Short
            public final fun <get-DOCUMENT_POSITION_CONTAINED_BY>(): kotlin.Short
        public final val DOCUMENT_POSITION_CONTAINS: kotlin.Short
            public final fun <get-DOCUMENT_POSITION_CONTAINS>(): kotlin.Short
        public final val DOCUMENT_POSITION_DISCONNECTED: kotlin.Short
            public final fun <get-DOCUMENT_POSITION_DISCONNECTED>(): kotlin.Short
        public final val DOCUMENT_POSITION_FOLLOWING: kotlin.Short
            public final fun <get-DOCUMENT_POSITION_FOLLOWING>(): kotlin.Short
        public final val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: kotlin.Short
            public final fun <get-DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC>(): kotlin.Short
        public final val DOCUMENT_POSITION_PRECEDING: kotlin.Short
            public final fun <get-DOCUMENT_POSITION_PRECEDING>(): kotlin.Short
        public final val DOCUMENT_TYPE_NODE: kotlin.Short
            public final fun <get-DOCUMENT_TYPE_NODE>(): kotlin.Short
        public final val ELEMENT_NODE: kotlin.Short
            public final fun <get-ELEMENT_NODE>(): kotlin.Short
        public final val ENTITY_NODE: kotlin.Short
            public final fun <get-ENTITY_NODE>(): kotlin.Short
        public final val ENTITY_REFERENCE_NODE: kotlin.Short
            public final fun <get-ENTITY_REFERENCE_NODE>(): kotlin.Short
        public final val LENGTHADJUST_SPACING: kotlin.Short
            public final fun <get-LENGTHADJUST_SPACING>(): kotlin.Short
        public final val LENGTHADJUST_SPACINGANDGLYPHS: kotlin.Short
            public final fun <get-LENGTHADJUST_SPACINGANDGLYPHS>(): kotlin.Short
        public final val LENGTHADJUST_UNKNOWN: kotlin.Short
            public final fun <get-LENGTHADJUST_UNKNOWN>(): kotlin.Short
        public final val NOTATION_NODE: kotlin.Short
            public final fun <get-NOTATION_NODE>(): kotlin.Short
        public final val PROCESSING_INSTRUCTION_NODE: kotlin.Short
            public final fun <get-PROCESSING_INSTRUCTION_NODE>(): kotlin.Short
        public final val TEXT_NODE: kotlin.Short
            public final fun <get-TEXT_NODE>(): kotlin.Short
        public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
        public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
        public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
    }
}

public abstract external class SVGTitleElement : org.w3c.dom.svg.SVGElement {
    /*primary*/ public constructor SVGTitleElement()
    public open override /*1*/ /*fake_override*/ val assignedSlot: org.w3c.dom.HTMLSlotElement?
        public open override /*1*/ /*fake_override*/ fun <get-assignedSlot>(): org.w3c.dom.HTMLSlotElement?
    public open override /*1*/ /*fake_override*/ val attributes: org.w3c.dom.NamedNodeMap
        public open override /*1*/ /*fake_override*/ fun <get-attributes>(): org.w3c.dom.NamedNodeMap
    public open override /*1*/ /*fake_override*/ val baseURI: kotlin.String
        public open override /*1*/ /*fake_override*/ fun <get-baseURI>(): kotlin.String
    public abstract override /*1*/ /*fake_override*/ val childElementCount: kotlin.Int
        public abstract override /*1*/ /*fake_override*/ fun <get-childElementCount>(): kotlin.Int
    public open override /*1*/ /*fake_override*/ val childNodes: org.w3c.dom.NodeList
        public open override /*1*/ /*fake_override*/ fun <get-childNodes>(): org.w3c.dom.NodeList
    public abstract override /*1*/ /*fake_override*/ val children: org.w3c.dom.HTMLCollection
        public abstract override /*1*/ /*fake_override*/ fun <get-children>(): org.w3c.dom.HTMLCollection
    public open override /*1*/ /*fake_override*/ val classList: org.w3c.dom.DOMTokenList
        public open override /*1*/ /*fake_override*/ fun <get-classList>(): org.w3c.dom.DOMTokenList
    public open override /*1*/ /*fake_override*/ var className: kotlin.String
        public open override /*1*/ /*fake_override*/ fun <get-className>(): kotlin.String
        public open override /*1*/ /*fake_override*/ fun <set-className>(/*0*/ <set-?>: kotlin.String): kotlin.Unit
    public open override /*1*/ /*fake_override*/ val clientHeight: kotlin.Int
        public open override /*1*/ /*fake_override*/ fun <get-clientHeight>(): kotlin.Int
    public open override /*1*/ /*fake_override*/ val clientLeft: kotlin.Int
        public open override /*1*/ /*fake_override*/ fun <get-clientLeft>(): kotlin.Int
    public open override /*1*/ /*fake_override*/ val clientTop: kotlin.Int
        public open override /*1*/ /*fake_override*/ fun <get-clientTop>(): kotlin.Int
    public open override /*1*/ /*fake_override*/ val clientWidth: kotlin.Int
        public open override /*1*/ /*fake_override*/ fun <get-clientWidth>(): kotlin.Int
    public open override /*1*/ /*fake_override*/ val correspondingElement: org.w3c.dom.svg.SVGElement?
        public open override /*1*/ /*fake_override*/ fun <get-correspondingElement>(): org.w3c.dom.svg.SVGElement?
    public open override /*1*/ /*fake_override*/ val correspondingUseElement: org.w3c.dom.svg.SVGUseElement?
        public open override /*1*/ /*fake_override*/ fun <get-correspondingUseElement>(): org.w3c.dom.svg.SVGUseElement?
    public open override /*1*/ /*fake_override*/ val dataset: org.w3c.dom.DOMStringMap
        public open override /*1*/ /*fake_override*/ fun <get-dataset>(): org.w3c.dom.DOMStringMap
    public open override /*1*/ /*fake_override*/ val firstChild: org.w3c.dom.Node?
        public open override /*1*/ /*fake_override*/ fun <get-firstChild>(): org.w3c.dom.Node?
    public open override /*1*/ /*fake_override*/ val firstElementChild: org.w3c.dom.Element?
        public open override /*1*/ /*fake_override*/ fun <get-firstElementChild>(): org.w3c.dom.Element?
    public open override /*1*/ /*fake_override*/ var id: kotlin.String
        public open override /*1*/ /*fake_override*/ fun <get-id>(): kotlin.String
        public open override /*1*/ /*fake_override*/ fun <set-id>(/*0*/ <set-?>: kotlin.String): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var innerHTML: kotlin.String
        public open override /*1*/ /*fake_override*/ fun <get-innerHTML>(): kotlin.String
        public open override /*1*/ /*fake_override*/ fun <set-innerHTML>(/*0*/ <set-?>: kotlin.String): kotlin.Unit
    public open override /*1*/ /*fake_override*/ val isConnected: kotlin.Boolean
        public open override /*1*/ /*fake_override*/ fun <get-isConnected>(): kotlin.Boolean
    public open override /*1*/ /*fake_override*/ val lastChild: org.w3c.dom.Node?
        public open override /*1*/ /*fake_override*/ fun <get-lastChild>(): org.w3c.dom.Node?
    public open override /*1*/ /*fake_override*/ val lastElementChild: org.w3c.dom.Element?
        public open override /*1*/ /*fake_override*/ fun <get-lastElementChild>(): org.w3c.dom.Element?
    public open override /*1*/ /*fake_override*/ val localName: kotlin.String
        public open override /*1*/ /*fake_override*/ fun <get-localName>(): kotlin.String
    public open override /*1*/ /*fake_override*/ val namespaceURI: kotlin.String?
        public open override /*1*/ /*fake_override*/ fun <get-namespaceURI>(): kotlin.String?
    public open override /*1*/ /*fake_override*/ val nextElementSibling: org.w3c.dom.Element?
        public open override /*1*/ /*fake_override*/ fun <get-nextElementSibling>(): org.w3c.dom.Element?
    public open override /*1*/ /*fake_override*/ val nextSibling: org.w3c.dom.Node?
        public open override /*1*/ /*fake_override*/ fun <get-nextSibling>(): org.w3c.dom.Node?
    public open override /*1*/ /*fake_override*/ val nodeName: kotlin.String
        public open override /*1*/ /*fake_override*/ fun <get-nodeName>(): kotlin.String
    public open override /*1*/ /*fake_override*/ val nodeType: kotlin.Short
        public open override /*1*/ /*fake_override*/ fun <get-nodeType>(): kotlin.Short
    public open override /*1*/ /*fake_override*/ var nodeValue: kotlin.String?
        public open override /*1*/ /*fake_override*/ fun <get-nodeValue>(): kotlin.String?
        public open override /*1*/ /*fake_override*/ fun <set-nodeValue>(/*0*/ <set-?>: kotlin.String?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onabort: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onabort>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onabort>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onblur: ((org.w3c.dom.events.FocusEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onblur>(): ((org.w3c.dom.events.FocusEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onblur>(/*0*/ value: ((org.w3c.dom.events.FocusEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var oncancel: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-oncancel>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-oncancel>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var oncanplay: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-oncanplay>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-oncanplay>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var oncanplaythrough: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-oncanplaythrough>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-oncanplaythrough>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onchange: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onchange>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onchange>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onclick: ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onclick>(): ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onclick>(/*0*/ value: ((org.w3c.dom.events.MouseEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onclose: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onclose>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onclose>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var oncontextmenu: ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-oncontextmenu>(): ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-oncontextmenu>(/*0*/ value: ((org.w3c.dom.events.MouseEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var oncuechange: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-oncuechange>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-oncuechange>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ondblclick: ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ondblclick>(): ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ondblclick>(/*0*/ value: ((org.w3c.dom.events.MouseEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ondrag: ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ondrag>(): ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ondrag>(/*0*/ value: ((org.w3c.dom.DragEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ondragend: ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ondragend>(): ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ondragend>(/*0*/ value: ((org.w3c.dom.DragEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ondragenter: ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ondragenter>(): ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ondragenter>(/*0*/ value: ((org.w3c.dom.DragEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ondragexit: ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ondragexit>(): ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ondragexit>(/*0*/ value: ((org.w3c.dom.DragEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ondragleave: ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ondragleave>(): ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ondragleave>(/*0*/ value: ((org.w3c.dom.DragEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ondragover: ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ondragover>(): ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ondragover>(/*0*/ value: ((org.w3c.dom.DragEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ondragstart: ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ondragstart>(): ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ondragstart>(/*0*/ value: ((org.w3c.dom.DragEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ondrop: ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ondrop>(): ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ondrop>(/*0*/ value: ((org.w3c.dom.DragEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ondurationchange: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ondurationchange>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ondurationchange>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onemptied: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onemptied>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onemptied>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onended: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onended>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onended>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onerror: ((dynamic, kotlin.String, kotlin.Int, kotlin.Int, kotlin.Any?) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onerror>(): ((dynamic, kotlin.String, kotlin.Int, kotlin.Int, kotlin.Any?) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onerror>(/*0*/ value: ((dynamic, kotlin.String, kotlin.Int, kotlin.Int, kotlin.Any?) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onfocus: ((org.w3c.dom.events.FocusEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onfocus>(): ((org.w3c.dom.events.FocusEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onfocus>(/*0*/ value: ((org.w3c.dom.events.FocusEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ongotpointercapture: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ongotpointercapture>(): ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ongotpointercapture>(/*0*/ value: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var oninput: ((org.w3c.dom.events.InputEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-oninput>(): ((org.w3c.dom.events.InputEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-oninput>(/*0*/ value: ((org.w3c.dom.events.InputEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var oninvalid: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-oninvalid>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-oninvalid>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onkeydown: ((org.w3c.dom.events.KeyboardEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onkeydown>(): ((org.w3c.dom.events.KeyboardEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onkeydown>(/*0*/ value: ((org.w3c.dom.events.KeyboardEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onkeypress: ((org.w3c.dom.events.KeyboardEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onkeypress>(): ((org.w3c.dom.events.KeyboardEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onkeypress>(/*0*/ value: ((org.w3c.dom.events.KeyboardEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onkeyup: ((org.w3c.dom.events.KeyboardEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onkeyup>(): ((org.w3c.dom.events.KeyboardEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onkeyup>(/*0*/ value: ((org.w3c.dom.events.KeyboardEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onload: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onload>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onload>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onloadeddata: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onloadeddata>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onloadeddata>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onloadedmetadata: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onloadedmetadata>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onloadedmetadata>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onloadend: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onloadend>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onloadend>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onloadstart: ((org.w3c.xhr.ProgressEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onloadstart>(): ((org.w3c.xhr.ProgressEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onloadstart>(/*0*/ value: ((org.w3c.xhr.ProgressEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onlostpointercapture: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onlostpointercapture>(): ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onlostpointercapture>(/*0*/ value: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onmousedown: ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onmousedown>(): ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onmousedown>(/*0*/ value: ((org.w3c.dom.events.MouseEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onmouseenter: ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onmouseenter>(): ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onmouseenter>(/*0*/ value: ((org.w3c.dom.events.MouseEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onmouseleave: ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onmouseleave>(): ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onmouseleave>(/*0*/ value: ((org.w3c.dom.events.MouseEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onmousemove: ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onmousemove>(): ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onmousemove>(/*0*/ value: ((org.w3c.dom.events.MouseEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onmouseout: ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onmouseout>(): ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onmouseout>(/*0*/ value: ((org.w3c.dom.events.MouseEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onmouseover: ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onmouseover>(): ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onmouseover>(/*0*/ value: ((org.w3c.dom.events.MouseEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onmouseup: ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onmouseup>(): ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onmouseup>(/*0*/ value: ((org.w3c.dom.events.MouseEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onpause: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onpause>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onpause>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onplay: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onplay>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onplay>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onplaying: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onplaying>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onplaying>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onpointercancel: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onpointercancel>(): ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onpointercancel>(/*0*/ value: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onpointerdown: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onpointerdown>(): ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onpointerdown>(/*0*/ value: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onpointerenter: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onpointerenter>(): ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onpointerenter>(/*0*/ value: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onpointerleave: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onpointerleave>(): ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onpointerleave>(/*0*/ value: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onpointermove: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onpointermove>(): ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onpointermove>(/*0*/ value: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onpointerout: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onpointerout>(): ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onpointerout>(/*0*/ value: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onpointerover: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onpointerover>(): ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onpointerover>(/*0*/ value: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onpointerup: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onpointerup>(): ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onpointerup>(/*0*/ value: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onprogress: ((org.w3c.xhr.ProgressEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onprogress>(): ((org.w3c.xhr.ProgressEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onprogress>(/*0*/ value: ((org.w3c.xhr.ProgressEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onratechange: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onratechange>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onratechange>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onreset: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onreset>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onreset>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onresize: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onresize>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onresize>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onscroll: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onscroll>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onscroll>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onseeked: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onseeked>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onseeked>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onseeking: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onseeking>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onseeking>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onselect: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onselect>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onselect>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onshow: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onshow>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onshow>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onstalled: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onstalled>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onstalled>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onsubmit: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onsubmit>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onsubmit>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onsuspend: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onsuspend>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onsuspend>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ontimeupdate: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ontimeupdate>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ontimeupdate>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ontoggle: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ontoggle>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ontoggle>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onvolumechange: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onvolumechange>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onvolumechange>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onwaiting: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onwaiting>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onwaiting>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onwheel: ((org.w3c.dom.events.WheelEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onwheel>(): ((org.w3c.dom.events.WheelEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onwheel>(/*0*/ value: ((org.w3c.dom.events.WheelEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var outerHTML: kotlin.String
        public open override /*1*/ /*fake_override*/ fun <get-outerHTML>(): kotlin.String
        public open override /*1*/ /*fake_override*/ fun <set-outerHTML>(/*0*/ <set-?>: kotlin.String): kotlin.Unit
    public open override /*1*/ /*fake_override*/ val ownerDocument: org.w3c.dom.Document?
        public open override /*1*/ /*fake_override*/ fun <get-ownerDocument>(): org.w3c.dom.Document?
    public open override /*1*/ /*fake_override*/ val ownerSVGElement: org.w3c.dom.svg.SVGSVGElement?
        public open override /*1*/ /*fake_override*/ fun <get-ownerSVGElement>(): org.w3c.dom.svg.SVGSVGElement?
    public open override /*1*/ /*fake_override*/ val parentElement: org.w3c.dom.Element?
        public open override /*1*/ /*fake_override*/ fun <get-parentElement>(): org.w3c.dom.Element?
    public open override /*1*/ /*fake_override*/ val parentNode: org.w3c.dom.Node?
        public open override /*1*/ /*fake_override*/ fun <get-parentNode>(): org.w3c.dom.Node?
    public open override /*1*/ /*fake_override*/ val prefix: kotlin.String?
        public open override /*1*/ /*fake_override*/ fun <get-prefix>(): kotlin.String?
    public open override /*1*/ /*fake_override*/ val previousElementSibling: org.w3c.dom.Element?
        public open override /*1*/ /*fake_override*/ fun <get-previousElementSibling>(): org.w3c.dom.Element?
    public open override /*1*/ /*fake_override*/ val previousSibling: org.w3c.dom.Node?
        public open override /*1*/ /*fake_override*/ fun <get-previousSibling>(): org.w3c.dom.Node?
    public open override /*1*/ /*fake_override*/ val scrollHeight: kotlin.Int
        public open override /*1*/ /*fake_override*/ fun <get-scrollHeight>(): kotlin.Int
    public open override /*1*/ /*fake_override*/ var scrollLeft: kotlin.Double
        public open override /*1*/ /*fake_override*/ fun <get-scrollLeft>(): kotlin.Double
        public open override /*1*/ /*fake_override*/ fun <set-scrollLeft>(/*0*/ <set-?>: kotlin.Double): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var scrollTop: kotlin.Double
        public open override /*1*/ /*fake_override*/ fun <get-scrollTop>(): kotlin.Double
        public open override /*1*/ /*fake_override*/ fun <set-scrollTop>(/*0*/ <set-?>: kotlin.Double): kotlin.Unit
    public open override /*1*/ /*fake_override*/ val scrollWidth: kotlin.Int
        public open override /*1*/ /*fake_override*/ fun <get-scrollWidth>(): kotlin.Int
    public open override /*1*/ /*fake_override*/ val shadowRoot: org.w3c.dom.ShadowRoot?
        public open override /*1*/ /*fake_override*/ fun <get-shadowRoot>(): org.w3c.dom.ShadowRoot?
    public open override /*1*/ /*fake_override*/ var slot: kotlin.String
        public open override /*1*/ /*fake_override*/ fun <get-slot>(): kotlin.String
        public open override /*1*/ /*fake_override*/ fun <set-slot>(/*0*/ <set-?>: kotlin.String): kotlin.Unit
    public abstract override /*1*/ /*fake_override*/ val style: org.w3c.dom.css.CSSStyleDeclaration
        public abstract override /*1*/ /*fake_override*/ fun <get-style>(): org.w3c.dom.css.CSSStyleDeclaration
    public open override /*1*/ /*fake_override*/ var tabIndex: kotlin.Int
        public open override /*1*/ /*fake_override*/ fun <get-tabIndex>(): kotlin.Int
        public open override /*1*/ /*fake_override*/ fun <set-tabIndex>(/*0*/ <set-?>: kotlin.Int): kotlin.Unit
    public open override /*1*/ /*fake_override*/ val tagName: kotlin.String
        public open override /*1*/ /*fake_override*/ fun <get-tagName>(): kotlin.String
    public open override /*1*/ /*fake_override*/ var textContent: kotlin.String?
        public open override /*1*/ /*fake_override*/ fun <get-textContent>(): kotlin.String?
        public open override /*1*/ /*fake_override*/ fun <set-textContent>(/*0*/ <set-?>: kotlin.String?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ val viewportElement: org.w3c.dom.svg.SVGElement?
        public open override /*1*/ /*fake_override*/ fun <get-viewportElement>(): org.w3c.dom.svg.SVGElement?
    public final override /*1*/ /*fake_override*/ fun addEventListener(/*0*/ type: kotlin.String, /*1*/ callback: ((org.w3c.dom.events.Event) -> kotlin.Unit)?, /*2*/ options: dynamic = ...): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun addEventListener(/*0*/ type: kotlin.String, /*1*/ callback: org.w3c.dom.events.EventListener?, /*2*/ options: dynamic = ...): kotlin.Unit
    public abstract override /*1*/ /*fake_override*/ fun after(/*0*/ vararg nodes: dynamic /*kotlin.Array<out dynamic>*/): kotlin.Unit
    public abstract override /*1*/ /*fake_override*/ fun append(/*0*/ vararg nodes: dynamic /*kotlin.Array<out dynamic>*/): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun appendChild(/*0*/ node: org.w3c.dom.Node): org.w3c.dom.Node
    public final override /*1*/ /*fake_override*/ fun attachShadow(/*0*/ init: org.w3c.dom.ShadowRootInit): org.w3c.dom.ShadowRoot
    public abstract override /*1*/ /*fake_override*/ fun before(/*0*/ vararg nodes: dynamic /*kotlin.Array<out dynamic>*/): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun blur(): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun cloneNode(/*0*/ deep: kotlin.Boolean = ...): org.w3c.dom.Node
    public final override /*1*/ /*fake_override*/ fun closest(/*0*/ selectors: kotlin.String): org.w3c.dom.Element?
    public final override /*1*/ /*fake_override*/ fun compareDocumentPosition(/*0*/ other: org.w3c.dom.Node): kotlin.Short
    public final override /*1*/ /*fake_override*/ fun contains(/*0*/ other: org.w3c.dom.Node?): kotlin.Boolean
    public abstract override /*1*/ /*fake_override*/ fun convertPointFromNode(/*0*/ point: org.w3c.dom.DOMPointInit, /*1*/ from: dynamic, /*2*/ options: org.w3c.dom.ConvertCoordinateOptions = ...): org.w3c.dom.DOMPoint
    public abstract override /*1*/ /*fake_override*/ fun convertQuadFromNode(/*0*/ quad: dynamic, /*1*/ from: dynamic, /*2*/ options: org.w3c.dom.ConvertCoordinateOptions = ...): org.w3c.dom.DOMQuad
    public abstract override /*1*/ /*fake_override*/ fun convertRectFromNode(/*0*/ rect: org.w3c.dom.DOMRectReadOnly, /*1*/ from: dynamic, /*2*/ options: org.w3c.dom.ConvertCoordinateOptions = ...): org.w3c.dom.DOMQuad
    public final override /*1*/ /*fake_override*/ fun dispatchEvent(/*0*/ event: org.w3c.dom.events.Event): kotlin.Boolean
    public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
    public final override /*1*/ /*fake_override*/ fun focus(): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun getAttribute(/*0*/ qualifiedName: kotlin.String): kotlin.String?
    public final override /*1*/ /*fake_override*/ fun getAttributeNS(/*0*/ namespace: kotlin.String?, /*1*/ localName: kotlin.String): kotlin.String?
    public final override /*1*/ /*fake_override*/ fun getAttributeNames(): kotlin.Array<kotlin.String>
    public final override /*1*/ /*fake_override*/ fun getAttributeNode(/*0*/ qualifiedName: kotlin.String): org.w3c.dom.Attr?
    public final override /*1*/ /*fake_override*/ fun getAttributeNodeNS(/*0*/ namespace: kotlin.String?, /*1*/ localName: kotlin.String): org.w3c.dom.Attr?
    public final override /*1*/ /*fake_override*/ fun getBoundingClientRect(): org.w3c.dom.DOMRect
    public abstract override /*1*/ /*fake_override*/ fun getBoxQuads(/*0*/ options: org.w3c.dom.BoxQuadOptions = ...): kotlin.Array<org.w3c.dom.DOMQuad>
    public final override /*1*/ /*fake_override*/ fun getClientRects(): kotlin.Array<org.w3c.dom.DOMRect>
    public final override /*1*/ /*fake_override*/ fun getElementsByClassName(/*0*/ classNames: kotlin.String): org.w3c.dom.HTMLCollection
    public final override /*1*/ /*fake_override*/ fun getElementsByTagName(/*0*/ qualifiedName: kotlin.String): org.w3c.dom.HTMLCollection
    public final override /*1*/ /*fake_override*/ fun getElementsByTagNameNS(/*0*/ namespace: kotlin.String?, /*1*/ localName: kotlin.String): org.w3c.dom.HTMLCollection
    public final override /*1*/ /*fake_override*/ fun getRootNode(/*0*/ options: org.w3c.dom.GetRootNodeOptions = ...): org.w3c.dom.Node
    public final override /*1*/ /*fake_override*/ fun hasAttribute(/*0*/ qualifiedName: kotlin.String): kotlin.Boolean
    public final override /*1*/ /*fake_override*/ fun hasAttributeNS(/*0*/ namespace: kotlin.String?, /*1*/ localName: kotlin.String): kotlin.Boolean
    public final override /*1*/ /*fake_override*/ fun hasAttributes(): kotlin.Boolean
    public final override /*1*/ /*fake_override*/ fun hasChildNodes(): kotlin.Boolean
    public final override /*1*/ /*fake_override*/ fun hasPointerCapture(/*0*/ pointerId: kotlin.Int): kotlin.Boolean
    public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
    public final override /*1*/ /*fake_override*/ fun insertAdjacentElement(/*0*/ where: kotlin.String, /*1*/ element: org.w3c.dom.Element): org.w3c.dom.Element?
    public final override /*1*/ /*fake_override*/ fun insertAdjacentHTML(/*0*/ position: kotlin.String, /*1*/ text: kotlin.String): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun insertAdjacentText(/*0*/ where: kotlin.String, /*1*/ data: kotlin.String): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun insertBefore(/*0*/ node: org.w3c.dom.Node, /*1*/ child: org.w3c.dom.Node?): org.w3c.dom.Node
    public final override /*1*/ /*fake_override*/ fun isDefaultNamespace(/*0*/ namespace: kotlin.String?): kotlin.Boolean
    public final override /*1*/ /*fake_override*/ fun isEqualNode(/*0*/ otherNode: org.w3c.dom.Node?): kotlin.Boolean
    public final override /*1*/ /*fake_override*/ fun isSameNode(/*0*/ otherNode: org.w3c.dom.Node?): kotlin.Boolean
    public final override /*1*/ /*fake_override*/ fun lookupNamespaceURI(/*0*/ prefix: kotlin.String?): kotlin.String?
    public final override /*1*/ /*fake_override*/ fun lookupPrefix(/*0*/ namespace: kotlin.String?): kotlin.String?
    public final override /*1*/ /*fake_override*/ fun matches(/*0*/ selectors: kotlin.String): kotlin.Boolean
    public final override /*1*/ /*fake_override*/ fun normalize(): kotlin.Unit
    public abstract override /*1*/ /*fake_override*/ fun prepend(/*0*/ vararg nodes: dynamic /*kotlin.Array<out dynamic>*/): kotlin.Unit
    public abstract override /*1*/ /*fake_override*/ fun querySelector(/*0*/ selectors: kotlin.String): org.w3c.dom.Element?
    public abstract override /*1*/ /*fake_override*/ fun querySelectorAll(/*0*/ selectors: kotlin.String): org.w3c.dom.NodeList
    public final override /*1*/ /*fake_override*/ fun releasePointerCapture(/*0*/ pointerId: kotlin.Int): kotlin.Unit
    public abstract override /*1*/ /*fake_override*/ fun remove(): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun removeAttribute(/*0*/ qualifiedName: kotlin.String): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun removeAttributeNS(/*0*/ namespace: kotlin.String?, /*1*/ localName: kotlin.String): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun removeAttributeNode(/*0*/ attr: org.w3c.dom.Attr): org.w3c.dom.Attr
    public final override /*1*/ /*fake_override*/ fun removeChild(/*0*/ child: org.w3c.dom.Node): org.w3c.dom.Node
    public final override /*1*/ /*fake_override*/ fun removeEventListener(/*0*/ type: kotlin.String, /*1*/ callback: ((org.w3c.dom.events.Event) -> kotlin.Unit)?, /*2*/ options: dynamic = ...): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun removeEventListener(/*0*/ type: kotlin.String, /*1*/ callback: org.w3c.dom.events.EventListener?, /*2*/ options: dynamic = ...): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun replaceChild(/*0*/ node: org.w3c.dom.Node, /*1*/ child: org.w3c.dom.Node): org.w3c.dom.Node
    public abstract override /*1*/ /*fake_override*/ fun replaceWith(/*0*/ vararg nodes: dynamic /*kotlin.Array<out dynamic>*/): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun requestFullscreen(): kotlin.js.Promise<kotlin.Unit>
    public final override /*1*/ /*fake_override*/ fun scroll(/*0*/ x: kotlin.Double, /*1*/ y: kotlin.Double): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun scroll(/*0*/ options: org.w3c.dom.ScrollToOptions = ...): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun scrollBy(/*0*/ x: kotlin.Double, /*1*/ y: kotlin.Double): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun scrollBy(/*0*/ options: org.w3c.dom.ScrollToOptions = ...): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun scrollIntoView(): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun scrollIntoView(/*0*/ arg: dynamic): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun scrollTo(/*0*/ x: kotlin.Double, /*1*/ y: kotlin.Double): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun scrollTo(/*0*/ options: org.w3c.dom.ScrollToOptions = ...): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun setAttribute(/*0*/ qualifiedName: kotlin.String, /*1*/ value: kotlin.String): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun setAttributeNS(/*0*/ namespace: kotlin.String?, /*1*/ qualifiedName: kotlin.String, /*2*/ value: kotlin.String): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun setAttributeNode(/*0*/ attr: org.w3c.dom.Attr): org.w3c.dom.Attr?
    public final override /*1*/ /*fake_override*/ fun setAttributeNodeNS(/*0*/ attr: org.w3c.dom.Attr): org.w3c.dom.Attr?
    public final override /*1*/ /*fake_override*/ fun setPointerCapture(/*0*/ pointerId: kotlin.Int): kotlin.Unit
    public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
    public final override /*1*/ /*fake_override*/ fun webkitMatchesSelector(/*0*/ selectors: kotlin.String): kotlin.Boolean

    public companion object Companion {
        /*primary*/ private constructor Companion()
        public final val ATTRIBUTE_NODE: kotlin.Short
            public final fun <get-ATTRIBUTE_NODE>(): kotlin.Short
        public final val CDATA_SECTION_NODE: kotlin.Short
            public final fun <get-CDATA_SECTION_NODE>(): kotlin.Short
        public final val COMMENT_NODE: kotlin.Short
            public final fun <get-COMMENT_NODE>(): kotlin.Short
        public final val DOCUMENT_FRAGMENT_NODE: kotlin.Short
            public final fun <get-DOCUMENT_FRAGMENT_NODE>(): kotlin.Short
        public final val DOCUMENT_NODE: kotlin.Short
            public final fun <get-DOCUMENT_NODE>(): kotlin.Short
        public final val DOCUMENT_POSITION_CONTAINED_BY: kotlin.Short
            public final fun <get-DOCUMENT_POSITION_CONTAINED_BY>(): kotlin.Short
        public final val DOCUMENT_POSITION_CONTAINS: kotlin.Short
            public final fun <get-DOCUMENT_POSITION_CONTAINS>(): kotlin.Short
        public final val DOCUMENT_POSITION_DISCONNECTED: kotlin.Short
            public final fun <get-DOCUMENT_POSITION_DISCONNECTED>(): kotlin.Short
        public final val DOCUMENT_POSITION_FOLLOWING: kotlin.Short
            public final fun <get-DOCUMENT_POSITION_FOLLOWING>(): kotlin.Short
        public final val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: kotlin.Short
            public final fun <get-DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC>(): kotlin.Short
        public final val DOCUMENT_POSITION_PRECEDING: kotlin.Short
            public final fun <get-DOCUMENT_POSITION_PRECEDING>(): kotlin.Short
        public final val DOCUMENT_TYPE_NODE: kotlin.Short
            public final fun <get-DOCUMENT_TYPE_NODE>(): kotlin.Short
        public final val ELEMENT_NODE: kotlin.Short
            public final fun <get-ELEMENT_NODE>(): kotlin.Short
        public final val ENTITY_NODE: kotlin.Short
            public final fun <get-ENTITY_NODE>(): kotlin.Short
        public final val ENTITY_REFERENCE_NODE: kotlin.Short
            public final fun <get-ENTITY_REFERENCE_NODE>(): kotlin.Short
        public final val NOTATION_NODE: kotlin.Short
            public final fun <get-NOTATION_NODE>(): kotlin.Short
        public final val PROCESSING_INSTRUCTION_NODE: kotlin.Short
            public final fun <get-PROCESSING_INSTRUCTION_NODE>(): kotlin.Short
        public final val TEXT_NODE: kotlin.Short
            public final fun <get-TEXT_NODE>(): kotlin.Short
        public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
        public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
        public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
    }
}

public abstract external class SVGTransform {
    /*primary*/ public constructor SVGTransform()
    public open val angle: kotlin.Float
        public open fun <get-angle>(): kotlin.Float
    public open val matrix: org.w3c.dom.DOMMatrix
        public open fun <get-matrix>(): org.w3c.dom.DOMMatrix
    public open val type: kotlin.Short
        public open fun <get-type>(): kotlin.Short
    public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
    public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
    public final fun setMatrix(/*0*/ matrix: org.w3c.dom.DOMMatrixReadOnly): kotlin.Unit
    public final fun setRotate(/*0*/ angle: kotlin.Float, /*1*/ cx: kotlin.Float, /*2*/ cy: kotlin.Float): kotlin.Unit
    public final fun setScale(/*0*/ sx: kotlin.Float, /*1*/ sy: kotlin.Float): kotlin.Unit
    public final fun setSkewX(/*0*/ angle: kotlin.Float): kotlin.Unit
    public final fun setSkewY(/*0*/ angle: kotlin.Float): kotlin.Unit
    public final fun setTranslate(/*0*/ tx: kotlin.Float, /*1*/ ty: kotlin.Float): kotlin.Unit
    public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String

    public companion object Companion {
        /*primary*/ private constructor Companion()
        public final val SVG_TRANSFORM_MATRIX: kotlin.Short
            public final fun <get-SVG_TRANSFORM_MATRIX>(): kotlin.Short
        public final val SVG_TRANSFORM_ROTATE: kotlin.Short
            public final fun <get-SVG_TRANSFORM_ROTATE>(): kotlin.Short
        public final val SVG_TRANSFORM_SCALE: kotlin.Short
            public final fun <get-SVG_TRANSFORM_SCALE>(): kotlin.Short
        public final val SVG_TRANSFORM_SKEWX: kotlin.Short
            public final fun <get-SVG_TRANSFORM_SKEWX>(): kotlin.Short
        public final val SVG_TRANSFORM_SKEWY: kotlin.Short
            public final fun <get-SVG_TRANSFORM_SKEWY>(): kotlin.Short
        public final val SVG_TRANSFORM_TRANSLATE: kotlin.Short
            public final fun <get-SVG_TRANSFORM_TRANSLATE>(): kotlin.Short
        public final val SVG_TRANSFORM_UNKNOWN: kotlin.Short
            public final fun <get-SVG_TRANSFORM_UNKNOWN>(): kotlin.Short
        public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
        public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
        public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
    }
}

public abstract external class SVGTransformList {
    /*primary*/ public constructor SVGTransformList()
    public open val length: kotlin.Int
        public open fun <get-length>(): kotlin.Int
    public open val numberOfItems: kotlin.Int
        public open fun <get-numberOfItems>(): kotlin.Int
    public final fun appendItem(/*0*/ newItem: org.w3c.dom.svg.SVGTransform): org.w3c.dom.svg.SVGTransform
    public final fun clear(): kotlin.Unit
    public final fun consolidate(): org.w3c.dom.svg.SVGTransform?
    public final fun createSVGTransformFromMatrix(/*0*/ matrix: org.w3c.dom.DOMMatrixReadOnly): org.w3c.dom.svg.SVGTransform
    public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
    public final fun getItem(/*0*/ index: kotlin.Int): org.w3c.dom.svg.SVGTransform
    public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
    public final fun initialize(/*0*/ newItem: org.w3c.dom.svg.SVGTransform): org.w3c.dom.svg.SVGTransform
    public final fun insertItemBefore(/*0*/ newItem: org.w3c.dom.svg.SVGTransform, /*1*/ index: kotlin.Int): org.w3c.dom.svg.SVGTransform
    public final fun removeItem(/*0*/ index: kotlin.Int): org.w3c.dom.svg.SVGTransform
    public final fun replaceItem(/*0*/ newItem: org.w3c.dom.svg.SVGTransform, /*1*/ index: kotlin.Int): org.w3c.dom.svg.SVGTransform
    public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
}

public external interface SVGURIReference {
    public abstract val href: org.w3c.dom.svg.SVGAnimatedString
        public abstract fun <get-href>(): org.w3c.dom.svg.SVGAnimatedString
    public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
    public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
    public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
}

@kotlin.Suppress(names = {"NESTED_CLASS_IN_EXTERNAL_INTERFACE"}) public external interface SVGUnitTypes {
    public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
    public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
    public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String

    public companion object Companion {
        /*primary*/ private constructor Companion()
        public final val SVG_UNIT_TYPE_OBJECTBOUNDINGBOX: kotlin.Short
            public final fun <get-SVG_UNIT_TYPE_OBJECTBOUNDINGBOX>(): kotlin.Short
        public final val SVG_UNIT_TYPE_UNKNOWN: kotlin.Short
            public final fun <get-SVG_UNIT_TYPE_UNKNOWN>(): kotlin.Short
        public final val SVG_UNIT_TYPE_USERSPACEONUSE: kotlin.Short
            public final fun <get-SVG_UNIT_TYPE_USERSPACEONUSE>(): kotlin.Short
        public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
        public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
        public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
    }
}

public abstract external class SVGUnknownElement : org.w3c.dom.svg.SVGGraphicsElement {
    /*primary*/ public constructor SVGUnknownElement()
    public open override /*1*/ /*fake_override*/ val assignedSlot: org.w3c.dom.HTMLSlotElement?
        public open override /*1*/ /*fake_override*/ fun <get-assignedSlot>(): org.w3c.dom.HTMLSlotElement?
    public open override /*1*/ /*fake_override*/ val attributes: org.w3c.dom.NamedNodeMap
        public open override /*1*/ /*fake_override*/ fun <get-attributes>(): org.w3c.dom.NamedNodeMap
    public open override /*1*/ /*fake_override*/ val baseURI: kotlin.String
        public open override /*1*/ /*fake_override*/ fun <get-baseURI>(): kotlin.String
    public abstract override /*1*/ /*fake_override*/ val childElementCount: kotlin.Int
        public abstract override /*1*/ /*fake_override*/ fun <get-childElementCount>(): kotlin.Int
    public open override /*1*/ /*fake_override*/ val childNodes: org.w3c.dom.NodeList
        public open override /*1*/ /*fake_override*/ fun <get-childNodes>(): org.w3c.dom.NodeList
    public abstract override /*1*/ /*fake_override*/ val children: org.w3c.dom.HTMLCollection
        public abstract override /*1*/ /*fake_override*/ fun <get-children>(): org.w3c.dom.HTMLCollection
    public open override /*1*/ /*fake_override*/ val classList: org.w3c.dom.DOMTokenList
        public open override /*1*/ /*fake_override*/ fun <get-classList>(): org.w3c.dom.DOMTokenList
    public open override /*1*/ /*fake_override*/ var className: kotlin.String
        public open override /*1*/ /*fake_override*/ fun <get-className>(): kotlin.String
        public open override /*1*/ /*fake_override*/ fun <set-className>(/*0*/ <set-?>: kotlin.String): kotlin.Unit
    public open override /*1*/ /*fake_override*/ val clientHeight: kotlin.Int
        public open override /*1*/ /*fake_override*/ fun <get-clientHeight>(): kotlin.Int
    public open override /*1*/ /*fake_override*/ val clientLeft: kotlin.Int
        public open override /*1*/ /*fake_override*/ fun <get-clientLeft>(): kotlin.Int
    public open override /*1*/ /*fake_override*/ val clientTop: kotlin.Int
        public open override /*1*/ /*fake_override*/ fun <get-clientTop>(): kotlin.Int
    public open override /*1*/ /*fake_override*/ val clientWidth: kotlin.Int
        public open override /*1*/ /*fake_override*/ fun <get-clientWidth>(): kotlin.Int
    public open override /*1*/ /*fake_override*/ val correspondingElement: org.w3c.dom.svg.SVGElement?
        public open override /*1*/ /*fake_override*/ fun <get-correspondingElement>(): org.w3c.dom.svg.SVGElement?
    public open override /*1*/ /*fake_override*/ val correspondingUseElement: org.w3c.dom.svg.SVGUseElement?
        public open override /*1*/ /*fake_override*/ fun <get-correspondingUseElement>(): org.w3c.dom.svg.SVGUseElement?
    public open override /*1*/ /*fake_override*/ val dataset: org.w3c.dom.DOMStringMap
        public open override /*1*/ /*fake_override*/ fun <get-dataset>(): org.w3c.dom.DOMStringMap
    public open override /*1*/ /*fake_override*/ val firstChild: org.w3c.dom.Node?
        public open override /*1*/ /*fake_override*/ fun <get-firstChild>(): org.w3c.dom.Node?
    public open override /*1*/ /*fake_override*/ val firstElementChild: org.w3c.dom.Element?
        public open override /*1*/ /*fake_override*/ fun <get-firstElementChild>(): org.w3c.dom.Element?
    public open override /*1*/ /*fake_override*/ var id: kotlin.String
        public open override /*1*/ /*fake_override*/ fun <get-id>(): kotlin.String
        public open override /*1*/ /*fake_override*/ fun <set-id>(/*0*/ <set-?>: kotlin.String): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var innerHTML: kotlin.String
        public open override /*1*/ /*fake_override*/ fun <get-innerHTML>(): kotlin.String
        public open override /*1*/ /*fake_override*/ fun <set-innerHTML>(/*0*/ <set-?>: kotlin.String): kotlin.Unit
    public open override /*1*/ /*fake_override*/ val isConnected: kotlin.Boolean
        public open override /*1*/ /*fake_override*/ fun <get-isConnected>(): kotlin.Boolean
    public open override /*1*/ /*fake_override*/ val lastChild: org.w3c.dom.Node?
        public open override /*1*/ /*fake_override*/ fun <get-lastChild>(): org.w3c.dom.Node?
    public open override /*1*/ /*fake_override*/ val lastElementChild: org.w3c.dom.Element?
        public open override /*1*/ /*fake_override*/ fun <get-lastElementChild>(): org.w3c.dom.Element?
    public open override /*1*/ /*fake_override*/ val localName: kotlin.String
        public open override /*1*/ /*fake_override*/ fun <get-localName>(): kotlin.String
    public open override /*1*/ /*fake_override*/ val namespaceURI: kotlin.String?
        public open override /*1*/ /*fake_override*/ fun <get-namespaceURI>(): kotlin.String?
    public open override /*1*/ /*fake_override*/ val nextElementSibling: org.w3c.dom.Element?
        public open override /*1*/ /*fake_override*/ fun <get-nextElementSibling>(): org.w3c.dom.Element?
    public open override /*1*/ /*fake_override*/ val nextSibling: org.w3c.dom.Node?
        public open override /*1*/ /*fake_override*/ fun <get-nextSibling>(): org.w3c.dom.Node?
    public open override /*1*/ /*fake_override*/ val nodeName: kotlin.String
        public open override /*1*/ /*fake_override*/ fun <get-nodeName>(): kotlin.String
    public open override /*1*/ /*fake_override*/ val nodeType: kotlin.Short
        public open override /*1*/ /*fake_override*/ fun <get-nodeType>(): kotlin.Short
    public open override /*1*/ /*fake_override*/ var nodeValue: kotlin.String?
        public open override /*1*/ /*fake_override*/ fun <get-nodeValue>(): kotlin.String?
        public open override /*1*/ /*fake_override*/ fun <set-nodeValue>(/*0*/ <set-?>: kotlin.String?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onabort: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onabort>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onabort>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onblur: ((org.w3c.dom.events.FocusEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onblur>(): ((org.w3c.dom.events.FocusEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onblur>(/*0*/ value: ((org.w3c.dom.events.FocusEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var oncancel: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-oncancel>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-oncancel>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var oncanplay: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-oncanplay>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-oncanplay>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var oncanplaythrough: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-oncanplaythrough>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-oncanplaythrough>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onchange: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onchange>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onchange>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onclick: ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onclick>(): ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onclick>(/*0*/ value: ((org.w3c.dom.events.MouseEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onclose: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onclose>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onclose>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var oncontextmenu: ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-oncontextmenu>(): ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-oncontextmenu>(/*0*/ value: ((org.w3c.dom.events.MouseEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var oncuechange: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-oncuechange>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-oncuechange>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ondblclick: ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ondblclick>(): ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ondblclick>(/*0*/ value: ((org.w3c.dom.events.MouseEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ondrag: ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ondrag>(): ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ondrag>(/*0*/ value: ((org.w3c.dom.DragEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ondragend: ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ondragend>(): ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ondragend>(/*0*/ value: ((org.w3c.dom.DragEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ondragenter: ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ondragenter>(): ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ondragenter>(/*0*/ value: ((org.w3c.dom.DragEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ondragexit: ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ondragexit>(): ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ondragexit>(/*0*/ value: ((org.w3c.dom.DragEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ondragleave: ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ondragleave>(): ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ondragleave>(/*0*/ value: ((org.w3c.dom.DragEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ondragover: ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ondragover>(): ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ondragover>(/*0*/ value: ((org.w3c.dom.DragEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ondragstart: ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ondragstart>(): ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ondragstart>(/*0*/ value: ((org.w3c.dom.DragEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ondrop: ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ondrop>(): ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ondrop>(/*0*/ value: ((org.w3c.dom.DragEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ondurationchange: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ondurationchange>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ondurationchange>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onemptied: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onemptied>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onemptied>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onended: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onended>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onended>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onerror: ((dynamic, kotlin.String, kotlin.Int, kotlin.Int, kotlin.Any?) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onerror>(): ((dynamic, kotlin.String, kotlin.Int, kotlin.Int, kotlin.Any?) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onerror>(/*0*/ value: ((dynamic, kotlin.String, kotlin.Int, kotlin.Int, kotlin.Any?) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onfocus: ((org.w3c.dom.events.FocusEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onfocus>(): ((org.w3c.dom.events.FocusEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onfocus>(/*0*/ value: ((org.w3c.dom.events.FocusEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ongotpointercapture: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ongotpointercapture>(): ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ongotpointercapture>(/*0*/ value: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var oninput: ((org.w3c.dom.events.InputEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-oninput>(): ((org.w3c.dom.events.InputEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-oninput>(/*0*/ value: ((org.w3c.dom.events.InputEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var oninvalid: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-oninvalid>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-oninvalid>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onkeydown: ((org.w3c.dom.events.KeyboardEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onkeydown>(): ((org.w3c.dom.events.KeyboardEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onkeydown>(/*0*/ value: ((org.w3c.dom.events.KeyboardEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onkeypress: ((org.w3c.dom.events.KeyboardEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onkeypress>(): ((org.w3c.dom.events.KeyboardEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onkeypress>(/*0*/ value: ((org.w3c.dom.events.KeyboardEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onkeyup: ((org.w3c.dom.events.KeyboardEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onkeyup>(): ((org.w3c.dom.events.KeyboardEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onkeyup>(/*0*/ value: ((org.w3c.dom.events.KeyboardEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onload: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onload>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onload>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onloadeddata: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onloadeddata>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onloadeddata>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onloadedmetadata: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onloadedmetadata>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onloadedmetadata>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onloadend: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onloadend>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onloadend>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onloadstart: ((org.w3c.xhr.ProgressEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onloadstart>(): ((org.w3c.xhr.ProgressEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onloadstart>(/*0*/ value: ((org.w3c.xhr.ProgressEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onlostpointercapture: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onlostpointercapture>(): ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onlostpointercapture>(/*0*/ value: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onmousedown: ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onmousedown>(): ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onmousedown>(/*0*/ value: ((org.w3c.dom.events.MouseEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onmouseenter: ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onmouseenter>(): ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onmouseenter>(/*0*/ value: ((org.w3c.dom.events.MouseEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onmouseleave: ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onmouseleave>(): ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onmouseleave>(/*0*/ value: ((org.w3c.dom.events.MouseEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onmousemove: ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onmousemove>(): ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onmousemove>(/*0*/ value: ((org.w3c.dom.events.MouseEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onmouseout: ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onmouseout>(): ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onmouseout>(/*0*/ value: ((org.w3c.dom.events.MouseEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onmouseover: ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onmouseover>(): ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onmouseover>(/*0*/ value: ((org.w3c.dom.events.MouseEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onmouseup: ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onmouseup>(): ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onmouseup>(/*0*/ value: ((org.w3c.dom.events.MouseEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onpause: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onpause>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onpause>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onplay: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onplay>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onplay>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onplaying: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onplaying>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onplaying>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onpointercancel: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onpointercancel>(): ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onpointercancel>(/*0*/ value: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onpointerdown: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onpointerdown>(): ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onpointerdown>(/*0*/ value: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onpointerenter: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onpointerenter>(): ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onpointerenter>(/*0*/ value: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onpointerleave: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onpointerleave>(): ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onpointerleave>(/*0*/ value: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onpointermove: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onpointermove>(): ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onpointermove>(/*0*/ value: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onpointerout: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onpointerout>(): ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onpointerout>(/*0*/ value: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onpointerover: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onpointerover>(): ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onpointerover>(/*0*/ value: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onpointerup: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onpointerup>(): ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onpointerup>(/*0*/ value: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onprogress: ((org.w3c.xhr.ProgressEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onprogress>(): ((org.w3c.xhr.ProgressEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onprogress>(/*0*/ value: ((org.w3c.xhr.ProgressEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onratechange: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onratechange>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onratechange>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onreset: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onreset>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onreset>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onresize: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onresize>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onresize>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onscroll: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onscroll>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onscroll>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onseeked: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onseeked>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onseeked>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onseeking: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onseeking>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onseeking>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onselect: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onselect>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onselect>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onshow: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onshow>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onshow>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onstalled: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onstalled>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onstalled>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onsubmit: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onsubmit>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onsubmit>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onsuspend: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onsuspend>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onsuspend>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ontimeupdate: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ontimeupdate>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ontimeupdate>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ontoggle: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ontoggle>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ontoggle>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onvolumechange: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onvolumechange>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onvolumechange>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onwaiting: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onwaiting>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onwaiting>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onwheel: ((org.w3c.dom.events.WheelEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onwheel>(): ((org.w3c.dom.events.WheelEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onwheel>(/*0*/ value: ((org.w3c.dom.events.WheelEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var outerHTML: kotlin.String
        public open override /*1*/ /*fake_override*/ fun <get-outerHTML>(): kotlin.String
        public open override /*1*/ /*fake_override*/ fun <set-outerHTML>(/*0*/ <set-?>: kotlin.String): kotlin.Unit
    public open override /*1*/ /*fake_override*/ val ownerDocument: org.w3c.dom.Document?
        public open override /*1*/ /*fake_override*/ fun <get-ownerDocument>(): org.w3c.dom.Document?
    public open override /*1*/ /*fake_override*/ val ownerSVGElement: org.w3c.dom.svg.SVGSVGElement?
        public open override /*1*/ /*fake_override*/ fun <get-ownerSVGElement>(): org.w3c.dom.svg.SVGSVGElement?
    public open override /*1*/ /*fake_override*/ val parentElement: org.w3c.dom.Element?
        public open override /*1*/ /*fake_override*/ fun <get-parentElement>(): org.w3c.dom.Element?
    public open override /*1*/ /*fake_override*/ val parentNode: org.w3c.dom.Node?
        public open override /*1*/ /*fake_override*/ fun <get-parentNode>(): org.w3c.dom.Node?
    public open override /*1*/ /*fake_override*/ val prefix: kotlin.String?
        public open override /*1*/ /*fake_override*/ fun <get-prefix>(): kotlin.String?
    public open override /*1*/ /*fake_override*/ val previousElementSibling: org.w3c.dom.Element?
        public open override /*1*/ /*fake_override*/ fun <get-previousElementSibling>(): org.w3c.dom.Element?
    public open override /*1*/ /*fake_override*/ val previousSibling: org.w3c.dom.Node?
        public open override /*1*/ /*fake_override*/ fun <get-previousSibling>(): org.w3c.dom.Node?
    public abstract override /*1*/ /*fake_override*/ val requiredExtensions: org.w3c.dom.svg.SVGStringList
        public abstract override /*1*/ /*fake_override*/ fun <get-requiredExtensions>(): org.w3c.dom.svg.SVGStringList
    public open override /*1*/ /*fake_override*/ val scrollHeight: kotlin.Int
        public open override /*1*/ /*fake_override*/ fun <get-scrollHeight>(): kotlin.Int
    public open override /*1*/ /*fake_override*/ var scrollLeft: kotlin.Double
        public open override /*1*/ /*fake_override*/ fun <get-scrollLeft>(): kotlin.Double
        public open override /*1*/ /*fake_override*/ fun <set-scrollLeft>(/*0*/ <set-?>: kotlin.Double): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var scrollTop: kotlin.Double
        public open override /*1*/ /*fake_override*/ fun <get-scrollTop>(): kotlin.Double
        public open override /*1*/ /*fake_override*/ fun <set-scrollTop>(/*0*/ <set-?>: kotlin.Double): kotlin.Unit
    public open override /*1*/ /*fake_override*/ val scrollWidth: kotlin.Int
        public open override /*1*/ /*fake_override*/ fun <get-scrollWidth>(): kotlin.Int
    public open override /*1*/ /*fake_override*/ val shadowRoot: org.w3c.dom.ShadowRoot?
        public open override /*1*/ /*fake_override*/ fun <get-shadowRoot>(): org.w3c.dom.ShadowRoot?
    public open override /*1*/ /*fake_override*/ var slot: kotlin.String
        public open override /*1*/ /*fake_override*/ fun <get-slot>(): kotlin.String
        public open override /*1*/ /*fake_override*/ fun <set-slot>(/*0*/ <set-?>: kotlin.String): kotlin.Unit
    public abstract override /*1*/ /*fake_override*/ val style: org.w3c.dom.css.CSSStyleDeclaration
        public abstract override /*1*/ /*fake_override*/ fun <get-style>(): org.w3c.dom.css.CSSStyleDeclaration
    public abstract override /*1*/ /*fake_override*/ val systemLanguage: org.w3c.dom.svg.SVGStringList
        public abstract override /*1*/ /*fake_override*/ fun <get-systemLanguage>(): org.w3c.dom.svg.SVGStringList
    public open override /*1*/ /*fake_override*/ var tabIndex: kotlin.Int
        public open override /*1*/ /*fake_override*/ fun <get-tabIndex>(): kotlin.Int
        public open override /*1*/ /*fake_override*/ fun <set-tabIndex>(/*0*/ <set-?>: kotlin.Int): kotlin.Unit
    public open override /*1*/ /*fake_override*/ val tagName: kotlin.String
        public open override /*1*/ /*fake_override*/ fun <get-tagName>(): kotlin.String
    public open override /*1*/ /*fake_override*/ var textContent: kotlin.String?
        public open override /*1*/ /*fake_override*/ fun <get-textContent>(): kotlin.String?
        public open override /*1*/ /*fake_override*/ fun <set-textContent>(/*0*/ <set-?>: kotlin.String?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ val transform: org.w3c.dom.svg.SVGAnimatedTransformList
        public open override /*1*/ /*fake_override*/ fun <get-transform>(): org.w3c.dom.svg.SVGAnimatedTransformList
    public open override /*1*/ /*fake_override*/ val viewportElement: org.w3c.dom.svg.SVGElement?
        public open override /*1*/ /*fake_override*/ fun <get-viewportElement>(): org.w3c.dom.svg.SVGElement?
    public final override /*1*/ /*fake_override*/ fun addEventListener(/*0*/ type: kotlin.String, /*1*/ callback: ((org.w3c.dom.events.Event) -> kotlin.Unit)?, /*2*/ options: dynamic = ...): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun addEventListener(/*0*/ type: kotlin.String, /*1*/ callback: org.w3c.dom.events.EventListener?, /*2*/ options: dynamic = ...): kotlin.Unit
    public abstract override /*1*/ /*fake_override*/ fun after(/*0*/ vararg nodes: dynamic /*kotlin.Array<out dynamic>*/): kotlin.Unit
    public abstract override /*1*/ /*fake_override*/ fun append(/*0*/ vararg nodes: dynamic /*kotlin.Array<out dynamic>*/): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun appendChild(/*0*/ node: org.w3c.dom.Node): org.w3c.dom.Node
    public final override /*1*/ /*fake_override*/ fun attachShadow(/*0*/ init: org.w3c.dom.ShadowRootInit): org.w3c.dom.ShadowRoot
    public abstract override /*1*/ /*fake_override*/ fun before(/*0*/ vararg nodes: dynamic /*kotlin.Array<out dynamic>*/): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun blur(): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun cloneNode(/*0*/ deep: kotlin.Boolean = ...): org.w3c.dom.Node
    public final override /*1*/ /*fake_override*/ fun closest(/*0*/ selectors: kotlin.String): org.w3c.dom.Element?
    public final override /*1*/ /*fake_override*/ fun compareDocumentPosition(/*0*/ other: org.w3c.dom.Node): kotlin.Short
    public final override /*1*/ /*fake_override*/ fun contains(/*0*/ other: org.w3c.dom.Node?): kotlin.Boolean
    public abstract override /*1*/ /*fake_override*/ fun convertPointFromNode(/*0*/ point: org.w3c.dom.DOMPointInit, /*1*/ from: dynamic, /*2*/ options: org.w3c.dom.ConvertCoordinateOptions = ...): org.w3c.dom.DOMPoint
    public abstract override /*1*/ /*fake_override*/ fun convertQuadFromNode(/*0*/ quad: dynamic, /*1*/ from: dynamic, /*2*/ options: org.w3c.dom.ConvertCoordinateOptions = ...): org.w3c.dom.DOMQuad
    public abstract override /*1*/ /*fake_override*/ fun convertRectFromNode(/*0*/ rect: org.w3c.dom.DOMRectReadOnly, /*1*/ from: dynamic, /*2*/ options: org.w3c.dom.ConvertCoordinateOptions = ...): org.w3c.dom.DOMQuad
    public final override /*1*/ /*fake_override*/ fun dispatchEvent(/*0*/ event: org.w3c.dom.events.Event): kotlin.Boolean
    public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
    public final override /*1*/ /*fake_override*/ fun focus(): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun getAttribute(/*0*/ qualifiedName: kotlin.String): kotlin.String?
    public final override /*1*/ /*fake_override*/ fun getAttributeNS(/*0*/ namespace: kotlin.String?, /*1*/ localName: kotlin.String): kotlin.String?
    public final override /*1*/ /*fake_override*/ fun getAttributeNames(): kotlin.Array<kotlin.String>
    public final override /*1*/ /*fake_override*/ fun getAttributeNode(/*0*/ qualifiedName: kotlin.String): org.w3c.dom.Attr?
    public final override /*1*/ /*fake_override*/ fun getAttributeNodeNS(/*0*/ namespace: kotlin.String?, /*1*/ localName: kotlin.String): org.w3c.dom.Attr?
    public final override /*1*/ /*fake_override*/ fun getBBox(/*0*/ options: org.w3c.dom.svg.SVGBoundingBoxOptions = ...): org.w3c.dom.DOMRect
    public final override /*1*/ /*fake_override*/ fun getBoundingClientRect(): org.w3c.dom.DOMRect
    public abstract override /*1*/ /*fake_override*/ fun getBoxQuads(/*0*/ options: org.w3c.dom.BoxQuadOptions = ...): kotlin.Array<org.w3c.dom.DOMQuad>
    public final override /*1*/ /*fake_override*/ fun getCTM(): org.w3c.dom.DOMMatrix?
    public final override /*1*/ /*fake_override*/ fun getClientRects(): kotlin.Array<org.w3c.dom.DOMRect>
    public final override /*1*/ /*fake_override*/ fun getElementsByClassName(/*0*/ classNames: kotlin.String): org.w3c.dom.HTMLCollection
    public final override /*1*/ /*fake_override*/ fun getElementsByTagName(/*0*/ qualifiedName: kotlin.String): org.w3c.dom.HTMLCollection
    public final override /*1*/ /*fake_override*/ fun getElementsByTagNameNS(/*0*/ namespace: kotlin.String?, /*1*/ localName: kotlin.String): org.w3c.dom.HTMLCollection
    public final override /*1*/ /*fake_override*/ fun getRootNode(/*0*/ options: org.w3c.dom.GetRootNodeOptions = ...): org.w3c.dom.Node
    public final override /*1*/ /*fake_override*/ fun getScreenCTM(): org.w3c.dom.DOMMatrix?
    public final override /*1*/ /*fake_override*/ fun hasAttribute(/*0*/ qualifiedName: kotlin.String): kotlin.Boolean
    public final override /*1*/ /*fake_override*/ fun hasAttributeNS(/*0*/ namespace: kotlin.String?, /*1*/ localName: kotlin.String): kotlin.Boolean
    public final override /*1*/ /*fake_override*/ fun hasAttributes(): kotlin.Boolean
    public final override /*1*/ /*fake_override*/ fun hasChildNodes(): kotlin.Boolean
    public final override /*1*/ /*fake_override*/ fun hasPointerCapture(/*0*/ pointerId: kotlin.Int): kotlin.Boolean
    public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
    public final override /*1*/ /*fake_override*/ fun insertAdjacentElement(/*0*/ where: kotlin.String, /*1*/ element: org.w3c.dom.Element): org.w3c.dom.Element?
    public final override /*1*/ /*fake_override*/ fun insertAdjacentHTML(/*0*/ position: kotlin.String, /*1*/ text: kotlin.String): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun insertAdjacentText(/*0*/ where: kotlin.String, /*1*/ data: kotlin.String): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun insertBefore(/*0*/ node: org.w3c.dom.Node, /*1*/ child: org.w3c.dom.Node?): org.w3c.dom.Node
    public final override /*1*/ /*fake_override*/ fun isDefaultNamespace(/*0*/ namespace: kotlin.String?): kotlin.Boolean
    public final override /*1*/ /*fake_override*/ fun isEqualNode(/*0*/ otherNode: org.w3c.dom.Node?): kotlin.Boolean
    public final override /*1*/ /*fake_override*/ fun isSameNode(/*0*/ otherNode: org.w3c.dom.Node?): kotlin.Boolean
    public final override /*1*/ /*fake_override*/ fun lookupNamespaceURI(/*0*/ prefix: kotlin.String?): kotlin.String?
    public final override /*1*/ /*fake_override*/ fun lookupPrefix(/*0*/ namespace: kotlin.String?): kotlin.String?
    public final override /*1*/ /*fake_override*/ fun matches(/*0*/ selectors: kotlin.String): kotlin.Boolean
    public final override /*1*/ /*fake_override*/ fun normalize(): kotlin.Unit
    public abstract override /*1*/ /*fake_override*/ fun prepend(/*0*/ vararg nodes: dynamic /*kotlin.Array<out dynamic>*/): kotlin.Unit
    public abstract override /*1*/ /*fake_override*/ fun querySelector(/*0*/ selectors: kotlin.String): org.w3c.dom.Element?
    public abstract override /*1*/ /*fake_override*/ fun querySelectorAll(/*0*/ selectors: kotlin.String): org.w3c.dom.NodeList
    public final override /*1*/ /*fake_override*/ fun releasePointerCapture(/*0*/ pointerId: kotlin.Int): kotlin.Unit
    public abstract override /*1*/ /*fake_override*/ fun remove(): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun removeAttribute(/*0*/ qualifiedName: kotlin.String): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun removeAttributeNS(/*0*/ namespace: kotlin.String?, /*1*/ localName: kotlin.String): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun removeAttributeNode(/*0*/ attr: org.w3c.dom.Attr): org.w3c.dom.Attr
    public final override /*1*/ /*fake_override*/ fun removeChild(/*0*/ child: org.w3c.dom.Node): org.w3c.dom.Node
    public final override /*1*/ /*fake_override*/ fun removeEventListener(/*0*/ type: kotlin.String, /*1*/ callback: ((org.w3c.dom.events.Event) -> kotlin.Unit)?, /*2*/ options: dynamic = ...): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun removeEventListener(/*0*/ type: kotlin.String, /*1*/ callback: org.w3c.dom.events.EventListener?, /*2*/ options: dynamic = ...): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun replaceChild(/*0*/ node: org.w3c.dom.Node, /*1*/ child: org.w3c.dom.Node): org.w3c.dom.Node
    public abstract override /*1*/ /*fake_override*/ fun replaceWith(/*0*/ vararg nodes: dynamic /*kotlin.Array<out dynamic>*/): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun requestFullscreen(): kotlin.js.Promise<kotlin.Unit>
    public final override /*1*/ /*fake_override*/ fun scroll(/*0*/ x: kotlin.Double, /*1*/ y: kotlin.Double): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun scroll(/*0*/ options: org.w3c.dom.ScrollToOptions = ...): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun scrollBy(/*0*/ x: kotlin.Double, /*1*/ y: kotlin.Double): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun scrollBy(/*0*/ options: org.w3c.dom.ScrollToOptions = ...): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun scrollIntoView(): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun scrollIntoView(/*0*/ arg: dynamic): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun scrollTo(/*0*/ x: kotlin.Double, /*1*/ y: kotlin.Double): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun scrollTo(/*0*/ options: org.w3c.dom.ScrollToOptions = ...): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun setAttribute(/*0*/ qualifiedName: kotlin.String, /*1*/ value: kotlin.String): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun setAttributeNS(/*0*/ namespace: kotlin.String?, /*1*/ qualifiedName: kotlin.String, /*2*/ value: kotlin.String): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun setAttributeNode(/*0*/ attr: org.w3c.dom.Attr): org.w3c.dom.Attr?
    public final override /*1*/ /*fake_override*/ fun setAttributeNodeNS(/*0*/ attr: org.w3c.dom.Attr): org.w3c.dom.Attr?
    public final override /*1*/ /*fake_override*/ fun setPointerCapture(/*0*/ pointerId: kotlin.Int): kotlin.Unit
    public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
    public final override /*1*/ /*fake_override*/ fun webkitMatchesSelector(/*0*/ selectors: kotlin.String): kotlin.Boolean

    public companion object Companion {
        /*primary*/ private constructor Companion()
        public final val ATTRIBUTE_NODE: kotlin.Short
            public final fun <get-ATTRIBUTE_NODE>(): kotlin.Short
        public final val CDATA_SECTION_NODE: kotlin.Short
            public final fun <get-CDATA_SECTION_NODE>(): kotlin.Short
        public final val COMMENT_NODE: kotlin.Short
            public final fun <get-COMMENT_NODE>(): kotlin.Short
        public final val DOCUMENT_FRAGMENT_NODE: kotlin.Short
            public final fun <get-DOCUMENT_FRAGMENT_NODE>(): kotlin.Short
        public final val DOCUMENT_NODE: kotlin.Short
            public final fun <get-DOCUMENT_NODE>(): kotlin.Short
        public final val DOCUMENT_POSITION_CONTAINED_BY: kotlin.Short
            public final fun <get-DOCUMENT_POSITION_CONTAINED_BY>(): kotlin.Short
        public final val DOCUMENT_POSITION_CONTAINS: kotlin.Short
            public final fun <get-DOCUMENT_POSITION_CONTAINS>(): kotlin.Short
        public final val DOCUMENT_POSITION_DISCONNECTED: kotlin.Short
            public final fun <get-DOCUMENT_POSITION_DISCONNECTED>(): kotlin.Short
        public final val DOCUMENT_POSITION_FOLLOWING: kotlin.Short
            public final fun <get-DOCUMENT_POSITION_FOLLOWING>(): kotlin.Short
        public final val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: kotlin.Short
            public final fun <get-DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC>(): kotlin.Short
        public final val DOCUMENT_POSITION_PRECEDING: kotlin.Short
            public final fun <get-DOCUMENT_POSITION_PRECEDING>(): kotlin.Short
        public final val DOCUMENT_TYPE_NODE: kotlin.Short
            public final fun <get-DOCUMENT_TYPE_NODE>(): kotlin.Short
        public final val ELEMENT_NODE: kotlin.Short
            public final fun <get-ELEMENT_NODE>(): kotlin.Short
        public final val ENTITY_NODE: kotlin.Short
            public final fun <get-ENTITY_NODE>(): kotlin.Short
        public final val ENTITY_REFERENCE_NODE: kotlin.Short
            public final fun <get-ENTITY_REFERENCE_NODE>(): kotlin.Short
        public final val NOTATION_NODE: kotlin.Short
            public final fun <get-NOTATION_NODE>(): kotlin.Short
        public final val PROCESSING_INSTRUCTION_NODE: kotlin.Short
            public final fun <get-PROCESSING_INSTRUCTION_NODE>(): kotlin.Short
        public final val TEXT_NODE: kotlin.Short
            public final fun <get-TEXT_NODE>(): kotlin.Short
        public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
        public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
        public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
    }
}

public abstract external class SVGUseElement : org.w3c.dom.svg.SVGGraphicsElement, org.w3c.dom.svg.SVGURIReference {
    /*primary*/ public constructor SVGUseElement()
    public open val animatedInstanceRoot: org.w3c.dom.svg.SVGElement?
        public open fun <get-animatedInstanceRoot>(): org.w3c.dom.svg.SVGElement?
    public open override /*1*/ /*fake_override*/ val assignedSlot: org.w3c.dom.HTMLSlotElement?
        public open override /*1*/ /*fake_override*/ fun <get-assignedSlot>(): org.w3c.dom.HTMLSlotElement?
    public open override /*1*/ /*fake_override*/ val attributes: org.w3c.dom.NamedNodeMap
        public open override /*1*/ /*fake_override*/ fun <get-attributes>(): org.w3c.dom.NamedNodeMap
    public open override /*1*/ /*fake_override*/ val baseURI: kotlin.String
        public open override /*1*/ /*fake_override*/ fun <get-baseURI>(): kotlin.String
    public abstract override /*1*/ /*fake_override*/ val childElementCount: kotlin.Int
        public abstract override /*1*/ /*fake_override*/ fun <get-childElementCount>(): kotlin.Int
    public open override /*1*/ /*fake_override*/ val childNodes: org.w3c.dom.NodeList
        public open override /*1*/ /*fake_override*/ fun <get-childNodes>(): org.w3c.dom.NodeList
    public abstract override /*1*/ /*fake_override*/ val children: org.w3c.dom.HTMLCollection
        public abstract override /*1*/ /*fake_override*/ fun <get-children>(): org.w3c.dom.HTMLCollection
    public open override /*1*/ /*fake_override*/ val classList: org.w3c.dom.DOMTokenList
        public open override /*1*/ /*fake_override*/ fun <get-classList>(): org.w3c.dom.DOMTokenList
    public open override /*1*/ /*fake_override*/ var className: kotlin.String
        public open override /*1*/ /*fake_override*/ fun <get-className>(): kotlin.String
        public open override /*1*/ /*fake_override*/ fun <set-className>(/*0*/ <set-?>: kotlin.String): kotlin.Unit
    public open override /*1*/ /*fake_override*/ val clientHeight: kotlin.Int
        public open override /*1*/ /*fake_override*/ fun <get-clientHeight>(): kotlin.Int
    public open override /*1*/ /*fake_override*/ val clientLeft: kotlin.Int
        public open override /*1*/ /*fake_override*/ fun <get-clientLeft>(): kotlin.Int
    public open override /*1*/ /*fake_override*/ val clientTop: kotlin.Int
        public open override /*1*/ /*fake_override*/ fun <get-clientTop>(): kotlin.Int
    public open override /*1*/ /*fake_override*/ val clientWidth: kotlin.Int
        public open override /*1*/ /*fake_override*/ fun <get-clientWidth>(): kotlin.Int
    public open override /*1*/ /*fake_override*/ val correspondingElement: org.w3c.dom.svg.SVGElement?
        public open override /*1*/ /*fake_override*/ fun <get-correspondingElement>(): org.w3c.dom.svg.SVGElement?
    public open override /*1*/ /*fake_override*/ val correspondingUseElement: org.w3c.dom.svg.SVGUseElement?
        public open override /*1*/ /*fake_override*/ fun <get-correspondingUseElement>(): org.w3c.dom.svg.SVGUseElement?
    public open override /*1*/ /*fake_override*/ val dataset: org.w3c.dom.DOMStringMap
        public open override /*1*/ /*fake_override*/ fun <get-dataset>(): org.w3c.dom.DOMStringMap
    public open override /*1*/ /*fake_override*/ val firstChild: org.w3c.dom.Node?
        public open override /*1*/ /*fake_override*/ fun <get-firstChild>(): org.w3c.dom.Node?
    public open override /*1*/ /*fake_override*/ val firstElementChild: org.w3c.dom.Element?
        public open override /*1*/ /*fake_override*/ fun <get-firstElementChild>(): org.w3c.dom.Element?
    public open val height: org.w3c.dom.svg.SVGAnimatedLength
        public open fun <get-height>(): org.w3c.dom.svg.SVGAnimatedLength
    public abstract override /*1*/ /*fake_override*/ val href: org.w3c.dom.svg.SVGAnimatedString
        public abstract override /*1*/ /*fake_override*/ fun <get-href>(): org.w3c.dom.svg.SVGAnimatedString
    public open override /*1*/ /*fake_override*/ var id: kotlin.String
        public open override /*1*/ /*fake_override*/ fun <get-id>(): kotlin.String
        public open override /*1*/ /*fake_override*/ fun <set-id>(/*0*/ <set-?>: kotlin.String): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var innerHTML: kotlin.String
        public open override /*1*/ /*fake_override*/ fun <get-innerHTML>(): kotlin.String
        public open override /*1*/ /*fake_override*/ fun <set-innerHTML>(/*0*/ <set-?>: kotlin.String): kotlin.Unit
    public open val instanceRoot: org.w3c.dom.svg.SVGElement?
        public open fun <get-instanceRoot>(): org.w3c.dom.svg.SVGElement?
    public open override /*1*/ /*fake_override*/ val isConnected: kotlin.Boolean
        public open override /*1*/ /*fake_override*/ fun <get-isConnected>(): kotlin.Boolean
    public open override /*1*/ /*fake_override*/ val lastChild: org.w3c.dom.Node?
        public open override /*1*/ /*fake_override*/ fun <get-lastChild>(): org.w3c.dom.Node?
    public open override /*1*/ /*fake_override*/ val lastElementChild: org.w3c.dom.Element?
        public open override /*1*/ /*fake_override*/ fun <get-lastElementChild>(): org.w3c.dom.Element?
    public open override /*1*/ /*fake_override*/ val localName: kotlin.String
        public open override /*1*/ /*fake_override*/ fun <get-localName>(): kotlin.String
    public open override /*1*/ /*fake_override*/ val namespaceURI: kotlin.String?
        public open override /*1*/ /*fake_override*/ fun <get-namespaceURI>(): kotlin.String?
    public open override /*1*/ /*fake_override*/ val nextElementSibling: org.w3c.dom.Element?
        public open override /*1*/ /*fake_override*/ fun <get-nextElementSibling>(): org.w3c.dom.Element?
    public open override /*1*/ /*fake_override*/ val nextSibling: org.w3c.dom.Node?
        public open override /*1*/ /*fake_override*/ fun <get-nextSibling>(): org.w3c.dom.Node?
    public open override /*1*/ /*fake_override*/ val nodeName: kotlin.String
        public open override /*1*/ /*fake_override*/ fun <get-nodeName>(): kotlin.String
    public open override /*1*/ /*fake_override*/ val nodeType: kotlin.Short
        public open override /*1*/ /*fake_override*/ fun <get-nodeType>(): kotlin.Short
    public open override /*1*/ /*fake_override*/ var nodeValue: kotlin.String?
        public open override /*1*/ /*fake_override*/ fun <get-nodeValue>(): kotlin.String?
        public open override /*1*/ /*fake_override*/ fun <set-nodeValue>(/*0*/ <set-?>: kotlin.String?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onabort: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onabort>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onabort>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onblur: ((org.w3c.dom.events.FocusEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onblur>(): ((org.w3c.dom.events.FocusEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onblur>(/*0*/ value: ((org.w3c.dom.events.FocusEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var oncancel: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-oncancel>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-oncancel>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var oncanplay: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-oncanplay>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-oncanplay>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var oncanplaythrough: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-oncanplaythrough>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-oncanplaythrough>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onchange: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onchange>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onchange>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onclick: ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onclick>(): ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onclick>(/*0*/ value: ((org.w3c.dom.events.MouseEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onclose: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onclose>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onclose>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var oncontextmenu: ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-oncontextmenu>(): ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-oncontextmenu>(/*0*/ value: ((org.w3c.dom.events.MouseEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var oncuechange: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-oncuechange>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-oncuechange>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ondblclick: ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ondblclick>(): ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ondblclick>(/*0*/ value: ((org.w3c.dom.events.MouseEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ondrag: ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ondrag>(): ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ondrag>(/*0*/ value: ((org.w3c.dom.DragEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ondragend: ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ondragend>(): ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ondragend>(/*0*/ value: ((org.w3c.dom.DragEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ondragenter: ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ondragenter>(): ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ondragenter>(/*0*/ value: ((org.w3c.dom.DragEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ondragexit: ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ondragexit>(): ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ondragexit>(/*0*/ value: ((org.w3c.dom.DragEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ondragleave: ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ondragleave>(): ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ondragleave>(/*0*/ value: ((org.w3c.dom.DragEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ondragover: ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ondragover>(): ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ondragover>(/*0*/ value: ((org.w3c.dom.DragEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ondragstart: ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ondragstart>(): ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ondragstart>(/*0*/ value: ((org.w3c.dom.DragEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ondrop: ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ondrop>(): ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ondrop>(/*0*/ value: ((org.w3c.dom.DragEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ondurationchange: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ondurationchange>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ondurationchange>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onemptied: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onemptied>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onemptied>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onended: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onended>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onended>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onerror: ((dynamic, kotlin.String, kotlin.Int, kotlin.Int, kotlin.Any?) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onerror>(): ((dynamic, kotlin.String, kotlin.Int, kotlin.Int, kotlin.Any?) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onerror>(/*0*/ value: ((dynamic, kotlin.String, kotlin.Int, kotlin.Int, kotlin.Any?) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onfocus: ((org.w3c.dom.events.FocusEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onfocus>(): ((org.w3c.dom.events.FocusEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onfocus>(/*0*/ value: ((org.w3c.dom.events.FocusEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ongotpointercapture: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ongotpointercapture>(): ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ongotpointercapture>(/*0*/ value: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var oninput: ((org.w3c.dom.events.InputEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-oninput>(): ((org.w3c.dom.events.InputEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-oninput>(/*0*/ value: ((org.w3c.dom.events.InputEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var oninvalid: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-oninvalid>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-oninvalid>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onkeydown: ((org.w3c.dom.events.KeyboardEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onkeydown>(): ((org.w3c.dom.events.KeyboardEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onkeydown>(/*0*/ value: ((org.w3c.dom.events.KeyboardEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onkeypress: ((org.w3c.dom.events.KeyboardEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onkeypress>(): ((org.w3c.dom.events.KeyboardEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onkeypress>(/*0*/ value: ((org.w3c.dom.events.KeyboardEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onkeyup: ((org.w3c.dom.events.KeyboardEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onkeyup>(): ((org.w3c.dom.events.KeyboardEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onkeyup>(/*0*/ value: ((org.w3c.dom.events.KeyboardEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onload: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onload>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onload>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onloadeddata: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onloadeddata>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onloadeddata>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onloadedmetadata: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onloadedmetadata>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onloadedmetadata>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onloadend: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onloadend>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onloadend>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onloadstart: ((org.w3c.xhr.ProgressEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onloadstart>(): ((org.w3c.xhr.ProgressEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onloadstart>(/*0*/ value: ((org.w3c.xhr.ProgressEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onlostpointercapture: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onlostpointercapture>(): ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onlostpointercapture>(/*0*/ value: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onmousedown: ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onmousedown>(): ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onmousedown>(/*0*/ value: ((org.w3c.dom.events.MouseEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onmouseenter: ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onmouseenter>(): ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onmouseenter>(/*0*/ value: ((org.w3c.dom.events.MouseEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onmouseleave: ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onmouseleave>(): ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onmouseleave>(/*0*/ value: ((org.w3c.dom.events.MouseEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onmousemove: ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onmousemove>(): ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onmousemove>(/*0*/ value: ((org.w3c.dom.events.MouseEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onmouseout: ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onmouseout>(): ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onmouseout>(/*0*/ value: ((org.w3c.dom.events.MouseEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onmouseover: ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onmouseover>(): ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onmouseover>(/*0*/ value: ((org.w3c.dom.events.MouseEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onmouseup: ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onmouseup>(): ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onmouseup>(/*0*/ value: ((org.w3c.dom.events.MouseEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onpause: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onpause>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onpause>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onplay: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onplay>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onplay>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onplaying: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onplaying>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onplaying>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onpointercancel: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onpointercancel>(): ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onpointercancel>(/*0*/ value: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onpointerdown: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onpointerdown>(): ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onpointerdown>(/*0*/ value: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onpointerenter: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onpointerenter>(): ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onpointerenter>(/*0*/ value: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onpointerleave: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onpointerleave>(): ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onpointerleave>(/*0*/ value: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onpointermove: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onpointermove>(): ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onpointermove>(/*0*/ value: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onpointerout: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onpointerout>(): ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onpointerout>(/*0*/ value: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onpointerover: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onpointerover>(): ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onpointerover>(/*0*/ value: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onpointerup: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onpointerup>(): ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onpointerup>(/*0*/ value: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onprogress: ((org.w3c.xhr.ProgressEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onprogress>(): ((org.w3c.xhr.ProgressEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onprogress>(/*0*/ value: ((org.w3c.xhr.ProgressEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onratechange: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onratechange>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onratechange>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onreset: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onreset>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onreset>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onresize: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onresize>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onresize>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onscroll: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onscroll>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onscroll>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onseeked: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onseeked>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onseeked>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onseeking: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onseeking>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onseeking>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onselect: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onselect>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onselect>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onshow: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onshow>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onshow>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onstalled: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onstalled>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onstalled>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onsubmit: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onsubmit>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onsubmit>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onsuspend: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onsuspend>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onsuspend>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ontimeupdate: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ontimeupdate>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ontimeupdate>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ontoggle: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ontoggle>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ontoggle>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onvolumechange: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onvolumechange>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onvolumechange>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onwaiting: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onwaiting>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onwaiting>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onwheel: ((org.w3c.dom.events.WheelEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onwheel>(): ((org.w3c.dom.events.WheelEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onwheel>(/*0*/ value: ((org.w3c.dom.events.WheelEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var outerHTML: kotlin.String
        public open override /*1*/ /*fake_override*/ fun <get-outerHTML>(): kotlin.String
        public open override /*1*/ /*fake_override*/ fun <set-outerHTML>(/*0*/ <set-?>: kotlin.String): kotlin.Unit
    public open override /*1*/ /*fake_override*/ val ownerDocument: org.w3c.dom.Document?
        public open override /*1*/ /*fake_override*/ fun <get-ownerDocument>(): org.w3c.dom.Document?
    public open override /*1*/ /*fake_override*/ val ownerSVGElement: org.w3c.dom.svg.SVGSVGElement?
        public open override /*1*/ /*fake_override*/ fun <get-ownerSVGElement>(): org.w3c.dom.svg.SVGSVGElement?
    public open override /*1*/ /*fake_override*/ val parentElement: org.w3c.dom.Element?
        public open override /*1*/ /*fake_override*/ fun <get-parentElement>(): org.w3c.dom.Element?
    public open override /*1*/ /*fake_override*/ val parentNode: org.w3c.dom.Node?
        public open override /*1*/ /*fake_override*/ fun <get-parentNode>(): org.w3c.dom.Node?
    public open override /*1*/ /*fake_override*/ val prefix: kotlin.String?
        public open override /*1*/ /*fake_override*/ fun <get-prefix>(): kotlin.String?
    public open override /*1*/ /*fake_override*/ val previousElementSibling: org.w3c.dom.Element?
        public open override /*1*/ /*fake_override*/ fun <get-previousElementSibling>(): org.w3c.dom.Element?
    public open override /*1*/ /*fake_override*/ val previousSibling: org.w3c.dom.Node?
        public open override /*1*/ /*fake_override*/ fun <get-previousSibling>(): org.w3c.dom.Node?
    public abstract override /*1*/ /*fake_override*/ val requiredExtensions: org.w3c.dom.svg.SVGStringList
        public abstract override /*1*/ /*fake_override*/ fun <get-requiredExtensions>(): org.w3c.dom.svg.SVGStringList
    public open override /*1*/ /*fake_override*/ val scrollHeight: kotlin.Int
        public open override /*1*/ /*fake_override*/ fun <get-scrollHeight>(): kotlin.Int
    public open override /*1*/ /*fake_override*/ var scrollLeft: kotlin.Double
        public open override /*1*/ /*fake_override*/ fun <get-scrollLeft>(): kotlin.Double
        public open override /*1*/ /*fake_override*/ fun <set-scrollLeft>(/*0*/ <set-?>: kotlin.Double): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var scrollTop: kotlin.Double
        public open override /*1*/ /*fake_override*/ fun <get-scrollTop>(): kotlin.Double
        public open override /*1*/ /*fake_override*/ fun <set-scrollTop>(/*0*/ <set-?>: kotlin.Double): kotlin.Unit
    public open override /*1*/ /*fake_override*/ val scrollWidth: kotlin.Int
        public open override /*1*/ /*fake_override*/ fun <get-scrollWidth>(): kotlin.Int
    public open override /*1*/ /*fake_override*/ val shadowRoot: org.w3c.dom.ShadowRoot?
        public open override /*1*/ /*fake_override*/ fun <get-shadowRoot>(): org.w3c.dom.ShadowRoot?
    public open override /*1*/ /*fake_override*/ var slot: kotlin.String
        public open override /*1*/ /*fake_override*/ fun <get-slot>(): kotlin.String
        public open override /*1*/ /*fake_override*/ fun <set-slot>(/*0*/ <set-?>: kotlin.String): kotlin.Unit
    public abstract override /*1*/ /*fake_override*/ val style: org.w3c.dom.css.CSSStyleDeclaration
        public abstract override /*1*/ /*fake_override*/ fun <get-style>(): org.w3c.dom.css.CSSStyleDeclaration
    public abstract override /*1*/ /*fake_override*/ val systemLanguage: org.w3c.dom.svg.SVGStringList
        public abstract override /*1*/ /*fake_override*/ fun <get-systemLanguage>(): org.w3c.dom.svg.SVGStringList
    public open override /*1*/ /*fake_override*/ var tabIndex: kotlin.Int
        public open override /*1*/ /*fake_override*/ fun <get-tabIndex>(): kotlin.Int
        public open override /*1*/ /*fake_override*/ fun <set-tabIndex>(/*0*/ <set-?>: kotlin.Int): kotlin.Unit
    public open override /*1*/ /*fake_override*/ val tagName: kotlin.String
        public open override /*1*/ /*fake_override*/ fun <get-tagName>(): kotlin.String
    public open override /*1*/ /*fake_override*/ var textContent: kotlin.String?
        public open override /*1*/ /*fake_override*/ fun <get-textContent>(): kotlin.String?
        public open override /*1*/ /*fake_override*/ fun <set-textContent>(/*0*/ <set-?>: kotlin.String?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ val transform: org.w3c.dom.svg.SVGAnimatedTransformList
        public open override /*1*/ /*fake_override*/ fun <get-transform>(): org.w3c.dom.svg.SVGAnimatedTransformList
    public open override /*1*/ /*fake_override*/ val viewportElement: org.w3c.dom.svg.SVGElement?
        public open override /*1*/ /*fake_override*/ fun <get-viewportElement>(): org.w3c.dom.svg.SVGElement?
    public open val width: org.w3c.dom.svg.SVGAnimatedLength
        public open fun <get-width>(): org.w3c.dom.svg.SVGAnimatedLength
    public open val x: org.w3c.dom.svg.SVGAnimatedLength
        public open fun <get-x>(): org.w3c.dom.svg.SVGAnimatedLength
    public open val y: org.w3c.dom.svg.SVGAnimatedLength
        public open fun <get-y>(): org.w3c.dom.svg.SVGAnimatedLength
    public final override /*1*/ /*fake_override*/ fun addEventListener(/*0*/ type: kotlin.String, /*1*/ callback: ((org.w3c.dom.events.Event) -> kotlin.Unit)?, /*2*/ options: dynamic = ...): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun addEventListener(/*0*/ type: kotlin.String, /*1*/ callback: org.w3c.dom.events.EventListener?, /*2*/ options: dynamic = ...): kotlin.Unit
    public abstract override /*1*/ /*fake_override*/ fun after(/*0*/ vararg nodes: dynamic /*kotlin.Array<out dynamic>*/): kotlin.Unit
    public abstract override /*1*/ /*fake_override*/ fun append(/*0*/ vararg nodes: dynamic /*kotlin.Array<out dynamic>*/): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun appendChild(/*0*/ node: org.w3c.dom.Node): org.w3c.dom.Node
    public final override /*1*/ /*fake_override*/ fun attachShadow(/*0*/ init: org.w3c.dom.ShadowRootInit): org.w3c.dom.ShadowRoot
    public abstract override /*1*/ /*fake_override*/ fun before(/*0*/ vararg nodes: dynamic /*kotlin.Array<out dynamic>*/): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun blur(): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun cloneNode(/*0*/ deep: kotlin.Boolean = ...): org.w3c.dom.Node
    public final override /*1*/ /*fake_override*/ fun closest(/*0*/ selectors: kotlin.String): org.w3c.dom.Element?
    public final override /*1*/ /*fake_override*/ fun compareDocumentPosition(/*0*/ other: org.w3c.dom.Node): kotlin.Short
    public final override /*1*/ /*fake_override*/ fun contains(/*0*/ other: org.w3c.dom.Node?): kotlin.Boolean
    public abstract override /*1*/ /*fake_override*/ fun convertPointFromNode(/*0*/ point: org.w3c.dom.DOMPointInit, /*1*/ from: dynamic, /*2*/ options: org.w3c.dom.ConvertCoordinateOptions = ...): org.w3c.dom.DOMPoint
    public abstract override /*1*/ /*fake_override*/ fun convertQuadFromNode(/*0*/ quad: dynamic, /*1*/ from: dynamic, /*2*/ options: org.w3c.dom.ConvertCoordinateOptions = ...): org.w3c.dom.DOMQuad
    public abstract override /*1*/ /*fake_override*/ fun convertRectFromNode(/*0*/ rect: org.w3c.dom.DOMRectReadOnly, /*1*/ from: dynamic, /*2*/ options: org.w3c.dom.ConvertCoordinateOptions = ...): org.w3c.dom.DOMQuad
    public final override /*1*/ /*fake_override*/ fun dispatchEvent(/*0*/ event: org.w3c.dom.events.Event): kotlin.Boolean
    public open override /*2*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
    public final override /*1*/ /*fake_override*/ fun focus(): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun getAttribute(/*0*/ qualifiedName: kotlin.String): kotlin.String?
    public final override /*1*/ /*fake_override*/ fun getAttributeNS(/*0*/ namespace: kotlin.String?, /*1*/ localName: kotlin.String): kotlin.String?
    public final override /*1*/ /*fake_override*/ fun getAttributeNames(): kotlin.Array<kotlin.String>
    public final override /*1*/ /*fake_override*/ fun getAttributeNode(/*0*/ qualifiedName: kotlin.String): org.w3c.dom.Attr?
    public final override /*1*/ /*fake_override*/ fun getAttributeNodeNS(/*0*/ namespace: kotlin.String?, /*1*/ localName: kotlin.String): org.w3c.dom.Attr?
    public final override /*1*/ /*fake_override*/ fun getBBox(/*0*/ options: org.w3c.dom.svg.SVGBoundingBoxOptions = ...): org.w3c.dom.DOMRect
    public final override /*1*/ /*fake_override*/ fun getBoundingClientRect(): org.w3c.dom.DOMRect
    public abstract override /*1*/ /*fake_override*/ fun getBoxQuads(/*0*/ options: org.w3c.dom.BoxQuadOptions = ...): kotlin.Array<org.w3c.dom.DOMQuad>
    public final override /*1*/ /*fake_override*/ fun getCTM(): org.w3c.dom.DOMMatrix?
    public final override /*1*/ /*fake_override*/ fun getClientRects(): kotlin.Array<org.w3c.dom.DOMRect>
    public final override /*1*/ /*fake_override*/ fun getElementsByClassName(/*0*/ classNames: kotlin.String): org.w3c.dom.HTMLCollection
    public final override /*1*/ /*fake_override*/ fun getElementsByTagName(/*0*/ qualifiedName: kotlin.String): org.w3c.dom.HTMLCollection
    public final override /*1*/ /*fake_override*/ fun getElementsByTagNameNS(/*0*/ namespace: kotlin.String?, /*1*/ localName: kotlin.String): org.w3c.dom.HTMLCollection
    public final override /*1*/ /*fake_override*/ fun getRootNode(/*0*/ options: org.w3c.dom.GetRootNodeOptions = ...): org.w3c.dom.Node
    public final override /*1*/ /*fake_override*/ fun getScreenCTM(): org.w3c.dom.DOMMatrix?
    public final override /*1*/ /*fake_override*/ fun hasAttribute(/*0*/ qualifiedName: kotlin.String): kotlin.Boolean
    public final override /*1*/ /*fake_override*/ fun hasAttributeNS(/*0*/ namespace: kotlin.String?, /*1*/ localName: kotlin.String): kotlin.Boolean
    public final override /*1*/ /*fake_override*/ fun hasAttributes(): kotlin.Boolean
    public final override /*1*/ /*fake_override*/ fun hasChildNodes(): kotlin.Boolean
    public final override /*1*/ /*fake_override*/ fun hasPointerCapture(/*0*/ pointerId: kotlin.Int): kotlin.Boolean
    public open override /*2*/ /*fake_override*/ fun hashCode(): kotlin.Int
    public final override /*1*/ /*fake_override*/ fun insertAdjacentElement(/*0*/ where: kotlin.String, /*1*/ element: org.w3c.dom.Element): org.w3c.dom.Element?
    public final override /*1*/ /*fake_override*/ fun insertAdjacentHTML(/*0*/ position: kotlin.String, /*1*/ text: kotlin.String): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun insertAdjacentText(/*0*/ where: kotlin.String, /*1*/ data: kotlin.String): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun insertBefore(/*0*/ node: org.w3c.dom.Node, /*1*/ child: org.w3c.dom.Node?): org.w3c.dom.Node
    public final override /*1*/ /*fake_override*/ fun isDefaultNamespace(/*0*/ namespace: kotlin.String?): kotlin.Boolean
    public final override /*1*/ /*fake_override*/ fun isEqualNode(/*0*/ otherNode: org.w3c.dom.Node?): kotlin.Boolean
    public final override /*1*/ /*fake_override*/ fun isSameNode(/*0*/ otherNode: org.w3c.dom.Node?): kotlin.Boolean
    public final override /*1*/ /*fake_override*/ fun lookupNamespaceURI(/*0*/ prefix: kotlin.String?): kotlin.String?
    public final override /*1*/ /*fake_override*/ fun lookupPrefix(/*0*/ namespace: kotlin.String?): kotlin.String?
    public final override /*1*/ /*fake_override*/ fun matches(/*0*/ selectors: kotlin.String): kotlin.Boolean
    public final override /*1*/ /*fake_override*/ fun normalize(): kotlin.Unit
    public abstract override /*1*/ /*fake_override*/ fun prepend(/*0*/ vararg nodes: dynamic /*kotlin.Array<out dynamic>*/): kotlin.Unit
    public abstract override /*1*/ /*fake_override*/ fun querySelector(/*0*/ selectors: kotlin.String): org.w3c.dom.Element?
    public abstract override /*1*/ /*fake_override*/ fun querySelectorAll(/*0*/ selectors: kotlin.String): org.w3c.dom.NodeList
    public final override /*1*/ /*fake_override*/ fun releasePointerCapture(/*0*/ pointerId: kotlin.Int): kotlin.Unit
    public abstract override /*1*/ /*fake_override*/ fun remove(): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun removeAttribute(/*0*/ qualifiedName: kotlin.String): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun removeAttributeNS(/*0*/ namespace: kotlin.String?, /*1*/ localName: kotlin.String): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun removeAttributeNode(/*0*/ attr: org.w3c.dom.Attr): org.w3c.dom.Attr
    public final override /*1*/ /*fake_override*/ fun removeChild(/*0*/ child: org.w3c.dom.Node): org.w3c.dom.Node
    public final override /*1*/ /*fake_override*/ fun removeEventListener(/*0*/ type: kotlin.String, /*1*/ callback: ((org.w3c.dom.events.Event) -> kotlin.Unit)?, /*2*/ options: dynamic = ...): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun removeEventListener(/*0*/ type: kotlin.String, /*1*/ callback: org.w3c.dom.events.EventListener?, /*2*/ options: dynamic = ...): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun replaceChild(/*0*/ node: org.w3c.dom.Node, /*1*/ child: org.w3c.dom.Node): org.w3c.dom.Node
    public abstract override /*1*/ /*fake_override*/ fun replaceWith(/*0*/ vararg nodes: dynamic /*kotlin.Array<out dynamic>*/): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun requestFullscreen(): kotlin.js.Promise<kotlin.Unit>
    public final override /*1*/ /*fake_override*/ fun scroll(/*0*/ x: kotlin.Double, /*1*/ y: kotlin.Double): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun scroll(/*0*/ options: org.w3c.dom.ScrollToOptions = ...): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun scrollBy(/*0*/ x: kotlin.Double, /*1*/ y: kotlin.Double): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun scrollBy(/*0*/ options: org.w3c.dom.ScrollToOptions = ...): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun scrollIntoView(): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun scrollIntoView(/*0*/ arg: dynamic): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun scrollTo(/*0*/ x: kotlin.Double, /*1*/ y: kotlin.Double): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun scrollTo(/*0*/ options: org.w3c.dom.ScrollToOptions = ...): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun setAttribute(/*0*/ qualifiedName: kotlin.String, /*1*/ value: kotlin.String): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun setAttributeNS(/*0*/ namespace: kotlin.String?, /*1*/ qualifiedName: kotlin.String, /*2*/ value: kotlin.String): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun setAttributeNode(/*0*/ attr: org.w3c.dom.Attr): org.w3c.dom.Attr?
    public final override /*1*/ /*fake_override*/ fun setAttributeNodeNS(/*0*/ attr: org.w3c.dom.Attr): org.w3c.dom.Attr?
    public final override /*1*/ /*fake_override*/ fun setPointerCapture(/*0*/ pointerId: kotlin.Int): kotlin.Unit
    public open override /*2*/ /*fake_override*/ fun toString(): kotlin.String
    public final override /*1*/ /*fake_override*/ fun webkitMatchesSelector(/*0*/ selectors: kotlin.String): kotlin.Boolean

    public companion object Companion {
        /*primary*/ private constructor Companion()
        public final val ATTRIBUTE_NODE: kotlin.Short
            public final fun <get-ATTRIBUTE_NODE>(): kotlin.Short
        public final val CDATA_SECTION_NODE: kotlin.Short
            public final fun <get-CDATA_SECTION_NODE>(): kotlin.Short
        public final val COMMENT_NODE: kotlin.Short
            public final fun <get-COMMENT_NODE>(): kotlin.Short
        public final val DOCUMENT_FRAGMENT_NODE: kotlin.Short
            public final fun <get-DOCUMENT_FRAGMENT_NODE>(): kotlin.Short
        public final val DOCUMENT_NODE: kotlin.Short
            public final fun <get-DOCUMENT_NODE>(): kotlin.Short
        public final val DOCUMENT_POSITION_CONTAINED_BY: kotlin.Short
            public final fun <get-DOCUMENT_POSITION_CONTAINED_BY>(): kotlin.Short
        public final val DOCUMENT_POSITION_CONTAINS: kotlin.Short
            public final fun <get-DOCUMENT_POSITION_CONTAINS>(): kotlin.Short
        public final val DOCUMENT_POSITION_DISCONNECTED: kotlin.Short
            public final fun <get-DOCUMENT_POSITION_DISCONNECTED>(): kotlin.Short
        public final val DOCUMENT_POSITION_FOLLOWING: kotlin.Short
            public final fun <get-DOCUMENT_POSITION_FOLLOWING>(): kotlin.Short
        public final val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: kotlin.Short
            public final fun <get-DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC>(): kotlin.Short
        public final val DOCUMENT_POSITION_PRECEDING: kotlin.Short
            public final fun <get-DOCUMENT_POSITION_PRECEDING>(): kotlin.Short
        public final val DOCUMENT_TYPE_NODE: kotlin.Short
            public final fun <get-DOCUMENT_TYPE_NODE>(): kotlin.Short
        public final val ELEMENT_NODE: kotlin.Short
            public final fun <get-ELEMENT_NODE>(): kotlin.Short
        public final val ENTITY_NODE: kotlin.Short
            public final fun <get-ENTITY_NODE>(): kotlin.Short
        public final val ENTITY_REFERENCE_NODE: kotlin.Short
            public final fun <get-ENTITY_REFERENCE_NODE>(): kotlin.Short
        public final val NOTATION_NODE: kotlin.Short
            public final fun <get-NOTATION_NODE>(): kotlin.Short
        public final val PROCESSING_INSTRUCTION_NODE: kotlin.Short
            public final fun <get-PROCESSING_INSTRUCTION_NODE>(): kotlin.Short
        public final val TEXT_NODE: kotlin.Short
            public final fun <get-TEXT_NODE>(): kotlin.Short
        public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
        public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
        public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
    }
}

public open external class SVGUseElementShadowRoot : org.w3c.dom.ShadowRoot {
    /*primary*/ public constructor SVGUseElementShadowRoot()
    public open override /*1*/ /*fake_override*/ val baseURI: kotlin.String
        public open override /*1*/ /*fake_override*/ fun <get-baseURI>(): kotlin.String
    public open override /*1*/ /*fake_override*/ val childElementCount: kotlin.Int
        public open override /*1*/ /*fake_override*/ fun <get-childElementCount>(): kotlin.Int
    public open override /*1*/ /*fake_override*/ val childNodes: org.w3c.dom.NodeList
        public open override /*1*/ /*fake_override*/ fun <get-childNodes>(): org.w3c.dom.NodeList
    public open override /*1*/ /*fake_override*/ val children: org.w3c.dom.HTMLCollection
        public open override /*1*/ /*fake_override*/ fun <get-children>(): org.w3c.dom.HTMLCollection
    public open override /*1*/ /*fake_override*/ val firstChild: org.w3c.dom.Node?
        public open override /*1*/ /*fake_override*/ fun <get-firstChild>(): org.w3c.dom.Node?
    public open override /*1*/ /*fake_override*/ val firstElementChild: org.w3c.dom.Element?
        public open override /*1*/ /*fake_override*/ fun <get-firstElementChild>(): org.w3c.dom.Element?
    public open override /*1*/ /*fake_override*/ val fullscreenElement: org.w3c.dom.Element?
        public open override /*1*/ /*fake_override*/ fun <get-fullscreenElement>(): org.w3c.dom.Element?
    public open override /*1*/ /*fake_override*/ val host: org.w3c.dom.Element
        public open override /*1*/ /*fake_override*/ fun <get-host>(): org.w3c.dom.Element
    public open override /*1*/ /*fake_override*/ val isConnected: kotlin.Boolean
        public open override /*1*/ /*fake_override*/ fun <get-isConnected>(): kotlin.Boolean
    public open override /*1*/ /*fake_override*/ val lastChild: org.w3c.dom.Node?
        public open override /*1*/ /*fake_override*/ fun <get-lastChild>(): org.w3c.dom.Node?
    public open override /*1*/ /*fake_override*/ val lastElementChild: org.w3c.dom.Element?
        public open override /*1*/ /*fake_override*/ fun <get-lastElementChild>(): org.w3c.dom.Element?
    public open override /*1*/ /*fake_override*/ val mode: org.w3c.dom.ShadowRootMode
        public open override /*1*/ /*fake_override*/ fun <get-mode>(): org.w3c.dom.ShadowRootMode
    public open override /*1*/ /*fake_override*/ val nextSibling: org.w3c.dom.Node?
        public open override /*1*/ /*fake_override*/ fun <get-nextSibling>(): org.w3c.dom.Node?
    public open override /*1*/ /*fake_override*/ val nodeName: kotlin.String
        public open override /*1*/ /*fake_override*/ fun <get-nodeName>(): kotlin.String
    public open override /*1*/ /*fake_override*/ val nodeType: kotlin.Short
        public open override /*1*/ /*fake_override*/ fun <get-nodeType>(): kotlin.Short
    public open override /*1*/ /*fake_override*/ var nodeValue: kotlin.String?
        public open override /*1*/ /*fake_override*/ fun <get-nodeValue>(): kotlin.String?
        public open override /*1*/ /*fake_override*/ fun <set-nodeValue>(/*0*/ <set-?>: kotlin.String?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ val ownerDocument: org.w3c.dom.Document?
        public open override /*1*/ /*fake_override*/ fun <get-ownerDocument>(): org.w3c.dom.Document?
    public open override /*1*/ /*fake_override*/ val parentElement: org.w3c.dom.Element?
        public open override /*1*/ /*fake_override*/ fun <get-parentElement>(): org.w3c.dom.Element?
    public open override /*1*/ /*fake_override*/ val parentNode: org.w3c.dom.Node?
        public open override /*1*/ /*fake_override*/ fun <get-parentNode>(): org.w3c.dom.Node?
    public open override /*1*/ /*fake_override*/ val previousSibling: org.w3c.dom.Node?
        public open override /*1*/ /*fake_override*/ fun <get-previousSibling>(): org.w3c.dom.Node?
    public open override /*1*/ /*fake_override*/ var textContent: kotlin.String?
        public open override /*1*/ /*fake_override*/ fun <get-textContent>(): kotlin.String?
        public open override /*1*/ /*fake_override*/ fun <set-textContent>(/*0*/ <set-?>: kotlin.String?): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun addEventListener(/*0*/ type: kotlin.String, /*1*/ callback: ((org.w3c.dom.events.Event) -> kotlin.Unit)?, /*2*/ options: dynamic = ...): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun addEventListener(/*0*/ type: kotlin.String, /*1*/ callback: org.w3c.dom.events.EventListener?, /*2*/ options: dynamic = ...): kotlin.Unit
    public open override /*1*/ /*fake_override*/ fun append(/*0*/ vararg nodes: dynamic /*kotlin.Array<out dynamic>*/): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun appendChild(/*0*/ node: org.w3c.dom.Node): org.w3c.dom.Node
    public final override /*1*/ /*fake_override*/ fun cloneNode(/*0*/ deep: kotlin.Boolean = ...): org.w3c.dom.Node
    public final override /*1*/ /*fake_override*/ fun compareDocumentPosition(/*0*/ other: org.w3c.dom.Node): kotlin.Short
    public final override /*1*/ /*fake_override*/ fun contains(/*0*/ other: org.w3c.dom.Node?): kotlin.Boolean
    public final override /*1*/ /*fake_override*/ fun dispatchEvent(/*0*/ event: org.w3c.dom.events.Event): kotlin.Boolean
    public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
    public open override /*1*/ /*fake_override*/ fun getElementById(/*0*/ elementId: kotlin.String): org.w3c.dom.Element?
    public final override /*1*/ /*fake_override*/ fun getRootNode(/*0*/ options: org.w3c.dom.GetRootNodeOptions = ...): org.w3c.dom.Node
    public final override /*1*/ /*fake_override*/ fun hasChildNodes(): kotlin.Boolean
    public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
    public final override /*1*/ /*fake_override*/ fun insertBefore(/*0*/ node: org.w3c.dom.Node, /*1*/ child: org.w3c.dom.Node?): org.w3c.dom.Node
    public final override /*1*/ /*fake_override*/ fun isDefaultNamespace(/*0*/ namespace: kotlin.String?): kotlin.Boolean
    public final override /*1*/ /*fake_override*/ fun isEqualNode(/*0*/ otherNode: org.w3c.dom.Node?): kotlin.Boolean
    public final override /*1*/ /*fake_override*/ fun isSameNode(/*0*/ otherNode: org.w3c.dom.Node?): kotlin.Boolean
    public final override /*1*/ /*fake_override*/ fun lookupNamespaceURI(/*0*/ prefix: kotlin.String?): kotlin.String?
    public final override /*1*/ /*fake_override*/ fun lookupPrefix(/*0*/ namespace: kotlin.String?): kotlin.String?
    public final override /*1*/ /*fake_override*/ fun normalize(): kotlin.Unit
    public open override /*1*/ /*fake_override*/ fun prepend(/*0*/ vararg nodes: dynamic /*kotlin.Array<out dynamic>*/): kotlin.Unit
    public open override /*1*/ /*fake_override*/ fun querySelector(/*0*/ selectors: kotlin.String): org.w3c.dom.Element?
    public open override /*1*/ /*fake_override*/ fun querySelectorAll(/*0*/ selectors: kotlin.String): org.w3c.dom.NodeList
    public final override /*1*/ /*fake_override*/ fun removeChild(/*0*/ child: org.w3c.dom.Node): org.w3c.dom.Node
    public final override /*1*/ /*fake_override*/ fun removeEventListener(/*0*/ type: kotlin.String, /*1*/ callback: ((org.w3c.dom.events.Event) -> kotlin.Unit)?, /*2*/ options: dynamic = ...): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun removeEventListener(/*0*/ type: kotlin.String, /*1*/ callback: org.w3c.dom.events.EventListener?, /*2*/ options: dynamic = ...): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun replaceChild(/*0*/ node: org.w3c.dom.Node, /*1*/ child: org.w3c.dom.Node): org.w3c.dom.Node
    public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String

    public companion object Companion {
        /*primary*/ private constructor Companion()
        public final val ATTRIBUTE_NODE: kotlin.Short
            public final fun <get-ATTRIBUTE_NODE>(): kotlin.Short
        public final val CDATA_SECTION_NODE: kotlin.Short
            public final fun <get-CDATA_SECTION_NODE>(): kotlin.Short
        public final val COMMENT_NODE: kotlin.Short
            public final fun <get-COMMENT_NODE>(): kotlin.Short
        public final val DOCUMENT_FRAGMENT_NODE: kotlin.Short
            public final fun <get-DOCUMENT_FRAGMENT_NODE>(): kotlin.Short
        public final val DOCUMENT_NODE: kotlin.Short
            public final fun <get-DOCUMENT_NODE>(): kotlin.Short
        public final val DOCUMENT_POSITION_CONTAINED_BY: kotlin.Short
            public final fun <get-DOCUMENT_POSITION_CONTAINED_BY>(): kotlin.Short
        public final val DOCUMENT_POSITION_CONTAINS: kotlin.Short
            public final fun <get-DOCUMENT_POSITION_CONTAINS>(): kotlin.Short
        public final val DOCUMENT_POSITION_DISCONNECTED: kotlin.Short
            public final fun <get-DOCUMENT_POSITION_DISCONNECTED>(): kotlin.Short
        public final val DOCUMENT_POSITION_FOLLOWING: kotlin.Short
            public final fun <get-DOCUMENT_POSITION_FOLLOWING>(): kotlin.Short
        public final val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: kotlin.Short
            public final fun <get-DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC>(): kotlin.Short
        public final val DOCUMENT_POSITION_PRECEDING: kotlin.Short
            public final fun <get-DOCUMENT_POSITION_PRECEDING>(): kotlin.Short
        public final val DOCUMENT_TYPE_NODE: kotlin.Short
            public final fun <get-DOCUMENT_TYPE_NODE>(): kotlin.Short
        public final val ELEMENT_NODE: kotlin.Short
            public final fun <get-ELEMENT_NODE>(): kotlin.Short
        public final val ENTITY_NODE: kotlin.Short
            public final fun <get-ENTITY_NODE>(): kotlin.Short
        public final val ENTITY_REFERENCE_NODE: kotlin.Short
            public final fun <get-ENTITY_REFERENCE_NODE>(): kotlin.Short
        public final val NOTATION_NODE: kotlin.Short
            public final fun <get-NOTATION_NODE>(): kotlin.Short
        public final val PROCESSING_INSTRUCTION_NODE: kotlin.Short
            public final fun <get-PROCESSING_INSTRUCTION_NODE>(): kotlin.Short
        public final val TEXT_NODE: kotlin.Short
            public final fun <get-TEXT_NODE>(): kotlin.Short
        public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
        public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
        public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
    }
}

public abstract external class SVGViewElement : org.w3c.dom.svg.SVGElement, org.w3c.dom.svg.SVGFitToViewBox, org.w3c.dom.svg.SVGZoomAndPan {
    /*primary*/ public constructor SVGViewElement()
    public open override /*1*/ /*fake_override*/ val assignedSlot: org.w3c.dom.HTMLSlotElement?
        public open override /*1*/ /*fake_override*/ fun <get-assignedSlot>(): org.w3c.dom.HTMLSlotElement?
    public open override /*1*/ /*fake_override*/ val attributes: org.w3c.dom.NamedNodeMap
        public open override /*1*/ /*fake_override*/ fun <get-attributes>(): org.w3c.dom.NamedNodeMap
    public open override /*1*/ /*fake_override*/ val baseURI: kotlin.String
        public open override /*1*/ /*fake_override*/ fun <get-baseURI>(): kotlin.String
    public abstract override /*1*/ /*fake_override*/ val childElementCount: kotlin.Int
        public abstract override /*1*/ /*fake_override*/ fun <get-childElementCount>(): kotlin.Int
    public open override /*1*/ /*fake_override*/ val childNodes: org.w3c.dom.NodeList
        public open override /*1*/ /*fake_override*/ fun <get-childNodes>(): org.w3c.dom.NodeList
    public abstract override /*1*/ /*fake_override*/ val children: org.w3c.dom.HTMLCollection
        public abstract override /*1*/ /*fake_override*/ fun <get-children>(): org.w3c.dom.HTMLCollection
    public open override /*1*/ /*fake_override*/ val classList: org.w3c.dom.DOMTokenList
        public open override /*1*/ /*fake_override*/ fun <get-classList>(): org.w3c.dom.DOMTokenList
    public open override /*1*/ /*fake_override*/ var className: kotlin.String
        public open override /*1*/ /*fake_override*/ fun <get-className>(): kotlin.String
        public open override /*1*/ /*fake_override*/ fun <set-className>(/*0*/ <set-?>: kotlin.String): kotlin.Unit
    public open override /*1*/ /*fake_override*/ val clientHeight: kotlin.Int
        public open override /*1*/ /*fake_override*/ fun <get-clientHeight>(): kotlin.Int
    public open override /*1*/ /*fake_override*/ val clientLeft: kotlin.Int
        public open override /*1*/ /*fake_override*/ fun <get-clientLeft>(): kotlin.Int
    public open override /*1*/ /*fake_override*/ val clientTop: kotlin.Int
        public open override /*1*/ /*fake_override*/ fun <get-clientTop>(): kotlin.Int
    public open override /*1*/ /*fake_override*/ val clientWidth: kotlin.Int
        public open override /*1*/ /*fake_override*/ fun <get-clientWidth>(): kotlin.Int
    public open override /*1*/ /*fake_override*/ val correspondingElement: org.w3c.dom.svg.SVGElement?
        public open override /*1*/ /*fake_override*/ fun <get-correspondingElement>(): org.w3c.dom.svg.SVGElement?
    public open override /*1*/ /*fake_override*/ val correspondingUseElement: org.w3c.dom.svg.SVGUseElement?
        public open override /*1*/ /*fake_override*/ fun <get-correspondingUseElement>(): org.w3c.dom.svg.SVGUseElement?
    public open override /*1*/ /*fake_override*/ val dataset: org.w3c.dom.DOMStringMap
        public open override /*1*/ /*fake_override*/ fun <get-dataset>(): org.w3c.dom.DOMStringMap
    public open override /*1*/ /*fake_override*/ val firstChild: org.w3c.dom.Node?
        public open override /*1*/ /*fake_override*/ fun <get-firstChild>(): org.w3c.dom.Node?
    public open override /*1*/ /*fake_override*/ val firstElementChild: org.w3c.dom.Element?
        public open override /*1*/ /*fake_override*/ fun <get-firstElementChild>(): org.w3c.dom.Element?
    public open override /*1*/ /*fake_override*/ var id: kotlin.String
        public open override /*1*/ /*fake_override*/ fun <get-id>(): kotlin.String
        public open override /*1*/ /*fake_override*/ fun <set-id>(/*0*/ <set-?>: kotlin.String): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var innerHTML: kotlin.String
        public open override /*1*/ /*fake_override*/ fun <get-innerHTML>(): kotlin.String
        public open override /*1*/ /*fake_override*/ fun <set-innerHTML>(/*0*/ <set-?>: kotlin.String): kotlin.Unit
    public open override /*1*/ /*fake_override*/ val isConnected: kotlin.Boolean
        public open override /*1*/ /*fake_override*/ fun <get-isConnected>(): kotlin.Boolean
    public open override /*1*/ /*fake_override*/ val lastChild: org.w3c.dom.Node?
        public open override /*1*/ /*fake_override*/ fun <get-lastChild>(): org.w3c.dom.Node?
    public open override /*1*/ /*fake_override*/ val lastElementChild: org.w3c.dom.Element?
        public open override /*1*/ /*fake_override*/ fun <get-lastElementChild>(): org.w3c.dom.Element?
    public open override /*1*/ /*fake_override*/ val localName: kotlin.String
        public open override /*1*/ /*fake_override*/ fun <get-localName>(): kotlin.String
    public open override /*1*/ /*fake_override*/ val namespaceURI: kotlin.String?
        public open override /*1*/ /*fake_override*/ fun <get-namespaceURI>(): kotlin.String?
    public open override /*1*/ /*fake_override*/ val nextElementSibling: org.w3c.dom.Element?
        public open override /*1*/ /*fake_override*/ fun <get-nextElementSibling>(): org.w3c.dom.Element?
    public open override /*1*/ /*fake_override*/ val nextSibling: org.w3c.dom.Node?
        public open override /*1*/ /*fake_override*/ fun <get-nextSibling>(): org.w3c.dom.Node?
    public open override /*1*/ /*fake_override*/ val nodeName: kotlin.String
        public open override /*1*/ /*fake_override*/ fun <get-nodeName>(): kotlin.String
    public open override /*1*/ /*fake_override*/ val nodeType: kotlin.Short
        public open override /*1*/ /*fake_override*/ fun <get-nodeType>(): kotlin.Short
    public open override /*1*/ /*fake_override*/ var nodeValue: kotlin.String?
        public open override /*1*/ /*fake_override*/ fun <get-nodeValue>(): kotlin.String?
        public open override /*1*/ /*fake_override*/ fun <set-nodeValue>(/*0*/ <set-?>: kotlin.String?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onabort: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onabort>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onabort>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onblur: ((org.w3c.dom.events.FocusEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onblur>(): ((org.w3c.dom.events.FocusEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onblur>(/*0*/ value: ((org.w3c.dom.events.FocusEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var oncancel: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-oncancel>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-oncancel>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var oncanplay: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-oncanplay>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-oncanplay>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var oncanplaythrough: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-oncanplaythrough>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-oncanplaythrough>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onchange: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onchange>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onchange>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onclick: ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onclick>(): ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onclick>(/*0*/ value: ((org.w3c.dom.events.MouseEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onclose: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onclose>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onclose>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var oncontextmenu: ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-oncontextmenu>(): ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-oncontextmenu>(/*0*/ value: ((org.w3c.dom.events.MouseEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var oncuechange: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-oncuechange>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-oncuechange>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ondblclick: ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ondblclick>(): ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ondblclick>(/*0*/ value: ((org.w3c.dom.events.MouseEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ondrag: ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ondrag>(): ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ondrag>(/*0*/ value: ((org.w3c.dom.DragEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ondragend: ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ondragend>(): ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ondragend>(/*0*/ value: ((org.w3c.dom.DragEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ondragenter: ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ondragenter>(): ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ondragenter>(/*0*/ value: ((org.w3c.dom.DragEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ondragexit: ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ondragexit>(): ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ondragexit>(/*0*/ value: ((org.w3c.dom.DragEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ondragleave: ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ondragleave>(): ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ondragleave>(/*0*/ value: ((org.w3c.dom.DragEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ondragover: ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ondragover>(): ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ondragover>(/*0*/ value: ((org.w3c.dom.DragEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ondragstart: ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ondragstart>(): ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ondragstart>(/*0*/ value: ((org.w3c.dom.DragEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ondrop: ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ondrop>(): ((org.w3c.dom.DragEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ondrop>(/*0*/ value: ((org.w3c.dom.DragEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ondurationchange: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ondurationchange>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ondurationchange>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onemptied: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onemptied>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onemptied>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onended: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onended>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onended>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onerror: ((dynamic, kotlin.String, kotlin.Int, kotlin.Int, kotlin.Any?) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onerror>(): ((dynamic, kotlin.String, kotlin.Int, kotlin.Int, kotlin.Any?) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onerror>(/*0*/ value: ((dynamic, kotlin.String, kotlin.Int, kotlin.Int, kotlin.Any?) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onfocus: ((org.w3c.dom.events.FocusEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onfocus>(): ((org.w3c.dom.events.FocusEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onfocus>(/*0*/ value: ((org.w3c.dom.events.FocusEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ongotpointercapture: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ongotpointercapture>(): ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ongotpointercapture>(/*0*/ value: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var oninput: ((org.w3c.dom.events.InputEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-oninput>(): ((org.w3c.dom.events.InputEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-oninput>(/*0*/ value: ((org.w3c.dom.events.InputEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var oninvalid: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-oninvalid>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-oninvalid>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onkeydown: ((org.w3c.dom.events.KeyboardEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onkeydown>(): ((org.w3c.dom.events.KeyboardEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onkeydown>(/*0*/ value: ((org.w3c.dom.events.KeyboardEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onkeypress: ((org.w3c.dom.events.KeyboardEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onkeypress>(): ((org.w3c.dom.events.KeyboardEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onkeypress>(/*0*/ value: ((org.w3c.dom.events.KeyboardEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onkeyup: ((org.w3c.dom.events.KeyboardEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onkeyup>(): ((org.w3c.dom.events.KeyboardEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onkeyup>(/*0*/ value: ((org.w3c.dom.events.KeyboardEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onload: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onload>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onload>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onloadeddata: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onloadeddata>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onloadeddata>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onloadedmetadata: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onloadedmetadata>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onloadedmetadata>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onloadend: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onloadend>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onloadend>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onloadstart: ((org.w3c.xhr.ProgressEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onloadstart>(): ((org.w3c.xhr.ProgressEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onloadstart>(/*0*/ value: ((org.w3c.xhr.ProgressEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onlostpointercapture: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onlostpointercapture>(): ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onlostpointercapture>(/*0*/ value: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onmousedown: ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onmousedown>(): ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onmousedown>(/*0*/ value: ((org.w3c.dom.events.MouseEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onmouseenter: ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onmouseenter>(): ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onmouseenter>(/*0*/ value: ((org.w3c.dom.events.MouseEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onmouseleave: ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onmouseleave>(): ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onmouseleave>(/*0*/ value: ((org.w3c.dom.events.MouseEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onmousemove: ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onmousemove>(): ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onmousemove>(/*0*/ value: ((org.w3c.dom.events.MouseEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onmouseout: ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onmouseout>(): ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onmouseout>(/*0*/ value: ((org.w3c.dom.events.MouseEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onmouseover: ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onmouseover>(): ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onmouseover>(/*0*/ value: ((org.w3c.dom.events.MouseEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onmouseup: ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onmouseup>(): ((org.w3c.dom.events.MouseEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onmouseup>(/*0*/ value: ((org.w3c.dom.events.MouseEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onpause: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onpause>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onpause>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onplay: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onplay>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onplay>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onplaying: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onplaying>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onplaying>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onpointercancel: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onpointercancel>(): ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onpointercancel>(/*0*/ value: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onpointerdown: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onpointerdown>(): ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onpointerdown>(/*0*/ value: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onpointerenter: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onpointerenter>(): ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onpointerenter>(/*0*/ value: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onpointerleave: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onpointerleave>(): ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onpointerleave>(/*0*/ value: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onpointermove: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onpointermove>(): ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onpointermove>(/*0*/ value: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onpointerout: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onpointerout>(): ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onpointerout>(/*0*/ value: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onpointerover: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onpointerover>(): ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onpointerover>(/*0*/ value: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onpointerup: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onpointerup>(): ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onpointerup>(/*0*/ value: ((org.w3c.dom.pointerevents.PointerEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onprogress: ((org.w3c.xhr.ProgressEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onprogress>(): ((org.w3c.xhr.ProgressEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onprogress>(/*0*/ value: ((org.w3c.xhr.ProgressEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onratechange: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onratechange>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onratechange>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onreset: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onreset>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onreset>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onresize: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onresize>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onresize>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onscroll: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onscroll>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onscroll>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onseeked: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onseeked>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onseeked>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onseeking: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onseeking>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onseeking>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onselect: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onselect>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onselect>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onshow: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onshow>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onshow>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onstalled: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onstalled>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onstalled>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onsubmit: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onsubmit>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onsubmit>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onsuspend: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onsuspend>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onsuspend>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ontimeupdate: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ontimeupdate>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ontimeupdate>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var ontoggle: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-ontoggle>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-ontoggle>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onvolumechange: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onvolumechange>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onvolumechange>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onwaiting: ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onwaiting>(): ((org.w3c.dom.events.Event) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onwaiting>(/*0*/ value: ((org.w3c.dom.events.Event) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var onwheel: ((org.w3c.dom.events.WheelEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <get-onwheel>(): ((org.w3c.dom.events.WheelEvent) -> dynamic)?
        public open override /*1*/ /*fake_override*/ fun <set-onwheel>(/*0*/ value: ((org.w3c.dom.events.WheelEvent) -> dynamic)?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var outerHTML: kotlin.String
        public open override /*1*/ /*fake_override*/ fun <get-outerHTML>(): kotlin.String
        public open override /*1*/ /*fake_override*/ fun <set-outerHTML>(/*0*/ <set-?>: kotlin.String): kotlin.Unit
    public open override /*1*/ /*fake_override*/ val ownerDocument: org.w3c.dom.Document?
        public open override /*1*/ /*fake_override*/ fun <get-ownerDocument>(): org.w3c.dom.Document?
    public open override /*1*/ /*fake_override*/ val ownerSVGElement: org.w3c.dom.svg.SVGSVGElement?
        public open override /*1*/ /*fake_override*/ fun <get-ownerSVGElement>(): org.w3c.dom.svg.SVGSVGElement?
    public open override /*1*/ /*fake_override*/ val parentElement: org.w3c.dom.Element?
        public open override /*1*/ /*fake_override*/ fun <get-parentElement>(): org.w3c.dom.Element?
    public open override /*1*/ /*fake_override*/ val parentNode: org.w3c.dom.Node?
        public open override /*1*/ /*fake_override*/ fun <get-parentNode>(): org.w3c.dom.Node?
    public open override /*1*/ /*fake_override*/ val prefix: kotlin.String?
        public open override /*1*/ /*fake_override*/ fun <get-prefix>(): kotlin.String?
    public abstract override /*1*/ /*fake_override*/ val preserveAspectRatio: org.w3c.dom.svg.SVGAnimatedPreserveAspectRatio
        public abstract override /*1*/ /*fake_override*/ fun <get-preserveAspectRatio>(): org.w3c.dom.svg.SVGAnimatedPreserveAspectRatio
    public open override /*1*/ /*fake_override*/ val previousElementSibling: org.w3c.dom.Element?
        public open override /*1*/ /*fake_override*/ fun <get-previousElementSibling>(): org.w3c.dom.Element?
    public open override /*1*/ /*fake_override*/ val previousSibling: org.w3c.dom.Node?
        public open override /*1*/ /*fake_override*/ fun <get-previousSibling>(): org.w3c.dom.Node?
    public open override /*1*/ /*fake_override*/ val scrollHeight: kotlin.Int
        public open override /*1*/ /*fake_override*/ fun <get-scrollHeight>(): kotlin.Int
    public open override /*1*/ /*fake_override*/ var scrollLeft: kotlin.Double
        public open override /*1*/ /*fake_override*/ fun <get-scrollLeft>(): kotlin.Double
        public open override /*1*/ /*fake_override*/ fun <set-scrollLeft>(/*0*/ <set-?>: kotlin.Double): kotlin.Unit
    public open override /*1*/ /*fake_override*/ var scrollTop: kotlin.Double
        public open override /*1*/ /*fake_override*/ fun <get-scrollTop>(): kotlin.Double
        public open override /*1*/ /*fake_override*/ fun <set-scrollTop>(/*0*/ <set-?>: kotlin.Double): kotlin.Unit
    public open override /*1*/ /*fake_override*/ val scrollWidth: kotlin.Int
        public open override /*1*/ /*fake_override*/ fun <get-scrollWidth>(): kotlin.Int
    public open override /*1*/ /*fake_override*/ val shadowRoot: org.w3c.dom.ShadowRoot?
        public open override /*1*/ /*fake_override*/ fun <get-shadowRoot>(): org.w3c.dom.ShadowRoot?
    public open override /*1*/ /*fake_override*/ var slot: kotlin.String
        public open override /*1*/ /*fake_override*/ fun <get-slot>(): kotlin.String
        public open override /*1*/ /*fake_override*/ fun <set-slot>(/*0*/ <set-?>: kotlin.String): kotlin.Unit
    public abstract override /*1*/ /*fake_override*/ val style: org.w3c.dom.css.CSSStyleDeclaration
        public abstract override /*1*/ /*fake_override*/ fun <get-style>(): org.w3c.dom.css.CSSStyleDeclaration
    public open override /*1*/ /*fake_override*/ var tabIndex: kotlin.Int
        public open override /*1*/ /*fake_override*/ fun <get-tabIndex>(): kotlin.Int
        public open override /*1*/ /*fake_override*/ fun <set-tabIndex>(/*0*/ <set-?>: kotlin.Int): kotlin.Unit
    public open override /*1*/ /*fake_override*/ val tagName: kotlin.String
        public open override /*1*/ /*fake_override*/ fun <get-tagName>(): kotlin.String
    public open override /*1*/ /*fake_override*/ var textContent: kotlin.String?
        public open override /*1*/ /*fake_override*/ fun <get-textContent>(): kotlin.String?
        public open override /*1*/ /*fake_override*/ fun <set-textContent>(/*0*/ <set-?>: kotlin.String?): kotlin.Unit
    public abstract override /*1*/ /*fake_override*/ val viewBox: org.w3c.dom.svg.SVGAnimatedRect
        public abstract override /*1*/ /*fake_override*/ fun <get-viewBox>(): org.w3c.dom.svg.SVGAnimatedRect
    public open override /*1*/ /*fake_override*/ val viewportElement: org.w3c.dom.svg.SVGElement?
        public open override /*1*/ /*fake_override*/ fun <get-viewportElement>(): org.w3c.dom.svg.SVGElement?
    public abstract override /*1*/ /*fake_override*/ var zoomAndPan: kotlin.Short
        public abstract override /*1*/ /*fake_override*/ fun <get-zoomAndPan>(): kotlin.Short
        public abstract override /*1*/ /*fake_override*/ fun <set-zoomAndPan>(/*0*/ <set-?>: kotlin.Short): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun addEventListener(/*0*/ type: kotlin.String, /*1*/ callback: ((org.w3c.dom.events.Event) -> kotlin.Unit)?, /*2*/ options: dynamic = ...): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun addEventListener(/*0*/ type: kotlin.String, /*1*/ callback: org.w3c.dom.events.EventListener?, /*2*/ options: dynamic = ...): kotlin.Unit
    public abstract override /*1*/ /*fake_override*/ fun after(/*0*/ vararg nodes: dynamic /*kotlin.Array<out dynamic>*/): kotlin.Unit
    public abstract override /*1*/ /*fake_override*/ fun append(/*0*/ vararg nodes: dynamic /*kotlin.Array<out dynamic>*/): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun appendChild(/*0*/ node: org.w3c.dom.Node): org.w3c.dom.Node
    public final override /*1*/ /*fake_override*/ fun attachShadow(/*0*/ init: org.w3c.dom.ShadowRootInit): org.w3c.dom.ShadowRoot
    public abstract override /*1*/ /*fake_override*/ fun before(/*0*/ vararg nodes: dynamic /*kotlin.Array<out dynamic>*/): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun blur(): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun cloneNode(/*0*/ deep: kotlin.Boolean = ...): org.w3c.dom.Node
    public final override /*1*/ /*fake_override*/ fun closest(/*0*/ selectors: kotlin.String): org.w3c.dom.Element?
    public final override /*1*/ /*fake_override*/ fun compareDocumentPosition(/*0*/ other: org.w3c.dom.Node): kotlin.Short
    public final override /*1*/ /*fake_override*/ fun contains(/*0*/ other: org.w3c.dom.Node?): kotlin.Boolean
    public abstract override /*1*/ /*fake_override*/ fun convertPointFromNode(/*0*/ point: org.w3c.dom.DOMPointInit, /*1*/ from: dynamic, /*2*/ options: org.w3c.dom.ConvertCoordinateOptions = ...): org.w3c.dom.DOMPoint
    public abstract override /*1*/ /*fake_override*/ fun convertQuadFromNode(/*0*/ quad: dynamic, /*1*/ from: dynamic, /*2*/ options: org.w3c.dom.ConvertCoordinateOptions = ...): org.w3c.dom.DOMQuad
    public abstract override /*1*/ /*fake_override*/ fun convertRectFromNode(/*0*/ rect: org.w3c.dom.DOMRectReadOnly, /*1*/ from: dynamic, /*2*/ options: org.w3c.dom.ConvertCoordinateOptions = ...): org.w3c.dom.DOMQuad
    public final override /*1*/ /*fake_override*/ fun dispatchEvent(/*0*/ event: org.w3c.dom.events.Event): kotlin.Boolean
    public open override /*3*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
    public final override /*1*/ /*fake_override*/ fun focus(): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun getAttribute(/*0*/ qualifiedName: kotlin.String): kotlin.String?
    public final override /*1*/ /*fake_override*/ fun getAttributeNS(/*0*/ namespace: kotlin.String?, /*1*/ localName: kotlin.String): kotlin.String?
    public final override /*1*/ /*fake_override*/ fun getAttributeNames(): kotlin.Array<kotlin.String>
    public final override /*1*/ /*fake_override*/ fun getAttributeNode(/*0*/ qualifiedName: kotlin.String): org.w3c.dom.Attr?
    public final override /*1*/ /*fake_override*/ fun getAttributeNodeNS(/*0*/ namespace: kotlin.String?, /*1*/ localName: kotlin.String): org.w3c.dom.Attr?
    public final override /*1*/ /*fake_override*/ fun getBoundingClientRect(): org.w3c.dom.DOMRect
    public abstract override /*1*/ /*fake_override*/ fun getBoxQuads(/*0*/ options: org.w3c.dom.BoxQuadOptions = ...): kotlin.Array<org.w3c.dom.DOMQuad>
    public final override /*1*/ /*fake_override*/ fun getClientRects(): kotlin.Array<org.w3c.dom.DOMRect>
    public final override /*1*/ /*fake_override*/ fun getElementsByClassName(/*0*/ classNames: kotlin.String): org.w3c.dom.HTMLCollection
    public final override /*1*/ /*fake_override*/ fun getElementsByTagName(/*0*/ qualifiedName: kotlin.String): org.w3c.dom.HTMLCollection
    public final override /*1*/ /*fake_override*/ fun getElementsByTagNameNS(/*0*/ namespace: kotlin.String?, /*1*/ localName: kotlin.String): org.w3c.dom.HTMLCollection
    public final override /*1*/ /*fake_override*/ fun getRootNode(/*0*/ options: org.w3c.dom.GetRootNodeOptions = ...): org.w3c.dom.Node
    public final override /*1*/ /*fake_override*/ fun hasAttribute(/*0*/ qualifiedName: kotlin.String): kotlin.Boolean
    public final override /*1*/ /*fake_override*/ fun hasAttributeNS(/*0*/ namespace: kotlin.String?, /*1*/ localName: kotlin.String): kotlin.Boolean
    public final override /*1*/ /*fake_override*/ fun hasAttributes(): kotlin.Boolean
    public final override /*1*/ /*fake_override*/ fun hasChildNodes(): kotlin.Boolean
    public final override /*1*/ /*fake_override*/ fun hasPointerCapture(/*0*/ pointerId: kotlin.Int): kotlin.Boolean
    public open override /*3*/ /*fake_override*/ fun hashCode(): kotlin.Int
    public final override /*1*/ /*fake_override*/ fun insertAdjacentElement(/*0*/ where: kotlin.String, /*1*/ element: org.w3c.dom.Element): org.w3c.dom.Element?
    public final override /*1*/ /*fake_override*/ fun insertAdjacentHTML(/*0*/ position: kotlin.String, /*1*/ text: kotlin.String): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun insertAdjacentText(/*0*/ where: kotlin.String, /*1*/ data: kotlin.String): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun insertBefore(/*0*/ node: org.w3c.dom.Node, /*1*/ child: org.w3c.dom.Node?): org.w3c.dom.Node
    public final override /*1*/ /*fake_override*/ fun isDefaultNamespace(/*0*/ namespace: kotlin.String?): kotlin.Boolean
    public final override /*1*/ /*fake_override*/ fun isEqualNode(/*0*/ otherNode: org.w3c.dom.Node?): kotlin.Boolean
    public final override /*1*/ /*fake_override*/ fun isSameNode(/*0*/ otherNode: org.w3c.dom.Node?): kotlin.Boolean
    public final override /*1*/ /*fake_override*/ fun lookupNamespaceURI(/*0*/ prefix: kotlin.String?): kotlin.String?
    public final override /*1*/ /*fake_override*/ fun lookupPrefix(/*0*/ namespace: kotlin.String?): kotlin.String?
    public final override /*1*/ /*fake_override*/ fun matches(/*0*/ selectors: kotlin.String): kotlin.Boolean
    public final override /*1*/ /*fake_override*/ fun normalize(): kotlin.Unit
    public abstract override /*1*/ /*fake_override*/ fun prepend(/*0*/ vararg nodes: dynamic /*kotlin.Array<out dynamic>*/): kotlin.Unit
    public abstract override /*1*/ /*fake_override*/ fun querySelector(/*0*/ selectors: kotlin.String): org.w3c.dom.Element?
    public abstract override /*1*/ /*fake_override*/ fun querySelectorAll(/*0*/ selectors: kotlin.String): org.w3c.dom.NodeList
    public final override /*1*/ /*fake_override*/ fun releasePointerCapture(/*0*/ pointerId: kotlin.Int): kotlin.Unit
    public abstract override /*1*/ /*fake_override*/ fun remove(): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun removeAttribute(/*0*/ qualifiedName: kotlin.String): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun removeAttributeNS(/*0*/ namespace: kotlin.String?, /*1*/ localName: kotlin.String): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun removeAttributeNode(/*0*/ attr: org.w3c.dom.Attr): org.w3c.dom.Attr
    public final override /*1*/ /*fake_override*/ fun removeChild(/*0*/ child: org.w3c.dom.Node): org.w3c.dom.Node
    public final override /*1*/ /*fake_override*/ fun removeEventListener(/*0*/ type: kotlin.String, /*1*/ callback: ((org.w3c.dom.events.Event) -> kotlin.Unit)?, /*2*/ options: dynamic = ...): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun removeEventListener(/*0*/ type: kotlin.String, /*1*/ callback: org.w3c.dom.events.EventListener?, /*2*/ options: dynamic = ...): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun replaceChild(/*0*/ node: org.w3c.dom.Node, /*1*/ child: org.w3c.dom.Node): org.w3c.dom.Node
    public abstract override /*1*/ /*fake_override*/ fun replaceWith(/*0*/ vararg nodes: dynamic /*kotlin.Array<out dynamic>*/): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun requestFullscreen(): kotlin.js.Promise<kotlin.Unit>
    public final override /*1*/ /*fake_override*/ fun scroll(/*0*/ x: kotlin.Double, /*1*/ y: kotlin.Double): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun scroll(/*0*/ options: org.w3c.dom.ScrollToOptions = ...): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun scrollBy(/*0*/ x: kotlin.Double, /*1*/ y: kotlin.Double): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun scrollBy(/*0*/ options: org.w3c.dom.ScrollToOptions = ...): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun scrollIntoView(): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun scrollIntoView(/*0*/ arg: dynamic): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun scrollTo(/*0*/ x: kotlin.Double, /*1*/ y: kotlin.Double): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun scrollTo(/*0*/ options: org.w3c.dom.ScrollToOptions = ...): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun setAttribute(/*0*/ qualifiedName: kotlin.String, /*1*/ value: kotlin.String): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun setAttributeNS(/*0*/ namespace: kotlin.String?, /*1*/ qualifiedName: kotlin.String, /*2*/ value: kotlin.String): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun setAttributeNode(/*0*/ attr: org.w3c.dom.Attr): org.w3c.dom.Attr?
    public final override /*1*/ /*fake_override*/ fun setAttributeNodeNS(/*0*/ attr: org.w3c.dom.Attr): org.w3c.dom.Attr?
    public final override /*1*/ /*fake_override*/ fun setPointerCapture(/*0*/ pointerId: kotlin.Int): kotlin.Unit
    public open override /*3*/ /*fake_override*/ fun toString(): kotlin.String
    public final override /*1*/ /*fake_override*/ fun webkitMatchesSelector(/*0*/ selectors: kotlin.String): kotlin.Boolean

    public companion object Companion {
        /*primary*/ private constructor Companion()
        public final val ATTRIBUTE_NODE: kotlin.Short
            public final fun <get-ATTRIBUTE_NODE>(): kotlin.Short
        public final val CDATA_SECTION_NODE: kotlin.Short
            public final fun <get-CDATA_SECTION_NODE>(): kotlin.Short
        public final val COMMENT_NODE: kotlin.Short
            public final fun <get-COMMENT_NODE>(): kotlin.Short
        public final val DOCUMENT_FRAGMENT_NODE: kotlin.Short
            public final fun <get-DOCUMENT_FRAGMENT_NODE>(): kotlin.Short
        public final val DOCUMENT_NODE: kotlin.Short
            public final fun <get-DOCUMENT_NODE>(): kotlin.Short
        public final val DOCUMENT_POSITION_CONTAINED_BY: kotlin.Short
            public final fun <get-DOCUMENT_POSITION_CONTAINED_BY>(): kotlin.Short
        public final val DOCUMENT_POSITION_CONTAINS: kotlin.Short
            public final fun <get-DOCUMENT_POSITION_CONTAINS>(): kotlin.Short
        public final val DOCUMENT_POSITION_DISCONNECTED: kotlin.Short
            public final fun <get-DOCUMENT_POSITION_DISCONNECTED>(): kotlin.Short
        public final val DOCUMENT_POSITION_FOLLOWING: kotlin.Short
            public final fun <get-DOCUMENT_POSITION_FOLLOWING>(): kotlin.Short
        public final val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: kotlin.Short
            public final fun <get-DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC>(): kotlin.Short
        public final val DOCUMENT_POSITION_PRECEDING: kotlin.Short
            public final fun <get-DOCUMENT_POSITION_PRECEDING>(): kotlin.Short
        public final val DOCUMENT_TYPE_NODE: kotlin.Short
            public final fun <get-DOCUMENT_TYPE_NODE>(): kotlin.Short
        public final val ELEMENT_NODE: kotlin.Short
            public final fun <get-ELEMENT_NODE>(): kotlin.Short
        public final val ENTITY_NODE: kotlin.Short
            public final fun <get-ENTITY_NODE>(): kotlin.Short
        public final val ENTITY_REFERENCE_NODE: kotlin.Short
            public final fun <get-ENTITY_REFERENCE_NODE>(): kotlin.Short
        public final val NOTATION_NODE: kotlin.Short
            public final fun <get-NOTATION_NODE>(): kotlin.Short
        public final val PROCESSING_INSTRUCTION_NODE: kotlin.Short
            public final fun <get-PROCESSING_INSTRUCTION_NODE>(): kotlin.Short
        public final val SVG_ZOOMANDPAN_DISABLE: kotlin.Short
            public final fun <get-SVG_ZOOMANDPAN_DISABLE>(): kotlin.Short
        public final val SVG_ZOOMANDPAN_MAGNIFY: kotlin.Short
            public final fun <get-SVG_ZOOMANDPAN_MAGNIFY>(): kotlin.Short
        public final val SVG_ZOOMANDPAN_UNKNOWN: kotlin.Short
            public final fun <get-SVG_ZOOMANDPAN_UNKNOWN>(): kotlin.Short
        public final val TEXT_NODE: kotlin.Short
            public final fun <get-TEXT_NODE>(): kotlin.Short
        public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
        public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
        public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
    }
}

@kotlin.Suppress(names = {"NESTED_CLASS_IN_EXTERNAL_INTERFACE"}) public external interface SVGZoomAndPan {
    public abstract var zoomAndPan: kotlin.Short
        public abstract fun <get-zoomAndPan>(): kotlin.Short
        public abstract fun <set-zoomAndPan>(/*0*/ <set-?>: kotlin.Short): kotlin.Unit
    public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
    public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
    public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String

    public companion object Companion {
        /*primary*/ private constructor Companion()
        public final val SVG_ZOOMANDPAN_DISABLE: kotlin.Short
            public final fun <get-SVG_ZOOMANDPAN_DISABLE>(): kotlin.Short
        public final val SVG_ZOOMANDPAN_MAGNIFY: kotlin.Short
            public final fun <get-SVG_ZOOMANDPAN_MAGNIFY>(): kotlin.Short
        public final val SVG_ZOOMANDPAN_UNKNOWN: kotlin.Short
            public final fun <get-SVG_ZOOMANDPAN_UNKNOWN>(): kotlin.Short
        public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
        public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
        public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
    }
}

public open external class ShadowAnimation {
    /*primary*/ public constructor ShadowAnimation(/*0*/ source: dynamic, /*1*/ newTarget: dynamic)
    public open val sourceAnimation: dynamic
        public open fun <get-sourceAnimation>(): dynamic
    public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
    public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
    public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
}

